[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    light_path = nodes.new('ShaderNodeLightPath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(light_path.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.0, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.1\n    principled_bsdf.inputs[0].default_value = [0.2, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.inputs[3].default_value = 12.0\n    musgrave_texture.inputs[4].default_value = 0.4\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Electromagnetic_Shield']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 0.5\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 1.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.0\n    group.inputs[9].default_value = -10.0\n    group.inputs[21].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[1], add.inputs[1])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.7\n    principled_bsdf.inputs[17].default_value = 0.5\n    principled_bsdf.inputs[18].default_value = 0.1\n    hue_saturation_value.inputs[1].default_value = 0.2\n    hue_saturation_value.inputs[2].default_value = 1.5\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.8, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.4, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    invert.inputs[0].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    principled_bsdf_1.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.45\n    colorramp_1.color_ramp.elements[1].color = [0.665, 0.335, 0.335, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[9].default_value = 0.25\n    colorramp.color_ramp.elements[0].color = [0.7, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 1.0\n    scale.operation = 'SCALE'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.4\n    glossy_bsdf.inputs[1].default_value = 0.55\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[17].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.4, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.1]\n    wave_texture.inputs[1].default_value = 1.0\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.inputs[12].default_value = 0.1\n    principled_bsdf.inputs[13].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[3].default_value = [2.0, 1.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 3.0\n    musgrave_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[3])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    mix.inputs[1].default_value = [1.0, 0.5, 0.5, 1.0]\n    mix.inputs[2].default_value = [0.5, 0.5, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[1].default_value = [0.5, 0.5, 0.5, 1.0]\n    brick_texture.inputs[2].default_value = [0.02, 0.2, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Ice_Cream']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Fabric_Pattern3']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], group_1.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.2, 0.4, 0.8, 1.0]\n    group.inputs[2].default_value = [0.9, 0.1, 0.2, 1.0]\n    group.inputs[3].default_value = [0.2, 0.5, 0.1, 1.0]\n    group.inputs[5].default_value = 0.75\n    group.inputs[8].default_value = 1.5\n    group_1.inputs[1].default_value = 0.1\n    group_1.inputs[4].default_value = 3.0\n    group_1.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    mix.inputs[0].default_value = 0.75\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump_1.inputs[0].default_value = 0.05\n    bump_1.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.9, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[20].default_value = 1.5\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.05, 0.05, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.2, 0.2, 0.3, 1.0]\n    voronoi_texture.inputs[2].default_value = -8.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    musgrave_texture.inputs[2].default_value = -5.0\n    musgrave_texture.inputs[3].default_value = 7.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    musgrave_texture.inputs[5].default_value = 3.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.2\n    bump.inputs[0].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[0])\n    links.new(bright_contrast.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[1], wave_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(texture_coordinate.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.2\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 10.0\n    bright_contrast.inputs[1].default_value = 0.5\n    bright_contrast.inputs[2].default_value = -0.2\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    wave_texture.inputs[2].default_value = 9.0\n    wave_texture.inputs[3].default_value = 0.5\n    mix_1.inputs[0].default_value = 0.3\n    mix_2.inputs[0].default_value = 0.7\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 1.45\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.7\n    mix.blend_type = 'ADD'\n    mix_1.inputs[0].default_value = 0.3\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    mapping.inputs[0].default_value = [1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], checker_texture.inputs[0])\n    links.new(bright_contrast.outputs[0], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.05\n    principled_bsdf.inputs[15].default_value = 0.1\n    principled_bsdf.inputs[16].default_value = 2.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    checker_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bright_contrast.inputs[1].default_value = 0.5\n    bright_contrast.inputs[2].default_value = 1.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(ambient_occlusion.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.5\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[20].default_value = 4.0\n    ambient_occlusion.only_local = True\n    ambient_occlusion.samples = 8\n    bump.inputs[1].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.1\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    mix.inputs[1].default_value = [1.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    bump = nodes.new('ShaderNodeBump')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(geometry.outputs[4], bump.inputs[1])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    bump.inputs[0].default_value = 0.1\n    glass_bsdf.inputs[1].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.8, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    mapping.inputs[2].default_value = [2.0, 2.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.05, 0.05, 0.05, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    musgrave_texture.inputs[2].default_value = 0.3\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    noise_texture.inputs[2].default_value = 100.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[3].default_value = 1.0\n    wave_texture.inputs[4].default_value = 0.0\n    wave_texture.inputs[5].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements.new(0.7)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 0.8\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.9, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 2.0\n    noise_texture.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], principled_bsdf.inputs[19])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[12].default_value = 0.5\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.7\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 12.0\n    musgrave_texture.inputs[2].default_value = -3.0\n    musgrave_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [1.0, 0.0, 0.0]\n    mapping.inputs[3].default_value = [30.0, 30.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.15\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.noise_dimensions = '2D'\n    bump.inputs[1].default_value = 0.1\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(checker_texture.outputs[1], bump.inputs[3])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.9)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 50.0\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    mix.inputs[0].default_value = 0.7\n    noise_texture.inputs[3].default_value = 3.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.7, 0.9, 0.1, 1.0]\n    bump.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.2\n    principled_bsdf.inputs[0].default_value = [0.05, 0.5, 0.05, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.15\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.001\n    bump.invert = True\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    add = nodes.new('ShaderNodeMath')\n    gradient_texture_1 = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(add.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_1.inputs[1])\n    links.new(gradient_texture_1.outputs[0], add.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.inputs[1].default_value = [0.184, 0.184, 0.184, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    add.inputs[1].default_value = 2.0\n    gradient_texture_1.gradient_type = 'SPHERICAL'\n    bump.inputs[0].default_value = 0.03\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(checker_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[1])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(hue_saturation_value.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    mapping.inputs[1].default_value = [0.1, 0.1, 0.0]\n    bump.invert = True\n    add.inputs[1].default_value = 0.1\n    hue_saturation_value.inputs[1].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    gamma = nodes.new('ShaderNodeGamma')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(gamma.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[1].default_value = 0.8\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.4, 0.2, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(geometry.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.1\n    mix.inputs[1].default_value = [0.5, 0.1, 0.1, 1.0]\n    mix.inputs[2].default_value = [0.1, 0.5, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 7.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.6, 0.8, 1.0]\n    bump.inputs[0].default_value = 0.05\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[0].color = [0.4, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.4\n    colorramp_2.color_ramp.elements[1].color = [1.0, 0.2, 0.2, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Universal_Cement_Generator']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Sci_Fi_Panel_02']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[5].default_value = 1200.0\n    group.inputs[11].default_value = 0.5\n    group_1.inputs[3].default_value = 0.8\n    group_1.inputs[4].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    add_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], add.inputs[0])\n    links.new(add_1.outputs[0], wave_texture.inputs[1])\n    links.new(wave_texture.outputs[1], add_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], add_1.inputs[1])\n    links.new(add_1.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.3\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    add.inputs[1].default_value = 0.1\n    add.use_clamp = True\n    wave_texture.inputs[2].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 20.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.196\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.222, 0.222, 0.222, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.836, 0.836, 0.836, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 78.0\n    wave_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[5].default_value = 0.7\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].position = 0.676\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.764\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[3].default_value = 14.0\n    musgrave_texture.inputs[4].default_value = 0.56\n    bump_1.inputs[0].default_value = 0.3\n    colorramp_2.color_ramp.elements[0].position = 0.435\n    colorramp_2.color_ramp.elements[1].position = 0.448\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.8\n    noise_texture.inputs[5].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.6\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.5, 0.3, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 20.0\n    principled_bsdf.inputs[4].default_value = 0.9\n    principled_bsdf.inputs[6].default_value = 0.5\n    noise_texture.inputs[1].default_value = 3.0\n    noise_texture.inputs[2].default_value = 8.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    colorramp_1.color_ramp.elements[0].color = [0.4, 0.2, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 8.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 4.0\n    noise_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(map_range.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.6\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 15.0\n    brick_texture.inputs[4].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[2].default_value = [0.1, 0.1, 0.8]\n    principled_bsdf.inputs[3].default_value = [0.0, 0.5, 0.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    mix_1.inputs[0].default_value = 0.2\n    mix_1.blend_type = 'ADD'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 0.5\n    brick_texture.inputs[4].default_value = 0.1\n    brick_texture.inputs[5].default_value = 0.2\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.7, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(multiply.outputs[0], noise_texture.inputs[1])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.5\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.6, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.2, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(invert.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    bright_contrast.inputs[2].default_value = 0.4\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    invert.inputs[0].default_value = 0.5\n    noise_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 5.0\n    principled_bsdf.inputs[0].default_value = [0.7, 0.7, 0.85, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf_1.inputs[0].default_value = [0.3, 0.2, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.1\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[1])\n    links.new(mapping.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.2\n    brick_texture.inputs[6].default_value = 0.8\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    noise_texture.inputs[3].default_value = 7.0\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['procedural_outdoor_tiles']\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb.outputs[0], group.inputs[0])\n    links.new(rgb_1.outputs[0], group.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n\n    # Set parameters for each node\n    rgb.outputs[0].default_value = [0.5, 0.2, 0.2, 1.0]\n    rgb_1.outputs[0].default_value = [0.3, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[10].default_value = 1.0\n    noise_texture.inputs[2].default_value = 200.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(multiply.outputs[0], wave_texture.inputs[1])\n    links.new(wave_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[10].default_value = 1.2\n    principled_bsdf.inputs[11].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.15, 0.15, 0.15, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.85, 0.85, 0.85, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.5\n    mapping.inputs[3].default_value = [0.0, 0.0, 5.0]\n    mix.inputs[0].default_value = 0.7\n    mix.blend_type = 'MULTIPLY'\n    wave_texture.inputs[2].default_value = 20.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.wave_type = 'RINGS'\n    multiply.inputs[0].default_value = 0.8\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    greater_than = nodes.new('ShaderNodeMath')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[10])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], mix_1.inputs[0])\n    links.new(hue_saturation_value.outputs[0], mix_1.inputs[1])\n    links.new(greater_than.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[1])\n\n    # Set parameters for each node\n    musgrave_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 5.0\n    hue_saturation_value.inputs[1].default_value = 0.8\n    greater_than.inputs[1].default_value = 0.3\n    greater_than.operation = 'GREATER_THAN'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf_1 = nodes.new('ShaderNodeBsdfDiffuse')\n    diffuse_bsdf_2 = nodes.new('ShaderNodeBsdfDiffuse')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Terracotta_Tile']\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], material_output.inputs[1])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(diffuse_bsdf_2.outputs[0], mix_shader_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[0], mapping_1.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(multiply_1.outputs[0], multiply.inputs[1])\n    links.new(colorramp.outputs[1], multiply_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_1.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.177\n    colorramp.color_ramp.elements[1].position = 0.573\n    noise_texture.inputs[2].default_value = 25.0\n    diffuse_bsdf.inputs[0].default_value = [0.0, 0.2, 0.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.0\n    diffuse_bsdf_1.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    diffuse_bsdf_2.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 1.5\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    noise_texture.inputs[2].default_value = 3.5\n    noise_texture.inputs[3].default_value = 20.0\n    mapping.inputs[2].default_value = [0.0, 0.5, 0.0]\n    principled_bsdf.inputs[1].default_value = 0.05\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.4, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture_1.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Textile_Pattern']\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rainbow_Square_Tiles']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], group.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 0.5\n    group_1.inputs[9].default_value = 0.3\n    group_1.inputs[24].default_value = 0.15\n    group_1.inputs[26].default_value = 0.75\n    group_1.inputs[27].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.05, 0.05, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.425, 0.425, 0.425, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.15, 0.15, 0.15, 1.0]\n    mix.blend_type = 'SCREEN'\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.75\n    bump.inputs[0].default_value = 0.2\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    greater_than = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(greater_than.outputs[0], bump.inputs[2])\n    links.new(map_range.outputs[0], greater_than.inputs[0])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 1.0\n    hue_saturation_value.inputs[1].default_value = 0.9\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.0, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.2\n    greater_than.inputs[1].default_value = 0.1\n    greater_than.operation = 'GREATER_THAN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(invert.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], invert.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.9, 1.0]\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(glass_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 1.2\n    principled_bsdf.inputs[5].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[8].default_value = 0.5\n    layer_weight.inputs[0].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.5\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 6.0\n    wave_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    emission.inputs[0].default_value = [1.0, 0.8, 0.2, 1.0]\n    emission.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    mix.blend_type = 'MULTIPLY'\n    rgb.outputs[0].default_value = [0.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 8.0\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    noise_texture_1.inputs[2].default_value = 6.0\n    noise_texture_1.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 5.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[1].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 5.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[1], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[0])\n    links.new(invert.outputs[0], add.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    musgrave_texture.inputs[3].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 2.0\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 1.5\n    wave_texture.inputs[3].default_value = 0.5\n    invert.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.1\n    principled_bsdf.inputs[5].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 4.0\n    mapping.inputs[1].default_value = [0.1, 0.1, 0.1]\n    bump.inputs[0].default_value = 0.3\n    emission.inputs[1].default_value = 5.0\n    mix.inputs[1].default_value = [0.8, 0.2, 0.1, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(layer_weight.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[3].default_value = [0.05, 0.05, 0.05, 1.0]\n    brick_texture.inputs[4].default_value = 0.5\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[6].default_value = 0.3\n    brick_texture.inputs[7].default_value = 0.2\n    brick_texture.inputs[8].default_value = 0.1\n    brick_texture.inputs[9].default_value = 0.1\n    mapping.vector_type = 'TEXTURE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.5, 0.7, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture_1.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[1].default_value = [1.0, 0.5, 0.25, 1.0]\n    brick_texture.inputs[2].default_value = [0.3, 0.3, 0.3, 1.0]\n    mix.inputs[2].default_value = [0.2, 0.3, 0.4, 1.0]\n    noise_texture.inputs[5].default_value = 3.0\n    invert.inputs[0].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(multiply.outputs[0], glossy_bsdf.inputs[1])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n    multiply.inputs[1].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[10].default_value = 0.8\n    principled_bsdf.inputs[14].default_value = 0.3\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.8, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.5, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.78\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 2.0\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Abstract_Emission_001']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.04, 0.06, 0.15, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(0.85)\n    colorramp.color_ramp.elements[3].color = [0.8, 0.9, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 32.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.02\n    group.inputs[5].default_value = 8.0\n    group.inputs[8].default_value = [0.5, 0.3, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.5, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.355\n    colorramp.color_ramp.elements[1].color = [0.2, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.85)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.932\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.invert = True\n    colorramp_2.color_ramp.elements[0].position = 0.25\n    colorramp_2.color_ramp.elements[0].color = [0.6, 0.3, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.85\n    colorramp_2.color_ramp.elements[1].color = [0.9, 0.5, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf_1.inputs[0].default_value = [1.0, 0.1, 0.1, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 0.5\n    principled_bsdf_1.inputs[9].default_value = 1.0\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[20])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.5\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.5\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.wave_type = 'RINGS'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.05, 0.08, 0.04, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.2, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    wave_texture.inputs[2].default_value = 2.0\n    wave_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gamma = nodes.new('ShaderNodeGamma')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[9])\n    links.new(rgb_curves.outputs[0], principled_bsdf.inputs[22])\n    links.new(gamma.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], gamma.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[1])\n    links.new(invert.outputs[0], bump.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    gamma.inputs[1].default_value = 2.0\n    musgrave_texture.inputs[2].default_value = 6.0\n    mapping.inputs[3].default_value = [3.0, 3.0, 0.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 1.5\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.6, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 0.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    rgb_curves.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    rgb_curves.mapping.curves[0].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[0].points.new(1.0, 1.0)\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.18, 0.111, 0.022, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.649\n    colorramp.color_ramp.elements[1].color = [0.341, 0.276, 0.192, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[5].default_value = 0.5\n    mapping.inputs[3].default_value = [3.0, 3.0, 0.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    principled_bsdf.inputs[14].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[1], bump.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[6].default_value = 0.5\n    mapping_1.inputs[2].default_value = [0.2, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[15].default_value = 0.1\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 1.5\n    musgrave_texture.inputs[2].default_value = 2.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    mapping.inputs[0].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(bump.outputs[0], displacement.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[20].default_value = 24.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[3].default_value = 10.0\n    displacement.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(map_range.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[1], map_range.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    mix.inputs[2].default_value = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    map_range.inputs[1].default_value = 0.75\n    map_range.inputs[2].default_value = 0.3\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    noise_texture.inputs[3].default_value = 0.5\n    mix_1.inputs[2].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture_1.inputs[2].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    separate_color = nodes.new('ShaderNodeSeparateColor')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(greater_than.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(separate_color.outputs[0], greater_than.inputs[0])\n    links.new(add.outputs[0], greater_than.inputs[1])\n    links.new(noise_texture.outputs[0], separate_color.inputs[0])\n    links.new(separate_color.outputs[1], add.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    greater_than.operation = 'GREATER_THAN'\n    add.inputs[1].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.0, 0.5, 1.0]\n    noise_texture.inputs[1].default_value = 4.0\n    noise_texture.inputs[2].default_value = 3.0\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[5])\n    links.new(wave_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.8\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.296, 0.619, 0.906, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 15.0\n    wave_texture.inputs[4].default_value = 1.5\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    diffuse_bsdf.inputs[0].default_value = [0.2, 0.3, 0.4, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(magic_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(magic_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.35, 0.35, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [0.2, 0.3, 0.15, 1.0]\n    noise_texture.inputs[1].default_value = 3.0\n    noise_texture.inputs[2].default_value = 7.0\n    voronoi_texture.inputs[1].default_value = 5.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.3, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[3].default_value = 20.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[5].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.05, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(gradient_texture.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(add.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp.outputs[0], add.inputs[0])\n    links.new(noise_texture_1.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    bright_contrast.inputs[1].default_value = 3.0\n    bright_contrast.inputs[2].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.0, 1.0]\n    mapping.inputs[1].default_value = [1.0, 0.0, 0.0]\n    noise_texture_1.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.2, 0.1, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    principled_bsdf.inputs[20].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [0.035, 0.02, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.15\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.7, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.9)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.8\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], bump.inputs[3])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.7, 0.7, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb = nodes.new('ShaderNodeRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(layer_weight.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    brick_texture.inputs[4].default_value = 0.5\n    mapping.vector_type = 'TEXTURE'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    rgb.outputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix_1.inputs[1].default_value = [0.7, 0.7, 0.7, 1.0]\n    mix_1.inputs[2].default_value = [0.3, 0.3, 0.3, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.153, 0.892, 0.239, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.3, 0.1, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 1.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.25\n    principled_bsdf.inputs[3].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    displacement.inputs[2].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 20.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.1\n    principled_bsdf.inputs[6].default_value = 0.8\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 1.0\n    gradient_texture.gradient_type = 'DIAGONAL'\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(bump.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.15\n    bump.invert = True\n    voronoi_texture.inputs[1].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.2, 0.4, 0.6, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    wave_texture.inputs[1].default_value = 20.0\n    bump.inputs[1].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 50.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(rgb_1.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[1].default_value = 4.0\n    noise_texture.inputs[2].default_value = 10.0\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[8].default_value = 0.5\n    rgb.outputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    rgb_1.outputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.5\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements.new(0.5)\n    colorramp_1.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bright_contrast.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.5\n    voronoi_texture.inputs[2].default_value = 30.0\n    bright_contrast.inputs[1].default_value = -0.4\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [0.3, 0.5, 0.8, 1.0]\n    bump.inputs[1].default_value = 0.15\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb = nodes.new('ShaderNodeRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(layer_weight.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.15, 0.15, 0.15, 1.0]\n    brick_texture.inputs[3].default_value = [0.008, 0.008, 0.008, 1.0]\n    brick_texture.inputs[4].default_value = 0.5\n    mapping.vector_type = 'TEXTURE'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.05, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    rgb.outputs[0].default_value = [0.018, 0.018, 0.018, 1.0]\n    mix_1.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix_1.inputs[2].default_value = [0.028, 0.028, 0.028, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    vector_rotate = nodes.new('ShaderNodeVectorRotate')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(less_than.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(vector_rotate.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], vector_rotate.inputs[0])\n    links.new(voronoi_texture.outputs[0], less_than.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.2\n    noise_texture.inputs[3].default_value = 1.5\n    noise_texture.inputs[5].default_value = 1.0\n    vector_rotate.inputs[1].default_value = [0.5, 0.5, 0.0]\n    vector_rotate.inputs[3].default_value = 0.785\n    less_than.inputs[1].default_value = 0.4\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    less_than.use_clamp = True\n    voronoi_texture.inputs[2].default_value = 6.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Cracked_Icy_Ground']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rubber_Camo']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    group.inputs[0].default_value = 0.4\n    group_1.inputs[1].default_value = 8.91\n    group_1.inputs[2].default_value = 1.8\n    group_1.inputs[3].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.0\n    principled_bsdf.inputs[3].default_value = [0.8, 0.7, 0.6, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.1\n    principled_bsdf.inputs[7].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 3.0\n    mapping.inputs[3].default_value = [2.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 35.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [0.5, 1.0, 0.0]\n    colorramp_1.color_ramp.elements[0].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(invert.outputs[0], bump.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.7\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.inputs[1].default_value = [0.3, 0.5, 0.8, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.9, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    add.inputs[0].default_value = 2.0\n    add.inputs[1].default_value = 1.0\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.8, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    invert.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[4])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.0]\n    glossy_bsdf.inputs[0].default_value = [0.8, 0.3, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.4\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    mix.inputs[2].default_value = [1.0, 0.5, 0.2, 1.0]\n    wave_texture.inputs[2].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 8.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[12].default_value = 0.5\n    wave_texture.inputs[1].default_value = 10.0\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.2, 0.9, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], magic_texture.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(magic_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.7\n    principled_bsdf.inputs[7].default_value = 0.85\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.4, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.5, 1.0]\n    magic_texture.inputs[2].default_value = 0.6\n    noise_texture.inputs[5].default_value = 0.5\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    voronoi_texture.inputs[1].default_value = 4.0\n    voronoi_texture.inputs[2].default_value = 1.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[4].default_value = 2.5\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[6].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 15.0\n    rgb.outputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[1])\n    links.new(multiply_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.0\n    glossy_bsdf.inputs[1].default_value = 0.4\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[2].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    displacement.inputs[1].default_value = 0.15\n    displacement.inputs[2].default_value = 0.1\n    multiply_1.operation = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.1, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.8, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    musgrave_texture.inputs[3].default_value = 12.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    colorramp_2.color_ramp.elements[0].position = 0.3\n    colorramp_2.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.7\n    colorramp_2.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[5].default_value = 2.0\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.3\n    bump.inputs[0].default_value = 0.1\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[20])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(scale.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.691\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[19].default_value = [0.3, 0.7, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 4.0\n    scale.operation = 'SCALE'\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 4.0\n    mix_1.inputs[0].default_value = 0.6\n    multiply.inputs[1].default_value = 10.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(rgb_curves.outputs[0], mapping.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    brick_texture.inputs[3].default_value = [0.166, 0.166, 0.166, 1.0]\n    brick_texture.inputs[4].default_value = 2.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp.color_ramp.elements[0].color = [0.044, 0.017, 0.011, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.605\n    noise_texture.inputs[2].default_value = 60.0\n    noise_texture.inputs[3].default_value = 3.5\n    principled_bsdf.inputs[9].default_value = 0.75\n    bump.inputs[1].default_value = 0.05\n    mix.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].color = [0.05, 0.1, 0.15, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    invert.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(layer_weight.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[8].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.3\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['metal_mesh_grill_001']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Terracotta_Tile']\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[2], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[6])\n    links.new(group.outputs[4], principled_bsdf.inputs[9])\n    links.new(group.outputs[0], principled_bsdf.inputs[21])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], group_1.inputs[0])\n    links.new(texture_coordinate.outputs[1], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.509\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[3].default_value = [3.5, 3.5, 3.5]\n    mapping_1.inputs[3].default_value = [2.0, 2.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n    links.new(multiply.outputs[0], glossy_bsdf.inputs[1])\n    links.new(voronoi_texture.outputs[1], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[1], multiply.inputs[1])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mix.inputs[0].default_value = 0.6\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.3, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.4\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    multiply.inputs[0].default_value = 5.0\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 10.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.1\n    bump.inputs[0].default_value = 0.03\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n\n    # Set parameters for each node\n    emission.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    principled_bsdf.inputs[20].default_value = 10.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    add.inputs[0].default_value = 5.0\n    add.inputs[1].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(bump.outputs[0], displacement.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 25.0\n    mix.inputs[0].default_value = 0.4\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.02, 0.03, 0.07, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.25, 0.21, 0.08, 1.0]\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[1].default_value = 0.8\n    noise_texture.inputs[2].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Bread_Slice_Shader']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], material_output.inputs[1])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.4, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.3, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Electromagnetic_Shield']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 0.0\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 1.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.0\n    group.inputs[9].default_value = -8.9\n    group.inputs[21].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 8.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[5].default_value = 16.0\n    mapping.inputs[1].default_value = [0.0, 0.0, 0.2]\n    mapping.inputs[2].default_value = [1.0, 0.0, 0.0]\n    mapping.inputs[3].default_value = [5.0, 5.0, 1.0]\n    glass_bsdf.inputs[2].default_value = 1.5\n    emission.inputs[0].default_value = [0.1, 0.5, 0.1, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Fabric_Pattern3']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Ice_Cream']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 0.2\n    group.inputs[4].default_value = 3.0\n    group.inputs[6].default_value = 0.5\n    group_1.inputs[0].default_value = [0.9, 0.4, 0.7, 1.0]\n    group_1.inputs[2].default_value = [0.6, 0.2, 0.8, 1.0]\n    group_1.inputs[3].default_value = [0.1, 0.8, 0.5, 1.0]\n    group_1.inputs[5].default_value = 0.75\n    group_1.inputs[8].default_value = 0.9\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.75\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 0.6\n    musgrave_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.08\n    principled_bsdf.inputs[12].default_value = 1.0\n    principled_bsdf.inputs[14].default_value = 0.1\n    principled_bsdf.distribution = 'MULTI_GGX'\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.offset = 1.0\n    brick_texture.squash = 1.25\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.5, 0.3, 1.0]\n    bump.inputs[1].default_value = 0.1\n    bump.inputs[2].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.6\n    principled_bsdf.inputs[13].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.2, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping.inputs[3].default_value = [10.0, 0.5, 0.5]\n    mix.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[3].default_value = 7.0\n    bump.inputs[0].default_value = 0.02\n    bump.inputs[1].default_value = 0.1\n    glossy_bsdf.inputs[0].default_value = [0.25, 0.25, 0.25, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[1])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.209\n    multiply.inputs[0].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.4, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.3, 1.0]\n    mix.inputs[0].default_value = 0.7\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.6, 0.1, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.9, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp_2.color_ramp.elements[0].position = 0.8\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.5, 0.3, 1.0]\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[2].default_value = [1.57, 0.0, 0.0]\n    brick_texture.inputs[1].default_value = [0.4, 0.2, 0.1, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.3, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[1].default_value = 0.1\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    musgrave_texture.inputs[4].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Brick_01']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.15, 0.015, 0.006, 1.0]\n    group.inputs[4].default_value = [1.0, 0.846, 0.716, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[14])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[12].default_value = 0.2\n    principled_bsdf.inputs[13].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.6\n    bump.inputs[0].default_value = 0.15\n    bump.inputs[1].default_value = 3.0\n    bump.invert = True\n    colorramp_2.color_ramp.elements[0].position = 0.4\n    colorramp_2.color_ramp.elements[1].position = 0.9\n    bump_1.inputs[0].default_value = 0.25\n    bump_1.inputs[1].default_value = 0.5\n    bump_1.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.09, 0.05, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.3, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.1, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    principled_bsdf_1.inputs[1].default_value = 0.3\n    principled_bsdf_1.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.05, 0.05, 0.05, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    mix.inputs[2].default_value = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.4, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    voronoi_texture.inputs[2].default_value = 10.0\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.95, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(voronoi_texture.outputs[4], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[3].default_value = 15.0\n    brick_texture.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.feature = 'SMOOTH_F1'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[20].default_value = 1.6\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.4, 0.4, 0.4, 1.0]\n    voronoi_texture.inputs[2].default_value = -10.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 3.14]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.0, 0.5, 1.0]\n    mix.inputs[0].default_value = 0.7\n    noise_texture.inputs[3].default_value = 4.0\n    voronoi_texture.inputs[2].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    mix.inputs[0].default_value = 0.7\n    noise_texture.inputs[3].default_value = 15.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    voronoi_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 7.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    mapping_1.inputs[3].default_value = [1.0, 1.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[8].default_value = 0.3\n    principled_bsdf.inputs[10].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 12.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    multiply = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bright_contrast.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], bright_contrast.inputs[0])\n    links.new(musgrave_texture.outputs[0], multiply.inputs[1])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[16].default_value = 1.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.5, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 1.5\n    noise_texture.inputs[5].default_value = 0.3\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 2.0\n    multiply.inputs[2].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    musgrave_texture.inputs[2].default_value = 4.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Circular_Patternator']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], emission.inputs[0])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 15.0\n    group.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.02\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.3, 0.15, 0.09, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 4.0\n    colorramp_2.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp_3.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.6\n    colorramp_3.color_ramp.elements[1].color = [1.0, 0.8, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[12].default_value = 0.5\n    mix.inputs[1].default_value = [0.8, 0.8, 0.8, 1.0]\n    layer_weight.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    add.inputs[2].default_value = 0.0\n    musgrave_texture.inputs[2].default_value = 4.0\n    wave_texture.inputs[1].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    hue_saturation_value.inputs[1].default_value = 0.8\n    voronoi_texture.distance = 'MANHATTAN'\n    colorramp.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], musgrave_texture.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(mix_1.outputs[0], mix_2.inputs[1])\n    links.new(mix.outputs[0], mix_2.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    musgrave_texture.inputs[4].default_value = 0.5\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[3].default_value = 10.0\n    wave_texture.inputs[4].default_value = 5.0\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.05\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(layer_weight.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture_1.inputs[2].default_value = 15.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    multiply.inputs[2].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(bump_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.025, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 3.0\n    bump_1.inputs[0].default_value = 0.1\n    colorramp_2.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.4, 0.2, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.03\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeVectorMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], layer_weight.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(add.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(texture_coordinate.outputs[2], add.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    glossy_bsdf.inputs[1].default_value = 0.2\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], group.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.8, 0.4, 0.2, 1.0]\n    group.inputs[8].default_value = 0.5\n    group.inputs[9].default_value = 1.0\n    group.inputs[10].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.1, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.6, 0.4, 1.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    multiply = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], voronoi_texture.inputs[2])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], bump.inputs[3])\n    links.new(mix_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], mix_1.inputs[2])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.7\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.1\n    invert.inputs[0].default_value = 0.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.5, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 0.5\n    multiply.inputs[0].default_value = 3.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    mix.inputs[0].default_value = 0.3\n    mix.inputs[2].default_value = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.9, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.9\n    colorramp_2.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    mix_1.inputs[0].default_value = 0.8\n    noise_texture.inputs[1].default_value = 2.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(ambient_occlusion.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 2.0\n    mix.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 10.0\n    ambient_occlusion.only_local = True\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 5.0\n    mix_1.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    mix_1.blend_type = 'ADD'\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(add.outputs[0], multiply.inputs[0])\n    links.new(wave_texture.outputs[1], add.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[1])\n    links.new(mapping_1.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(dot_product.outputs[1], mix.inputs[0])\n    links.new(geometry.outputs[1], dot_product.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n    add.inputs[1].default_value = 1.0\n    wave_texture.inputs[6].default_value = 1.57\n    mapping.inputs[2].default_value = [1.0, 1.0, 0.0]\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.0, 0.5, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.005, 0.005, 0.005, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[7].default_value = -0.5\n    brick_texture.offset = 0.0\n    brick_texture.squash = 0.5\n    mix.inputs[1].default_value = [1.0, 0.4, 0.014, 1.0]\n    mix.inputs[2].default_value = [0.5, 0.6, 0.5, 1.0]\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n    rgb.outputs[0].default_value = [0.0, 0.4, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.05\n    bump.invert = True\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.5, 0.7, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.8, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 4.0\n    noise_texture_1.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.038, 0.024, 0.013, 1.0]\n    group.inputs[1].default_value = [0.8, 0.451, 0.224, 1.0]\n    group.inputs[8].default_value = 0.5\n    group.inputs[9].default_value = 1.2\n    group.inputs[10].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.05\n    colorramp.color_ramp.elements[0].color = [0.02, 0.01, 0.005, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.07\n    colorramp.color_ramp.elements[1].color = [0.254, 0.15, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.2)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.3)\n    colorramp.color_ramp.elements[3].color = [0.9, 0.8, 0.7, 1.0]\n    musgrave_texture.inputs[2].default_value = 10.0\n    bump.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.205, 0.72, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.9, 0.5, 0.3, 1.0]\n    brick_texture.inputs[2].default_value = [0.2, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[4].default_value = 1.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[11].default_value = 0.1\n    principled_bsdf.inputs[17].default_value = 0.1\n    layer_weight.inputs[0].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.5, 0.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 5.0\n    mix_1.inputs[0].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.2, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 5.0\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.1\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    principled_bsdf_1.inputs[9].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[3].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    noise_texture.inputs[2].default_value = 0.8\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.6, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.346, 0.346, 0.346, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.387, 0.387, 0.387, 1.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.8\n    noise_texture.inputs[5].default_value = 12.0\n    bump.inputs[0].default_value = 0.4\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.015\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    add = nodes.new('ShaderNodeMath')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(add.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(ambient_occlusion.outputs[0], add.inputs[0])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    add.inputs[1].default_value = 0.35\n    add.inputs[2].default_value = 0.0\n    principled_bsdf.inputs[0].default_value = [0.045, 0.045, 0.045, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[9].default_value = 0.6\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[1].default_value = 0.4\n    displacement.inputs[2].default_value = 0.9\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.7, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(0.82)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.95)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[4].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.418\n    colorramp.color_ramp.elements[1].position = 0.564\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp_1.color_ramp.elements[0].color = [0.012, 0.007, 0.004, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.061, 0.042, 0.027, 1.0]\n    noise_texture_1.inputs[2].default_value = 13.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    colorramp_2.color_ramp.elements[0].color = [0.012, 0.007, 0.004, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.029, 0.018, 0.009, 1.0]\n    noise_texture_2.inputs[2].default_value = 8.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.03\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[1])\n    links.new(multiply_1.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[8].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.85\n    rgb.outputs[0].default_value = [0.3, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.1\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.05, 0.15, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 40.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    gamma = nodes.new('ShaderNodeGamma')\n    multiply = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    mix = nodes.new('ShaderNodeMixRGB')\n    arcsine = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(gamma.outputs[0], emission.inputs[1])\n    links.new(multiply.outputs[0], gamma.inputs[0])\n    links.new(map_range.outputs[0], multiply.inputs[1])\n    links.new(arcsine.outputs[0], mix.inputs[1])\n    links.new(separate_xyz.outputs[1], arcsine.inputs[0])\n    links.new(voronoi_texture.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.6\n    emission.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    gamma.inputs[1].default_value = 2.0\n    multiply.inputs[0].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    map_range.inputs[0].default_value = 0.0\n    map_range.inputs[4].default_value = 0.8\n    arcsine.inputs[2].default_value = 0.0\n    arcsine.operation = 'ARCSINE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 0.25\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    bright_contrast.inputs[1].default_value = 0.5\n    bright_contrast.inputs[2].default_value = 1.5\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], bump.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 1.2\n    mapping.inputs[3].default_value = [4.0, 4.0, 0.0]\n    principled_bsdf.inputs[15].default_value = 0.1\n    mix.inputs[2].default_value = [0.0, 0.1, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    wave_texture.inputs[1].default_value = 2.0\n    voronoi_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(less_than.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], less_than.inputs[0])\n    links.new(add.outputs[0], less_than.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    less_than.use_clamp = True\n    voronoi_texture.inputs[2].default_value = 20.0\n    add.inputs[1].default_value = 1.0\n    noise_texture.inputs[3].default_value = 10.0\n    mix.inputs[0].default_value = 0.6\n    mix.inputs[2].default_value = [0.0, 0.0, 1.0, 1.0]\n    principled_bsdf_1.inputs[0].default_value = [0.0, 0.0, 1.0, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(light_path.outputs[5], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.2, 0.2, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.3\n    add.inputs[1].default_value = 0.0\n    add.inputs[2].default_value = -0.45\n    add.use_clamp = True\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    bump.inputs[0].default_value = 0.02\n    glossy_bsdf.inputs[1].default_value = 0.2\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], brick_texture.inputs[4])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[3])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    brick_texture.inputs[1].default_value = [0.627, 0.576, 0.523, 1.0]\n    brick_texture.inputs[2].default_value = [0.2, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[6].default_value = 0.0\n    voronoi_texture.inputs[1].default_value = 0.1\n    voronoi_texture.distance = 'CHEBYCHEV'\n    voronoi_texture.voronoi_dimensions = '4D'\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[0], mapping_1.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(colorramp.outputs[1], multiply.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    noise_texture.inputs[2].default_value = 10.0\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.7, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 1.0\n    glossy_bsdf_1.inputs[0].default_value = [0.2, 0.2, 0.8, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['PM_WallPanel_4Petals']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], group.inputs[0])\n    links.new(group.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.7\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[3].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[7], colorramp_1.inputs[0])\n    links.new(mix_3.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_4.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], mix_4.inputs[1])\n    links.new(noise_texture_2.outputs[1], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[17].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[2].default_value = [0.768, 0.532, 0.204, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'OVERLAY'\n    mix_2.inputs[0].default_value = 0.95\n    mix_2.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    ambient_occlusion.only_local = True\n    colorramp_1.color_ramp.elements[0].position = 0.495\n    colorramp_1.color_ramp.elements[1].position = 0.555\n    rgb_curves.mapping.curves[3].points[1].location = [0.382, 0.269]\n    rgb_curves.mapping.curves[3].points.new(0.677, 0.681)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    noise_texture_1.inputs[2].default_value = 25.0\n    noise_texture_1.inputs[3].default_value = 14.0\n    bump.inputs[0].default_value = 0.05\n    mix_4.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_2.inputs[5].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mix = nodes.new('ShaderNodeMixRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mix.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[4], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.025, 0.025, 0.025, 1.0]\n    brick_texture.inputs[4].default_value = -8.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.feature = 'SMOOTH_F1'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.8, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 100.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb = nodes.new('ShaderNodeRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(layer_weight.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    mapping.vector_type = 'TEXTURE'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.05, 1.0]\n    rgb.outputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix_1.inputs[2].default_value = [0.15, 0.15, 0.15, 1.0]\n    layer_weight.inputs[0].default_value = 0.7\n    noise_texture_1.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    mix.blend_type = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 0.0\n    wave_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 4.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[21])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], emission.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 30.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.8, 0.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 40.0\n    emission.inputs[1].default_value = 5.0\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.8, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.6, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    mix_1.blend_type = 'ADD'\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.1, 1.0]\n    brick_texture.inputs[5].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    displacement.inputs[0].default_value = 0.15\n    displacement.inputs[1].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.4, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.1\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[2].default_value = 0.3\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[1], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[7])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.85\n    noise_texture.inputs[2].default_value = 2.3\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.0, 4.0, 0.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [1.0, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.08\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    rgb.outputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[1].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[0])\n    links.new(layer_weight.outputs[1], mix_1.inputs[2])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[1], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[18].default_value = 0.1\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    scale.operation = 'SCALE'\n    bump.invert = True\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 4.0\n    noise_texture_1.inputs[1].default_value = 5.0\n    noise_texture_1.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.2\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    noise_texture_1.inputs[2].default_value = 8.0\n    colorramp_2.color_ramp.elements[0].position = 0.3\n    colorramp_2.color_ramp.elements[1].position = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.2, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    scale = nodes.new('ShaderNodeVectorMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture_1.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(scale.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.95\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[8].default_value = 3.5\n    noise_texture.inputs[3].default_value = 1.5\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.64, 0.64, 0.64, 1.0]\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    scale.inputs[1].default_value = [0.1, 0.1, 0.1]\n    scale.operation = 'SCALE'\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.6\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    noise_texture_1.inputs[3].default_value = 12.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[1].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(bright_contrast.outputs[0], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(texture_coordinate.outputs[2], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.6\n    glossy_bsdf.inputs[1].default_value = 0.2\n    glossy_bsdf.distribution = 'BECKMANN'\n    bright_contrast.inputs[2].default_value = 0.2\n    musgrave_texture.inputs[4].default_value = 3.0\n    musgrave_texture.inputs[5].default_value = 1.0\n    musgrave_texture.inputs[7].default_value = 0.5\n    glossy_bsdf_1.inputs[0].default_value = [1.0, 0.5, 0.1, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], mix_2.inputs[1])\n    links.new(wave_texture.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.35\n    mix.inputs[0].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 4.0\n    wave_texture.inputs[1].default_value = 0.0\n    wave_texture.inputs[2].default_value = 2.5\n    wave_texture_1.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n    multiply = nodes.new('ShaderNodeMath')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], add.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[3].default_value = [0.4, 0.36, 0.22, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.noise_dimensions = '4D'\n    mapping.inputs[2].default_value = [0.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    voronoi_texture.inputs[1].default_value = 8.0\n    voronoi_texture.inputs[2].default_value = 1.5\n    multiply.inputs[1].default_value = 2.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(mapping.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.9\n    principled_bsdf.inputs[8].default_value = 1.0\n    mix.inputs[1].default_value = [0.0, 0.5, 1.0, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 10.0\n    mix_1.blend_type = 'OVERLAY'\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.inputs[3].default_value = 12.0\n    musgrave_texture.musgrave_type = 'HETERO_TERRAIN'\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    hue_saturation_value.inputs[1].default_value = 1.5\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.6, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.0, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    brick_texture.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.05\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 15.0\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.bands_direction = 'Y'\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(less_than.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], less_than.inputs[0])\n    links.new(colorramp.outputs[0], less_than.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n    links.new(geometry.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    less_than.operation = 'LESS_THAN'\n    less_than.use_clamp = True\n    mapping.inputs[1].default_value = [0.25, 0.25, 0.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    mapping_1.inputs[1].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf_1.inputs[0].default_value = [0.0, 0.5, 1.0, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.1\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[2].default_value = 25.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.5\n    voronoi_texture.inputs[2].default_value = 100.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    add = nodes.new('ShaderNodeVectorMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(add.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 21.5\n    principled_bsdf.inputs[15].default_value = 0.0\n    mix.inputs[0].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[0].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    mapping.inputs[3].default_value = [3.0, 3.0, 0.0]\n    wave_texture.inputs[1].default_value = 0.8\n    wave_texture.inputs[2].default_value = 2.0\n    wave_texture.inputs[4].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(bright_contrast.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp.outputs[0], bright_contrast.inputs[1])\n\n    # Set parameters for each node\n    bright_contrast.inputs[2].default_value = 1.5\n    voronoi_texture.inputs[1].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.0\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 6.0\n    musgrave_texture.inputs[4].default_value = 0.25\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.15, 0.05, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.6\n    bump.inputs[0].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.05\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(normal_map.outputs[0], bump.inputs[2])\n    links.new(invert.outputs[0], normal_map.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    voronoi_texture.inputs[1].default_value = 1.0\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 1.5\n    mapping.inputs[3].default_value = [4.0, 4.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 0.1\n    musgrave_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.15\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 0.25\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.1\n    mapping.inputs[3].default_value = [5.0, 5.0, 0.0]\n    noise_texture_1.inputs[2].default_value = 14.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[5].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(geometry.outputs[1], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[1].default_value = 0.5\n    brick_texture.inputs[3].default_value = [0.015, 0.015, 0.015, 1.0]\n    brick_texture.inputs[4].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    mapping.inputs[3].default_value = [10.0, 10.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.8, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 0.0\n    mapping.inputs[3].default_value = [30.0, 30.0, 0.0]\n    bump.inputs[0].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    rgb.outputs[0].default_value = [1.0, 0.338, 0.184, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[0].default_value = [0.5, 0.5, 0.5]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 9.22\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.15\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.5, 0.3, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    mapping.inputs[1].default_value = [0.1, 0.0, 0.0]\n    mix.inputs[2].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.2\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[1], bump.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(checker_texture.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[3].default_value = 4.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], principled_bsdf_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.8\n    principled_bsdf.inputs[15].default_value = 0.1\n    mix.inputs[0].default_value = 0.3\n    mix.inputs[1].default_value = [1.0, 0.7, 0.3, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    principled_bsdf_1.inputs[9].default_value = 0.6\n    principled_bsdf_1.inputs[14].default_value = 1.0\n    principled_bsdf_1.inputs[15].default_value = 0.2\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.5, 0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.8\n    emission.inputs[1].default_value = 3.0\n    blackbody.inputs[0].default_value = 2200.0\n    diffuse_bsdf.inputs[0].default_value = [0.6, 0.4, 0.2, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 0.9\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(dot_product.outputs[1], mix_1.inputs[0])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(geometry.outputs[1], dot_product.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_1.inputs[1].default_value = [1.0, 0.5, 0.1, 1.0]\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n    brick_texture.inputs[2].default_value = [0.5, 0.5, 0.5, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(layer_weight.outputs[1], bump.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.8, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    layer_weight.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.inputs[4].default_value = 3.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], emission.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    emission.inputs[1].default_value = 5.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.8\n    brick_texture.inputs[1].default_value = [0.5, 0.2, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.5, 0.3, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    invert = nodes.new('ShaderNodeInvert')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(invert.outputs[0], noise_texture.inputs[1])\n    links.new(wave_texture.outputs[1], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 5.0\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.2\n    principled_bsdf.inputs[7].default_value = 0.35\n    colorramp.color_ramp.elements[0].color = [0.8, 0.3, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 6.0\n    mapping.inputs[3].default_value = [1.0, 0.5, 0.5]\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 10.0\n    musgrave_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    musgrave_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(anisotropic_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    anisotropic_bsdf.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], colorramp.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    mix.inputs[0].default_value = 1.0\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 5.0\n    wave_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    mix.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 4.0\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.14, 1.0]\n    bump.inputs[0].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.12, 0.12, 0.12, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.7, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(fresnel.outputs[0], multiply.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 6.0\n    noise_texture.inputs[2].default_value = 4.0\n    mapping.inputs[3].default_value = [5.0, 5.0, 0.0]\n    fresnel.inputs[0].default_value = 1.0\n    mix.inputs[0].default_value = 0.3\n    mix.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[21])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[1].default_value = [0.1, 0.2, 0.0]\n    mapping.inputs[2].default_value = [0.0, 1.0, 0.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.8\n    colorramp_2.color_ramp.elements[1].color = [0.7, 0.8, 0.9, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 0.5]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 10.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.2, 0.3, 0.5, 1.0]\n    mix.inputs[1].default_value = [1.0, 0.5, 0.2, 1.0]\n    mix.inputs[2].default_value = [0.9, 0.9, 0.9, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 0.6\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[2].default_value = [0.8, 0.6, 0.4, 1.0]\n    brick_texture.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[6].default_value = 0.0\n    brick_texture.inputs[8].default_value = 1.0\n    brick_texture.inputs[9].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[15].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.7\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.2\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].position = 0.6\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.9, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 3.0\n    multiply.inputs[0].default_value = 2.5\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], hue_saturation_value.inputs[4])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(ambient_occlusion.outputs[1], bright_contrast.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    bright_contrast.inputs[1].default_value = -0.5\n    bright_contrast.inputs[2].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    hue_saturation_value.inputs[1].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.2, 0.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.inputs[4].default_value = 1.5\n    voronoi_texture.distance = 'MINKOWSKI'\n    mix.inputs[0].default_value = 0.7\n    noise_texture.inputs[3].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], magic_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(rgb_curves.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 10.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(add_shader.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(wave_texture.outputs[1], add_shader.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    bump.inputs[0].default_value = 0.15\n    bump.invert = True\n    wave_texture.inputs[6].default_value = 2.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    add = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(combine_xyz.outputs[0], mapping.inputs[2])\n    links.new(add.outputs[0], combine_xyz.inputs[2])\n    links.new(separate_xyz.outputs[2], add.inputs[0])\n    links.new(separate_xyz.outputs[1], add.inputs[1])\n    links.new(texture_coordinate.outputs[0], separate_xyz.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.05, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.15, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.6, 0.4, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.6\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Marble_Generator']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], group.inputs[22])\n\n    # Set parameters for each node\n    group.inputs[6].default_value = 5.0\n    group.inputs[13].default_value = [0.016, 0.013, 0.025, 1.0]\n    group.inputs[14].default_value = [0.137, 0.128, 0.299, 1.0]\n    group.inputs[24].default_value = 0.085\n    group.inputs[25].default_value = 1.5\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.8\n    mix.inputs[0].default_value = 0.7\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    bump.inputs[0].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    musgrave_texture.inputs[6].default_value = 0.1\n    musgrave_texture.inputs[7].default_value = 50.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    mix_1.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.1, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.5, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(add.outputs[0], multiply.inputs[1])\n    links.new(geometry.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.6, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 7.0\n    add.inputs[1].default_value = [0.4, 0.4, 0.4]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    emission.inputs[1].default_value = 4.0\n    glossy_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_3.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], colorramp_4.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[2].default_value = [0.8, 0.1, 0.5]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.2, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[0].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    mix_1.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[0].position = 0.2\n    colorramp_2.color_ramp.elements[1].position = 0.4\n    voronoi_texture_1.inputs[2].default_value = 15.0\n    colorramp_3.color_ramp.elements[0].position = 0.1\n    colorramp_3.color_ramp.elements[1].position = 0.5\n    colorramp_4.color_ramp.elements[1].position = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix_2.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.372, 0.176, 0.049, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.05\n    mix_1.inputs[0].default_value = 0.2\n    mix_1.blend_type = 'SUBTRACT'\n    colorramp.color_ramp.elements[0].position = 0.391\n    colorramp.color_ramp.elements[1].position = 0.955\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.725\n    voronoi_texture.inputs[1].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 50.0\n    musgrave_texture.inputs[1].default_value = 9.6\n    musgrave_texture.inputs[2].default_value = 20.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf_1 = nodes.new('ShaderNodeBsdfDiffuse')\n    diffuse_bsdf_2 = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(diffuse_bsdf_2.outputs[0], mix_shader_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[0], mapping_1.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(multiply_1.outputs[0], multiply.inputs[1])\n    links.new(colorramp.outputs[1], multiply_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_1.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.177\n    colorramp.color_ramp.elements[1].position = 0.573\n    noise_texture.inputs[2].default_value = 25.0\n    diffuse_bsdf.inputs[0].default_value = [0.021, 0.208, 0.0, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    noise_texture_1.inputs[2].default_value = 15.0\n    diffuse_bsdf_1.inputs[0].default_value = [0.133, 0.133, 0.133, 1.0]\n    diffuse_bsdf_2.inputs[0].default_value = [0.309, 0.309, 0.309, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 3.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix.inputs[1])\n    links.new(mix.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[20].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 1.0, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [1.0, 0.1, 0.1, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture_2.inputs[2].default_value = 15.0\n    noise_texture_2.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.inputs[3].default_value = 17.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[4].default_value = 0.4\n    mapping.inputs[2].default_value = [0.0, 0.785, 0.0]\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.15, 0.1, 0.05, 1.0]\n    noise_texture_1.inputs[3].default_value = 4.0\n    noise_texture_1.inputs[4].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.15, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix_1.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix_shader.inputs[2])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], gamma.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(texture_coordinate.outputs[3], multiply.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], bump.inputs[2])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    gamma.inputs[1].default_value = 2.2\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 15.0\n    bump.inputs[0].default_value = 0.1\n    hue_saturation_value.inputs[1].default_value = 1.2\n    mix.inputs[2].default_value = [1.0, 0.5, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[1])\n    links.new(rgb_1.outputs[0], principled_bsdf.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.1, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[5].default_value = 0.4\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    rgb.outputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.3\n    hue_saturation_value.inputs[1].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.2, 1.0]\n    voronoi_texture.inputs[4].default_value = 1.0\n    mix.inputs[0].default_value = 0.7\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[5].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.2, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.7, 0.2, 0.2, 1.0]\n    wave_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(displacement.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.6\n    principled_bsdf.inputs[10].default_value = 0.3\n    principled_bsdf.inputs[11].default_value = 0.2\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    voronoi_texture.inputs[3].default_value = 0.05\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.3\n    displacement.space = 'WORLD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    brick_texture.inputs[1].default_value = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[3].default_value = 10.0\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(greater_than.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], greater_than.inputs[0])\n    links.new(wave_texture.outputs[1], greater_than.inputs[1])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.6, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.6)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.1, 0.1, 1.0]\n    greater_than.inputs[2].default_value = 0.3\n    greater_than.operation = 'GREATER_THAN'\n    noise_texture.inputs[3].default_value = 3.0\n    wave_texture.inputs[1].default_value = 15.0\n    wave_texture.inputs[2].default_value = 2.0\n    wave_texture.inputs[4].default_value = 4.0\n    wave_texture.inputs[6].default_value = 1.57\n    glossy_bsdf.inputs[1].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 20.0\n    musgrave_texture.inputs[3].default_value = 0.5\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.1, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    displacement.inputs[2].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.3\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    map_range = nodes.new('ShaderNodeMapRange')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(map_range.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 15.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    map_range.inputs[3].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(greater_than.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[1], greater_than.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    greater_than.inputs[2].default_value = 0.2\n    greater_than.operation = 'GREATER_THAN'\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 3.0\n    wave_texture.inputs[3].default_value = 3.0\n    wave_texture.inputs[4].default_value = 5.0\n    wave_texture.inputs[6].default_value = 1.57\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(layer_weight.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[17])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    layer_weight.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 10.0\n    mix.inputs[1].default_value = [0.2, 0.4, 0.6, 1.0]\n    mix.inputs[2].default_value = [0.9, 0.9, 0.9, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.321\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    magic_texture.inputs[1].default_value = 0.94\n    magic_texture.inputs[2].default_value = 11.9\n    magic_texture.turbulence_depth = 1\n    principled_bsdf.inputs[0].default_value = [0.441, 0.479, 1.0, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.167\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.447\n    principled_bsdf_1.inputs[0].default_value = [0.054, 0.102, 1.0, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.167\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[19])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(checker_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[16].default_value = 1.0\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    checker_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [0.785, 0.785, 0.0]\n    bright_contrast.inputs[1].default_value = -0.5\n    bright_contrast.inputs[2].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[14].default_value = 0.5\n    principled_bsdf.inputs[15].default_value = 0.05\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[5].default_value = 0.7\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 3.0\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.inputs[4].default_value = 2.0\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.2]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 2.0\n    displacement.inputs[2].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [0.6, 0.6, 0.6, 1.0]\n    brick_texture.inputs[4].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 10.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.2\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(geometry.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'F2'\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeVectorMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(add.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.002, 0.002, 0.002, 1.0]\n    brick_texture.inputs[4].default_value = 4.0\n    brick_texture.inputs[7].default_value = -0.5\n    mix.inputs[1].default_value = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.2, 0.5, 1.0, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    brick_texture.inputs[4].default_value = 2.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 1.2\n    voronoi_texture.inputs[2].default_value = -5.0\n    mapping.inputs[3].default_value = [2.0, 0.5, 0.5]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[20])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(invert.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 1.0\n    rgb.outputs[0].default_value = [0.2, 0.2, 0.8, 1.0]\n    invert.inputs[0].default_value = 0.0\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    mapping.inputs[1].default_value = [2.0, 2.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(mix_1.outputs[0], bright_contrast.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    bright_contrast.inputs[1].default_value = 1.2\n    bright_contrast.inputs[2].default_value = 0.5\n    mix_1.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix_1.blend_type = 'ADD'\n    noise_texture.inputs[3].default_value = 3.0\n    voronoi_texture.inputs[2].default_value = 0.6\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump_1.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(greater_than.outputs[0], mix.inputs[0])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], greater_than.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], hue_saturation_value.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    greater_than.operation = 'GREATER_THAN'\n    multiply.inputs[2].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    hue_saturation_value.inputs[2].default_value = 1.2\n    bump_1.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    vector_transform = nodes.new('ShaderNodeVectorTransform')\n    mapping = nodes.new('ShaderNodeMapping')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], checker_texture.inputs[0])\n    links.new(vector_transform.outputs[0], checker_texture.inputs[1])\n    links.new(mapping.outputs[0], vector_transform.inputs[0])\n    links.new(geometry.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[3].default_value = 5.0\n    vector_transform.convert_from = 'OBJECT'\n    vector_transform.convert_to = 'WORLD'\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.0]\n    principled_bsdf.inputs[0].default_value = [1.0, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix_shader.outputs[0], material_output.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[3].default_value = 1.5\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.0, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.2, 0.6, 0.9, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.7, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 1.5\n    bump.inputs[0].default_value = 0.05\n    musgrave_texture_1.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.15\n    wave_texture.inputs[1].default_value = 0.2\n    wave_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[7])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.25\n    principled_bsdf.inputs[13].default_value = 0.1\n    mix.inputs[0].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.25\n    colorramp.color_ramp.elements[1].color = [0.35, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 2.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping.inputs[3].default_value = [20.0, 0.0, 0.0]\n    mix_1.inputs[0].default_value = 0.15\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 7.0\n    noise_texture.inputs[4].default_value = 0.1\n    mix_2.inputs[2].default_value = [0.3, 0.2, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    bump.inputs[0].default_value = 0.015\n    bump.inputs[1].default_value = 0.12\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.4, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Glass_Curtain_Wall']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 2.3\n    group.inputs[1].default_value = 0.03\n    group.inputs[4].default_value = 0.75\n    group.inputs[8].default_value = [0.311, 0.137, 0.061, 1.0]\n    group.inputs[9].default_value = 0.5\n    group.inputs[11].default_value = 5.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(geometry.outputs[1], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.008, 0.008, 0.008, 1.0]\n    mix.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.9\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(rgb_curves_1.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[3], multiply.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[1])\n    links.new(colorramp.outputs[0], translucent_bsdf.inputs[0])\n    links.new(bump.outputs[0], translucent_bsdf.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.005\n    colorramp.color_ramp.elements[0].color = [0.002, 0.0, 0.039, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.359\n    colorramp.color_ramp.elements[1].color = [0.177, 0.274, 0.028, 1.0]\n    brick_texture.inputs[1].default_value = [0.818, 0.78, 0.827, 1.0]\n    brick_texture.inputs[2].default_value = [0.041, 0.19, 0.003, 1.0]\n    brick_texture.inputs[3].default_value = [0.018, 0.017, 0.019, 1.0]\n    brick_texture.inputs[4].default_value = 7.0\n    brick_texture.inputs[5].default_value = 0.03\n    brick_texture.inputs[8].default_value = 6.95\n    brick_texture.inputs[9].default_value = 0.43\n    rgb_curves.inputs[0].default_value = 0.5\n    rgb_curves.mapping.curves[3].points[1].location = [0.309, 0.119]\n    rgb_curves.mapping.curves[3].points.new(0.486, 0.769)\n    rgb_curves.mapping.curves[3].points.new(0.832, 0.725)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.inputs[4].default_value = 11.9\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.459, 0.369]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 19.8\n    noise_texture.inputs[3].default_value = 9.2\n    noise_texture.inputs[4].default_value = 0.833\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].position = 0.12\n    noise_texture_1.inputs[2].default_value = 22.4\n    bump.inputs[0].default_value = 0.5\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Old_brass']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[7])\n    links.new(group.outputs[2], principled_bsdf.inputs[9])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(bump.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[2].default_value = 0.02\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.105\n    colorramp.color_ramp.elements[1].position = 0.132\n    colorramp.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp.color_ramp.elements.new(0.457)\n    colorramp.color_ramp.elements[2].color = [0.897, 0.897, 0.897, 1.0]\n    colorramp.color_ramp.elements.new(0.782)\n    colorramp.color_ramp.elements[3].color = [0.254, 0.254, 0.254, 1.0]\n    colorramp.color_ramp.elements.new(0.809)\n    colorramp.color_ramp.elements[4].color = [0.918, 0.918, 0.918, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DIVIDE'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    bump.inputs[0].default_value = 0.467\n    noise_texture.inputs[3].default_value = 6.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(ambient_occlusion.outputs[0], add.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    add.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[20].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Jewel_Ring_Stone']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['metal']\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[1], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], group_1.inputs[2])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.5\n    group.inputs[0].default_value = [1.0, 0.2, 0.2, 1.0]\n    group.inputs[1].default_value = 0.6\n    group_1.inputs[4].default_value = -892.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], material_output.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], emission.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.2, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[2].default_value = 0.1\n    mix_1.inputs[0].default_value = 0.75\n    mix_1.inputs[2].default_value = [1.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bright_contrast.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.7\n    bright_contrast.inputs[1].default_value = -0.4\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    voronoi_texture.inputs[2].default_value = 30.0\n    bump.inputs[1].default_value = 0.15\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.1, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(light_path.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], bump.inputs[3])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.9\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[16].default_value = 2.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.7, 0.6, 1.0]\n    layer_weight.inputs[0].default_value = 0.25\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    musgrave_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 0.4\n    noise_texture.inputs[5].default_value = 25.0\n    mapping.inputs[1].default_value = [0.0, 0.0, -0.01]\n    mapping.inputs[2].default_value = [-0.5, 0.0, 0.0]\n    mapping.inputs[3].default_value = [25.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.15, 0.22, 0.3, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.75, 0.75, 0.75, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix_2.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 20.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wireframe = nodes.new('ShaderNodeWireframe')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wireframe.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[1], wireframe.inputs[0])\n    links.new(noise_texture.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], checker_texture.inputs[1])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[2])\n    links.new(geometry.outputs[5], musgrave_texture.inputs[4])\n    links.new(noise_texture_1.outputs[1], diffuse_bsdf.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[1])\n    links.new(geometry.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 11.8\n    noise_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[5].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.1\n    mapping.inputs[3].default_value = [0.2, 0.0, -0.2]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    maximum = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mix_2.outputs[0], bump.inputs[2])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(maximum.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[8].default_value = 0.7\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    wave_texture.inputs[2].default_value = 5.0\n    mapping.inputs[3].default_value = [10.0, 10.0, 0.0]\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[1].default_value = 3.0\n    add.inputs[1].default_value = 0.1\n    add.use_clamp = True\n    bump.inputs[0].default_value = 0.2\n    mix_2.inputs[0].default_value = 0.2\n    colorramp_3.color_ramp.interpolation = 'CONSTANT'\n    colorramp_3.color_ramp.elements[1].position = 0.5\n    colorramp_3.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    maximum.inputs[0].default_value = 1.0\n    maximum.operation = 'MAXIMUM'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.12\n    principled_bsdf.inputs[8].default_value = 0.62\n    principled_bsdf.inputs[9].default_value = 0.35\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.15, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 10.0\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[9])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    voronoi_texture.inputs[1].default_value = 0.6\n    voronoi_texture.inputs[2].default_value = 10.0\n    bright_contrast.inputs[1].default_value = 0.3\n    bright_contrast.inputs[2].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.5, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(wave_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.6\n    wave_texture.inputs[1].default_value = 10.0\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rusty_Metal_02']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[18].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    principled_bsdf.inputs[6].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[3])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.2, 0.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.voronoi_dimensions = '2D'\n    hue_saturation_value.inputs[1].default_value = 0.5\n    invert.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 0.5\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(add.outputs[0], emission.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 30.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    emission.inputs[0].default_value = [1.0, 0.5, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[14].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.4, 1.0, 0.6, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[5].default_value = 1.0\n    emission.inputs[0].default_value = [1.0, 0.5, 0.2, 1.0]\n    emission.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Fabric_Camo']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 1.3\n    group.inputs[3].default_value = [0.589, 0.589, 0.589, 1.0]\n    group.inputs[4].default_value = [0.097, 0.097, 0.097, 1.0]\n    group.inputs[7].default_value = 0.67\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_1.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.vector_type = 'TEXTURE'\n    brick_texture.inputs[2].default_value = [0.102, 0.102, 0.102, 1.0]\n    brick_texture.inputs[3].default_value = [0.008, 0.008, 0.008, 1.0]\n    mix_1.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[1], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.3, 0.5, 0.7, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.5\n    noise_texture.inputs[2].default_value = 4.0\n    mapping.inputs[3].default_value = [1.5, 1.5, 1.5]\n    mapping_1.inputs[3].default_value = [1.2, 1.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 2.0\n    mix.inputs[0].default_value = 0.8\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 4.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(gradient_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    emission.inputs[1].default_value = 5.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.distance = 'CHEBYCHEV'\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.5\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    mix_1.inputs[0].default_value = 0.4\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.7, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    musgrave_texture.inputs[1].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[1].default_value = 3.0\n    voronoi_texture.voronoi_dimensions = '2D'\n    displacement.inputs[2].default_value = 0.03\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bright_contrast.outputs[0], emission.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.15\n    principled_bsdf.inputs[7].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.9\n    noise_texture.inputs[3].default_value = 6.0\n    voronoi_texture.inputs[2].default_value = 6.0\n    bump.inputs[0].default_value = 0.05\n    emission.inputs[0].default_value = [0.8, 0.4, 0.1, 1.0]\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.1, 1.0]\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[3].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(multiply.outputs[0], bump.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.3\n    bump.inputs[1].default_value = 0.1\n    multiply.inputs[1].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n    transparent_bsdf.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.5\n    principled_bsdf.inputs[0].default_value = [1.0, 0.5, 0.2, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.8\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 20.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.9\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.25\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.4, 0.4, 0.4, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    noise_texture_1.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(add_shader.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(principled_bsdf_1.outputs[0], add_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    principled_bsdf_1.inputs[6].default_value = 0.2\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 1.0, 1.0]\n    gradient_texture.gradient_type = 'QUADRATIC_SPHERE'\n    musgrave_texture.inputs[4].default_value = 3.0\n    displacement.inputs[2].default_value = 0.1\n    wave_texture.inputs[1].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[1].default_value = 0.2\n    bump.invert = True\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 15.0\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n    gamma = nodes.new('ShaderNodeGamma')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[7], colorramp_1.inputs[0])\n    links.new(mix_3.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(invert.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mix_2.outputs[0], invert.inputs[1])\n    links.new(mix_3.outputs[0], rgb_curves_2.inputs[1])\n    links.new(gamma.outputs[0], bump.inputs[1])\n    links.new(colorramp_2.outputs[0], displacement.inputs[0])\n    links.new(mix_4.outputs[0], colorramp_2.inputs[0])\n    links.new(wave_texture.outputs[0], mix_4.inputs[1])\n    links.new(noise_texture_2.outputs[1], mix_4.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[2].default_value = [0.768, 0.532, 0.204, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'OVERLAY'\n    mix_2.inputs[0].default_value = 0.95\n    mix_2.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    ambient_occlusion.only_local = True\n    colorramp_1.color_ramp.elements[0].position = 0.495\n    colorramp_1.color_ramp.elements[1].position = 0.555\n    rgb_curves.mapping.curves[3].points[1].location = [0.382, 0.269]\n    rgb_curves.mapping.curves[3].points.new(0.677, 0.681)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[2].default_value = 25.0\n    noise_texture_1.inputs[3].default_value = 14.0\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.745, 0.288]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.455, 0.213]\n    rgb_curves_2.mapping.curves[3].points.new(0.745, 0.537)\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.1\n    gamma.inputs[1].default_value = 2.0\n    displacement.inputs[2].default_value = 0.02\n    colorramp_2.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_2.color_ramp.elements[0].position = 0.314\n    colorramp_2.color_ramp.elements[1].position = 0.341\n    colorramp_2.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp_2.color_ramp.elements.new(0.395)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements.new(0.7)\n    colorramp_2.color_ramp.elements[3].color = [0.239, 0.239, 0.239, 1.0]\n    colorramp_2.color_ramp.elements.new(0.923)\n    colorramp_2.color_ramp.elements[4].color = [0.004, 0.004, 0.004, 1.0]\n    mix_4.inputs[0].default_value = 1.0\n    mix_4.blend_type = 'LINEAR_LIGHT'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    wave_texture.wave_profile = 'SAW'\n    noise_texture_2.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], gamma.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[1], multiply.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(voronoi_texture.outputs[1], add.inputs[0])\n    links.new(noise_texture.outputs[1], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.15\n    gamma.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rocky_Desert']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Glossy_Plastic_Camo']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(texture_coordinate.outputs[2], group.inputs[1])\n    links.new(texture_coordinate.outputs[3], group.inputs[2])\n    links.new(colorramp.outputs[0], group.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[1], group_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.2\n    group_1.inputs[5].default_value = -76.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(dot_product.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[1], dot_product.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.02, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    brick_texture.inputs[6].default_value = 1.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.3, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[1], mix_1.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix_1.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    brick_texture.inputs[2].default_value = [0.5, 0.5, 0.5, 1.0]\n    mapping.vector_type = 'TEXTURE'\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    multiply_add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    light_path = nodes.new('ShaderNodeLightPath')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wrap = nodes.new('ShaderNodeMath')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(wrap.outputs[0], glossy_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(add.outputs[0], multiply_add.inputs[2])\n    links.new(colorramp.outputs[0], noise_texture.inputs[0])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], add.inputs[0])\n    links.new(light_path.outputs[2], add.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[3], wrap.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    multiply_add.operation = 'MULTIPLY_ADD'\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    add.inputs[2].default_value = 0.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], gamma.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.inputs[12].default_value = 0.1\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 5.0\n    gamma.inputs[1].default_value = 1.5\n    noise_texture_1.inputs[2].default_value = 0.5\n    noise_texture_1.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(checker_texture.outputs[1], add.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.3, 1.0]\n    checker_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    mix.inputs[1].default_value = [0.0, 0.0, 1.0, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeVectorMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.8\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[4])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    noise_texture.inputs[3].default_value = 5.0\n    mix_1.inputs[0].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix_2.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture.inputs[5].default_value = 0.1\n    add.inputs[1].default_value = 2.9\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    colorramp.color_ramp.elements[0].position = 0.26\n    colorramp.color_ramp.elements[0].color = [0.049, 0.049, 0.049, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.844\n    colorramp.color_ramp.elements[1].color = [0.345, 0.345, 0.345, 1.0]\n    musgrave_texture.inputs[2].default_value = 0.1\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.1\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 25.0\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.inputs[4].default_value = 5.0\n    wave_texture.inputs[5].default_value = 0.75\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.7, 0.5, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mix_1.blend_type = 'ADD'\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.3, 1.0]\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.inputs[3].default_value = 12.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Translucent_Plastic_Camo']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Glass_Curtain_Wall']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [1.0, 0.2, 0.1, 1.0]\n    group.inputs[1].default_value = [0.3, 0.2, 0.05, 1.0]\n    group.inputs[2].default_value = [0.2, 1.0, 0.1, 1.0]\n    group.inputs[3].default_value = [0.0, 0.2, 0.01, 1.0]\n    group.inputs[4].default_value = 0.5\n    group.inputs[5].default_value = -45.0\n    group_1.inputs[0].default_value = 2.0\n    group_1.inputs[1].default_value = 0.02\n    group_1.inputs[4].default_value = 0.8\n    group_1.inputs[8].default_value = [0.4, 0.15, 0.075, 1.0]\n    group_1.inputs[9].default_value = 0.4\n    group_1.inputs[11].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    brick_texture.inputs[5].default_value = 0.2\n    mapping.vector_type = 'TEXTURE'\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.2, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[3].default_value = [0.4, 0.1, 0.2, 1.0]\n    brick_texture.inputs[5].default_value = 0.01\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.8, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [1.0, 5.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[5].default_value = 20.0\n    mapping.inputs[2].default_value = [1.0, 0.0, 0.0]\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    principled_bsdf.inputs[0].default_value = [0.5, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[21].default_value = 0.1\n    emission.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[0])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 200.0\n    mapping.inputs[3].default_value = [5.0, 5.0, 5.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 1.0, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.6]\n    rgb_curves.mapping.curves[3].points.new(0.8, 0.8)\n    wave_texture.inputs[1].default_value = 15.0\n    wave_texture.inputs[2].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    bright_contrast.inputs[1].default_value = -0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[11])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], add.inputs[0])\n    links.new(voronoi_texture.outputs[1], add.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.7, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(invert.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.6, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.7, 0.5, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[8].default_value = 0.15\n    colorramp_1.color_ramp.interpolation = 'CARDINAL'\n    colorramp_1.color_ramp.elements[1].position = 0.3\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 5.0\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[0].color = [0.4, 0.1, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.9\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.5, 0.2, 1.0]\n    principled_bsdf_1.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.05\n    principled_bsdf_1.inputs[8].default_value = 0.55\n    noise_texture.inputs[2].default_value = 50.0\n    invert.inputs[0].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Salmon_Fillet']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[6].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.218\n    principled_bsdf.inputs[16].default_value = 21.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.0\n    mix.use_clamp = True\n    mix_1.inputs[2].default_value = [1.0, 0.879, 0.778, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.4, 1.0]\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wrap = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wrap.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], wrap.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[0])\n    links.new(wrap.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.0, 1.0]\n    wrap.inputs[1].default_value = 0.2\n    wrap.inputs[2].default_value = 0.0\n    wrap.operation = 'WRAP'\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    fresnel = nodes.new('ShaderNodeFresnel')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(fresnel.outputs[0], principled_bsdf.inputs[24])\n    links.new(map_range.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[1], map_range.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    add.use_clamp = True\n    map_range.inputs[3].default_value = -0.15\n    map_range.inputs[4].default_value = 0.15\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.2\n    fresnel.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(invert.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], invert.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.001\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 3.0\n    mix_1.inputs[0].default_value = 0.3\n    mix_1.blend_type = 'MULTIPLY'\n    invert.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.4, 0.2, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    bright_contrast.inputs[1].default_value = 0.3\n    bright_contrast.inputs[2].default_value = 1.2\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    mapping.vector_type = 'VECTOR'\n    bump.inputs[1].default_value = 0.15\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['procedural_rusty_metal_eevee_and_cycles']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    group.inputs[0].default_value = [0.439, 0.581, 0.556, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    layer_weight.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.9\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.02, 0.02, 0.03, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.12, 0.12, 0.15, 1.0]\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.6\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.07\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.15\n    colorramp.color_ramp.elements[1].color = [0.0, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.2)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.7, 1.0]\n    layer_weight.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.8\n    bump.inputs[0].default_value = 0.03\n    noise_texture_1.inputs[3].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[12].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    brick_texture.inputs[6].default_value = 0.5\n    brick_texture.inputs[7].default_value = 0.1\n    brick_texture.inputs[8].default_value = 0.2\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[20].default_value = 3.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.1, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(multiply.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[1].default_value = 0.8\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[4].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    checker_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[2].default_value = [0.6, 0.6, 0.6, 1.0]\n    checker_texture.inputs[3].default_value = 20.0\n    mapping.inputs[1].default_value = [1.5, 1.5, 0.0]\n    noise_texture.inputs[3].default_value = 8.0\n    hue_saturation_value.inputs[1].default_value = 1.2\n    add.inputs[1].default_value = 1.0\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix_2.outputs[0], colorramp_2.inputs[0])\n    links.new(wave_texture.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.0, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    colorramp_2.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    subtract = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(subtract.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], subtract.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.15\n    principled_bsdf.inputs[14].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.3, 1.0]\n    wave_texture.inputs[1].default_value = 0.15\n    wave_texture.inputs[2].default_value = 100.0\n    wave_texture.inputs[3].default_value = 10.0\n    subtract.inputs[1].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    voronoi_texture.inputs[2].default_value = 30.0\n    voronoi_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.03\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n    links.new(voronoi_texture_2.outputs[0], colorramp_4.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.5, 0.35, 0.15, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.72, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n    mix.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    noise_texture_1.inputs[3].default_value = 1.0\n    mix_1.inputs[0].default_value = 0.7\n    mix_1.blend_type = 'ADD'\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    voronoi_texture_1.inputs[2].default_value = 12.0\n    colorramp_3.color_ramp.elements[0].position = 0.1\n    colorramp_3.color_ramp.elements[1].position = 0.5\n    noise_texture_2.inputs[2].default_value = 25.0\n    noise_texture_2.inputs[3].default_value = 0.5\n    colorramp_4.color_ramp.elements[0].position = 0.1\n    colorramp_4.color_ramp.elements[1].position = 0.5\n    voronoi_texture_2.inputs[2].default_value = 20.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], add.inputs[0])\n    links.new(invert.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    mix.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 3.0\n    voronoi_texture.inputs[3].default_value = 0.5\n    voronoi_texture.feature = 'F2'\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp_2.color_ramp.elements[0].color = [0.8, 0.3, 0.3, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [1.0, 0.6, 0.6, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.321\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = 0.94\n    magic_texture.inputs[2].default_value = 11.9\n    magic_texture.turbulence_depth = 3\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.5\n    principled_bsdf_1.inputs[0].default_value = [0.1, 0.2, 0.8, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 0.9\n    principled_bsdf_1.inputs[9].default_value = 0.3\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rock_Style_Concrete']\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], group.inputs[1])\n\n    # Set parameters for each node\n    group.inputs[2].default_value = [0.02, 0.02, 0.02, 1.0]\n    group.inputs[3].default_value = 3.6\n    group.inputs[8].default_value = 1.0\n    group.inputs[9].default_value = 0.3\n    noise_texture.inputs[1].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb = nodes.new('ShaderNodeRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(layer_weight.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[14].default_value = 0.9\n    brick_texture.inputs[2].default_value = [0.08, 0.08, 0.08, 1.0]\n    brick_texture.inputs[3].default_value = [0.007, 0.007, 0.007, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    rgb.outputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.7\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[15])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.05\n    principled_bsdf.inputs[6].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[14].default_value = 0.8\n    colorramp.color_ramp.color_mode = 'HSL'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.7, 0.3, 1.0]\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 4.5\n    wave_texture.inputs[3].default_value = 10.0\n    wave_texture.inputs[4].default_value = 8.0\n    wave_texture.inputs[5].default_value = 0.2\n    wave_texture.wave_type = 'RINGS'\n    wave_texture_1.inputs[1].default_value = 2.0\n    wave_texture_1.inputs[2].default_value = 3.0\n    wave_texture_1.inputs[3].default_value = 5.0\n    wave_texture_1.inputs[4].default_value = 15.0\n    wave_texture_1.inputs[5].default_value = 0.1\n    wave_texture_1.wave_type = 'RINGS'\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.15\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    emission = nodes.new('ShaderNodeEmission')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(rgb.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[5].default_value = 30.0\n    emission.inputs[1].default_value = 5.0\n    rgb.outputs[0].default_value = [0.5, 0.7, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], voronoi_texture.inputs[5])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.2, 0.7, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.6\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 15.0\n    voronoi_texture.inputs[3].default_value = 0.4\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 4.0\n    noise_texture_1.inputs[4].default_value = 0.1\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.8, 0.7, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[1], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture_2.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture.inputs[5].default_value = 0.1\n    noise_texture_1.inputs[2].default_value = 4.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    noise_texture_2.inputs[2].default_value = 12.0\n    noise_texture_2.inputs[3].default_value = 12.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    mix_1.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture_1.outputs[4], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_2.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[4], colorramp_2.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.6\n    principled_bsdf.inputs[3].default_value = [0.2, 0.1, 0.8, 1.0]\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.9, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[4].default_value = 0.3\n    mapping.inputs[1].default_value = [0.0, 0.0, 0.5]\n    bump.inputs[0].default_value = 0.4\n    bump.inputs[1].default_value = 0.002\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[0].position = 0.2\n    colorramp_2.color_ramp.elements[1].position = 0.8\n    colorramp_2.color_ramp.elements[1].color = [0.1, 0.2, 0.9, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], multiply.inputs[1])\n    links.new(voronoi_texture.outputs[1], bump.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.15\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.6, 0.7, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[0].default_value = 3.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 1.5\n    bump.inputs[2].default_value = 0.5\n    voronoi_texture.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    length = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[0])\n    links.new(rgb_curves.outputs[0], mix.inputs[1])\n    links.new(length.outputs[1], colorramp_1.inputs[0])\n    links.new(combine_xyz.outputs[0], length.inputs[0])\n    links.new(separate_xyz.outputs[0], combine_xyz.inputs[0])\n    links.new(separate_xyz.outputs[1], combine_xyz.inputs[1])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.95\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    length.operation = 'LENGTH'\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.0, 0.1]\n    rgb_curves.mapping.curves[3].points.new(0.2, 0.5)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.95\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.25, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 15.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[2])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    scale.inputs[1].default_value = [1.0, 1.0, 1.0]\n    scale.operation = 'SCALE'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 8.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['procedural_marble_tiles']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(layer_weight.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_2.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture_2.outputs[0], brick_texture.inputs[2])\n    links.new(colorramp.outputs[0], brick_texture.inputs[3])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(noise_texture_3.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.vector_type = 'TEXTURE'\n    mix.inputs[1].default_value = [0.174, 0.174, 0.174, 1.0]\n    mix.inputs[2].default_value = [0.024, 0.024, 0.024, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'ADD'\n    layer_weight.inputs[0].default_value = 0.6\n    noise_texture.inputs[2].default_value = 30.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    brick_texture.inputs[4].default_value = 0.5\n    brick_texture.inputs[5].default_value = 0.0\n    brick_texture.inputs[6].default_value = 0.3\n    brick_texture.inputs[7].default_value = 0.3\n    brick_texture.inputs[8].default_value = 0.3\n    brick_texture.inputs[9].default_value = 0.3\n    brick_texture.offset = 0.0\n    mix_2.blend_type = 'MULTIPLY'\n    noise_texture_1.inputs[2].default_value = 0.6\n    musgrave_texture.inputs[2].default_value = 1000.0\n    musgrave_texture.inputs[5].default_value = 0.2\n    noise_texture_2.inputs[2].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.379\n    colorramp.color_ramp.elements[1].position = 0.527\n    colorramp.color_ramp.elements[1].color = [0.06, 0.06, 0.06, 1.0]\n    noise_texture_3.inputs[2].default_value = 50.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[1], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    noise_texture.inputs[3].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.inputs[2].default_value = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.8, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    diffuse_bsdf_1 = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], add.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix_1.inputs[2])\n    links.new(mix_2.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix_2.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.03, 0.003, 0.007, 1.0]\n    diffuse_bsdf_1.inputs[0].default_value = [0.615, 0.016, 0.109, 1.0]\n    displacement.inputs[2].default_value = 0.01\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.014\n    colorramp.color_ramp.elements[1].position = 0.082\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.inputs[5].default_value = 0.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mix_1.inputs[0].default_value = 0.969\n    noise_texture.inputs[2].default_value = 10.0\n    mix_2.inputs[0].default_value = 0.963\n    noise_texture_1.inputs[2].default_value = 20.0\n    multiply.inputs[0].default_value = 1.0\n    multiply.inputs[1].default_value = 5.9\n    multiply.operation = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.464\n    noise_texture_2.inputs[2].default_value = 100.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    noise_texture_2.inputs[4].default_value = 0.842\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mapping.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.2\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.85, 0.6, 0.2, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.75\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], displacement.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.391\n    colorramp.color_ramp.elements[1].position = 0.518\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.75\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    emission.inputs[1].default_value = 4.0\n    blackbody.inputs[0].default_value = 2000.0\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.3\n    displacement.inputs[2].default_value = 0.1\n    noise_texture_1.inputs[2].default_value = 2.5\n    noise_texture_1.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Terracotta_Tile']\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[2])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n    links.new(texture_coordinate.outputs[2], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    displacement.inputs[0].default_value = 0.4\n    displacement.inputs[1].default_value = 0.2\n    mix.inputs[0].default_value = 0.7\n    brick_texture.inputs[2].default_value = [0.014, 0.014, 0.014, 1.0]\n    brick_texture.inputs[3].default_value = [0.063, 0.063, 0.063, 1.0]\n    brick_texture.inputs[4].default_value = 2.7\n    brick_texture.inputs[6].default_value = 0.7\n    noise_texture.inputs[2].default_value = 29.3\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.633\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[0].color = [0.251, 0.311, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.044, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.7\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.3, 0.2, 0.5, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.5, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.7\n    principled_bsdf.inputs[8].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.musgrave_dimensions = '4D'\n    colorramp_1.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[5].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[6])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.3, 0.7, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.2\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.3\n    principled_bsdf.inputs[17].default_value = 0.7\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[3].default_value = 8.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.436\n    colorramp.color_ramp.elements[0].color = [0.4, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.55\n    colorramp.color_ramp.elements[1].color = [0.787, 0.787, 0.787, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(bump_1.outputs[0], displacement.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.1, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 7.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 0.15\n    displacement.inputs[2].default_value = 0.005\n    bump_1.inputs[0].default_value = 0.3\n    bump_1.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[6])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 0.0\n    mapping.inputs[3].default_value = [10.0, 10.0, 0.0]\n    multiply.inputs[1].default_value = 3.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(rgb_curves.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 12.0\n    noise_texture.inputs[3].default_value = 3.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    add.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 6.0\n    wave_texture.inputs[3].default_value = 4.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 1.0]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[15])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[4], multiply.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.3\n    principled_bsdf.inputs[14].default_value = 0.65\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.3\n    mix.inputs[1].default_value = [0.23, 0.23, 0.23, 1.0]\n    mix.inputs[2].default_value = [0.84, 0.84, 0.84, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb = nodes.new('ShaderNodeRGB')\n    bump = nodes.new('ShaderNodeBump')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(layer_weight.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_2.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix_2.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    rgb.outputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    brick_texture.inputs[2].default_value = [0.2, 0.1, 0.1, 1.0]\n    mix_2.blend_type = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Real_Leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[40].default_value = 0.015\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.6, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 50.0\n    mix.inputs[1].default_value = [0.9, 0.4, 0.1, 1.0]\n    mix.inputs[2].default_value = [0.2, 0.1, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[1])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix_2.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[9].default_value = 0.45\n    mix.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.219, 0.115, 0.085, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.983, 0.972, 0.854, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[4].default_value = 0.67\n    mix_1.inputs[0].default_value = 0.7\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 0.0\n    mix_2.blend_type = 'MULTIPLY'\n    musgrave_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], add.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[12].default_value = 0.1\n    principled_bsdf.inputs[13].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    musgrave_texture.inputs[2].default_value = 1.5\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    colorramp.color_ramp.elements[1].position = 0.5\n    voronoi_texture.inputs[2].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.3, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [1.5, 1.5, 1.5]\n    voronoi_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Circular_Patternator']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], emission.inputs[0])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 15.0\n    group.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], mix.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.0, 0.5, 0.5, 1.0]\n    mix.blend_type = 'ADD'\n    bright_contrast.inputs[2].default_value = 1.2\n    noise_texture.inputs[2].default_value = 10.5\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture_1.inputs[1].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 7.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mix_1.inputs[0].default_value = 1.0\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.7, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(invert.outputs[0], displacement.inputs[1])\n    links.new(brick_texture.outputs[0], displacement.inputs[2])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 1.0\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    voronoi_texture.voronoi_dimensions = '4D'\n    add.inputs[0].default_value = 2.0\n    add.inputs[1].default_value = 0.1\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.5\n    displacement.inputs[0].default_value = 0.5\n    invert.inputs[0].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(greater_than.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], greater_than.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 1.0\n    hue_saturation_value.inputs[1].default_value = 2.0\n    mix.inputs[1].default_value = [0.8, 0.5, 0.3, 1.0]\n    greater_than.inputs[1].default_value = 0.1\n    greater_than.operation = 'GREATER_THAN'\n    noise_texture.inputs[2].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [0.0, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.8, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 4.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Sci_Fi_Panel_02']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], group.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.2, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Fabric_Camo']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 1.3\n    group.inputs[3].default_value = [0.589, 0.589, 0.589, 1.0]\n    group.inputs[4].default_value = [0.097, 0.097, 0.097, 1.0]\n    group.inputs[7].default_value = 0.67\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[1])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(mix_1.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(scale.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[4].default_value = 1.02\n    principled_bsdf.inputs[7].default_value = 0.05\n    principled_bsdf.inputs[8].default_value = 0.6\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.7)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.8, 0.8, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.4\n    scale.operation = 'SCALE'\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.8, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.9, 0.1, 1.0]\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[1].position = 0.9\n    noise_texture_1.inputs[2].default_value = 100.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    noise_texture_1.inputs[4].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[3], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.85, 0.76, 0.72, 1.0]\n    brick_texture.inputs[2].default_value = [0.03, 0.1, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(ambient_occlusion.outputs[1], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 2.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.3, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 0.3\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    add = nodes.new('ShaderNodeMath')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(add.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(fresnel.outputs[0], add.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.3, 0.2, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements.new(0.9)\n    colorramp.color_ramp.elements[2].color = [0.2, 0.1, 0.05, 1.0]\n    glossy_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], noise_texture.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], multiply.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.4, 0.2, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.5\n    principled_bsdf.inputs[7].default_value = 0.06\n    principled_bsdf.inputs[9].default_value = 0.1\n    mix.blend_type = 'OVERLAY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'F2'\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.3\n    musgrave_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    voronoi_texture.inputs[2].default_value = 8.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    multiply.inputs[1].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.8, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[1].default_value = [0.8, 0.5, 0.3, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(rgb_curves.outputs[0], mix_2.inputs[1])\n    links.new(colorramp.outputs[0], mix_2.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.5]\n    noise_texture.inputs[3].default_value = 5.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.75]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.35\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.4, 0.2, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.8\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    principled_bsdf_1.inputs[9].default_value = 0.618\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.1\n    glossy_bsdf.distribution = 'BECKMANN'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 15.0\n    wave_texture.wave_type = 'RINGS'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    volume_absorption = nodes.new('ShaderNodeVolumeAbsorption')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(volume_absorption.outputs[0], material_output.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.7, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[5].default_value = 1.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    volume_absorption.inputs[0].default_value = [0.1, 0.1, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb_curves.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.8, 0.8, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.2, 0.85]\n    rgb_curves.mapping.curves[3].points.new(0.7, 0.2)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.4, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    wave_texture.inputs[2].default_value = 4.0\n    wave_texture.inputs[5].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(add.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.25, 0.15, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 3.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.57]\n    add.inputs[2].default_value = 0.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[3])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(geometry.outputs[7], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[7].default_value = 0.4\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    bump.inputs[0].default_value = 0.2\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[1].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[15].default_value = 0.1\n    mix.inputs[2].default_value = [0.9, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 3.0\n    wave_texture.wave_type = 'RINGS'\n    bump.inputs[0].default_value = 0.4\n    colorramp_1.color_ramp.elements[0].color = [0.9, 0.8, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(anisotropic_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], anisotropic_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], anisotropic_bsdf.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.4, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    wave_texture.inputs[1].default_value = 30.0\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    add_1 = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[4])\n    links.new(add_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(invert.outputs[0], add_1.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    add.inputs[0].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    add_1.inputs[0].default_value = 0.1\n    invert.inputs[0].default_value = 0.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.85\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.5, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.1, 0.5, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[4].default_value = 1.5\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[5].default_value = 2.0\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    glass_bsdf.inputs[1].default_value = 1.1\n    glass_bsdf.inputs[2].default_value = 1.5\n    principled_bsdf.inputs[0].default_value = [0.1, 0.8, 0.5, 1.0]\n    principled_bsdf.inputs[21].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mix.inputs[0].default_value = 0.7\n    musgrave_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[5].default_value = 0.5\n    mix.inputs[0].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.05, 0.03, 0.01, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.25, 0.18, 0.05, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.1\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.3, 0.2, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.3, 0.3, 0.3, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[21])\n    links.new(colorramp.outputs[0], bump.inputs[1])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 0.0, 0.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 1.0\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.inputs[4].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.2\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.3\n    glossy_bsdf.distribution = 'BECKMANN'\n    mix.inputs[0].default_value = 0.7\n    brick_texture.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    diffuse_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wireframe = nodes.new('ShaderNodeWireframe')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    vector_transform = nodes.new('ShaderNodeVectorTransform')\n    mapping = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wireframe.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[1], wireframe.inputs[0])\n    links.new(noise_texture.outputs[0], checker_texture.inputs[0])\n    links.new(vector_transform.outputs[0], checker_texture.inputs[1])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[2])\n    links.new(geometry.outputs[5], musgrave_texture.inputs[4])\n    links.new(mapping.outputs[0], vector_transform.inputs[0])\n    links.new(geometry.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], diffuse_bsdf.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[5].default_value = 0.1\n    musgrave_texture.inputs[5].default_value = 0.5\n    vector_transform.convert_from = 'OBJECT'\n    vector_transform.convert_to = 'WORLD'\n    vector_transform.vector_type = 'NORMAL'\n    mapping.inputs[3].default_value = [2.0, 5.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[3].default_value = [0.8, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[5].default_value = 2.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(rgb_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.6, 0.5, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.4, 0.4, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 50.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.2\n    rgb.outputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    rgb_1.outputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.3\n    noise_texture_1.inputs[2].default_value = 800.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.distribution = 'MULTI_GGX'\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    diffuse_bsdf.inputs[1].default_value = 0.2\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.0, 0.3, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.9)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.0, 0.2, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.7\n    principled_bsdf.inputs[3].default_value = [0.3, 0.5, 0.4, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[4].default_value = 2.0\n    brick_texture.inputs[5].default_value = 0.002\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[7].default_value = -1.0\n    brick_texture.inputs[9].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 0.2\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    mix.inputs[0].default_value = 1.0\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.8\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[14].default_value = 0.5\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.5, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[4].default_value = 0.8\n    mapping.inputs[3].default_value = [45.0, 45.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.2, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    multiply.operation = 'MULTIPLY'\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    voronoi_texture.inputs[3].default_value = 0.5\n    mapping.inputs[3].default_value = [1.0, 0.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[10])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[8].default_value = 0.4\n    checker_texture.inputs[3].default_value = 6.0\n    hue_saturation_value.inputs[1].default_value = 1.2\n    hue_saturation_value.inputs[2].default_value = 0.8\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[5].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(rgb_curves.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.9, 0.1, 1.0]\n    rgb_curves.mapping.curves[0].points[1].location = [0.0, 0.0]\n    rgb_curves.mapping.curves[0].points.new(0.5, 1.0)\n    rgb_curves.mapping.curves[0].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[0].points.new(1.0, 1.0)\n    diffuse_bsdf.inputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.5, 0.5, 0.5, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.3, 1.0]\n    gamma.inputs[1].default_value = 2.2\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[2].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 20.0\n    wave_texture.inputs[3].default_value = 1.0\n    wave_texture.inputs[4].default_value = 0.0\n    bump.inputs[0].default_value = 0.15\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.523\n    principled_bsdf.inputs[3].default_value = [0.8, 0.747, 0.707, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.677\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[21].default_value = 0.486\n    noise_texture.inputs[2].default_value = 3.0\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.195\n    colorramp.color_ramp.elements[1].color = [0.5, 0.423, 0.437, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    bump.inputs[0].default_value = 0.25\n    displacement.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], bump.inputs[3])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 5.0\n    wave_texture.bands_direction = 'Z'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    normal = nodes.new('ShaderNodeNormal')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n    links.new(brick_texture.outputs[1], displacement.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[3])\n    links.new(normal.outputs[0], invert.inputs[1])\n    links.new(brick_texture.outputs[1], normal.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 4.0\n    wave_texture.inputs[3].default_value = 0.5\n    bump.inputs[1].default_value = 0.2\n    bump.invert = True\n    brick_texture.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[4].default_value = -5.0\n    brick_texture.inputs[5].default_value = 0.01\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    attribute = nodes.new('ShaderNodeAttribute')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(attribute.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    attribute.attribute_name = 'ColorAttribute'\n    principled_bsdf.inputs[9].default_value = 0.2\n    brick_texture.inputs[1].default_value = [0.2, 0.1, 0.3, 1.0]\n    brick_texture.inputs[2].default_value = [0.6, 0.3, 0.5, 1.0]\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[2].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[0].position = 0.2\n    colorramp_2.color_ramp.elements[1].position = 0.8\n    colorramp_2.color_ramp.elements[1].color = [0.5, 0.5, 0.0, 1.0]\n    displacement.inputs[1].default_value = 0.4\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[8])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    brick_texture.inputs[1].default_value = [0.3, 0.1, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.1, 0.05, 0.0, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    add.inputs[1].default_value = 0.2\n    add.use_clamp = True\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[14].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[1], add.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.27\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 0.5\n    wave_texture.inputs[4].default_value = 0.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 0.3\n    mapping.inputs[1].default_value = [10.0, 5.0, -1.5]\n    mapping.inputs[2].default_value = [0.2, 0.3, 0.4]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rubber_Camo']\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Procedural_Cracked_Icy_Ground']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], group.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], group_1.inputs[1])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 8.91\n    group.inputs[2].default_value = 1.8\n    group.inputs[3].default_value = 0.1\n    bump.inputs[1].default_value = 0.2\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rock_Generator']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], group.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], group_1.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.04, 0.02, 0.01, 1.0]\n    group.inputs[1].default_value = [0.9, 0.5, 0.2, 1.0]\n    group.inputs[8].default_value = 0.65\n    group.inputs[9].default_value = 1.5\n    group.inputs[10].default_value = 0.1\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    group_1.inputs[17].default_value = [0.05, 0.05, 0.05, 1.0]\n    group_1.inputs[22].default_value = 0.006\n    group_1.inputs[24].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.2\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.2, 0.3, 0.5, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[6].default_value = 1.57\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[3].default_value = 3.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    glass_bsdf.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.inputs[3].default_value = 0.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.2, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.7, 0.3, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 15.0\n    colorramp_2.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    light_path = nodes.new('ShaderNodeLightPath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], material_output.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], emission.inputs[1])\n    links.new(light_path.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 1.0\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 4.0\n    emission.inputs[0].default_value = [0.0, 1.0, 0.5, 1.0]\n    mix_1.inputs[2].default_value = [1.0, 0.0, 0.0, 1.0]\n    mix_1.blend_type = 'ADD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    logarithm = nodes.new('ShaderNodeMath')\n    camera_data = nodes.new('ShaderNodeCameraData')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    power = nodes.new('ShaderNodeMath')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(logarithm.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(camera_data.outputs[0], logarithm.inputs[0])\n    links.new(camera_data.outputs[1], logarithm.inputs[1])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(power.outputs[0], glossy_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], colorramp.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    logarithm.inputs[2].default_value = 0.0\n    logarithm.operation = 'LOGARITHM'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.34\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.369\n    colorramp.color_ramp.elements[1].color = [0.248, 0.23, 0.165, 1.0]\n    colorramp.color_ramp.elements.new(0.454)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.401, 0.28, 1.0]\n    power.operation = 'POWER'\n    diffuse_bsdf.inputs[0].default_value = [0.131, 0.485, 0.8, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.9, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    principled_bsdf.inputs[0].default_value = [0.2, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    principled_bsdf_1.inputs[6].default_value = 0.4\n    principled_bsdf_1.inputs[9].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(wave_texture.outputs[1], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[2].default_value = [0.4, 0.2, 0.1]\n    principled_bsdf.inputs[3].default_value = [0.1, 0.3, 0.5, 1.0]\n    brick_texture.inputs[1].default_value = [1.0, 0.5, 0.3, 1.0]\n    brick_texture.inputs[5].default_value = 0.04\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    musgrave_texture.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 0.152, 0.152, 1.0]\n    principled_bsdf.inputs[17].default_value = 0.95\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.05\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    bump_1.inputs[0].default_value = 0.05\n    noise_texture_1.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 1.0\n    displacement.inputs[2].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], bright_contrast.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.7\n    brick_texture.inputs[2].default_value = [0.6, 0.3, 0.3, 1.0]\n    mix_1.inputs[0].default_value = 0.9\n    mix_1.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 150.0\n    bright_contrast.inputs[1].default_value = 0.15\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(normal_map.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], normal_map.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.15\n    noise_texture.inputs[1].default_value = 5.0\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 0.8\n    wave_texture.inputs[1].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[8].default_value = 0.5\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.1, 0.1, 1.0]\n    noise_texture.inputs[5].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[7].default_value = 0.6\n    noise_texture.inputs[1].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(dot_product.outputs[1], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[1], dot_product.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.3, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(less_than.outputs[0], mix.inputs[0])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], less_than.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(subtract.outputs[0], add.inputs[1])\n    links.new(voronoi_texture.outputs[0], subtract.inputs[0])\n    links.new(voronoi_texture.outputs[1], subtract.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.05\n    less_than.inputs[1].default_value = 0.05\n    less_than.operation = 'LESS_THAN'\n    voronoi_texture.inputs[2].default_value = 10.0\n    hue_saturation_value.inputs[2].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    add.inputs[0].default_value = 0.05\n    subtract.operation = 'SUBTRACT'\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 3.0\n    voronoi_texture.inputs[1].default_value = 0.1\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    invert.inputs[0].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(rgb_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 250.0\n    noise_texture.inputs[3].default_value = 5.0\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.6\n    rgb.outputs[0].default_value = [0.6, 0.2, 0.1, 1.0]\n    rgb_1.outputs[0].default_value = [0.1, 0.8, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.23, 0.79, 0.37, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.05\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    displacement.inputs[1].default_value = 1.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[1], add.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 50.0\n    hue_saturation_value.inputs[1].default_value = 1.1\n    hue_saturation_value.inputs[2].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(noise_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.6, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.3, 0.3, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.1\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.7\n    wave_texture.wave_type = 'RINGS'\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.0]\n    mapping.inputs[3].default_value = [1.0, 1.0, 10.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], checker_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 8.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.7, 0.7, 0.7, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], glass_bsdf.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.3\n    noise_texture.inputs[5].default_value = 1.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    glass_bsdf.inputs[0].default_value = [0.8, 0.9, 1.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[1], multiply.inputs[0])\n    links.new(wave_texture.outputs[1], multiply.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[20].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.05, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[6].default_value = 3.14\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.2\n    noise_texture.inputs[1].default_value = 2.0\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 4.5\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.noise_dimensions = '4D'\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.7, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(magic_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.3, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.5, 0.1, 1.0]\n    mix.inputs[0].default_value = 0.7\n    magic_texture.inputs[1].default_value = 0.6\n    magic_texture.inputs[2].default_value = -1.0\n    mapping.inputs[3].default_value = [1.0, 0.0, 0.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.5\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(dot_product.outputs[1], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[1], dot_product.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[7].default_value = -1.0\n    mix.inputs[1].default_value = [0.8, 0.1, 0.1, 1.0]\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(normal_map.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], normal_map.inputs[1])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_1.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.091\n    colorramp_1.color_ramp.elements[0].position = 0.082\n    colorramp_1.color_ramp.elements[1].position = 0.236\n    musgrave_texture.inputs[2].default_value = 502.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 6.6\n    musgrave_texture.inputs[6].default_value = 0.08\n    musgrave_texture.inputs[7].default_value = 18.7\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n    mapping.vector_type = 'TEXTURE'\n    colorramp_2.color_ramp.elements[1].position = 0.493\n    colorramp_2.color_ramp.elements[1].color = [0.108, 0.102, 0.095, 1.0]\n    colorramp_2.color_ramp.elements.new(0.827)\n    colorramp_2.color_ramp.elements[2].color = [0.546, 0.516, 0.478, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.5\n    principled_bsdf_1.inputs[0].default_value = [1.0, 0.513, 0.072, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.7, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[1].default_value = 4.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], gamma.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[15].default_value = 0.4\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.005, 0.005, 0.005, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    brick_texture.inputs[5].default_value = 0.01\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 1.0\n    gamma.inputs[1].default_value = 1.5\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.4, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    noise_texture_1.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.8, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.2, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 16.0\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[3].default_value = [0.5, 0.1, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[0].position = 0.2\n    colorramp_2.color_ramp.elements[0].color = [0.3, 0.3, 0.9, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.8\n    colorramp_2.color_ramp.elements[1].color = [0.1, 0.1, 0.6, 1.0]\n    noise_texture_2.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[23])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.5\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'OVERLAY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.noise_dimensions = '4D'\n    bright_contrast.inputs[1].default_value = 0.3\n    bright_contrast.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[1].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 1.0\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[5])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[16].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.0, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.05\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.9\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    gamma = nodes.new('ShaderNodeGamma')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(anisotropic_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(gamma.outputs[0], mix_shader_2.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_2.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_2.inputs[2])\n    links.new(noise_texture.outputs[0], gamma.inputs[0])\n    links.new(multiply_1.outputs[0], displacement.inputs[0])\n    links.new(add.outputs[0], multiply_1.inputs[1])\n    links.new(gamma.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 15.0\n    gamma.inputs[1].default_value = 4.0\n    noise_texture.inputs[2].default_value = 50.0\n    diffuse_bsdf.inputs[0].default_value = [0.2, 0.5, 0.1, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.6, 0.6, 0.7, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.4\n    anisotropic_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    anisotropic_bsdf.inputs[3].default_value = 0.4\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    multiply_1.inputs[0].default_value = 0.2\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    add.inputs[2].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.1, 1.0]\n    bump.inputs[0].default_value = 1.5\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 8.0\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    emission = nodes.new('ShaderNodeEmission')\n    blackbody = nodes.new('ShaderNodeBlackbody')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(blackbody.outputs[0], emission.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.391\n    colorramp.color_ramp.elements[1].position = 0.518\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.9\n    emission.inputs[1].default_value = 5.0\n    blackbody.inputs[0].default_value = 1300.0\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].position = 0.041\n    colorramp_1.color_ramp.elements[1].position = 0.268\n    voronoi_texture.inputs[2].default_value = 6.0\n    bump.inputs[0].default_value = 0.5\n    displacement.inputs[2].default_value = 0.125\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[10].default_value = 0.2\n    principled_bsdf.inputs[11].default_value = 0.1\n    principled_bsdf.inputs[12].default_value = 1.0\n    principled_bsdf.inputs[13].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.2\n    mix.inputs[1].default_value = [0.5, 0.7, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 10.0\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [0.6, 0.6, 0.6, 1.0]\n    brick_texture.inputs[4].default_value = 0.1\n    hue_saturation_value.inputs[1].default_value = 1.2\n    hue_saturation_value.inputs[2].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[1], multiply.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.8, 1.0]\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.inputs[1].default_value = 0.1\n    multiply_1.operation = 'MULTIPLY'\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], add.inputs[0])\n    links.new(noise_texture.outputs[1], add.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    mix.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n    links.new(mapping_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[21].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.7, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.1, 0.7, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [2.0, 2.0, 1.0]\n    mapping_1.inputs[1].default_value = [3.0, 3.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], magic_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.6, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = 6.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.4, 0.4, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 1.0\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(musgrave_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump_1.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [0.7, 0.3, 0.2, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.15, 0.15, 0.15, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.5\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_3.color_ramp.elements.new(1.0)\n    colorramp_3.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.5\n    musgrave_texture.inputs[3].default_value = 16.0\n    bump_1.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[9].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    brick_texture.inputs[1].default_value = [0.2, 0.1, 0.04, 1.0]\n    brick_texture.inputs[2].default_value = [0.8, 0.6, 0.4, 1.0]\n    brick_texture.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[8].default_value = 0.1\n    mix_1.blend_type = 'SOFT_LIGHT'\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.5\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    mix_1.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix_1.blend_type = 'ADD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Real_Leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[40].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n    links.new(colorramp_1.outputs[0], add.inputs[1])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.25\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.3\n    musgrave_texture.inputs[2].default_value = 0.2\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.1\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[16].default_value = 2.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    musgrave_texture.inputs[4].default_value = 0.5\n    bump.inputs[0].default_value = 0.15\n    noise_texture.inputs[2].default_value = 5.5\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 2.0\n    voronoi_texture.inputs[2].default_value = 3.0\n    displacement.inputs[2].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], displacement.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.25\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    displacement.inputs[1].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(geometry.outputs[1], add.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    add.inputs[1].default_value = [0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.3, 0.3, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.7, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    brick_texture.inputs[4].default_value = 0.03\n    brick_texture.inputs[5].default_value = 0.5\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[7].default_value = -1.0\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(magic_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], magic_texture.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(subtract.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], subtract.inputs[0])\n    links.new(add.outputs[0], subtract.inputs[1])\n    links.new(magic_texture.outputs[1], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    magic_texture.inputs[2].default_value = 0.5\n    magic_texture.turbulence_depth = 4\n    noise_texture.inputs[5].default_value = 0.4\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    subtract.operation = 'SUBTRACT'\n    multiply.inputs[0].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(checker_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], checker_texture.inputs[0])\n    links.new(add.outputs[0], checker_texture.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    checker_texture.inputs[3].default_value = 12.0\n    hue_saturation_value.inputs[1].default_value = 1.2\n    hue_saturation_value.inputs[2].default_value = 0.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 20.0\n    voronoi_texture.inputs[3].default_value = 0.5\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 0.1\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Glass_with_Dust_and_Damage']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.8, 0.9, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['procedural_marble_tiles']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(layer_weight.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_2.outputs[0], brick_texture.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[2])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[3].default_value = [0.1, 0.1, 0.1]\n    mapping.vector_type = 'TEXTURE'\n    mix.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix.inputs[2].default_value = [0.08, 0.08, 0.08, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 25.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.2, 0.4, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.2\n    brick_texture.inputs[4].default_value = 0.4\n    brick_texture.inputs[5].default_value = 0.1\n    brick_texture.inputs[6].default_value = 0.25\n    brick_texture.inputs[7].default_value = 0.25\n    brick_texture.inputs[8].default_value = 0.25\n    brick_texture.offset = 0.0\n    mix_2.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix_2.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = -4.0\n    wave_texture.inputs[3].default_value = 0.5\n    wave_texture.inputs[4].default_value = 5.0\n    wave_texture.inputs[6].default_value = 4.0\n    wave_texture.bands_direction = 'Z'\n    wave_texture.wave_profile = 'SAW'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], glossy_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[9].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[7])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 1.0\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[17].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 4.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    musgrave_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping_1.inputs[3].default_value = [3.0, 3.0, 3.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    brick_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.4, 0.4, 0.4, 1.0]\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.distance = 'CHEBYCHEV'\n    voronoi_texture.feature = 'F2'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 12.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf.inputs[0].default_value = [0.05, 0.05, 0.05, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].position = 0.4\n    colorramp_2.color_ramp.elements[0].color = [1.0, 0.7, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rocky_Desert']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Glossy_Plastic_Camo']\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(texture_coordinate.outputs[1], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], group.inputs[1])\n    links.new(texture_coordinate.outputs[3], group.inputs[2])\n    links.new(group.outputs[3], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.9\n    principled_bsdf.inputs[9].default_value = 0.1\n    group.inputs[3].default_value = [0.085, 0.075, 0.059, 1.0]\n    group.inputs[14].default_value = 0.5\n    group_1.inputs[5].default_value = -50.0\n    displacement.inputs[1].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.6, 0.4, 0.9, 1.0]\n    layer_weight.inputs[0].default_value = 0.3\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(layer_weight.outputs[1], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 2.0\n    layer_weight.inputs[0].default_value = 0.18\n    bump.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.237, 0.247, 0.276, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.921, 0.912, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[5].default_value = 1.5\n    voronoi_texture.inputs[2].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[1])\n    links.new(rgb_curves.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 12.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(0.7, 0.9)\n    wave_texture.inputs[1].default_value = 6.0\n    wave_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rubber_Camo']\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group.outputs[0], mix_shader.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [0.1, 0.1, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n    group.inputs[1].default_value = 9.5\n    group.inputs[2].default_value = 1.5\n    group.inputs[3].default_value = 0.15\n    diffuse_bsdf.inputs[0].default_value = [0.2, 0.3, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(normal_map.outputs[0], displacement.inputs[3])\n    links.new(bump.outputs[0], normal_map.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    noise_texture.inputs[2].default_value = 50.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 0.3\n    musgrave_texture.inputs[3].default_value = 8.0\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 40.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.7\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[10].default_value = 0.8\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.15\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [1.5, 1.5, 0.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.02\n    bump.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], colorramp_2.inputs[0])\n    links.new(mix.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.5, 0.05, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 25.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.3, 0.8, 1.0]\n    colorramp_2.color_ramp.elements[0].position = 0.4\n    colorramp_2.color_ramp.elements[0].color = [0.75, 0.25, 0.75, 1.0]\n    bump.inputs[0].default_value = 0.05\n    bump.invert = True\n    noise_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 15.0\n    wave_texture.bands_direction = 'Y'\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.8, 0.7, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    brick_texture.inputs[1].default_value = [0.6, 0.4, 0.3, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.02, 0.02, 1.0]\n    noise_texture.inputs[2].default_value = 2.5\n    bump.inputs[0].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(add.outputs[0], bump_1.inputs[2])\n    links.new(layer_weight.outputs[0], add.inputs[0])\n    links.new(texture_coordinate.outputs[1], layer_weight.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.6, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.4\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.05\n    add.inputs[1].default_value = 0.1\n    add.inputs[2].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[1], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.364\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.505\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture_1.inputs[3].default_value = 20.0\n    noise_texture_1.inputs[4].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    brick_texture.inputs[3].default_value = [0.205, 0.205, 0.205, 1.0]\n    brick_texture.inputs[4].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(rgb_curves.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], musgrave_texture.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[2].default_value = [0.3, 0.5, 0.4]\n    principled_bsdf.inputs[3].default_value = [0.2, 0.1, 0.05, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.3]\n    rgb_curves.mapping.curves[3].points.new(0.7, 0.7)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.5\n    musgrave_texture.inputs[2].default_value = 15.0\n    wave_texture.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.4, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 20.0\n    wave_texture.bands_direction = 'Z'\n    mapping.inputs[1].default_value = [0.3, 0.3, 0.0]\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rough_Plastic_Camo']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 1.5\n    group.inputs[7].default_value = 0.67\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.8, 0.6, 0.6, 1.0]\n    brick_texture.inputs[2].default_value = [0.02, 0.02, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 4.0\n    brick_texture.inputs[5].default_value = 0.1\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.7]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[2].default_value = 7.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'F2'\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.4, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.7, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.091\n    colorramp_1.color_ramp.elements[1].position = 0.493\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 32.0\n    colorramp_2.color_ramp.elements[0].position = 0.082\n    colorramp_2.color_ramp.elements[1].position = 0.236\n    voronoi_texture.inputs[2].default_value = 2.8\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    principled_bsdf_1.inputs[0].default_value = [1.0, 0.513, 0.072, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[5].default_value = 0.1\n    brick_texture.inputs[4].default_value = 2.0\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[6].default_value = 0.6\n    brick_texture.inputs[7].default_value = -1.0\n    bump.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    subtract = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(multiply.outputs[0], add_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(musgrave_texture.outputs[0], multiply.inputs[1])\n    links.new(subtract.outputs[0], noise_texture.inputs[1])\n    links.new(musgrave_texture.outputs[0], subtract.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 1.0, 1.0]\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 25.0\n    subtract.inputs[1].default_value = 0.2\n    subtract.operation = 'SUBTRACT'\n    musgrave_texture.inputs[3].default_value = 3.0\n    mapping.inputs[3].default_value = [5.0, 5.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.9, 0.3, 0.3, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.1\n    mix.inputs[1].default_value = [1.0, 0.5, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 0.1\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture_1.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.7, 0.8, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 20.0\n    bump.inputs[0].default_value = 0.2\n    mix_1.inputs[0].default_value = 0.3\n    mix_1.blend_type = 'ADD'\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], brick_texture.inputs[5])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.2\n    brick_texture.inputs[1].default_value = [0.2, 0.1, 0.1, 1.0]\n    add.inputs[1].default_value = 0.01\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[2].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[1])\n    links.new(add.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], add.inputs[0])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.5\n    mix.blend_type = 'OVERLAY'\n    voronoi_texture.inputs[2].default_value = 20.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[10])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.3\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    voronoi_texture.inputs[1].default_value = 5.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    bump.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 10.0\n    bump_1.inputs[0].default_value = 0.1\n    bump_1.invert = True\n    colorramp_2.color_ramp.elements[0].color = [0.4, 0.2, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[1])\n    links.new(mix.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.03, 0.03, 0.03, 1.0]\n    brick_texture.inputs[4].default_value = -8.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    bump.inputs[1].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 3.0\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'ADD'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['TE_DiagonalWeave']\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[1].default_value = 5.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.95\n    colorramp.color_ramp.elements[0].color = [0.05, 0.05, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    mix.inputs[0].default_value = 0.7\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 3.0\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wave_texture.outputs[0], displacement.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 0.3, 0.3, 1.0]\n    displacement.inputs[2].default_value = 0.001\n    wave_texture.inputs[1].default_value = 85.2\n    wave_texture.inputs[2].default_value = 1.0\n    wave_texture.inputs[4].default_value = 171.0\n    wave_texture.inputs[5].default_value = 1.0\n    wave_texture.rings_direction = 'SPHERICAL'\n    wave_texture.wave_type = 'RINGS'\n    mapping.inputs[3].default_value = [1.51, 1.51, 1.51]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[2], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[2].default_value = [0.1, 0.1, 0.1]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.2, 0.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], displacement.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[15].default_value = 0.1\n    brick_texture.inputs[1].default_value = [0.4, 0.15, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.9, 0.1, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.15, 0.15, 0.15, 1.0]\n    brick_texture.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[0].default_value = 0.2\n    displacement.inputs[1].default_value = 0.02\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.1, 0.5, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.3\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.1, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    shader_to_rgb = nodes.new('ShaderNodeShaderToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(shader_to_rgb.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], shader_to_rgb.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.5\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 4.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    bump.inputs[0].default_value = 0.2\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[7])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(bump.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], mix_1.inputs[2])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[4].default_value = 3.0\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[6].default_value = 0.9\n    brick_texture.inputs[7].default_value = -1.0\n    brick_texture.inputs[9].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.7, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.4\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.1, 0.0, 1.0]\n    mix_1.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 0.15\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[14])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 0.5\n    principled_bsdf.inputs[11].default_value = 0.25\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 1.2\n    mapping.inputs[3].default_value = [1.0, 1.0, 10.0]\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 16.0\n    colorramp_2.color_ramp.elements[0].position = 0.5\n    colorramp_2.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(rgb_curves.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_1.outputs[0], rgb_curves.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    hue_saturation_value.inputs[2].default_value = 1.5\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.05\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture_1.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['black_metro_tiles_changeale_colors']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Static_Electricity']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[1], principled_bsdf.inputs[0])\n    links.new(group.outputs[3], principled_bsdf.inputs[9])\n    links.new(group.outputs[2], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[0].default_value = [0.037, 0.037, 0.037, 1.0]\n    group.inputs[3].default_value = 0.5\n    group.inputs[4].default_value = 0.004\n    group_1.inputs[10].default_value = [0.006, 0.0, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 7.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[9].default_value = 0.4\n    colorramp.color_ramp.elements[0].color = [0.02, 0.02, 0.02, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[4].default_value = 0.3\n    noise_texture.inputs[3].default_value = 4.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.8, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    bump.inputs[0].default_value = 0.3\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(wave_texture.outputs[0], musgrave_texture.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.1, 1.0]\n    noise_texture.inputs[1].default_value = 0.1\n    noise_texture.inputs[2].default_value = 4.0\n    bump.inputs[0].default_value = 0.25\n    bump.inputs[1].default_value = 0.01\n    musgrave_texture.inputs[3].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.9, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    multiply = nodes.new('ShaderNodeMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[1])\n    links.new(multiply.outputs[0], mix_shader.inputs[2])\n    links.new(geometry.outputs[0], multiply.inputs[0])\n\n    # Set parameters for each node\n    wave_texture.inputs[3].default_value = 1.0\n    multiply.inputs[1].default_value = 3.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.91\n    noise_texture.inputs[2].default_value = 3.5\n    noise_texture.inputs[3].default_value = 15.0\n    voronoi_texture.inputs[2].default_value = 3.5\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(greater_than.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(greater_than.outputs[0], mix.inputs[0])\n    links.new(map_range.outputs[0], greater_than.inputs[0])\n    links.new(voronoi_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.4\n    hue_saturation_value.inputs[1].default_value = 4.0\n    greater_than.inputs[1].default_value = 0.02\n    greater_than.operation = 'GREATER_THAN'\n    map_range.inputs[1].default_value = 0.45\n    map_range.inputs[2].default_value = 0.46\n    voronoi_texture.inputs[2].default_value = 15.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.5]\n    mapping.inputs[3].default_value = [1.0, 0.6, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture_1.outputs[2], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[2].default_value = 5.5\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture_1.inputs[2].default_value = 4.0\n    bump.inputs[0].default_value = 0.15\n    bump_1.inputs[0].default_value = 0.25\n    colorramp_2.color_ramp.elements[0].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    principled_bsdf_1.inputs[9].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    power = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(power.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], power.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.15, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    bump.inputs[0].default_value = 0.3\n    power.inputs[1].default_value = 3.0\n    power.operation = 'POWER'\n    voronoi_texture.inputs[3].default_value = 0.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump_1.inputs[0].default_value = 0.05\n    noise_texture.inputs[2].default_value = 3.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.7, 0.7, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.1\n    emission.inputs[1].default_value = 300.0\n    mix.inputs[0].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(brick_texture.outputs[1], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], brick_texture.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 8.0\n    mapping.inputs[3].default_value = [1.0, 5.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.2, 0.15, 0.1, 1.0]\n    brick_texture.inputs[5].default_value = 0.002\n    wave_texture.inputs[1].default_value = 9.0\n    wave_texture.inputs[2].default_value = 32.0\n    wave_texture.inputs[3].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    principled_bsdf.inputs[0].default_value = [0.6, 0.2, 0.8, 1.0]\n    principled_bsdf.inputs[5].default_value = 0.5\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 10.0\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[1])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.3, 0.2, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.6\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.7\n    mix.inputs[0].default_value = 0.2\n    mix.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[5].default_value = 0.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.musgrave_dimensions = '4D'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    noise_texture.inputs[2].default_value = 9.0\n    noise_texture.inputs[5].default_value = 2.0\n    noise_texture.noise_dimensions = '4D'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.3, 0.1, 1.0]\n    principled_bsdf.inputs[17].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.15\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 8.0\n    bump_1.inputs[0].default_value = 0.05\n    displacement.inputs[1].default_value = 1.2\n    displacement.inputs[2].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(light_path.outputs[0], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 0.1\n    glass_bsdf.inputs[2].default_value = 1.5\n    glass_bsdf.distribution = 'GGX'\n    principled_bsdf.inputs[0].default_value = [0.5, 0.2, 0.1, 1.0]\n    principled_bsdf.inputs[17].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.25\n    hue_saturation_value.inputs[1].default_value = 1.5\n    hue_saturation_value.inputs[2].default_value = 0.5\n    mix.inputs[1].default_value = [1.0, 0.5, 0.3, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.519\n    noise_texture.inputs[1].default_value = 0.52\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.906\n    colorramp_1.color_ramp.elements[0].position = 0.481\n    colorramp_1.color_ramp.elements[1].position = 0.994\n    musgrave_texture.inputs[2].default_value = 3.5\n    musgrave_texture.inputs[3].default_value = 10.0\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.229\n    bump.inputs[0].default_value = 0.05\n    bump.invert = True\n    colorramp_2.color_ramp.elements[0].position = 0.526\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.2, 0.3, 0.6, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeVectorMath')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(add.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[1])\n    links.new(add_1.outputs[0], multiply.inputs[0])\n    links.new(map_range.outputs[0], multiply.inputs[1])\n    links.new(map_range.outputs[0], add_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], map_range.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.1, 0.2, 0.3, 1.0]\n    multiply.operation = 'MULTIPLY'\n    add_1.inputs[0].default_value = [1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 6.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[1].position = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(wave_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.2\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    bump.inputs[1].default_value = 0.2\n    wave_texture.inputs[1].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.57]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix = nodes.new('ShaderNodeMixRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(fresnel.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    fresnel.inputs[0].default_value = 0.5\n    wave_texture.inputs[1].default_value = 10.0\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mapping = nodes.new('ShaderNodeMapping')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], add.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[1].default_value = [0.1, 0.1, 0.1]\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n    musgrave_texture.inputs[2].default_value = 0.5\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [0.03, 0.005, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.01, 0.02, 1.0]\n    brick_texture.inputs[8].default_value = 5.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.3, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.noise_dimensions = '4D'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], brick_texture.inputs[4])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    brick_texture.inputs[1].default_value = [0.6, 0.5, 0.4, 1.0]\n    brick_texture.inputs[2].default_value = [0.2, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    brick_texture.inputs[6].default_value = 0.0\n    brick_texture.inputs[8].default_value = 0.35\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.voronoi_dimensions = '2D'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.9, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n    voronoi_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], gradient_texture.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 45.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.3, 1.0]\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 0.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.8, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.3\n    noise_texture.inputs[2].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.15\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 30.0\n    glossy_bsdf.inputs[1].default_value = 0.224\n    rgb.outputs[0].default_value = [0.477, 0.465, 0.456, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast_1 = nodes.new('ShaderNodeBrightContrast')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], mix.inputs[1])\n    links.new(bright_contrast_1.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bright_contrast_1.inputs[0])\n    links.new(mix_2.outputs[0], colorramp_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    bright_contrast.inputs[1].default_value = 0.15\n    bright_contrast.inputs[2].default_value = -0.1\n    mix_1.inputs[2].default_value = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    bright_contrast_1.inputs[2].default_value = 0.5\n    colorramp_1.color_ramp.elements[1].position = 0.1\n    mix_2.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[0].position = 0.25\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.85\n    colorramp_2.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.65\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 6.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(add.outputs[0], multiply.inputs[0])\n    links.new(wave_texture.outputs[1], add.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[1].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n    add.inputs[1].default_value = 1.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping.inputs[2].default_value = [0.785, 0.785, 0.0]\n    mapping.inputs[3].default_value = [3.0, 3.0, 3.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_1.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[2].default_value = [0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    mapping.inputs[1].default_value = [0.1, 0.2, 0.1]\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[1], noise_texture.inputs[0])\n    links.new(multiply.outputs[0], hue_saturation_value.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    musgrave_texture.inputs[3].default_value = 12.0\n    musgrave_texture.inputs[4].default_value = 0.8\n    hue_saturation_value.inputs[1].default_value = 0.5\n    hue_saturation_value.inputs[2].default_value = 1.5\n    multiply.inputs[1].default_value = 0.8\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 3.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(rgb_curves.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.75]\n    rgb_curves.mapping.curves[3].points.new(1.0, 0.9)\n    brick_texture.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[4].default_value = 0.2\n    mapping.inputs[2].default_value = [5.0, 5.0, 5.0]\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix_1.inputs[0])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[1], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(rgb_curves.outputs[0], musgrave_texture.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[2].default_value = [0.8, 0.4, 0.2]\n    wave_texture.inputs[1].default_value = 4.0\n    brick_texture.inputs[1].default_value = [1.0, 0.1, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.6\n    musgrave_texture.inputs[2].default_value = 10.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeVectorMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(greater_than.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[1], greater_than.inputs[0])\n    links.new(noise_texture.outputs[0], greater_than.inputs[1])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(invert.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], add.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_1.outputs[0], mix_1.inputs[2])\n    links.new(mix_2.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[1], mix_2.inputs[1])\n    links.new(texture_coordinate_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate_1.outputs[0], noise_texture_2.inputs[0])\n    links.new(noise_texture_3.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.3\n    greater_than.inputs[2].default_value = 0.0\n    greater_than.operation = 'GREATER_THAN'\n    wave_texture.inputs[1].default_value = 18.0\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[3].default_value = 10.0\n    wave_texture.inputs[4].default_value = 6.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 5.0\n    diffuse_bsdf.inputs[0].default_value = [0.03, 0.003, 0.007, 1.0]\n    displacement.inputs[2].default_value = 0.01\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].position = 0.014\n    colorramp_1.color_ramp.elements[1].position = 0.082\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.inputs[5].default_value = 0.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mix_1.inputs[0].default_value = 0.969\n    noise_texture_1.inputs[2].default_value = 10.0\n    mix_2.inputs[0].default_value = 0.963\n    noise_texture_2.inputs[2].default_value = 20.0\n    multiply.inputs[0].default_value = 1.0\n    multiply.inputs[1].default_value = 5.9\n    multiply.operation = 'MULTIPLY'\n    colorramp_2.color_ramp.elements[0].position = 0.418\n    colorramp_2.color_ramp.elements[1].position = 0.464\n    noise_texture_3.inputs[2].default_value = 100.0\n    noise_texture_3.inputs[3].default_value = 15.0\n    noise_texture_3.inputs[4].default_value = 0.842\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.9\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [1.5, 1.5, 0.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.2\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[14].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.4, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.3\n    mix_1.blend_type = 'ADD'\n    colorramp_1.color_ramp.elements[0].color = [0.6, 0.6, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.2\n    principled_bsdf.inputs[7].default_value = 0.06\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.05\n    mix.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    voronoi_texture.inputs[2].default_value = 10.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.15\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], add.inputs[0])\n    links.new(noise_texture_2.outputs[0], add.inputs[1])\n    links.new(texture_coordinate.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.3, 0.7, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 1.0, 0.8, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[3].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Turtle_Shell_Carapace']\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], material_output.inputs[1])\n    links.new(group.outputs[1], material_output.inputs[2])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[6].default_value = 0.75\n    group.inputs[7].default_value = 1.2\n    group.inputs[9].default_value = 0.55\n    group.inputs[16].default_value = [0.2, 0.2, 0.02, 1.0]\n    group.inputs[17].default_value = [0.7, 0.9, 0.4, 1.0]\n    group.inputs[18].default_value = [0.1, 0.4, 0.1, 1.0]\n    group.inputs[19].default_value = 0.9\n    group.inputs[20].default_value = 0.6\n    group.inputs[33].default_value = 0.3\n    group.inputs[34].default_value = 0.6\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.1, 0.1, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[21].default_value = 0.6\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[5].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    mapping.inputs[2].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n\n    # Set parameters for each node\n    wave_texture.inputs[1].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    glossy_bsdf.inputs[1].default_value = 0.9\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(hue_saturation_value.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    principled_bsdf.inputs[0].default_value = [0.2, 0.4, 0.1, 1.0]\n    bump.inputs[0].default_value = 0.3\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    principled_bsdf.inputs[15].default_value = 0.1\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 4.0\n    mapping_1.inputs[3].default_value = [2.0, 2.0, 0.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.1, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 4.0\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 1.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.8\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mix.blend_type = 'ADD'\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(noise_texture.outputs[1], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.91\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.373\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.484\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.329\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.4\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 3.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[1], displacement.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 0.6\n    noise_texture.inputs[2].default_value = 100.0\n    bump.inputs[0].default_value = 0.05\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    displacement.inputs[2].default_value = 0.01\n    noise_texture_1.inputs[1].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 0.1\n    noise_texture_1.inputs[4].default_value = 0.2\n    noise_texture_1.inputs[5].default_value = 0.5\n    noise_texture_1.noise_dimensions = '4D'\n    mapping.inputs[2].default_value = [0.0, 0.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.355\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.4\n    colorramp_2.color_ramp.elements[0].position = 0.5\n    colorramp_2.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], checker_texture.inputs[0])\n    links.new(multiply.outputs[0], checker_texture.inputs[1])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    wave_texture.inputs[1].default_value = 0.15\n    wave_texture.inputs[2].default_value = 50.0\n    wave_texture.inputs[3].default_value = 12.0\n    wave_texture.inputs[5].default_value = 0.6\n    checker_texture.inputs[3].default_value = 8.0\n    multiply.inputs[0].default_value = 2.0\n    multiply.inputs[1].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    brick_texture.inputs[1].default_value = [0.3, 0.3, 0.3, 1.0]\n    brick_texture.inputs[3].default_value = [0.9, 0.9, 0.9, 1.0]\n    brick_texture.inputs[5].default_value = 0.1\n    brick_texture.inputs[6].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    add = nodes.new('ShaderNodeMath')\n    white_noise_texture = nodes.new('ShaderNodeTexWhiteNoise')\n    ceil = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    add_1 = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], multiply.inputs[0])\n    links.new(combine_xyz.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], combine_xyz.inputs[0])\n    links.new(separate_xyz.outputs[1], combine_xyz.inputs[1])\n    links.new(white_noise_texture.outputs[0], add.inputs[0])\n    links.new(separate_xyz.outputs[0], add.inputs[1])\n    links.new(ceil.outputs[0], white_noise_texture.inputs[0])\n    links.new(multiply_1.outputs[0], ceil.inputs[0])\n    links.new(separate_xyz.outputs[1], multiply_1.inputs[0])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], mix_1.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_2.outputs[0], wave_texture.inputs[0])\n    links.new(wave_texture_1.outputs[0], mix_2.inputs[1])\n    links.new(texture_coordinate.outputs[2], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], add_1.inputs[0])\n    links.new(brick_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    brick_texture.inputs[4].default_value = 5.1\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.squash = 2.95\n    add.inputs[2].default_value = 0.0\n    white_noise_texture.noise_dimensions = '4D'\n    ceil.inputs[1].default_value = 8.0\n    ceil.operation = 'CEIL'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.57]\n    colorramp.color_ramp.elements[0].color = [0.199, 0.103, 0.077, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.044, 0.029, 0.019, 1.0]\n    wave_texture.inputs[1].default_value = 20.0\n    wave_texture.inputs[2].default_value = 9.8\n    wave_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[5].default_value = 0.723\n    mix_2.inputs[0].default_value = 0.983\n    wave_texture_1.inputs[1].default_value = 25.0\n    wave_texture_1.inputs[2].default_value = 2.5\n    wave_texture_1.inputs[3].default_value = 16.0\n    add_1.inputs[1].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].color = [0.38, 0.38, 0.38, 1.0]\n    bump.inputs[0].default_value = 0.225\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Fabric_2_Camo']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 2.5\n    group.inputs[3].default_value = [0.5, 0.5, 0.5, 1.0]\n    group.inputs[5].default_value = [0.1, 0.3, 0.6, 1.0]\n    group.inputs[6].default_value = [0.05, 0.05, 0.05, 1.0]\n    group.inputs[7].default_value = 0.8\n    group.inputs[8].default_value = 35.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    scale = nodes.new('ShaderNodeVectorMath')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], hue_saturation_value.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(scale.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[0])\n    links.new(scale.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.25\n    principled_bsdf.inputs[4].default_value = 1.0\n    mix.inputs[0].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.859, 0.235, 0.086, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    hue_saturation_value.inputs[1].default_value = 0.5\n    scale.operation = 'SCALE'\n    multiply.inputs[0].default_value = 2.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb_curves.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.7\n    mix.inputs[0].default_value = 0.7\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], checker_texture.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [1.0, 0.5, 0.5]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], voronoi_texture.inputs[4])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[19].default_value = [0.8, 0.2, 0.1, 1.0]\n    brick_texture.inputs[6].default_value = 1.5\n    brick_texture.inputs[8].default_value = 2.5\n    brick_texture.offset = 0.1\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 3.0\n    mix.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mix_2.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[2])\n    links.new(rgb_curves.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[3].default_value = [1.0, 1.0, 5.0]\n    mix_1.inputs[1].default_value = [0.1, 0.1, 0.5, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n    bump.inputs[0].default_value = 0.2\n    rgb_curves.mapping.curves[3].points[1].location = [0.3, 0.2]\n    rgb_curves.mapping.curves[3].points.new(0.8, 1.0)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[2].default_value = 100.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.5, 0.5, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    mix.inputs[0].default_value = 0.3\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], checker_texture.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.6\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[1].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 6.0\n    wave_texture.inputs[3].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    fresnel = nodes.new('ShaderNodeFresnel')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(fresnel.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    emission.inputs[0].default_value = [1.0, 0.8, 0.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[20].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    add.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    gamma = nodes.new('ShaderNodeGamma')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.inputs[12].default_value = 0.1\n    principled_bsdf.inputs[13].default_value = 1.0\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.7, 0.8, 0.9, 1.0]\n    noise_texture.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.1\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    gamma.inputs[1].default_value = 1.5\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.35\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.8, 0.8, 1.0]\n    voronoi_texture.inputs[2].default_value = -4.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    musgrave_texture.inputs[5].default_value = 5.0\n    checker_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[4].default_value = 0.7\n    noise_texture.inputs[5].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.2, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    voronoi_texture.inputs[1].default_value = 0.5\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.3, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.6, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.8, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[3])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[19].default_value = [0.2, 0.3, 0.4, 1.0]\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp.color_ramp.elements[0].color = [0.9, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[2].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[3].default_value = [0.5, 0.4, 0.2, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.8\n    mix.inputs[2].default_value = [0.3, 0.35, 0.4, 1.0]\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.7, 0.8, 0.9, 1.0]\n    noise_texture.inputs[1].default_value = 3.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[5].default_value = 0.5\n    mapping.inputs[2].default_value = [0.0, 0.5, 0.0]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.15\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Dry_Cracked_Soil']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[1], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[5])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.591\n    principled_bsdf.inputs[8].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[6].default_value = 0.05\n    noise_texture.inputs[2].default_value = 30.0\n    displacement.inputs[1].default_value = 1.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.15\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.2, 0.3, 0.4, 1.0]\n    bump.inputs[1].default_value = 0.15\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], displacement.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.1\n    brick_texture.inputs[1].default_value = [0.5, 0.3, 0.1, 1.0]\n    brick_texture.inputs[2].default_value = [0.8, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.05\n    displacement.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.02\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[1].default_value = [0.007, 0.02, 0.008, 1.0]\n    brick_texture.inputs[2].default_value = [0.19, 0.092, 0.045, 1.0]\n    brick_texture.inputs[3].default_value = [0.03, 0.02, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 7.0\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.3\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(layer_weight.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    mapping.inputs[3].default_value = [0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(add.outputs[0], multiply.inputs[0])\n    links.new(wave_texture.outputs[1], add.inputs[0])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 0.3\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    add.inputs[1].default_value = 1.0\n    add.inputs[2].default_value = 0.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    rgb.outputs[0].default_value = [0.778, 0.828, 0.828, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(checker_texture.outputs[0], glossy_bsdf.inputs[0])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.9, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.3\n    checker_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[4].color = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.2, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.2\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.8\n    displacement.inputs[1].default_value = 0.1\n    displacement.inputs[2].default_value = 0.001\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n    voronoi_texture.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(checker_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], checker_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(brick_texture.outputs[1], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[3], multiply.inputs[1])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(rgb_curves.outputs[0], voronoi_texture.inputs[1])\n    links.new(voronoi_texture.outputs[2], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.818, 0.78, 0.827, 1.0]\n    brick_texture.inputs[2].default_value = [0.025, 0.0, 0.4, 1.0]\n    brick_texture.inputs[3].default_value = [0.367, 0.018, 0.212, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    brick_texture.inputs[5].default_value = 0.03\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.inputs[4].default_value = 4.1\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'F2'\n    mapping_1.inputs[3].default_value = [0.5, 0.5, 0.5]\n    rgb_curves.inputs[0].default_value = 0.5\n    rgb_curves.mapping.curves[3].points[1].location = [0.6, 0.8]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.04\n    voronoi_texture.inputs[2].default_value = 20.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 0.5, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    invert.inputs[1].default_value = [0.1, 0.2, 0.3, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[8].default_value = 0.35\n    principled_bsdf.inputs[9].default_value = 0.25\n    principled_bsdf.inputs[10].default_value = 0.15\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[1].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.4\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.7, 0.7, 1.0]\n    bump_1.inputs[0].default_value = 0.04\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix_1.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 1.0\n    mix_1.inputs[0].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[4], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture_1.inputs[2].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(wave_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 1.0\n    wave_texture.inputs[1].default_value = 4.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], principled_bsdf.inputs[4])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.6\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.5, 0.3, 1.0]\n    noise_texture.inputs[1].default_value = 3.0\n    bump.inputs[1].default_value = 0.1\n    transparent_bsdf.inputs[0].default_value = [0.8, 0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], layer_weight.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(mix.outputs[0], bright_contrast.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.2, 1.0]\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.5]\n    principled_bsdf.inputs[7].default_value = 0.8\n    bright_contrast.inputs[2].default_value = 1.5\n    noise_texture.inputs[5].default_value = 0.4\n    mix.inputs[1].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.6\n    principled_bsdf.inputs[17].default_value = 0.5\n    principled_bsdf.inputs[18].default_value = 0.25\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.2, 0.6, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    multiply.inputs[0].default_value = 5.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.9, 0.5, 1.0]\n    brick_texture.inputs[1].default_value = [0.6, 0.3, 0.2, 1.0]\n    brick_texture.inputs[8].default_value = 6.0\n    mapping.inputs[1].default_value = [0.2, 0.2, 0.2]\n    voronoi_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 1.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rooftile_generator']\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_2.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[9])\n    links.new(normal_map.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(group.outputs[2], normal_map.inputs[1])\n    links.new(colorramp_2.outputs[0], principled_bsdf_2.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_2.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.519\n    noise_texture.inputs[1].default_value = 0.41\n    noise_texture.inputs[2].default_value = 1.1\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.806\n    colorramp_1.color_ramp.elements[0].position = 0.481\n    colorramp_1.color_ramp.elements[1].position = 0.994\n    musgrave_texture.inputs[2].default_value = 3.3\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = [5.0, 3.0, 0.0]\n    group.inputs[2].default_value = 10.0\n    group.inputs[3].default_value = [0.319, 0.132, 0.06, 1.0]\n    group.inputs[4].default_value = 1.4\n    group.inputs[5].default_value = 0.0\n    group.inputs[6].default_value = 0.4\n    group.inputs[7].default_value = 0.6\n    group.inputs[8].default_value = 0.3\n    group.inputs[9].default_value = 1.0\n    group.inputs[10].default_value = 0.6\n    group.inputs[11].default_value = 0.7\n    group.inputs[12].default_value = 0.7\n    group.inputs[13].default_value = 0.3\n    normal_map.space = 'OBJECT'\n    principled_bsdf_1.inputs[0].default_value = [0.66, 0.66, 0.66, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.606\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    principled_bsdf_2.inputs[9].default_value = 1.0\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].position = 0.526\n    colorramp_2.color_ramp.elements[0].color = [0.387, 0.097, 0.007, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.548\n    colorramp_2.color_ramp.elements[1].color = [0.285, 0.034, 0.004, 1.0]\n    colorramp_2.color_ramp.elements.new(0.619)\n    colorramp_2.color_ramp.elements[2].color = [0.019, 0.007, 0.002, 1.0]\n    bump.inputs[0].default_value = 0.612\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(separate_xyz.outputs[2], mix.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    subtract = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(subtract.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], subtract.inputs[0])\n    links.new(noise_texture.outputs[0], subtract.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[13].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.3, 0.3, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    voronoi_texture.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.9, 0.9, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.6\n    principled_bsdf.inputs[16].default_value = 1.5\n    wave_texture.inputs[1].default_value = 30.0\n    wave_texture.inputs[2].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[2].default_value = [0.1, 0.1, 0.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(magic_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 2.0\n    magic_texture.inputs[1].default_value = 2.0\n    magic_texture.inputs[2].default_value = 5.0\n    magic_texture.turbulence_depth = 3\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], musgrave_texture.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.6\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 0.1\n    bump.inputs[0].default_value = 0.15\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.0, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.7, 0.9, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.1\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.8, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[12].default_value = 0.1\n    layer_weight.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 100.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.bands_direction = 'Z'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture_1.inputs[2].default_value = 50.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(gradient_texture.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(rgb_curves.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 5.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[3].default_value = 1.0\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    gamma = nodes.new('ShaderNodeGamma')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(gamma.outputs[0], mix.inputs[1])\n    links.new(bump.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 1.0\n    gamma.inputs[1].default_value = 1.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(multiply.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.05, 0.05, 0.05, 1.0]\n    brick_texture.inputs[4].default_value = -5.0\n    multiply.inputs[1].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 15.0\n    voronoi_texture.inputs[2].default_value = 4.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    subtract = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[3])\n    links.new(mapping.outputs[0], bump.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(subtract.outputs[0], glass_bsdf.inputs[2])\n    links.new(add.outputs[0], glass_bsdf.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    glass_bsdf.inputs[0].default_value = [1.0, 1.0, 0.8, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.1\n    subtract.inputs[0].default_value = 1.0\n    subtract.inputs[1].default_value = 0.2\n    subtract.operation = 'SUBTRACT'\n    add.inputs[0].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Crumpled_Metal']\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Abstract_Emission_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group_1.outputs[1], material_output.inputs[2])\n    links.new(mix.outputs[0], group.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[13].default_value = 1.66\n    group.inputs[14].default_value = 1.85\n    mix.inputs[0].default_value = 0.15\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    rgb.outputs[0].default_value = [0.462, 0.381, 0.054, 1.0]\n    mapping.inputs[2].default_value = [2.0, 2.0, 2.0]\n    group_1.inputs[5].default_value = 5.0\n    group_1.inputs[8].default_value = [1.0, 0.114, 0.014, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[2].default_value = [0.0, 2.0, 0.0]\n    colorramp.color_ramp.elements[0].color = [0.0, 0.8, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.1, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 2.0\n    mix_1.inputs[0].default_value = 0.7\n    voronoi_texture.inputs[2].default_value = 1000.0\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(emission.outputs[0], mix_shader_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.2, 0.3, 0.8, 1.0]\n    principled_bsdf.inputs[21].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[5].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    emission.inputs[0].default_value = [1.0, 1.0, 0.0, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[18].default_value = 0.5\n    noise_texture.inputs[2].default_value = 1.5\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.5, 0.3, 0.2, 1.0]\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [0.2, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[8].default_value = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    mix.inputs[0].default_value = 0.6\n    noise_texture.inputs[3].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(checker_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply_1.outputs[0], displacement.inputs[0])\n    links.new(rgb_to_bw.outputs[0], multiply_1.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[1])\n    links.new(colorramp.outputs[0], rgb_to_bw.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    diffuse_bsdf.inputs[0].default_value = [1.0, 0.5, 0.5, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.5, 0.5, 1.0, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Hexagon_pattern']\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(group.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n    group.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['metal_mesh_grill_001']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Terracotta_Tile']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[2], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[6])\n    links.new(group.outputs[4], principled_bsdf.inputs[9])\n    links.new(group.outputs[0], principled_bsdf.inputs[21])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[1].default_value = 8.0\n    principled_bsdf.inputs[14].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[3].default_value = [3.0, 3.0, 3.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_1.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.2\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.05\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp_1.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_3.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.3, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.9, 0.8, 0.7, 1.0]\n    noise_texture.inputs[3].default_value = 1.5\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp_2.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_3.color_ramp.elements[0].color = [0.4, 0.2, 0.1, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [0.7, 0.5, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Textile_Pattern']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rainbow_Square_Tiles']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], group.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n    group_1.inputs[9].default_value = 0.35\n    group_1.inputs[24].default_value = 0.15\n    group_1.inputs[26].default_value = 0.8\n    group_1.inputs[27].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[20])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(mix_1.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_2.outputs[0], musgrave_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix_2.inputs[1])\n    links.new(scale.outputs[0], mix_2.inputs[2])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.591\n    principled_bsdf.inputs[3].default_value = [0.7, 0.3, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[19].default_value = [0.2, 0.5, 0.9, 1.0]\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    wave_texture.inputs[1].default_value = 3.0\n    scale.operation = 'SCALE'\n    multiply.inputs[1].default_value = 15.0\n    multiply.operation = 'MULTIPLY'\n    mix_1.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    musgrave_texture.inputs[1].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 4.0\n    musgrave_texture.inputs[6].default_value = 0.5\n    musgrave_texture.inputs[7].default_value = 3.0\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    mix_2.inputs[0].default_value = 0.8\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].position = 0.4\n    colorramp_2.color_ramp.elements[1].position = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[1], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    wave_texture.inputs[2].default_value = 12.0\n    wave_texture.inputs[3].default_value = 3.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    wave_texture.wave_type = 'RINGS'\n    mix_1.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix_1.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.9\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 0.5\n    noise_texture.inputs[4].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Plank']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[18].default_value = [0.725, 0.388, 0.111, 1.0]\n    group.inputs[38].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.627\n    principled_bsdf.inputs[3].default_value = [1.0, 0.8, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.8\n    colorramp.color_ramp.elements[1].position = 0.727\n    noise_texture.inputs[3].default_value = 7.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture.inputs[5].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].position = 0.236\n    colorramp_1.color_ramp.elements[1].position = 0.765\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(bright_contrast.outputs[0], checker_texture.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    checker_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[3].default_value = 8.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 0.0]\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 1.5\n    rgb.outputs[0].default_value = [0.2, 0.4, 0.6, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(anisotropic_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.5, 1.0]\n    anisotropic_bsdf.inputs[0].default_value = [0.9, 0.7, 0.6, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[2].color = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    colorramp_1.color_ramp.elements[0].position = 0.25\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.75\n    brick_texture.inputs[2].default_value = [0.5, 0.3, 0.3, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Abstract_Emission_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[5].default_value = 5.0\n    group.inputs[8].default_value = [1.0, 0.114, 0.014, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.6, 0.4, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    mix.inputs[1].default_value = [0.0, 0.1, 0.3, 1.0]\n    mix.inputs[2].default_value = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[7])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(ambient_occlusion.outputs[1], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 2.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 3.0\n    voronoi_texture.inputs[2].default_value = 1.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bright_contrast.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[10])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    voronoi_texture.inputs[2].default_value = 2.0\n    bump.inputs[1].default_value = 0.1\n    emission.inputs[0].default_value = [0.0, 1.0, 1.0, 1.0]\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.8\n    principled_bsdf.inputs[17].default_value = 1.0\n    hue_saturation_value.inputs[1].default_value = 1.2\n    add.inputs[0].default_value = 0.3\n    add.inputs[1].default_value = 0.4\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.6, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    multiply.inputs[0].default_value = 2.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[1].default_value = 0.1\n    mapping.inputs[3].default_value = [0.2, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.1\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[20])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[18].default_value = 0.2\n    mix.inputs[0].default_value = 0.75\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.223\n    colorramp.color_ramp.elements[1].color = [0.069, 0.003, 0.25, 1.0]\n    colorramp.color_ramp.elements.new(0.432)\n    colorramp.color_ramp.elements[2].color = [0.02, 0.114, 0.312, 1.0]\n    colorramp.color_ramp.elements.new(0.645)\n    colorramp.color_ramp.elements[3].color = [0.222, 0.192, 0.375, 1.0]\n    colorramp.color_ramp.elements.new(0.791)\n    colorramp.color_ramp.elements[4].color = [0.135, 0.155, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[5].color = [0.015, 0.39, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.923\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    colorramp_2.color_ramp.elements[0].position = 0.041\n    colorramp_2.color_ramp.elements[1].position = 0.314\n    bump.inputs[0].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 15.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[20])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(fresnel.outputs[0], mix_shader.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 17.0\n    noise_texture.inputs[5].default_value = 0.46\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    multiply.inputs[1].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 25.0\n    glossy_bsdf.inputs[1].default_value = 0.15\n    fresnel.inputs[0].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(add.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.5, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 3.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    add.inputs[0].default_value = 0.3\n    voronoi_texture.distance = 'MINKOWSKI'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(noise_texture.outputs[1], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(bump.outputs[0], layer_weight.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[17].default_value = 0.91\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.4\n    noise_texture.inputs[5].default_value = 2.0\n    wave_texture.inputs[1].default_value = 7.0\n    wave_texture.inputs[2].default_value = 20.0\n    wave_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[5].default_value = 0.4\n    wave_texture.inputs[6].default_value = 0.4\n    wave_texture.bands_direction = 'DIAGONAL'\n    colorramp.color_ramp.color_mode = 'HSL'\n    colorramp.color_ramp.elements[0].position = 0.223\n    colorramp.color_ramp.elements[0].color = [1.0, 0.388, 0.388, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.318\n    colorramp.color_ramp.elements[1].color = [0.073, 1.0, 0.57, 1.0]\n    colorramp.color_ramp.elements.new(0.532)\n    colorramp.color_ramp.elements[2].color = [0.031, 1.0, 0.456, 1.0]\n    colorramp.color_ramp.elements.new(0.795)\n    colorramp.color_ramp.elements[3].color = [0.301, 0.419, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[4].color = [0.746, 0.427, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.1\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 3.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.5\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.8, 0.6, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], bump.inputs[3])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 1.0\n    principled_bsdf.inputs[3].default_value = [0.02, 0.18, 0.01, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    ambient_occlusion.inside = True\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.3, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[3])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[20].default_value = 2.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.5, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.5, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.8, 1.0]\n    musgrave_texture.inputs[2].default_value = 8.0\n    musgrave_texture.inputs[3].default_value = 14.0\n    bump.inputs[0].default_value = 0.15\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 8.0\n    displacement.inputs[2].default_value = 0.2\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator_V2']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[31].default_value = 0.25\n    mapping.inputs[3].default_value = [1.5, 1.5, 1.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.9, 0.3, 1.0]\n    musgrave_texture.inputs[3].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[1].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump_1.outputs[0], principled_bsdf.inputs[23])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[10].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.inputs[3].default_value = 0.8\n    mapping.inputs[3].default_value = [10.0, 0.0, 0.0]\n    bump.inputs[0].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.05\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.3, 0.3, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rainbow_Square_Tiles']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[9].default_value = 0.15\n    group.inputs[24].default_value = 0.2\n    group.inputs[27].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(checker_texture.outputs[1], bump.inputs[2])\n    links.new(add.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(checker_texture.outputs[1], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.3\n    checker_texture.inputs[3].default_value = 10.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.0]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.2\n    displacement.inputs[2].default_value = 0.15\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(invert.outputs[0], bump.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.inputs[1].default_value = [0.3, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    invert.inputs[0].default_value = 0.2\n    invert.inputs[1].default_value = [1.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[4].default_value = 0.35\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 4.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.45\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    brick_texture.inputs[5].default_value = 0.075\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(invert.outputs[0], bump.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.2\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.inputs[1].default_value = [0.3, 0.5, 0.7, 1.0]\n    mix.inputs[2].default_value = [0.85, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    add.inputs[0].default_value = 2.0\n    add.inputs[1].default_value = 1.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    invert.inputs[0].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], hue_saturation_value.inputs[4])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(bright_contrast.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(wave_texture.outputs[0], bright_contrast.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    hue_saturation_value.inputs[2].default_value = 0.5\n    noise_texture.inputs[1].default_value = 2.0\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[5].default_value = 1.0\n    noise_texture.noise_dimensions = '4D'\n    mapping.inputs[2].default_value = [1.0, 1.0, 0.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 1.0, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bright_contrast.inputs[1].default_value = 0.5\n    bright_contrast.inputs[2].default_value = 0.2\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 6.0\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[5].default_value = 0.3\n    glass_bsdf.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(musgrave_texture.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(checker_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    mix.blend_type = 'ADD'\n    brick_texture.inputs[4].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 6.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Translucent_Plastic_Camo']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Glass_Curtain_Wall']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.8, 0.3, 0.1, 1.0]\n    group.inputs[1].default_value = [0.4, 0.2, 0.1, 1.0]\n    group.inputs[2].default_value = [0.12, 0.9, 0.05, 1.0]\n    group.inputs[3].default_value = [0.01, 0.3, 0.01, 1.0]\n    group.inputs[4].default_value = 0.85\n    group.inputs[5].default_value = -45.0\n    group_1.inputs[0].default_value = 2.0\n    group_1.inputs[1].default_value = 0.02\n    group_1.inputs[4].default_value = 0.8\n    group_1.inputs[8].default_value = [0.2, 0.4, 0.8, 1.0]\n    group_1.inputs[9].default_value = 0.6\n    group_1.inputs[11].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(layer_weight.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.0\n    mix.inputs[0].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.1, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(normal_map.outputs[0], bump.inputs[3])\n    links.new(mix.outputs[0], normal_map.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[1].default_value = 0.1\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[4].default_value = 0.1\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    principled_bsdf.inputs[0].default_value = [0.2, 0.3, 0.5, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.764\n    principled_bsdf.inputs[7].default_value = 0.336\n    principled_bsdf.inputs[12].default_value = 0.573\n    principled_bsdf.inputs[14].default_value = 0.814\n    principled_bsdf.inputs[16].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.527\n    colorramp.color_ramp.elements[0].color = [0.027, 0.036, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.017, 0.103, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.4\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.541\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = -2.9\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.2\n    musgrave_texture.inputs[5].default_value = 2.3\n    mapping.inputs[1].default_value = [4.8, 0.0, 0.0]\n    mapping.inputs[3].default_value = [45.5, 46.7, 1.0]\n    colorramp_2.color_ramp.elements[0].position = 0.997\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.002, 0.114, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(noise_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 12.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[1].default_value = 4.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[6].default_value = 0.15\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[14].default_value = 0.8\n    colorramp.color_ramp.color_mode = 'HSL'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.6, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.3, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.15\n    bump.inputs[1].default_value = 0.05\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture.inputs[3].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n    links.new(geometry.outputs[1], invert.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[19].default_value = [0.2, 0.4, 0.6, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    voronoi_texture.distance = 'MINKOWSKI'\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    noise_texture.inputs[2].default_value = 16.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.6]\n    rgb_curves.mapping.curves[3].points.new(0.7, 0.8)\n    rgb_curves.mapping.curves[3].points.new(0.9, 0.4)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    mix.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    multiply = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], voronoi_texture.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[18].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 0.5\n    multiply.inputs[0].default_value = 2.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    mix.inputs[1].default_value = [1.0, 0.0, 0.0, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 1.0, 1.0]\n    hue_saturation_value.inputs[1].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.85\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[10].default_value = 0.4\n    principled_bsdf.inputs[11].default_value = 0.4\n    brick_texture.inputs[1].default_value = [1.0, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[5].default_value = 0.15\n    brick_texture.inputs[6].default_value = 0.01\n    mapping.inputs[3].default_value = [0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[15].default_value = 0.07\n    mix.inputs[2].default_value = [0.5, 0.3, 0.2, 1.0]\n    mix_1.inputs[0].default_value = 0.3\n    wave_texture.inputs[1].default_value = 8.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.wave_type = 'RINGS'\n    mapping.inputs[3].default_value = [1.0, 2.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[5].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[2].default_value = 2.5\n    noise_texture_1.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.05\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    principled_bsdf_1.inputs[1].default_value = 0.25\n    principled_bsdf_1.inputs[3].default_value = [0.15, 0.15, 0.15, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[8].default_value = 0.488\n    principled_bsdf.inputs[9].default_value = 0.747\n    principled_bsdf.inputs[10].default_value = 0.145\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.65\n    colorramp.color_ramp.elements[1].color = [0.2, 0.4, 0.8, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.322\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.623\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.4, 1.0]\n    voronoi_texture.inputs[2].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[0].default_value = [1.0, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.4, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 0.2\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.inputs[5].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.0]\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    gamma = nodes.new('ShaderNodeGamma')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(gamma.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[1].default_value = 2.0\n    musgrave_texture.inputs[2].default_value = 3.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    gamma.inputs[1].default_value = 0.6\n    add.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['procedural_outdoor_tiles']\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    rgb_2 = nodes.new('ShaderNodeRGB')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(group.outputs[3], colorramp.inputs[0])\n    links.new(rgb.outputs[0], group.inputs[0])\n    links.new(rgb_1.outputs[0], group.inputs[1])\n    links.new(rgb_2.outputs[0], group.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(group.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(group.outputs[1], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(group.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.8\n    group.inputs[4].default_value = [7.0, 7.0, 7.0]\n    rgb.outputs[0].default_value = [0.3, 0.1, 0.05, 1.0]\n    rgb_1.outputs[0].default_value = [0.25, 0.07, 0.03, 1.0]\n    rgb_2.outputs[0].default_value = [0.35, 0.1, 0.05, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.75\n    colorramp_1.color_ramp.elements[1].position = 0.95\n    principled_bsdf.inputs[7].default_value = 0.045\n    principled_bsdf.inputs[8].default_value = 0.215\n    noise_texture.inputs[2].default_value = 250.0\n    colorramp_2.color_ramp.elements[0].position = 0.5\n    colorramp_2.color_ramp.elements[1].position = 0.7\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.7, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.8, 0.1, 1.0]\n    musgrave_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture_1.inputs[2].default_value = 12.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(layer_weight.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 50.0\n    mapping.vector_type = 'TEXTURE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.4\n    noise_texture.inputs[3].default_value = 20.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.01\n    voronoi_texture.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    principled_bsdf.inputs[3].default_value = [0.1, 0.5, 0.8, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 15.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wrap = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wrap.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], wrap.inputs[0])\n    links.new(noise_texture.outputs[1], wrap.inputs[1])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.9\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    musgrave_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(invert.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.8, 0.4, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    mix_1.blend_type = 'OVERLAY'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.7, 0.6, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.5\n    colorramp_2.color_ramp.elements[0].color = [0.3, 0.7, 0.4, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.75\n    colorramp_2.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.2\n    principled_bsdf.inputs[3].default_value = [0.4, 0.2, 0.6, 1.0]\n    checker_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 8.0\n    bump.inputs[0].default_value = 0.03\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    add = nodes.new('ShaderNodeMath')\n    white_noise_texture = nodes.new('ShaderNodeTexWhiteNoise')\n    ceil = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_2 = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    add_1 = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], multiply.inputs[0])\n    links.new(combine_xyz.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], combine_xyz.inputs[0])\n    links.new(separate_xyz.outputs[1], combine_xyz.inputs[1])\n    links.new(white_noise_texture.outputs[0], add.inputs[0])\n    links.new(separate_xyz.outputs[0], add.inputs[1])\n    links.new(ceil.outputs[0], white_noise_texture.inputs[0])\n    links.new(multiply_1.outputs[0], ceil.inputs[0])\n    links.new(separate_xyz.outputs[1], multiply_1.inputs[0])\n    links.new(multiply_2.outputs[0], multiply_1.inputs[1])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], mix_1.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], add_1.inputs[0])\n    links.new(brick_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.2, 0.5, 0.7, 1.0]\n    mix.blend_type = 'SCREEN'\n    multiply.inputs[1].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    brick_texture.inputs[2].default_value = [0.2, 0.0, 0.0, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    add.inputs[2].default_value = 0.1\n    white_noise_texture.noise_dimensions = '4D'\n    ceil.inputs[1].default_value = 4.0\n    ceil.inputs[2].default_value = 0.0\n    ceil.operation = 'CEIL'\n    multiply_1.inputs[2].default_value = 1.0\n    multiply_1.operation = 'MULTIPLY'\n    mapping.inputs[2].default_value = [0.0, 0.0, 1.5]\n    multiply_2.inputs[0].default_value = 4.0\n    multiply_2.inputs[1].default_value = 5.0\n    multiply_2.operation = 'MULTIPLY'\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.5, 0.8, 0.5, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 5.0\n    wave_texture.inputs[3].default_value = 10.0\n    add_1.inputs[2].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].color = [0.6, 0.6, 0.6, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.4\n    mix.inputs[1].default_value = [0.3, 0.3, 0.3, 1.0]\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    mix.inputs[0].default_value = 0.75\n    voronoi_texture.inputs[2].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n    musgrave_texture.inputs[3].default_value = 6.0\n    mapping.inputs[1].default_value = [2.0, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Cartoon_Water']\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[9].default_value = 0.15\n    colorramp.color_ramp.elements[0].position = 0.23\n    colorramp.color_ramp.elements[0].color = [0.7, 0.9, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.4, 1.0, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.7)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.2, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.8\n    noise_texture.inputs[5].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.03\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[4].default_value = 2.0\n    brick_texture.inputs[5].default_value = 0.003\n    brick_texture.inputs[6].default_value = 0.8\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    colorramp.color_ramp.elements[0].color = [0.6, 0.4, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rock_Generator']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[17].default_value = [0.056, 0.056, 0.056, 1.0]\n    group.inputs[18].default_value = 0.075\n    group.inputs[22].default_value = 0.005\n    group.inputs[24].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix_shader.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.1, 0.8, 0.4, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(checker_texture.outputs[1], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 5.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[5].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n    checker_texture.inputs[3].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[6].default_value = 0.8\n    brick_texture.inputs[8].default_value = 3.0\n    brick_texture.inputs[9].default_value = 3.0\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.5\n    glossy_bsdf.inputs[0].default_value = [0.05, 0.05, 0.05, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 1.0, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 4.0\n    bump.inputs[1].default_value = 0.2\n    noise_texture_2.inputs[2].default_value = 10.0\n    glossy_bsdf.inputs[1].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves_3 = nodes.new('ShaderNodeRGBCurve')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[7], colorramp_1.inputs[0])\n    links.new(mix_3.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(invert.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mix_2.outputs[0], invert.inputs[1])\n    links.new(mix_3.outputs[0], rgb_curves_2.inputs[1])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(mix_4.outputs[0], colorramp_2.inputs[0])\n    links.new(rgb_curves_3.outputs[0], mix_4.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_4.inputs[2])\n    links.new(mix_5.outputs[0], rgb_curves_3.inputs[1])\n    links.new(noise_texture_2.outputs[0], mix_5.inputs[1])\n    links.new(noise_texture_3.outputs[0], mix_5.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_3.inputs[0])\n    links.new(colorramp_3.outputs[0], displacement.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.8\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[2].default_value = [0.768, 0.532, 0.204, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'OVERLAY'\n    mix_2.inputs[0].default_value = 0.95\n    mix_2.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    ambient_occlusion.only_local = True\n    colorramp_1.color_ramp.elements[0].position = 0.495\n    colorramp_1.color_ramp.elements[1].position = 0.555\n    rgb_curves.mapping.curves[3].points[1].location = [0.382, 0.269]\n    rgb_curves.mapping.curves[3].points.new(0.677, 0.681)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [1.0, 0.8, 0.4]\n    noise_texture_1.inputs[2].default_value = 25.0\n    noise_texture_1.inputs[3].default_value = 14.0\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.745, 0.288]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.455, 0.213]\n    rgb_curves_2.mapping.curves[3].points.new(0.745, 0.537)\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.05\n    colorramp_2.color_ramp.elements[0].position = 0.005\n    colorramp_2.color_ramp.elements[1].position = 0.891\n    mix_4.inputs[0].default_value = 1.0\n    mix_4.blend_type = 'DARKEN'\n    rgb_curves_3.mapping.curves[3].points[1].location = [0.418, 0.262]\n    rgb_curves_3.mapping.curves[3].points.new(0.573, 0.737)\n    rgb_curves_3.mapping.curves[3].points.new(1.0, 1.0)\n    mix_5.inputs[0].default_value = 1.0\n    mix_5.blend_type = 'DARKEN'\n    noise_texture_2.inputs[2].default_value = 400.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_3.inputs[2].default_value = 80.0\n    noise_texture_3.inputs[3].default_value = 16.0\n    displacement.inputs[2].default_value = 0.01\n    colorramp_3.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_3.color_ramp.elements[0].position = 0.2\n    colorramp_3.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.7\n    colorramp_3.color_ramp.elements[1].color = [0.9, 0.7, 0.3, 1.0]\n    colorramp_3.color_ramp.elements.new(0.95)\n    colorramp_3.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['metal_mesh_grill_001']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[2], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[4])\n    links.new(group.outputs[1], principled_bsdf.inputs[6])\n    links.new(group.outputs[4], principled_bsdf.inputs[9])\n    links.new(group.outputs[0], principled_bsdf.inputs[21])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.509\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mapping.inputs[3].default_value = [3.5, 3.5, 3.5]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Sci_fi_Wall']\n    displacement = nodes.new('ShaderNodeDisplacement')\n    subtract = nodes.new('ShaderNodeMath')\n    greater_than = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(subtract.outputs[0], displacement.inputs[0])\n    links.new(greater_than.outputs[0], subtract.inputs[0])\n    links.new(wave_texture.outputs[1], greater_than.inputs[0])\n    links.new(wave_texture_1.outputs[1], greater_than.inputs[1])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[2].default_value = 0.722\n    group.inputs[8].default_value = [1.0, 0.841, 0.4, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    subtract.inputs[1].default_value = 1.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    greater_than.inputs[2].default_value = 0.0\n    greater_than.operation = 'GREATER_THAN'\n    wave_texture.inputs[1].default_value = 11.7\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping.inputs[2].default_value = [0.785, 0.785, 0.0]\n    mapping.inputs[3].default_value = [3.0, 3.0, 43.2]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[8])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.6\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.9, 0.4, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.75\n    colorramp_2.color_ramp.elements[1].color = [0.3, 0.2, 0.2, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[10].default_value = 0.2\n    principled_bsdf.inputs[11].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.1\n    principled_bsdf.inputs[17].default_value = 0.025\n    principled_bsdf.inputs[18].default_value = 0.15\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix_1.inputs[0])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(rgb_curves.outputs[0], musgrave_texture.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[2].default_value = [0.4, 0.3, 0.6]\n    principled_bsdf.inputs[3].default_value = [0.2, 0.2, 0.3, 1.0]\n    mix_1.inputs[1].default_value = [0.5, 0.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 3.0\n    brick_texture.inputs[1].default_value = [1.0, 0.2, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.9, 0.9, 0.9, 1.0]\n    brick_texture.inputs[5].default_value = 0.1\n    bump.inputs[0].default_value = 0.3\n    musgrave_texture.inputs[2].default_value = 15.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.1, 0.5]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(magic_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.0, 0.2, 0.6, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.3, 1.0]\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    emission.inputs[1].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.8, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.5, 1.0]\n    magic_texture.inputs[1].default_value = -0.5\n    magic_texture.inputs[2].default_value = 1.5\n    magic_texture.turbulence_depth = 4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[3].default_value = 10.0\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[8].default_value = 0.2\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[3].default_value = 1.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.1, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    normal = nodes.new('ShaderNodeNormal')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(normal.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[2])\n    links.new(brick_texture.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.2, 0.1, 0.1, 1.0]\n    brick_texture.inputs[5].default_value = 0.015\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [1.0, 0.7, 0.7, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[4].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Crumpled_Metal']\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Abstract_Emission_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group_1.outputs[1], material_output.inputs[2])\n    links.new(mix.outputs[0], group.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[13].default_value = 1.66\n    group.inputs[14].default_value = 1.85\n    mix.inputs[0].default_value = 0.15\n    rgb.outputs[0].default_value = [0.462, 0.381, 0.054, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 1.0, 1.0]\n    group_1.inputs[5].default_value = 5.0\n    group_1.inputs[8].default_value = [0.8, 0.2, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[5].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.1\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[1].default_value = 2.0\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.8, 0.2, 0.2, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.0, 1.0]\n    wave_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 1.0\n    bump.inputs[0].default_value = 0.3\n    musgrave_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    subtract = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], add.inputs[0])\n    links.new(voronoi_texture.outputs[0], add.inputs[1])\n    links.new(subtract.outputs[0], mix_1.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.2, 0.1, 0.05, 1.0]\n    mix.inputs[2].default_value = [0.7, 0.4, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    subtract.operation = 'SUBTRACT'\n    wave_texture.inputs[2].default_value = 10.0\n    voronoi_texture.inputs[2].default_value = 30.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    noise_texture.inputs[2].default_value = 250.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.4\n    mix.inputs[1].default_value = [0.4, 0.4, 0.4, 1.0]\n    mix.inputs[2].default_value = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(multiply.outputs[0], wave_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[6])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[7])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 0.8\n    principled_bsdf.inputs[15].default_value = 0.2\n    mix.inputs[0].default_value = 0.4\n    mix.blend_type = 'ADD'\n    multiply.inputs[0].default_value = 0.75\n    multiply.inputs[1].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[3].default_value = 3.0\n    wave_texture.inputs[6].default_value = 1.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    brick_texture.inputs[1].default_value = [0.9, 0.55, 0.45, 1.0]\n    brick_texture.inputs[4].default_value = 0.2\n    brick_texture.inputs[5].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.4, 0.1, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    scale.inputs[1].default_value = [1.5, 1.5, 1.5]\n    scale.operation = 'SCALE'\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 5.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    noise_texture.inputs[3].default_value = 5.5\n    mix.inputs[0].default_value = 0.6\n    brick_texture.inputs[2].default_value = [1.0, 0.5, 0.5, 1.0]\n    brick_texture.inputs[5].default_value = 0.1\n    brick_texture.inputs[6].default_value = 0.05\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    voronoi_texture.inputs[2].default_value = 8.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(fresnel.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.3, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.25\n    colorramp.color_ramp.elements[1].color = [0.8, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.75, 0.75, 0.75, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 50.0\n    fresnel.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 1.0\n    wave_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.2, 0.3, 0.4, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.15\n    principled_bsdf.inputs[20].default_value = 250.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.9, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].position = 0.1\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.9\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 4.0\n    noise_texture_1.inputs[3].default_value = 8.0\n    noise_texture_1.inputs[4].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves_3 = nodes.new('ShaderNodeRGBCurve')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_4 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(ambient_occlusion.outputs[0], colorramp.inputs[0])\n    links.new(geometry.outputs[7], colorramp_1.inputs[0])\n    links.new(mix_3.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(invert.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mix_2.outputs[0], invert.inputs[1])\n    links.new(mix_3.outputs[0], rgb_curves_2.inputs[1])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(mix_4.outputs[0], colorramp_2.inputs[0])\n    links.new(rgb_curves_3.outputs[0], mix_4.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_4.inputs[2])\n    links.new(mix_5.outputs[0], rgb_curves_3.inputs[1])\n    links.new(noise_texture_2.outputs[0], mix_5.inputs[1])\n    links.new(noise_texture_3.outputs[0], mix_5.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_3.inputs[0])\n    links.new(colorramp_3.outputs[0], displacement.inputs[0])\n    links.new(noise_texture_4.outputs[1], colorramp_3.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_4.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[21].default_value = 0.55\n    mix.inputs[1].default_value = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[2].default_value = [0.768, 0.532, 0.204, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'OVERLAY'\n    mix_2.inputs[0].default_value = 0.95\n    mix_2.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    ambient_occlusion.only_local = True\n    colorramp_1.color_ramp.elements[0].position = 0.495\n    colorramp_1.color_ramp.elements[1].position = 0.555\n    rgb_curves.mapping.curves[3].points[1].location = [0.382, 0.269]\n    rgb_curves.mapping.curves[3].points.new(0.677, 0.681)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    noise_texture_1.inputs[2].default_value = 25.0\n    noise_texture_1.inputs[3].default_value = 14.0\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.745, 0.288]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.455, 0.213]\n    rgb_curves_2.mapping.curves[3].points.new(0.745, 0.537)\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.05\n    colorramp_2.color_ramp.elements[0].position = 0.005\n    colorramp_2.color_ramp.elements[1].position = 0.891\n    mix_4.inputs[0].default_value = 1.0\n    mix_4.blend_type = 'DARKEN'\n    rgb_curves_3.mapping.curves[3].points[1].location = [0.418, 0.262]\n    rgb_curves_3.mapping.curves[3].points.new(0.573, 0.737)\n    rgb_curves_3.mapping.curves[3].points.new(1.0, 1.0)\n    mix_5.inputs[0].default_value = 1.0\n    mix_5.blend_type = 'DARKEN'\n    noise_texture_2.inputs[2].default_value = 400.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_3.inputs[2].default_value = 80.0\n    noise_texture_3.inputs[3].default_value = 16.0\n    displacement.inputs[1].default_value = 0.0\n    colorramp_3.color_ramp.elements[1].position = 0.836\n    colorramp_3.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp_3.color_ramp.elements.new(1.0)\n    colorramp_3.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_4.inputs[2].default_value = 100.0\n    noise_texture_4.inputs[5].default_value = 0.17\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[2])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[6].default_value = 1.0\n    add.inputs[1].default_value = 0.1\n    add.use_clamp = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], magic_texture.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.4\n    hue_saturation_value.inputs[1].default_value = 1.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    add.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[3])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[4], displacement.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[14].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.3\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    displacement.inputs[1].default_value = 0.1\n    voronoi_texture.feature = 'N_SPHERE_RADIUS'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.75)\n    colorramp.color_ramp.elements[2].color = [0.0, 1.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    bump.inputs[0].default_value = 0.05\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 1.2\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 4.0\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n    voronoi_texture.inputs[3].default_value = 8.0\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[0].color = [0.8, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.1, 0.8, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(rgb_curves.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.6\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.687\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.1, 1.0]\n    wave_texture.inputs[2].default_value = 12.0\n    wave_texture.bands_direction = 'Y'\n    mix.blend_type = 'MULTIPLY'\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(0.8, 0.9)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gamma = nodes.new('ShaderNodeGamma')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(bump.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    gamma.inputs[1].default_value = 2.2\n    noise_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.9, 0.7, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wireframe = nodes.new('ShaderNodeWireframe')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wireframe.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[1], wireframe.inputs[0])\n    links.new(mapping.outputs[0], checker_texture.inputs[1])\n    links.new(geometry.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    mapping.inputs[3].default_value = [0.0, 0.0, 0.0]\n    transparent_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 0.0]\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[16].default_value = 1.5\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(rgb_1.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[1])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[2])\n\n    # Set parameters for each node\n    rgb.outputs[0].default_value = [0.1, 0.5, 0.8, 1.0]\n    rgb_1.outputs[0].default_value = [0.9, 0.2, 0.2, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.4, 0.2, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.3\n    noise_texture.inputs[3].default_value = 4.0\n    bump_1.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[21])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(gradient_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.2, 0.3, 0.5, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[14].default_value = 0.8\n    principled_bsdf.inputs[15].default_value = 0.2\n    principled_bsdf.inputs[20].default_value = 1.5\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 0.5\n    wave_texture.inputs[3].default_value = 0.1\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.2]\n    noise_texture.inputs[1].default_value = 3.0\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.1\n    checker_texture.inputs[3].default_value = 7.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.2, 0.1, 0.0, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    add = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(gradient_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], add.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.4\n    mix.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], brick_texture.inputs[4])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    voronoi_texture.inputs[1].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    add = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(add.outputs[0], bump.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[1], add.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.5\n    glossy_bsdf.inputs[1].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[2].default_value = 4.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.vector_type = 'TEXTURE'\n    principled_bsdf.inputs[0].default_value = [0.1, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], add_shader.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], multiply.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(map_range.outputs[0], add.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[1])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 0.718\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.7, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.563\n    colorramp.color_ramp.elements[1].color = [1.0, 0.847, 0.0, 1.0]\n    multiply.inputs[2].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    add.inputs[2].default_value = 0.0\n    map_range.inputs[1].default_value = 1.0\n    map_range.inputs[2].default_value = -5.0\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[3].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 12.0\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.2, 1.0, 0.2, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.4\n    diffuse_bsdf.inputs[1].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[1].default_value = 3.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[2].default_value = 100.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(mapping.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(scale.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.5, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[8].default_value = 0.5\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[4].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    scale.operation = 'SCALE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.2, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.95, 0.15, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    mix.blend_type = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    noise_texture_1.inputs[3].default_value = 12.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[11].default_value = 1.0\n    mix.inputs[2].default_value = [0.1, 0.5, 0.6, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 4.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb_curves.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(ambient_occlusion.outputs[0], rgb_curves.inputs[1])\n    links.new(voronoi_texture.outputs[1], ambient_occlusion.inputs[0])\n    links.new(voronoi_texture.outputs[0], ambient_occlusion.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.8\n    principled_bsdf.inputs[3].default_value = [0.5, 0.4, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.15\n    principled_bsdf.inputs[14].default_value = 0.9\n    rgb_curves.mapping.curves[1].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[1].points.new(1.0, 1.0)\n    ambient_occlusion.inside = True\n    mapping.inputs[1].default_value = [0.2, 0.2, 0.2]\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture_1.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.8, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    noise_texture.inputs[2].default_value = 20.0\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.1, 0.3, 0.7, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(add.outputs[0], colorramp_1.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(musgrave_texture.outputs[0], add_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.9\n    colorramp.color_ramp.elements[0].color = [0.2, 0.7, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.1, 0.2, 0.3, 1.0]\n    noise_texture.inputs[3].default_value = 12.0\n    bump.inputs[0].default_value = 0.15\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    add.inputs[1].default_value = 0.1\n    add_1.inputs[1].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.2\n    musgrave_texture.inputs[5].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[3], multiply.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[1])\n    links.new(bump.outputs[0], translucent_bsdf.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.7, 0.8, 0.9, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    brick_texture.inputs[1].default_value = [1.0, 0.5, 0.5, 1.0]\n    rgb_curves.inputs[0].default_value = 0.5\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'F2'\n    bump.inputs[0].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.8\n    principled_bsdf.inputs[3].default_value = [0.0, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    glass_bsdf.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.6\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    musgrave_texture.inputs[3].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], gradient_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[17].default_value = 0.92\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Forest_Ground']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rubber_Camo']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 1.0\n    group.inputs[17].default_value = [0.006, 0.025, 0.005, 1.0]\n    group.inputs[18].default_value = [0.535, 0.384, 0.27, 1.0]\n    group.inputs[32].default_value = 1.15\n    group.inputs[37].default_value = 0.0\n    group.inputs[38].default_value = 0.25\n    group.inputs[39].default_value = 1.1\n    group_1.inputs[1].default_value = 8.91\n    group_1.inputs[2].default_value = 1.8\n    group_1.inputs[3].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    subtract = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(subtract.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], subtract.inputs[1])\n    links.new(fresnel.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.2, 1.0]\n    subtract.inputs[0].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    add.inputs[1].default_value = 0.1\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.5, 0.0, 1.0]\n    noise_texture.inputs[5].default_value = 0.5\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[3])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[0], invert.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.05\n    principled_bsdf.inputs[8].default_value = 0.3\n    principled_bsdf.inputs[9].default_value = 0.25\n    principled_bsdf.inputs[19].default_value = [0.1, 0.1, 0.2, 1.0]\n    hue_saturation_value.inputs[1].default_value = 1.2\n    hue_saturation_value.inputs[2].default_value = 0.5\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.4\n    bump.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(invert.outputs[0], bump.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(invert.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[17].default_value = 1.0\n    mix.inputs[1].default_value = [0.7, 0.2, 0.3, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.3, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    invert.inputs[0].default_value = 0.5\n    invert.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[4].default_value = 0.4\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    add.inputs[0].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bright_contrast.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.8, 0.5, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.7\n    mix.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[4].default_value = 0.3\n    bright_contrast.inputs[2].default_value = 0.3\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.0, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.118, 0.118, 0.118, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.001\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 15.0\n    bump.inputs[0].default_value = 0.05\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(checker_texture.outputs[1], bump.inputs[2])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(checker_texture.outputs[1], multiply.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.3\n    principled_bsdf.inputs[6].default_value = 0.2\n    checker_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[2].default_value = [0.158, 0.158, 0.158, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    mapping.inputs[3].default_value = [5.0, 5.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.2\n    displacement.inputs[2].default_value = 0.15\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 100.0\n    noise_texture.inputs[3].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.223\n    colorramp.color_ramp.elements[1].color = [0.069, 0.003, 0.25, 1.0]\n    colorramp.color_ramp.elements.new(0.432)\n    colorramp.color_ramp.elements[2].color = [0.02, 0.114, 0.312, 1.0]\n    colorramp.color_ramp.elements.new(0.645)\n    colorramp.color_ramp.elements[3].color = [0.222, 0.192, 0.375, 1.0]\n    colorramp.color_ramp.elements.new(0.791)\n    colorramp.color_ramp.elements[4].color = [0.135, 0.155, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[5].color = [0.015, 0.39, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.923\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[0].position = 0.041\n    colorramp_2.color_ramp.elements[1].position = 0.314\n    bump.inputs[0].default_value = 0.01\n    emission.inputs[0].default_value = [0.5, 0.3, 0.1, 1.0]\n    emission.inputs[1].default_value = 2.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.1\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.25\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    musgrave_texture.inputs[2].default_value = 250.0\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    mapping.inputs[1].default_value = [3.0, 2.0, 1.0]\n    bump.inputs[0].default_value = 0.05\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 0.5\n    wave_texture.inputs[4].default_value = 0.25\n    noise_texture.inputs[4].default_value = 0.3\n    noise_texture.inputs[5].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    emission = nodes.new('ShaderNodeEmission')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(emission.outputs[0], mix_shader_1.inputs[1])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(rgb.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    brick_texture.inputs[4].default_value = 8.0\n    brick_texture.inputs[5].default_value = 0.1\n    brick_texture.inputs[6].default_value = 1.5\n    brick_texture.squash = 1.5\n    emission.inputs[1].default_value = 3.0\n    rgb.outputs[0].default_value = [0.005, 0.1, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.8\n    principled_bsdf.inputs[14].default_value = 0.7\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 3.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    mapping.inputs[1].default_value = [1.0, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 0.8, 0.5, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    wave_texture.wave_profile = 'SAW'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump_2 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(bump_1.outputs[0], mix.inputs[1])\n    links.new(bump_2.outputs[0], mix.inputs[2])\n    links.new(colorramp_3.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_3.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture_3.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump_2.inputs[2])\n    links.new(noise_texture_3.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[3].default_value = 8.0\n    principled_bsdf.inputs[9].default_value = 0.7\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.6, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.4, 0.7, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    principled_bsdf_1.inputs[6].default_value = 0.5\n    colorramp_2.color_ramp.elements[0].position = 0.1\n    colorramp_2.color_ramp.elements[0].color = [1.0, 0.8, 0.2, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    colorramp_2.color_ramp.elements[1].color = [0.2, 0.5, 0.1, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_2.inputs[2].default_value = 3.0\n    bump_1.inputs[0].default_value = 0.15\n    colorramp_3.color_ramp.elements[0].position = 0.4\n    colorramp_3.color_ramp.elements[0].color = [0.5, 0.2, 0.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.9\n    colorramp_3.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_3.color_ramp.elements.new(1.0)\n    colorramp_3.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump_2.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.04\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(multiply.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[1], multiply.inputs[0])\n    links.new(noise_texture.outputs[1], multiply.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.6, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[6].default_value = 6.28\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    noise_texture.inputs[3].default_value = 1.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.invert = True\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.4, 0.4, 0.4, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.2, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.8, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(gamma.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.25\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.3\n    gamma.inputs[1].default_value = 2.5\n    wave_texture.inputs[1].default_value = 30.0\n    wave_texture.inputs[6].default_value = 1.57\n    bump.inputs[0].default_value = 0.2\n    principled_bsdf.inputs[0].default_value = [0.9, 0.7, 0.6, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.2\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 1.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 50.0\n    bump.inputs[0].default_value = 0.2\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.9, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = 0.5\n    magic_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n    add.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[1].default_value = 3.0\n    voronoi_texture.inputs[4].default_value = 2.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp_1.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    brick_texture.inputs[3].default_value = [0.25, 0.07, 0.07, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 3.0\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    mix.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.5, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.35\n    colorramp.color_ramp.elements[1].color = [0.1, 0.05, 0.02, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 3.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    musgrave_texture.inputs[5].default_value = 1.5\n    mapping.inputs[3].default_value = [3.0, 3.0, 3.0]\n    principled_bsdf.inputs[12].default_value = 0.1\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.126, 0.126, 0.126, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.001\n    mapping.inputs[2].default_value = [0.5, 0.5, 0.5]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[12].default_value = 0.8\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.4, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.6, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 150.0\n    add.inputs[0].default_value = 1.0\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    pingpong = nodes.new('ShaderNodeMath')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(pingpong.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix_1.inputs[0].default_value = 0.3\n    noise_texture.inputs[3].default_value = 10.0\n    pingpong.inputs[1].default_value = 1.0\n    pingpong.operation = 'PINGPONG'\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[3].default_value = [0.5, 0.5, 0.5, 1.0]\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    displacement.inputs[1].default_value = 0.4\n    displacement.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[3])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.6\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[1].position = 0.4\n    colorramp_1.color_ramp.elements[1].color = [0.15, 0.07, 0.03, 1.0]\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n    mix_1.inputs[0].default_value = 0.8\n    colorramp_2.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert = nodes.new('ShaderNodeInvert')\n    compare = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(compare.outputs[0], invert.inputs[1])\n    links.new(subtract.outputs[0], compare.inputs[1])\n    links.new(voronoi_texture.outputs[0], subtract.inputs[0])\n    links.new(musgrave_texture.outputs[0], subtract.inputs[1])\n    links.new(subtract.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    compare.operation = 'COMPARE'\n    subtract.operation = 'SUBTRACT'\n    voronoi_texture.inputs[2].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    mapping.vector_type = 'TEXTURE'\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.3, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.4, 0.4, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    mapping.inputs[3].default_value = [1.5, 1.5, 1.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.2, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.9\n    colorramp.color_ramp.elements[0].color = [0.15, 0.15, 0.15, 1.0]\n    brick_texture.inputs[4].default_value = 10.0\n    brick_texture.inputs[5].default_value = 0.002\n    brick_texture.inputs[6].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    principled_bsdf_1.inputs[3].default_value = [0.9, 0.4, 0.4, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 0.5\n    principled_bsdf_1.inputs[7].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump_1.inputs[1].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf_1 = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    diffuse_bsdf_1.inputs[0].default_value = [0.2, 0.3, 0.5, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.2\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.1\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.bands_direction = 'Y'\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    musgrave_texture.inputs[1].default_value = 2.0\n    musgrave_texture.inputs[2].default_value = 2.5\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    multiply = nodes.new('ShaderNodeMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], voronoi_texture.inputs[2])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(multiply_1.outputs[0], noise_texture.inputs[2])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], bump.inputs[3])\n    links.new(mix_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[18].default_value = 0.209\n    invert.inputs[0].default_value = 0.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.103, 0.595, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.682\n    colorramp.color_ramp.elements[1].color = [0.597, 0.957, 1.0, 1.0]\n    multiply.inputs[0].default_value = 5.0\n    multiply.inputs[1].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    mix.inputs[0].default_value = 0.3\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.645\n    colorramp_1.color_ramp.elements[1].position = 0.782\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 2.07\n    multiply_1.inputs[0].default_value = 1.48\n    multiply_1.inputs[1].default_value = 1.0\n    multiply_1.operation = 'MULTIPLY'\n    colorramp_2.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_2.color_ramp.elements[0].position = 0.932\n    mix_1.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Tablecloth_red']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['planet_mars']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], group.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], group_1.inputs[1])\n\n    # Set parameters for each node\n    group.inputs[3].default_value = 3.42\n    group.inputs[4].default_value = 0.333\n    group.inputs[7].default_value = 0.3\n    group.inputs[10].default_value = 1.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    group_1.inputs[3].default_value = [0.5, 0.101, 0.059, 1.0]\n    group_1.inputs[4].default_value = [0.046, 0.017, 0.007, 1.0]\n    group_1.inputs[5].default_value = [0.054, 0.016, 0.007, 1.0]\n    group_1.inputs[7].default_value = [0.068, 0.039, 0.028, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    emission.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(rgb_curves.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    mapping.inputs[1].default_value = [0.3, 0.5, 0.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.2]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.1\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    musgrave_texture.inputs[2].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix_shader.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[7])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], musgrave_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.2\n    principled_bsdf.inputs[17].default_value = 0.9\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.5, 0.0, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[2].default_value = 1.5\n    mix.inputs[0].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 1.5\n    mapping.inputs[2].default_value = [0.5, 0.5, 0.5]\n    colorramp_1.color_ramp.elements[0].position = 0.2\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.3, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].position = 0.15\n    colorramp_1.color_ramp.elements[1].position = 0.85\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    noise_texture.inputs[3].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 3.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(geometry.outputs[0], mapping.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(add.outputs[0], glossy_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], add.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 12.0\n    mapping.inputs[3].default_value = [2.0, 0.0, 0.0]\n    mix_shader_1.inputs[0].default_value = 0.3\n    diffuse_bsdf.inputs[0].default_value = [0.1, 0.3, 0.7, 1.0]\n    add.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(gradient_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[0], gradient_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    mix.inputs[0].default_value = 0.7\n    mix.blend_type = 'ADD'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 3.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 12.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 2.0]\n    bump.inputs[0].default_value = 0.03\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 0.5\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].color = [0.05, 0.05, 0.05, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.8\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.05, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.3, 0.1, 1.0]\n    voronoi_texture.inputs[1].default_value = 1.0\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[5].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[3].default_value = [0.069, 0.1, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    glass_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    wave_texture.inputs[1].default_value = 2.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 1.0, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.8, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.2, 0.3, 0.5, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.6, 0.6, 0.6, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n    musgrave_texture.inputs[3].default_value = 10.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump_1.inputs[0].default_value = 0.3\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 8.0\n    mapping.inputs[1].default_value = [0.0, 0.5, 0.0]\n    glossy_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.8\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Abstract_Emission_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[5].default_value = 5.0\n    group.inputs[8].default_value = [0.5, 0.5, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[2].default_value = 2.0\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(emission.outputs[0], mix_shader_1.inputs[1])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(rgb.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    brick_texture.inputs[4].default_value = 8.0\n    brick_texture.inputs[5].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.feature = 'F2'\n    emission.inputs[1].default_value = 1.5\n    rgb.outputs[0].default_value = [0.8, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    greater_than = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], glossy_bsdf.inputs[1])\n    links.new(greater_than.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], greater_than.inputs[0])\n    links.new(wave_texture.outputs[1], greater_than.inputs[1])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [0.15, 0.15, 0.15, 1.0]\n    fresnel.inputs[0].default_value = 1.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.2, 1.0]\n    greater_than.inputs[2].default_value = 0.1\n    greater_than.operation = 'GREATER_THAN'\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    wave_texture.inputs[1].default_value = 15.0\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 4.0\n    wave_texture.inputs[4].default_value = 2.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    mapping.inputs[1].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    add_1 = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], add.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(add_1.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], add_1.inputs[0])\n    links.new(colorramp.outputs[0], add_1.inputs[1])\n    links.new(colorramp_2.outputs[0], subtract.inputs[0])\n    links.new(colorramp_2.outputs[0], subtract.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    mix.blend_type = 'OVERLAY'\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 8.0\n    mix_1.inputs[0].default_value = 0.7\n    mix_1.inputs[2].default_value = [0.5, 0.4, 0.3, 1.0]\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.4\n    mapping.inputs[3].default_value = [45.0, 0.5, 1.0]\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    add.inputs[1].default_value = 3.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.01\n    add_1.inputs[2].default_value = 0.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    colorramp_2.color_ramp.elements[0].position = 0.4\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.8, 0.6, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.5\n    musgrave_texture.inputs[3].default_value = 5.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[13].default_value = 0.0\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.8\n    principled_bsdf.inputs[16].default_value = 2.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[1].default_value = 2.0\n    mix_1.inputs[0].default_value = 0.7\n    mix_1.blend_type = 'ADD'\n    voronoi_texture.inputs[1].default_value = 2.0\n    voronoi_texture.inputs[2].default_value = 2.5\n    bright_contrast.inputs[1].default_value = 0.3\n    bright_contrast.inputs[2].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 0.25\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.1, 0.8, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.5, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.1\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    mix_1.blend_type = 'ADD'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], mix_shader.inputs[1])\n    links.new(group.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    bump.inputs[1].default_value = 0.2\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 0.5\n    group.inputs[0].default_value = [0.1, 0.05, 0.02, 1.0]\n    group.inputs[1].default_value = [0.8, 0.6, 0.4, 1.0]\n    group.inputs[8].default_value = 0.5\n    group.inputs[9].default_value = 1.2\n    group.inputs[10].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(brick_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.5, 0.7, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.1, 0.3, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 0.2\n    wave_texture.inputs[2].default_value = 4.0\n    wave_texture.inputs[3].default_value = 6.0\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 3.0\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[4].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], voronoi_texture.inputs[5])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    principled_bsdf.inputs[0].default_value = [0.1, 0.2, 0.5, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.inputs[9].default_value = 0.15\n    principled_bsdf.inputs[10].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.05\n    voronoi_texture.inputs[2].default_value = 15.0\n    voronoi_texture.inputs[3].default_value = 0.2\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture_1.inputs[2].default_value = 25.0\n    noise_texture_1.inputs[3].default_value = 4.0\n    noise_texture_1.inputs[4].default_value = 0.3\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.1, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(separate_xyz.outputs[0], bump.inputs[1])\n    links.new(voronoi_texture.outputs[2], separate_xyz.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], multiply.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.2\n    principled_bsdf.inputs[20].default_value = 250.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.75\n    colorramp.color_ramp.elements[1].color = [1.0, 0.5, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    multiply.inputs[1].default_value = [0.1, 0.1, 0.1]\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.0, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 6.0\n    wave_texture.inputs[2].default_value = 0.3\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.bands_direction = 'Y'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(rgb_curves.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.8]\n    rgb_curves.mapping.curves[3].points.new(0.8, 0.9)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.bands_direction = 'DIAGONAL'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Cracked_Ceramic_02']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[24].default_value = [0.04, 0.356, 0.433, 1.0]\n    group.inputs[46].default_value = [0.669, 0.629, 0.56, 1.0]\n    group.inputs[47].default_value = 0.75\n    group.inputs[48].default_value = 0.35\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(hue_saturation_value.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 0.8\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.6, 0.6, 0.6, 1.0]\n    voronoi_texture.inputs[2].default_value = 20.0\n    bump.inputs[0].default_value = 0.03\n    hue_saturation_value.inputs[1].default_value = 0.5\n    hue_saturation_value.inputs[2].default_value = 1.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    velvet_bsdf = nodes.new('ShaderNodeBsdfVelvet')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    gamma = nodes.new('ShaderNodeGamma')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(velvet_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(gamma.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[3].default_value = 5.0\n    wave_texture.bands_direction = 'DIAGONAL'\n    bump.inputs[1].default_value = 0.05\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    velvet_bsdf.inputs[0].default_value = [0.2, 0.5, 0.2, 1.0]\n    velvet_bsdf.inputs[1].default_value = 0.4\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    gamma.inputs[1].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.1\n    principled_bsdf.inputs[3].default_value = [0.2, 0.4, 0.6, 1.0]\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[3].default_value = 4.0\n    hue_saturation_value.inputs[1].default_value = 1.5\n    hue_saturation_value.inputs[2].default_value = 0.2\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Lava_Magma']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], mix_shader.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[25].default_value = 0.45\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.1, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], brick_texture.inputs[5])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add_1.inputs[0])\n    links.new(brick_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    brick_texture.inputs[1].default_value = [0.0, 0.2, 0.6, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    add.inputs[1].default_value = 0.05\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'ADD'\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 8.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[5].default_value = 5.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    mix_1.inputs[0].default_value = 0.6\n    mix_1.blend_type = 'MULTIPLY'\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.2, 0.2, 1.0]\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.musgrave_dimensions = '4D'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.5, 0.2, 1.0]\n    fresnel.inputs[0].default_value = 1.5\n    glossy_bsdf.inputs[1].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    voronoi_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.2\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 3.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    subtract = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    map_range = nodes.new('ShaderNodeMapRange')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(subtract.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(map_range.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    mapping.inputs[1].default_value = [1.0, 1.0, 0.0]\n    subtract.operation = 'SUBTRACT'\n    add.inputs[1].default_value = 0.2\n    add.use_clamp = True\n    bump.inputs[0].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    layer_weight.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], bump.inputs[3])\n    links.new(musgrave_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.95\n    colorramp.color_ramp.elements[1].position = 0.5\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.6\n    colorramp_1.color_ramp.elements[1].color = [0.75, 0.75, 0.75, 1.0]\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 3.0\n    bump.invert = True\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.4\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture_2.outputs[0], mix.inputs[2])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(mix_1.outputs[0], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.134\n    colorramp.color_ramp.elements[1].color = [0.086, 0.086, 0.086, 1.0]\n    colorramp.color_ramp.elements.new(0.605)\n    colorramp.color_ramp.elements[2].color = [0.602, 0.602, 0.602, 1.0]\n    mix.inputs[0].default_value = 0.8\n    mix.blend_type = 'MULTIPLY'\n    mix_1.inputs[0].default_value = 0.4\n    mix_1.blend_type = 'MULTIPLY'\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.inputs[3].default_value = 1.2\n    noise_texture_1.inputs[2].default_value = 4.0\n    noise_texture_1.inputs[3].default_value = 20.0\n    colorramp_1.color_ramp.elements[0].position = 0.159\n    colorramp_1.color_ramp.elements[1].position = 0.359\n    voronoi_texture.inputs[2].default_value = 8.0\n    noise_texture_2.inputs[2].default_value = 25.0\n    noise_texture_2.inputs[3].default_value = 10.0\n    noise_texture_2.inputs[4].default_value = 0.75\n    colorramp_2.color_ramp.elements[0].color = [0.681, 0.681, 0.681, 1.0]\n    bump.inputs[0].default_value = 0.25\n    bump_1.inputs[0].default_value = 0.5\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.7, 0.9]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 1.0\n    mix.blend_type = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.3, 0.4, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.7, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.5, 0.2, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(gradient_texture.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(rgb_curves_1.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping_1.outputs[0], gradient_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.8, 0.7, 0.9, 1.0]\n    brick_texture.inputs[2].default_value = [0.02, 0.002, 0.15, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.015, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    brick_texture.inputs[5].default_value = 0.04\n    rgb_curves.inputs[0].default_value = 0.5\n    rgb_curves.mapping.curves[3].points[1].location = [0.4, 0.2]\n    rgb_curves.mapping.curves[3].points.new(0.8, 0.5)\n    rgb_curves.mapping.curves[3].points.new(0.9, 0.8)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[4].default_value = 20.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.7, 0.5]\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 6.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.3\n    mapping_1.inputs[3].default_value = [0.5, 0.5, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.inputs[21].default_value = 0.5\n    brick_texture.inputs[3].default_value = [0.15, 0.15, 0.15, 1.0]\n    brick_texture.inputs[4].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.2, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.2\n    colorramp.color_ramp.elements[1].color = [0.8, 0.6, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.3, 0.3, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[3].default_value = [0.3, 0.4, 0.5, 1.0]\n    mix.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(0.9)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[3].default_value = 3.0\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(voronoi_texture_2.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.5\n    principled_bsdf.inputs[2].default_value = [0.8, 0.5, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.1, 0.5, 0.1, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 20.0\n    displacement.inputs[1].default_value = 0.05\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[0].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.25\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    noise_texture_1.inputs[2].default_value = 15.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    colorramp_2.color_ramp.elements[0].position = 0.3\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    colorramp_3.color_ramp.elements[0].position = 0.1\n    colorramp_3.color_ramp.elements[1].position = 0.4\n    noise_texture_2.inputs[2].default_value = 25.0\n    noise_texture_2.inputs[3].default_value = 0.5\n    colorramp_4.color_ramp.elements[0].position = 0.2\n    colorramp_4.color_ramp.elements[1].position = 0.5\n    voronoi_texture_2.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 1.0, 1.0]\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 6.0\n    diffuse_bsdf.inputs[0].default_value = [0.5, 0.8, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.2, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [1.0, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(checker_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(checker_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 0.8\n    mix_1.blend_type = 'MULTIPLY'\n    checker_texture.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    checker_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    emission = nodes.new('ShaderNodeEmission')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[5].default_value = 30.0\n    emission.inputs[1].default_value = 5.0\n    rgb.outputs[0].default_value = [0.0, 0.5, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(brick_texture.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[3], multiply.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.6, 0.45, 0.4, 1.0]\n    rgb_curves.inputs[0].default_value = 0.5\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.2]\n    noise_texture.inputs[2].default_value = 25.0\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.6\n    bump.inputs[0].default_value = 0.3\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.8, 0.1, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.03\n    diffuse_bsdf.inputs[0].default_value = [0.4, 0.3, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Quilted_leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.73, 0.008, 0.004, 1.0]\n    group.inputs[1].default_value = [0.069, 0.001, 0.001, 1.0]\n    group.inputs[2].default_value = [0.548, 0.524, 0.509, 1.0]\n    group.inputs[3].default_value = 70.0\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 70.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.7\n    group.inputs[9].default_value = 0.576\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], checker_texture.inputs[0])\n    links.new(multiply.outputs[0], checker_texture.inputs[3])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[1].default_value = [1.0, 0.05, 0.05, 1.0]\n    checker_texture.inputs[2].default_value = [0.127, 0.5, 0.128, 1.0]\n    multiply.inputs[0].default_value = 21.1\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.05\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.2\n    principled_bsdf.inputs[6].default_value = 1.0\n    mix.inputs[1].default_value = [0.735, 0.215, 0.09, 1.0]\n    mix.inputs[2].default_value = [0.7, 0.7, 0.7, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.02, 0.02, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(0.7)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix_shader_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 0.4\n    noise_texture.inputs[5].default_value = 15.0\n    mapping.inputs[2].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(noise_texture.outputs[1], bump.inputs[1])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    rgb.outputs[0].default_value = [0.0, 0.5, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[1].default_value = 2.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    wave_texture.inputs[1].default_value = 7.0\n    wave_texture.inputs[2].default_value = 5.0\n    mapping_1.inputs[1].default_value = [0.5, 0.5, 0.0]\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    normal = nodes.new('ShaderNodeNormal')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(fresnel.outputs[0], mix_shader.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[2])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n    links.new(brick_texture.outputs[1], displacement.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[3])\n    links.new(normal.outputs[0], invert.inputs[1])\n    links.new(brick_texture.outputs[1], normal.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.02, 0.02, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = -8.0\n    brick_texture.inputs[5].default_value = 0.015\n    brick_texture.inputs[8].default_value = 2.5\n    brick_texture.inputs[9].default_value = 2.5\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.9\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 3.5\n    wave_texture.inputs[3].default_value = 20.0\n    bump.inputs[1].default_value = 0.15\n    fresnel.inputs[0].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    invert.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[3], multiply.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.7, 1.0]\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture.inputs[3].default_value = 10.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.2, 0.1, 0.1, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.5, 0.5]\n    rgb_curves.mapping.curves[3].points.new(0.8, 0.8)\n    voronoi_texture.inputs[2].default_value = 4.0\n    bump.inputs[0].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    emission = nodes.new('ShaderNodeEmission')\n    multiply = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], emission.inputs[1])\n    links.new(invert.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[1], invert.inputs[1])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    emission.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    multiply.inputs[1].default_value = 100.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.3\n    principled_bsdf.inputs[6].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.4, 0.6, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.1, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 0.5\n    voronoi_texture.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Quilted_leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.75, 0.01, 0.02, 1.0]\n    group.inputs[1].default_value = [0.07, 0.001, 0.001, 1.0]\n    group.inputs[2].default_value = [0.55, 0.52, 0.5, 1.0]\n    group.inputs[3].default_value = 75.0\n    group.inputs[4].default_value = 1.2\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 75.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.5\n    group.inputs[9].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[1].position = 0.9\n    musgrave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[1].default_value = 3.0\n    colorramp_1.color_ramp.elements[0].position = 0.25\n    colorramp_1.color_ramp.elements[1].position = 0.75\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    wireframe = nodes.new('ShaderNodeWireframe')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(wireframe.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(geometry.outputs[5], musgrave_texture.inputs[4])\n\n    # Set parameters for each node\n    wireframe.inputs[0].default_value = 1.0\n    transparent_bsdf.inputs[0].default_value = [0.0, 0.0, 0.0, 0.0]\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 1.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [0.15, 0.0, -0.15]\n    musgrave_texture.inputs[5].default_value = 1.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_3.outputs[0], mix_1.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[15].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.0]\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.3, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.1, 0.3, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.5\n    colorramp_2.color_ramp.elements[1].color = [0.3, 0.3, 0.8, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump.invert = True\n    colorramp_3.color_ramp.interpolation = 'EASE'\n    colorramp_3.color_ramp.elements[0].color = [0.4, 0.4, 0.4, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [0.7, 0.7, 0.7, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(add.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(wave_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 1.5\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[18].default_value = 0.1\n    noise_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[6].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    refraction_bsdf = nodes.new('ShaderNodeBsdfRefraction')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(refraction_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(layer_weight.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], layer_weight.inputs[0])\n\n    # Set parameters for each node\n    wave_texture.inputs[1].default_value = 6.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    power = nodes.new('ShaderNodeMath')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(power.outputs[0], glossy_bsdf.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    power.inputs[1].default_value = 2.0\n    power.operation = 'POWER'\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.5\n    colorramp_1.color_ramp.elements[1].color = [0.3, 0.5, 0.7, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    displacement.inputs[1].default_value = 0.05\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mapping = nodes.new('ShaderNodeMapping')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [90.0, 0.0, 0.0]\n    musgrave_texture.inputs[2].default_value = 0.5\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.01\n    bump.invert = True\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 25.0\n    wave_texture.inputs[3].default_value = 0.0\n    wave_texture.inputs[4].default_value = 5.0\n    wave_texture.inputs[5].default_value = 0.75\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[20].default_value = 32.0\n    mix.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    colorramp.color_ramp.elements[0].color = [0.0, 0.8, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.5, 0.0, 1.0]\n    mix_1.inputs[0].default_value = 0.6\n    mix_1.blend_type = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[3].default_value = 6.0\n    wave_texture.bands_direction = 'Z'\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    displacement.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[1])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.5, 0.7, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.1\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 0.5\n    bump.inputs[0].default_value = 0.5\n    add.inputs[0].default_value = 4.0\n    add.inputs[1].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.1\n    principled_bsdf.inputs[0].default_value = [1.0, 0.5, 0.0, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.8\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.7, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 0.7, 1.0]\n    wave_texture.bands_direction = 'Y'\n    mapping.inputs[2].default_value = [0.5, 0.5, 0.0]\n    wave_texture_1.inputs[1].default_value = 4.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(magic_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.6\n    colorramp.color_ramp.elements[0].color = [0.1, 0.5, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.1, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = 0.8\n    magic_texture.inputs[2].default_value = 2.0\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n    voronoi_texture.inputs[1].default_value = 5.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[5].default_value = 0.5\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    rgb = nodes.new('ShaderNodeRGB')\n    rgb_1 = nodes.new('ShaderNodeRGB')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb_2 = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], mix.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(rgb_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(rgb_2.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[1])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 2.0\n    multiply.operation = 'MULTIPLY'\n    rgb.outputs[0].default_value = [0.9, 0.9, 0.9, 1.0]\n    rgb_1.outputs[0].default_value = [0.2, 0.2, 0.8, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n    rgb_2.outputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    rgb = nodes.new('ShaderNodeRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[1], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(layer_weight.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], layer_weight.inputs[1])\n    links.new(mapping.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.01, 0.01, 0.01, 1.0]\n    brick_texture.inputs[4].default_value = 0.5\n    brick_texture.inputs[5].default_value = 0.01\n    mapping.vector_type = 'TEXTURE'\n    colorramp.color_ramp.elements[0].position = 0.05\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.4\n    colorramp.color_ramp.elements[1].color = [0.3, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(0.7)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    rgb.outputs[0].default_value = [0.02, 0.02, 0.02, 1.0]\n    mix_1.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    mix_1.inputs[2].default_value = [0.05, 0.05, 0.05, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.4\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 8.0\n    voronoi_texture.inputs[2].default_value = 10.0\n    brick_texture.inputs[4].default_value = 0.1\n    brick_texture.inputs[5].default_value = 0.25\n    bump.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.3, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.7\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.6, 0.6, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(dot_product.outputs[1], mix.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[1], dot_product.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_1.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture_1.outputs[1], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.3\n    gamma.inputs[1].default_value = 1.5\n    mix.blend_type = 'MULTIPLY'\n    dot_product.inputs[1].default_value = [0.0, 0.0, 1.0]\n    dot_product.operation = 'DOT_PRODUCT'\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.02, 0.02, 1.0]\n    brick_texture.inputs[5].default_value = 0.03\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    mix_1.blend_type = 'SCREEN'\n    noise_texture.inputs[2].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.8, 0.3, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n    rgb_curves.inputs[1].default_value = [0.5, 1.0, 0.5, 1.0]\n    rgb_curves.mapping.curves[0].points[1].location = [0.5, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.2, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.3\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.2, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 0.6, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 4.0\n    musgrave_texture.inputs[3].default_value = 12.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.2]\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.3, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.noise_dimensions = '4D'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], noise_texture.inputs[0])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.15\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[8].default_value = 2.0\n    brick_texture.inputs[9].default_value = 2.0\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.1\n    colorramp.color_ramp.elements[0].color = [0.5, 0.3, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], mix.inputs[0])\n    links.new(checker_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    multiply.operation = 'MULTIPLY'\n    checker_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], wave_texture.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.9, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.25\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.4, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.75\n    colorramp_1.color_ramp.elements[1].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 8.0\n    bump.inputs[0].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.3\n    principled_bsdf.inputs[12].default_value = 0.8\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[16].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.3\n    colorramp_1.color_ramp.elements[1].color = [0.8, 0.8, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_2.color_ramp.elements[0].color = [0.0, 0.2, 0.4, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.4, 0.6, 0.8, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    mapping.inputs[1].default_value = [1.0, 0.0, 0.0]\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(wave_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.75\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    mapping.inputs[3].default_value = [10.0, 10.0, 10.0]\n    bump.inputs[0].default_value = 0.2\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 12.0\n    wave_texture.inputs[2].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.7, 0.2, 0.1, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.4\n    principled_bsdf.inputs[9].default_value = 0.8\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.8, 0.5, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.3, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[3].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    add = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(multiply.outputs[0], wave_texture.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(add.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.2, 0.7, 1.0]\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.15\n    bump.inputs[0].default_value = 0.3\n    wave_texture.inputs[2].default_value = 5.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 4.0\n    add.inputs[0].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(wave_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    wave_texture.inputs[1].default_value = 1.0\n    wave_texture.inputs[2].default_value = 10.0\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix_shader.outputs[0], material_output.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_shader.inputs[1])\n    links.new(noise_texture.outputs[1], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.5\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[3].default_value = 12.0\n    mapping.inputs[2].default_value = [1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(emission.outputs[0], material_output.inputs[1])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    voronoi_texture.voronoi_dimensions = '2D'\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.3, 0.1, 1.0]\n    bump.inputs[1].default_value = 0.1\n    noise_texture.inputs[3].default_value = 10.0\n    emission.inputs[0].default_value = [0.2, 0.1, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], bump.inputs[3])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.1, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.3, 0.2, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.8\n    bump.inputs[0].default_value = 0.1\n    wave_texture.inputs[1].default_value = 10.0\n    wave_texture.inputs[2].default_value = 1.0\n    wave_texture.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(displacement.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    layer_weight.inputs[0].default_value = 0.2\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.8, 0.8, 1.0]\n    add.inputs[1].default_value = 0.2\n    displacement.inputs[1].default_value = 0.4\n    bump.inputs[1].default_value = 0.05\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 10.0\n    mapping.vector_type = 'VECTOR'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    divide = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    length = nodes.new('ShaderNodeVectorMath')\n    add = nodes.new('ShaderNodeVectorMath')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    vector_rotate = nodes.new('ShaderNodeVectorRotate')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    scale = nodes.new('ShaderNodeVectorMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(divide.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], divide.inputs[0])\n    links.new(length.outputs[1], subtract.inputs[0])\n    links.new(add.outputs[0], length.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(vector_rotate.outputs[0], add_1.inputs[0])\n    links.new(fraction.outputs[0], vector_rotate.inputs[0])\n    links.new(scale.outputs[0], fraction.inputs[0])\n    links.new(noise_texture.outputs[1], scale.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.5, 0.3, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.9\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    divide.inputs[1].default_value = 0.2\n    divide.operation = 'DIVIDE'\n    subtract.inputs[1].default_value = 0.1\n    subtract.operation = 'SUBTRACT'\n    length.operation = 'LENGTH'\n    add.inputs[1].default_value = [0.3, 0.3, 0.3]\n    add_1.inputs[1].default_value = [-0.3, -0.3, 0.1]\n    vector_rotate.inputs[1].default_value = [0.4, 0.4, 0.1]\n    vector_rotate.inputs[3].default_value = 0.5\n    fraction.inputs[1].default_value = [-0.3, -0.3, 0.0]\n    fraction.inputs[3].default_value = 4.0\n    fraction.operation = 'FRACTION'\n    scale.inputs[1].default_value = [-0.3, -0.3, 0.0]\n    scale.inputs[3].default_value = 6.0\n    scale.operation = 'SCALE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.4, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.75\n    colorramp.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.5, 0.5, 1.0]\n    voronoi_texture.inputs[1].default_value = 0.25\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    noise_texture.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.15\n    bump.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[8])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[14].default_value = 0.8\n    principled_bsdf.inputs[20].default_value = 2.0\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[0].color = [0.0, 0.5, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.1, 0.1, 0.5, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    wave_texture.inputs[1].default_value = 1.5\n    wave_texture.inputs[2].default_value = -3.0\n    wave_texture.inputs[3].default_value = 0.5\n    wave_texture.inputs[4].default_value = 4.0\n    noise_texture.inputs[1].default_value = 5.0\n    noise_texture.inputs[2].default_value = 16.0\n    colorramp_1.color_ramp.elements[0].position = 0.5\n    colorramp_1.color_ramp.elements[0].color = [0.1, 0.9, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    vector_curves = nodes.new('ShaderNodeVectorCurve')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(vector_curves.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], vector_curves.inputs[1])\n    links.new(add.outputs[0], colorramp_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.inputs[16].default_value = 20.0\n    mix.inputs[0].default_value = 0.1\n    mix.use_clamp = True\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.inputs[2].default_value = [0.0, 0.7, 0.9, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [1.0, 0.3, 0.3, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 5.0\n    vector_curves.mapping.curves[0].points[1].location = [0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 1.0, 1.0]\n    add.inputs[1].default_value = 0.2\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    diffuse_bsdf.inputs[0].default_value = [0.8, 0.2, 0.2, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.9, 0.9, 0.9, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.037, 0.022, 0.012, 1.0]\n    group.inputs[1].default_value = [1.0, 0.527, 0.245, 1.0]\n    group.inputs[8].default_value = 0.6\n    group.inputs[9].default_value = 1.45\n    group.inputs[10].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.1, 0.05, 0.01, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements[1].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 15.0\n    musgrave_texture.inputs[5].default_value = 1.0\n    musgrave_texture.inputs[7].default_value = 0.0\n    bump.inputs[1].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.7\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.5\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 6.0\n    noise_texture.inputs[5].default_value = 1.0\n    noise_texture.noise_dimensions = '2D'\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    musgrave_texture.inputs[3].default_value = 8.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    musgrave_texture.inputs[5].default_value = 0.5\n    bump.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 0.5\n    wave_texture.inputs[3].default_value = 5.0\n    wave_texture.inputs[4].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    diffuse_bsdf_1 = nodes.new('ShaderNodeBsdfDiffuse')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[0], mapping_1.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(multiply_1.outputs[0], multiply.inputs[1])\n    links.new(colorramp.outputs[1], multiply_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_1.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.177\n    colorramp.color_ramp.elements[1].position = 0.573\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.857)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 25.0\n    diffuse_bsdf.inputs[0].default_value = [0.007, 0.207, 0.3, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    noise_texture_1.inputs[2].default_value = 15.0\n    diffuse_bsdf_1.inputs[0].default_value = [0.513, 0.413, 0.213, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.05, 0.05, 0.05, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 3.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(gamma.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(rgb_to_bw.outputs[0], mix.inputs[0])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], layer_weight.inputs[0])\n\n    # Set parameters for each node\n    diffuse_bsdf.inputs[1].default_value = 0.8\n    gamma.inputs[1].default_value = 2.5\n    mix.inputs[1].default_value = [0.2, 0.2, 0.2, 1.0]\n    wave_texture.inputs[1].default_value = 30.0\n    wave_texture.inputs[6].default_value = 0.5\n    wave_texture.bands_direction = 'DIAGONAL'\n    bump.inputs[1].default_value = 0.1\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].position = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.8, 0.5, 0.3, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[13].default_value = 0.1\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.05\n    bump.invert = True\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 4.0\n    musgrave_texture.inputs[4].default_value = 0.2\n    musgrave_texture.inputs[5].default_value = 3.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Wood_Generator']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rock_Generator']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.037, 0.022, 0.012, 1.0]\n    group.inputs[1].default_value = [1.0, 0.527, 0.245, 1.0]\n    group.inputs[8].default_value = 0.6\n    group.inputs[9].default_value = 1.45\n    group.inputs[10].default_value = 0.0\n    group_1.inputs[17].default_value = [0.056, 0.056, 0.056, 1.0]\n    group_1.inputs[18].default_value = 0.075\n    group_1.inputs[22].default_value = 0.005\n    group_1.inputs[24].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Cracked_Icy_Ground']\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['Rubber_Camo']\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(group_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.7\n    group.inputs[0].default_value = 0.5\n    group.inputs[1].default_value = 1.0\n    group_1.inputs[1].default_value = 12.5\n    group_1.inputs[2].default_value = 1.5\n    group_1.inputs[3].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.8\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.3\n    brick_texture.inputs[1].default_value = [0.8, 0.2, 0.2, 1.0]\n    brick_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[3].default_value = [0.02, 0.02, 0.02, 1.0]\n    brick_texture.inputs[4].default_value = 6.0\n    brick_texture.inputs[5].default_value = 0.05\n    noise_texture.inputs[3].default_value = 3.0\n    colorramp.color_ramp.elements[1].position = 0.5\n    voronoi_texture.inputs[2].default_value = 4.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    mapping.inputs[1].default_value = [0.5, 0.5, 0.5]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(colorramp.outputs[1], mix_shader_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(colorramp.outputs[1], multiply.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.5\n    colorramp.color_ramp.elements[0].color = [0.0, 0.8, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 15.0\n    principled_bsdf.inputs[0].default_value = [0.1, 0.3, 0.2, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.1\n    principled_bsdf_1.inputs[0].default_value = [0.5, 0.5, 0.5, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.3\n    principled_bsdf_1.inputs[9].default_value = 0.2\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'ADD'\n    brick_texture.inputs[1].default_value = [0.1, 0.1, 0.1, 1.0]\n    brick_texture.inputs[5].default_value = 0.05\n    brick_texture.inputs[6].default_value = 0.5\n    brick_texture.inputs[7].default_value = 0.2\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wave_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[7])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[4].default_value = 0.5\n    principled_bsdf.inputs[6].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [0.2, 0.2, 0.2, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.3\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Sci_Fi_Panel_02']\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_shader.inputs[0])\n    links.new(group.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 2.0\n    glossy_bsdf.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[1], multiply.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    multiply.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [1.0, 0.3, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.3, 1.0, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.3, 0.3, 1.0, 1.0]\n    mapping.inputs[1].default_value = [2.0, 2.0, 0.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    glass_bsdf.inputs[1].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[20].default_value = 220.0\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.8\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.45\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.2\n    colorramp_2.color_ramp.elements[1].position = 0.65\n    colorramp_2.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[0].color = [0.34, 0.56, 0.78, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.7\n    colorramp.color_ramp.elements[1].color = [0.68, 0.78, 0.9, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 5.0\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 5.0\n    mapping.inputs[3].default_value = [5.0, 5.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 7.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[1], bright_contrast.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.308\n    musgrave_texture.inputs[2].default_value = 1.31\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.112\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 1.5\n    principled_bsdf_1.inputs[0].default_value = [0.336, 0.261, 0.161, 1.0]\n    principled_bsdf_1.inputs[9].default_value = 0.722\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.176\n"
]