[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(map_range_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], map_range_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(map_range_2.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], map_range_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.9\n    mix.inputs[1].default_value = [0.025, 0.011, 0.008, 1.0]\n    mix.inputs[2].default_value = [0.047, 0.076, 0.235, 1.0]\n    map_range.inputs[1].default_value = -1.0\n    map_range.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    map_range_1.inputs[1].default_value = -1.0\n    map_range_1.inputs[2].default_value = 2.0\n    map_range_1.inputs[3].default_value = 0.4\n    map_range_1.inputs[4].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    map_range_2.inputs[1].default_value = 0.45\n    map_range_2.inputs[2].default_value = 0.55\n    noise_texture_2.inputs[2].default_value = 250.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.85\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    subtract = nodes.new('ShaderNodeMath')\n    snap = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    compare = nodes.new('ShaderNodeMath')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(invert.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(subtract.outputs[0], colorramp.inputs[0])\n    links.new(snap.outputs[0], subtract.inputs[0])\n    links.new(voronoi_texture_3.outputs[0], subtract.inputs[1])\n    links.new(subtract_1.outputs[0], snap.inputs[0])\n    links.new(voronoi_texture.outputs[0], subtract_1.inputs[0])\n    links.new(compare.outputs[0], subtract_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], musgrave_texture.inputs[4])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], compare.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], compare.inputs[2])\n    links.new(voronoi_texture_2.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_3.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(subtract.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_4.outputs[1], colorramp_2.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_4.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.305\n    colorramp.color_ramp.elements[0].color = [0.421, 0.421, 0.421, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.323\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    snap.inputs[1].default_value = -0.68\n    snap.inputs[2].default_value = 0.0\n    snap.operation = 'SNAP'\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    voronoi_texture.inputs[5].default_value = 0.0\n    mapping.inputs[3].default_value = [20.8, 20.8, 20.8]\n    musgrave_texture.inputs[2].default_value = 17.7\n    musgrave_texture.inputs[3].default_value = 10.2\n    compare.operation = 'COMPARE'\n    musgrave_texture_1.inputs[2].default_value = 98.9\n    musgrave_texture_1.inputs[3].default_value = 10.2\n    voronoi_texture_2.inputs[2].default_value = 0.0\n    voronoi_texture_3.inputs[2].default_value = -4.8\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.423\n    colorramp_2.color_ramp.elements[0].position = 0.586\n    colorramp_2.color_ramp.elements[1].position = 0.682\n    voronoi_texture_4.inputs[2].default_value = 61.4\n    voronoi_texture_4.inputs[3].default_value = 0.9\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    mapping_1.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.258\n    colorramp_3.color_ramp.elements[0].position = 0.032\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.384\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    tablecloth_red = nodes.new('ShaderNodeGroup')\n    tablecloth_red.node_tree = bpy.data.node_groups['Tablecloth_red']\n\n    # Create links to connect nodes\n    links.new(tablecloth_red.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    tablecloth_red.inputs[3].default_value = 3.42\n    tablecloth_red.inputs[4].default_value = 0.333\n    tablecloth_red.inputs[7].default_value = 0.3\n    tablecloth_red.inputs[10].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    scale = nodes.new('ShaderNodeVectorMath')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    compare = nodes.new('ShaderNodeMath')\n    absolute = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(colorramp_1.outputs[0], multiply.inputs[1])\n    links.new(invert.outputs[0], colorramp.inputs[0])\n    links.new(layer_weight.outputs[1], invert.inputs[1])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_5.outputs[0], mix.inputs[2])\n    links.new(fraction.outputs[0], colorramp_2.inputs[0])\n    links.new(combine_xyz.outputs[0], fraction.inputs[0])\n    links.new(multiply_1.outputs[0], combine_xyz.inputs[0])\n    links.new(colorramp_3.outputs[0], multiply_1.inputs[0])\n    links.new(mix_1.outputs[0], multiply_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(separate_xyz.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(scale.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(invert_1.outputs[0], colorramp_5.inputs[0])\n    links.new(compare.outputs[0], invert_1.inputs[1])\n    links.new(absolute.outputs[0], compare.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], absolute.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    colorramp.color_ramp.elements[1].position = 0.881\n    layer_weight.inputs[0].default_value = 0.72\n    colorramp_1.color_ramp.elements[0].position = 0.108\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    mix.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[1].color = [0.426, 0.497, 1.0, 1.0]\n    fraction.inputs[3].default_value = 3.0\n    fraction.operation = 'FRACTION'\n    multiply_1.inputs[2].default_value = 0.002\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    colorramp_3.color_ramp.elements[0].position = 0.508\n    voronoi_texture.inputs[2].default_value = 98.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    mapping.inputs[1].default_value = [0.0, 1.0, 0.0]\n    add.inputs[0].default_value = 1.0\n    add.inputs[1].default_value = 1.0\n    add.inputs[2].default_value = 0.0\n    mix_1.inputs[0].default_value = 1.0\n    scale.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    colorramp_4.color_ramp.elements[0].position = 0.384\n    noise_texture.inputs[2].default_value = -2.2\n    noise_texture.inputs[3].default_value = 10.5\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_5.color_ramp.elements[1].color = [1.0, 0.014, 0.363, 1.0]\n    compare.inputs[1].default_value = 1.2\n    compare.inputs[2].default_value = 0.734\n    compare.operation = 'COMPARE'\n    compare.use_clamp = True\n    absolute.inputs[2].default_value = 0.0\n    absolute.operation = 'ABSOLUTE'\n    absolute.use_clamp = True\n    voronoi_texture_1.inputs[1].default_value = 1.0\n    voronoi_texture_1.inputs[2].default_value = 16.5\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    mapping_1.inputs[3].default_value = [0.5, -1.13, 1.0]\n    emission.inputs[1].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    fresnel.inputs[0].default_value = 1.0\n    glass_bsdf.inputs[0].default_value = [1.0, 0.587, 0.034, 1.0]\n    glass_bsdf.inputs[2].default_value = 1.0\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 0.3\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    comic_half_tone = nodes.new('ShaderNodeGroup')\n    comic_half_tone.node_tree = bpy.data.node_groups['Comic_Half_Tone']\n\n    # Create links to connect nodes\n    links.new(comic_half_tone.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    comic_half_tone.inputs[1].default_value = [0.829, 0.839, 0.671, 1.0]\n    comic_half_tone.inputs[6].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[1], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.15\n    colorramp.color_ramp.elements[1].color = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.inputs[3].default_value = 0.35\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.563, 0.563, 0.563, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n    displacement.inputs[2].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_3 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_shader_2.inputs[0])\n    links.new(principled_bsdf_2.outputs[0], mix_shader_2.inputs[1])\n    links.new(principled_bsdf_3.outputs[0], mix_shader_2.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_2.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_2.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate_2.outputs[3], voronoi_texture_2.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_2.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_2.inputs[22])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    rgb.outputs[0].default_value = [0.179, 0.179, 0.179, 1.0]\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.459\n    colorramp.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 1.47\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    voronoi_texture.inputs[4].default_value = 2.14\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.96\n    noise_texture.inputs[2].default_value = 31.6\n    noise_texture.inputs[3].default_value = 3.7\n    noise_texture.inputs[4].default_value = 0.625\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.65\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.668\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 2.6\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    mix_1.inputs[0].default_value = 0.125\n    voronoi_texture_2.distance = 'MINKOWSKI'\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.583\n    bump_1.invert = True\n    principled_bsdf_3.inputs[6].default_value = 1.0\n    principled_bsdf_3.inputs[9].default_value = 0.009\n    principled_bsdf_3.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    rgb = nodes.new('ShaderNodeRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(less_than.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], less_than.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(rgb.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    less_than.inputs[1].default_value = 0.25\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    voronoi_texture.inputs[2].default_value = 10000.0\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.9\n    rgb.outputs[0].default_value = [0.953, 0.382, 0.173, 1.0]\n    bright_contrast.inputs[1].default_value = -0.9\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    gradient_particles = nodes.new('ShaderNodeGroup')\n    gradient_particles.node_tree = bpy.data.node_groups['Gradient_Particles']\n\n    # Create links to connect nodes\n    links.new(gradient_particles.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    gradient_particles.inputs[2].default_value = 1.0\n    gradient_particles.inputs[3].default_value = 0.6\n    gradient_particles.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_2 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], bump_2.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[1].position = 0.509\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.9\n    colorramp_1.color_ramp.elements[0].position = 0.168\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.035, 0.013, 0.006, 1.0]\n    colorramp_1.color_ramp.elements.new(0.823)\n    colorramp_1.color_ramp.elements[2].color = [0.074, 0.045, 0.035, 1.0]\n    noise_texture_1.inputs[2].default_value = 60.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.064\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump_1.inputs[0].default_value = 0.15\n    principled_bsdf_1.inputs[0].default_value = [0.195, 0.195, 0.195, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.25\n    bump_2.inputs[0].default_value = 0.02\n    noise_texture_2.inputs[2].default_value = 6.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_2 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_2.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], fresnel.inputs[1])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(layer_weight.outputs[1], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(bump.outputs[0], layer_weight.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_1.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_2.inputs[2])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.7\n    bump.inputs[0].default_value = 0.076\n    bump.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 150.0\n    glossy_bsdf.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    glossy_bsdf_1.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.837\n    glossy_bsdf_2.inputs[0].default_value = [0.111, 0.226, 0.326, 1.0]\n    glossy_bsdf_2.inputs[1].default_value = 0.707\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[21])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 44.1\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.241\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.514\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.832)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    mapping.inputs[3].default_value = [0.6, 1.0, 1.2]\n    colorramp_1.color_ramp.elements[1].position = 0.65\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.739)\n    colorramp_1.color_ramp.elements[2].color = [0.032, 0.019, 0.127, 1.0]\n    colorramp_1.color_ramp.elements.new(0.805)\n    colorramp_1.color_ramp.elements[3].color = [0.565, 0.068, 0.095, 1.0]\n    colorramp_1.color_ramp.elements.new(0.878)\n    colorramp_1.color_ramp.elements[4].color = [0.823, 0.171, 0.038, 1.0]\n    colorramp_1.color_ramp.elements.new(0.96)\n    colorramp_1.color_ramp.elements[5].color = [0.922, 0.371, 0.007, 1.0]\n    wave_texture.inputs[1].default_value = -2.1\n    wave_texture.inputs[2].default_value = 10.5\n    wave_texture.inputs[3].default_value = 13.5\n    wave_texture.inputs[4].default_value = 5.1\n    wave_texture.inputs[5].default_value = 0.623\n    mapping_1.inputs[1].default_value = [0.0, 17.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    textured_glow_crystal_glass = nodes.new('ShaderNodeGroup')\n    textured_glow_crystal_glass.node_tree = bpy.data.node_groups['Textured_Glow_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(textured_glow_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(textured_glow_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Faux_Leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], rgb_curves.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], rgb_curves_2.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.294, 0.294, 0.294, 1.0]\n    mix.inputs[2].default_value = [0.289, 0.269, 0.214, 1.0]\n    mix.blend_type = 'LINEAR_LIGHT'\n    rgb_curves.mapping.curves[3].points[1].location = [0.3, 0.656]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'BURN'\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.541, 0.475]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.558\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    texture_coordinate.from_instancer = True\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.65\n    noise_texture_1.inputs[5].default_value = 1.5\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.664, 0.4]\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'OVERLAY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    power = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], emission.inputs[0])\n    links.new(power.outputs[0], checker_texture.inputs[0])\n    links.new(colorramp.outputs[0], checker_texture.inputs[1])\n    links.new(colorramp_1.outputs[0], checker_texture.inputs[2])\n    links.new(voronoi_texture.outputs[1], power.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], power.inputs[1])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[5])\n    links.new(voronoi_texture_2.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_3.outputs[1], voronoi_texture_1.inputs[2])\n    links.new(voronoi_texture_4.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    emission.inputs[1].default_value = 2.0\n    checker_texture.inputs[3].default_value = 99.0\n    power.inputs[2].default_value = 0.0\n    power.operation = 'POWER'\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.distance = 'CHEBYCHEV'\n    wave_texture.inputs[1].default_value = 0.4\n    wave_texture.inputs[2].default_value = 132.0\n    wave_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[4].default_value = 1.2\n    wave_texture.inputs[5].default_value = 1.0\n    wave_texture.wave_profile = 'SAW'\n    voronoi_texture_1.inputs[5].default_value = 0.0\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 2.77\n    voronoi_texture_2.distance = 'MANHATTAN'\n    voronoi_texture_2.feature = 'F2'\n    voronoi_texture_3.inputs[2].default_value = 5.37\n    voronoi_texture_3.inputs[3].default_value = 0.823\n    voronoi_texture_4.inputs[2].default_value = 49.5\n    voronoi_texture_4.inputs[3].default_value = 0.0\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.102\n    colorramp.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.335\n    colorramp.color_ramp.elements[1].color = [0.003, 0.069, 0.224, 1.0]\n    colorramp.color_ramp.elements.new(0.566)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.714)\n    colorramp.color_ramp.elements[3].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].position = 0.102\n    colorramp_1.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.151\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.231)\n    colorramp_1.color_ramp.elements[2].color = [0.006, 0.147, 0.444, 1.0]\n    colorramp_1.color_ramp.elements.new(0.281)\n    colorramp_1.color_ramp.elements[3].color = [0.077, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.294)\n    colorramp_1.color_ramp.elements[4].color = [0.08, 0.024, 0.365, 1.0]\n    colorramp_1.color_ramp.elements.new(0.311)\n    colorramp_1.color_ramp.elements[5].color = [0.038, 0.005, 0.056, 1.0]\n    colorramp_1.color_ramp.elements.new(0.421)\n    colorramp_1.color_ramp.elements[6].color = [0.049, 0.003, 0.008, 1.0]\n    colorramp_1.color_ramp.elements.new(0.464)\n    colorramp_1.color_ramp.elements[7].color = [1.0, 0.617, 0.082, 1.0]\n    colorramp_1.color_ramp.elements.new(0.502)\n    colorramp_1.color_ramp.elements[8].color = [0.004, 0.038, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.543)\n    colorramp_1.color_ramp.elements[9].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.604)\n    colorramp_1.color_ramp.elements[10].color = [0.05, 0.208, 0.022, 1.0]\n    colorramp_1.color_ramp.elements.new(0.714)\n    colorramp_1.color_ramp.elements[11].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.elements.new(0.748)\n    colorramp_1.color_ramp.elements[12].color = [0.035, 0.097, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.81)\n    colorramp_1.color_ramp.elements[13].color = [0.515, 0.207, 0.416, 1.0]\n    colorramp_1.color_ramp.elements.new(0.907)\n    colorramp_1.color_ramp.elements[14].color = [0.093, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    rgb_to_bw_1 = nodes.new('ShaderNodeRGBToBW')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    rgb_to_bw_2 = nodes.new('ShaderNodeRGBToBW')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(rgb_to_bw_2.outputs[0], mix.inputs[2])\n    links.new(invert.outputs[0], mix_1.inputs[1])\n    links.new(invert_1.outputs[0], mix_1.inputs[2])\n    links.new(rgb_to_bw.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(rgb_to_bw_1.outputs[0], invert_1.inputs[1])\n    links.new(multiply.outputs[0], rgb_to_bw_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[2], voronoi_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], rgb_to_bw_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(multiply_1.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.85\n    glossy_bsdf.inputs[1].default_value = 0.424\n    glossy_bsdf.distribution = 'BECKMANN'\n    rgb.outputs[0].default_value = [0.332, 0.153, 0.082, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[0].default_value = 0.44\n    mix_1.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 200.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    noise_texture.inputs[3].default_value = 5.0\n    multiply_1.inputs[0].default_value = 200.0\n    multiply_1.inputs[1].default_value = 0.75\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.292, 0.091, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.042\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.007, 0.0, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    add_2 = nodes.new('ShaderNodeMath')\n    wave_texture_2 = nodes.new('ShaderNodeTexWave')\n    wave_texture_3 = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(map_range.outputs[0], mix_1.inputs[0])\n    links.new(add.outputs[0], map_range.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(add_2.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], add_1.inputs[0])\n    links.new(wave_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(wave_texture_2.outputs[0], add_2.inputs[0])\n    links.new(wave_texture_3.outputs[0], add_2.inputs[1])\n    links.new(mapping.outputs[0], wave_texture_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_3.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(map_range_1.outputs[0], displacement.inputs[0])\n    links.new(add.outputs[0], map_range_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.253\n    principled_bsdf.inputs[12].default_value = 0.269\n    mix.inputs[2].default_value = [0.882, 0.882, 0.882, 1.0]\n    layer_weight.inputs[0].default_value = 0.1\n    mix_1.inputs[1].default_value = [0.04, 0.007, 0.0, 1.0]\n    mix_1.inputs[2].default_value = [0.823, 0.613, 0.257, 1.0]\n    map_range.inputs[1].default_value = 1.2\n    map_range.inputs[2].default_value = 1.7\n    map_range.inputs[3].default_value = -1.0\n    map_range.inputs[4].default_value = 0.9\n    wave_texture.inputs[1].default_value = 20.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n    wave_texture_1.inputs[1].default_value = 20.0\n    wave_texture_1.bands_direction = 'Z'\n    wave_texture_2.inputs[1].default_value = 4.0\n    wave_texture_2.wave_profile = 'SAW'\n    wave_texture_3.inputs[1].default_value = 4.0\n    wave_texture_3.bands_direction = 'Z'\n    wave_texture_3.wave_profile = 'SAW'\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.607, 0.607, 0.607, 1.0]\n    bump.inputs[0].default_value = 0.693\n    noise_texture.inputs[2].default_value = 400.0\n    displacement.inputs[2].default_value = 0.001\n    map_range_1.inputs[1].default_value = 1.1\n    map_range_1.inputs[2].default_value = 0.7\n    map_range_1.inputs[3].default_value = -0.5\n    map_range_1.inputs[4].default_value = 8.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    gamma = nodes.new('ShaderNodeGamma')\n    map_range = nodes.new('ShaderNodeMapRange')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    add_1 = nodes.new('ShaderNodeMath')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[7])\n    links.new(map_range.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(gamma_1.outputs[0], map_range.inputs[0])\n    links.new(voronoi_texture.outputs[1], gamma_1.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(subtract.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], multiply.inputs[1])\n    links.new(noise_texture_2.outputs[0], subtract.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(add_1.outputs[0], musgrave_texture.inputs[3])\n    links.new(noise_texture_3.outputs[0], add_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.191\n    principled_bsdf.inputs[12].default_value = 0.127\n    principled_bsdf.inputs[13].default_value = 0.514\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.492\n    mix.blend_type = 'COLOR'\n    colorramp.color_ramp.elements[0].color = [0.521, 0.323, 0.231, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.595\n    colorramp.color_ramp.elements[1].color = [0.262, 0.068, 0.032, 1.0]\n    noise_texture.inputs[2].default_value = 0.59\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.747\n    noise_texture.inputs[5].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 4.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.521, 0.25, 0.102, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.468\n    colorramp_1.color_ramp.elements[1].color = [0.381, 0.138, 0.058, 1.0]\n    noise_texture_1.inputs[2].default_value = 0.59\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.747\n    noise_texture_1.inputs[5].default_value = 0.7\n    mapping_1.inputs[3].default_value = [1.0, 4.83, 1.0]\n    gamma.inputs[1].default_value = 0.99\n    map_range.inputs[1].default_value = -0.19\n    map_range.inputs[2].default_value = 0.85\n    gamma_1.inputs[1].default_value = 2.89\n    voronoi_texture.inputs[2].default_value = 34.1\n    add.inputs[1].default_value = 27.7\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[1].default_value = 252.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    musgrave_texture.inputs[2].default_value = 2.43\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 0.0\n    add_1.inputs[1].default_value = 13.2\n    add_1.inputs[2].default_value = 0.0\n    noise_texture_3.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.092\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metallic_camo = nodes.new('ShaderNodeGroup')\n    metallic_camo.node_tree = bpy.data.node_groups['Metallic_Camo']\n\n    # Create links to connect nodes\n    links.new(metallic_camo.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    metallic_camo.inputs[0].default_value = 0.4\n    metallic_camo.inputs[13].default_value = [0.345, 0.32, 0.316, 1.0]\n    metallic_camo.inputs[14].default_value = 0.228\n    metallic_camo.inputs[15].default_value = 0.295\n    metallic_camo.inputs[17].default_value = 0.35\n    metallic_camo.inputs[18].default_value = 0.664\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(gamma.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], gamma.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.15\n    glossy_bsdf.inputs[1].default_value = 0.447\n    glossy_bsdf.distribution = 'BECKMANN'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.438, 0.438, 0.438, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.101, 0.101, 0.101, 1.0]\n    fresnel.inputs[0].default_value = 2.45\n    bump.inputs[0].default_value = 1.2\n    bump.inputs[1].default_value = 0.5\n    gamma.inputs[1].default_value = 9.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.114\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.171, 0.171, 0.171, 0.507]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 0.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[5].default_value = 8.0\n    mapping.inputs[3].default_value = [0.1, 1000.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.658, 0.429, 0.038, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    color_ramp.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp.color_ramp.elements[0].position = 0.3\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture_3.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.423\n    colorramp.color_ramp.elements[1].position = 0.445\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 16.0\n    principled_bsdf.inputs[0].default_value = [0.585, 0.585, 0.585, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].position = 0.259\n    colorramp_1.color_ramp.elements[0].color = [0.275, 0.275, 0.275, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.675, 0.675, 0.675, 1.0]\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.75\n    principled_bsdf_1.inputs[0].default_value = [0.8, 0.029, 0.133, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.elements[0].position = 0.364\n    colorramp_2.color_ramp.elements[0].color = [0.183, 0.183, 0.183, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.65\n    colorramp_2.color_ramp.elements[1].color = [0.494, 0.494, 0.494, 1.0]\n    noise_texture_2.inputs[2].default_value = 10.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.05\n    noise_texture_3.inputs[2].default_value = 600.0\n    noise_texture_3.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['GraniteProcedural']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[9])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.296, 0.227, 0.216, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = 1.0\n    group.inputs[6].default_value = 2.0\n    group.inputs[9].default_value = 1.0\n    group.inputs[16].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.337\n    colorramp.color_ramp.elements[0].color = [0.667, 0.192, 0.029, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.703\n    colorramp.color_ramp.elements[1].color = [0.133, 0.042, 0.009, 1.0]\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.84\n    noise_texture.inputs[5].default_value = 5.0\n    mapping.inputs[3].default_value = [3.9, 4.2, 0.1]\n    bump.inputs[0].default_value = 0.373\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_3 = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], gradient_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate_2.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate_3.outputs[3], noise_texture_2.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.595\n    colorramp.color_ramp.elements[1].position = 0.6\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.595\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.371, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    gradient_texture.gradient_type = 'QUADRATIC_SPHERE'\n    colorramp_2.color_ramp.elements[0].position = 0.609\n    colorramp_2.color_ramp.elements[1].position = 0.627\n    noise_texture_1.inputs[3].default_value = 10.0\n    colorramp_3.color_ramp.elements[0].position = 0.636\n    noise_texture_2.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.005\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix_shader_3 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_4 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf_1 = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_5 = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    translucent_bsdf_2 = nodes.new('ShaderNodeBsdfTranslucent')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_2.inputs[0])\n    links.new(mix_shader_3.outputs[0], mix_shader_2.inputs[1])\n    links.new(translucent_bsdf_2.outputs[0], mix_shader_2.inputs[2])\n    links.new(fresnel.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_3.inputs[0])\n    links.new(translucent_bsdf.outputs[0], mix_shader_3.inputs[1])\n    links.new(mix_shader_4.outputs[0], mix_shader_3.inputs[2])\n    links.new(translucent_bsdf_1.outputs[0], mix_shader_4.inputs[1])\n    links.new(mix_shader_5.outputs[0], mix_shader_4.inputs[2])\n    links.new(glass_bsdf.outputs[0], mix_shader_5.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader_5.inputs[2])\n    links.new(normal_map.outputs[0], glossy_bsdf.inputs[2])\n    links.new(voronoi_texture_1.outputs[1], normal_map.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.209\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.245\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 200.0\n    voronoi_texture.inputs[4].default_value = 0.7\n    voronoi_texture.distance = 'MINKOWSKI'\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.159\n    colorramp_1.color_ramp.elements[0].color = [0.222, 0.222, 0.222, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.218\n    fresnel.inputs[0].default_value = 2.5\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.486, 0.091, 1.0]\n    translucent_bsdf_1.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.2\n    glass_bsdf.inputs[2].default_value = 1.5\n    transparent_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    translucent_bsdf_2.inputs[0].default_value = [0.772, 0.059, 0.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.485, 0.091, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.0\n    normal_map.inputs[0].default_value = 10.0\n    normal_map.space = 'WORLD'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    voronoi_texture_1.inputs[4].default_value = 0.7\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    glossy_bsdf_1.inputs[0].default_value = [1.0, 0.61, 0.273, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    divide = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(diffuse_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(map_range.outputs[0], mix.inputs[2])\n    links.new(ambient_occlusion.outputs[1], map_range.inputs[0])\n    links.new(divide.outputs[0], ambient_occlusion.inputs[1])\n    links.new(fresnel.outputs[0], mix_1.inputs[0])\n    links.new(multiply.outputs[0], mix_1.inputs[2])\n    links.new(subtract.outputs[0], multiply.inputs[1])\n    links.new(multiply_1.outputs[0], subtract.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix_2.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_2.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(multiply_2.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.947, 0.965, 1.0, 1.0]\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    ambient_occlusion.only_local = True\n    divide.inputs[0].default_value = 0.05\n    divide.inputs[1].default_value = 0.75\n    divide.operation = 'DIVIDE'\n    mix_1.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[0].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[0].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    multiply_1.inputs[0].default_value = 0.25\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.75\n    bump.inputs[1].default_value = 0.05\n    mix_2.inputs[0].default_value = 0.8\n    noise_texture.inputs[3].default_value = 15.0\n    multiply_2.inputs[0].default_value = 1.0\n    multiply_2.inputs[1].default_value = 10.0\n    multiply_2.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.559, 0.559, 0.559, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], gradient_texture.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.05\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[0].color = [0.007, 0.095, 0.434, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.335, 0.011, 0.004, 1.0]\n    colorramp.color_ramp.elements.new(0.65)\n    colorramp.color_ramp.elements[2].color = [0.339, 0.142, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[3].color = [0.719, 0.719, 0.719, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.46, 0.46, 0.46, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.145\n    colorramp_1.color_ramp.elements[1].color = [0.574, 0.574, 0.574, 1.0]\n    colorramp_1.color_ramp.elements.new(0.968)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.02\n    mix.blend_type = 'BURN'\n    mix_1.inputs[0].default_value = 0.1\n    mix_1.blend_type = 'MULTIPLY'\n    mapping.inputs[1].default_value = [0.35, 0.0, 0.0]\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[5].default_value = 10.0\n    musgrave_texture.inputs[2].default_value = 25.0\n    musgrave_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.75\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.005\n    colorramp.color_ramp.elements[0].color = [0.312, 0.312, 0.312, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.741\n    colorramp.color_ramp.elements[1].color = [0.107, 0.107, 0.107, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.264\n    colorramp_1.color_ramp.elements[0].color = [0.02, 0.02, 0.02, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.514\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 4.5\n    noise_texture.inputs[4].default_value = 0.742\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['CarPaintMaterial']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    less_than = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], multiply_1.inputs[0])\n    links.new(less_than.outputs[0], multiply_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(separate_xyz.outputs[2], less_than.inputs[0])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(separate_xyz.outputs[2], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 8.47\n    multiply.operation = 'MULTIPLY'\n    multiply_1.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.118\n    colorramp.color_ramp.elements[1].position = 0.773\n    musgrave_texture.inputs[2].default_value = 14.9\n    less_than.inputs[1].default_value = 0.85\n    less_than.operation = 'LESS_THAN'\n    principled_bsdf.inputs[1].default_value = 0.02\n    principled_bsdf.inputs[2].default_value = [0.01, 0.1, 0.1]\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 2.0\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[16].default_value = 1.3\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.912\n    colorramp_1.color_ramp.elements[0].color = [0.062, 0.52, 0.196, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.934\n    colorramp_1.color_ramp.elements[1].color = [0.89, 0.064, 0.038, 1.0]\n    diffuse_bsdf.inputs[0].default_value = [0.062, 0.52, 0.223, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 0.721\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    divide = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    divide_1 = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    musgrave_texture_2 = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    add_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], add.inputs[0])\n    links.new(divide.outputs[0], add.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], divide.inputs[0])\n    links.new(divide_1.outputs[0], divide.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(map_range.outputs[0], divide_1.inputs[0])\n    links.new(colorramp_3.outputs[0], divide_1.inputs[1])\n    links.new(musgrave_texture_2.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_2.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add_1.outputs[0], displacement.inputs[0])\n    links.new(voronoi_texture.outputs[0], add_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix.inputs[1])\n    links.new(mapping_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.505\n    colorramp.color_ramp.elements[1].color = [0.939, 0.624, 0.053, 1.0]\n    add.use_clamp = True\n    colorramp_1.color_ramp.elements[0].position = 0.377\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.436\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 74.7\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 5.0\n    musgrave_texture.inputs[5].default_value = 3.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n    mapping.inputs[3].default_value = [6.0, 6.0, 6.0]\n    divide.operation = 'DIVIDE'\n    divide.use_clamp = True\n    colorramp_2.color_ramp.elements[0].position = 0.491\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    musgrave_texture_1.inputs[2].default_value = 16.9\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 5.0\n    musgrave_texture_1.inputs[5].default_value = 3.0\n    musgrave_texture_1.musgrave_type = 'MULTIFRACTAL'\n    divide_1.operation = 'DIVIDE'\n    divide_1.use_clamp = True\n    map_range.inputs[3].default_value = 1.0\n    map_range.interpolation_type = 'SMOOTHERSTEP'\n    musgrave_texture_2.inputs[2].default_value = 2.4\n    musgrave_texture_2.inputs[3].default_value = 15.0\n    musgrave_texture_2.inputs[4].default_value = 5.0\n    musgrave_texture_2.inputs[5].default_value = 3.0\n    colorramp_3.color_ramp.elements[0].position = 0.591\n    colorramp_3.color_ramp.elements[1].position = 0.768\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 0.6\n    displacement.inputs[2].default_value = 0.005\n    voronoi_texture.inputs[2].default_value = 122.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.275\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    mapping_1.inputs[3].default_value = [0.1, 0.1, 0.1]\n    voronoi_texture_1.inputs[2].default_value = 27.6\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(musgrave_texture.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.95\n    mix.inputs[1].default_value = [0.008, 0.002, 0.001, 1.0]\n    mix.inputs[2].default_value = [0.5, 0.118, 0.032, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    musgrave_texture.inputs[6].default_value = 0.025\n    musgrave_texture.inputs[7].default_value = 120.0\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    musgrave_texture_1.inputs[2].default_value = 2.0\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 0.3\n    musgrave_texture_1.inputs[6].default_value = 0.025\n    musgrave_texture_1.inputs[7].default_value = 120.0\n    musgrave_texture_1.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.01\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], voronoi_texture.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.01\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.11, 0.008, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.491\n    colorramp.color_ramp.elements[0].color = [0.019, 0.011, 0.009, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.002, 0.001, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.573)\n    colorramp.color_ramp.elements[2].color = [0.009, 0.006, 0.006, 1.0]\n    colorramp.color_ramp.elements.new(0.577)\n    colorramp.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.327, 0.327, 0.327, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.018\n    colorramp_1.color_ramp.elements[1].color = [0.735, 0.735, 0.735, 1.0]\n    bump.inputs[0].default_value = 0.4\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DIVIDE'\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    colorramp_2.color_ramp.elements[0].position = 0.729\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.805\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_2.inputs[2].default_value = 70.0\n    noise_texture_2.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(multiply_1.outputs[0], principled_bsdf.inputs[20])\n    links.new(brick_texture.outputs[1], principled_bsdf.inputs[21])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], brick_texture.inputs[5])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.0, 0.327, 1.0, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    add.inputs[1].default_value = 0.01\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 3.0\n    mix.inputs[0].default_value = 0.119\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.168\n    colorramp.color_ramp.elements[0].color = [0.001, 0.757, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.782\n    colorramp.color_ramp.elements[1].color = [0.305, 0.338, 1.0, 1.0]\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], displacement.inputs[2])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.109\n    principled_bsdf.inputs[20].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.482\n    colorramp.color_ramp.elements[0].color = [1.0, 0.967, 0.941, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.986\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[2].default_value = 10.5\n    noise_texture.inputs[3].default_value = 9.9\n    noise_texture.inputs[4].default_value = 0.583\n    colorramp_1.color_ramp.elements[0].position = 0.473\n    colorramp_1.color_ramp.elements[1].position = 0.986\n    displacement.inputs[0].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [0.077, 0.059, 0.146, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.818\n    colorramp_2.color_ramp.elements[1].color = [0.922, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    color_ramp_2 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(color_ramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(color_ramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(noise_texture_1.outputs[0], color_ramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(color_ramp_2.outputs[0], bump_2.inputs[2])\n    links.new(wave_texture.outputs[0], color_ramp_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.038, 0.09, 0.22, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    color_ramp.color_ramp.elements[0].position = 0.25\n    noise_texture.inputs[2].default_value = 0.3\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.625\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    bump_1.inputs[1].default_value = 0.1\n    bump_1.invert = True\n    color_ramp_1.color_ramp.interpolation = 'EASE'\n    color_ramp_1.color_ramp.elements[0].position = 0.55\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 14.5\n    noise_texture_1.inputs[5].default_value = 1.0\n    bump_2.inputs[0].default_value = 0.07\n    bump_2.inputs[1].default_value = 0.1\n    bump_2.invert = True\n    color_ramp_2.color_ramp.elements[0].position = 0.85\n    wave_texture.inputs[1].default_value = 200.0\n    wave_texture.inputs[2].default_value = 14.5\n    wave_texture.inputs[3].default_value = 14.5\n    wave_texture.inputs[4].default_value = 2.5\n    wave_texture.inputs[5].default_value = 0.75\n    wave_texture.bands_direction = 'Z'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    granite_blue = nodes.new('ShaderNodeGroup')\n    granite_blue.node_tree = bpy.data.node_groups['Granite_Blue']\n    add = nodes.new('ShaderNodeVectorMath')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_1 = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    combine_xyz_1 = nodes.new('ShaderNodeCombineXYZ')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    multiply_2 = nodes.new('ShaderNodeVectorMath')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(granite_blue.outputs[0], principled_bsdf.inputs[0])\n    links.new(granite_blue.outputs[1], principled_bsdf.inputs[9])\n    links.new(granite_blue.outputs[2], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], granite_blue.inputs[0])\n    links.new(rgb_to_bw.outputs[0], granite_blue.inputs[1])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], multiply.inputs[0])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(multiply_1.outputs[0], mapping.inputs[3])\n    links.new(combine_xyz.outputs[0], multiply_1.inputs[0])\n    links.new(combine_xyz_1.outputs[0], multiply_1.inputs[1])\n    links.new(multiply_2.outputs[0], add_1.inputs[0])\n    links.new(mapping.outputs[0], add_1.inputs[1])\n    links.new(noise_texture.outputs[1], multiply_2.inputs[0])\n    links.new(colorramp.outputs[0], rgb_to_bw.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    granite_blue.inputs[3].default_value = 0.48\n    granite_blue.inputs[4].default_value = [0.035, 0.032, 0.058, 1.0]\n    granite_blue.inputs[5].default_value = 0.08\n    granite_blue.inputs[6].default_value = 0.3\n    granite_blue.inputs[7].default_value = [0.017, 0.035, 0.031, 1.0]\n    granite_blue.inputs[8].default_value = 0.04\n    granite_blue.inputs[9].default_value = 0.1\n    multiply.inputs[1].default_value = [0.02, 0.02, 0.02]\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 0.3\n    wave_texture.inputs[4].default_value = 0.0\n    wave_texture.inputs[5].default_value = 0.523\n    mix.inputs[0].default_value = 0.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.2\n    noise_texture.inputs[4].default_value = 0.425\n    noise_texture.inputs[5].default_value = 0.2\n    mapping.inputs[1].default_value = [12.0, -12.0, -3.0]\n    mapping.inputs[2].default_value = [-0.279, 0.332, 0.777]\n    multiply_1.operation = 'MULTIPLY'\n    combine_xyz.inputs[0].default_value = 0.6\n    combine_xyz.inputs[1].default_value = 0.4\n    combine_xyz.inputs[2].default_value = 1.0\n    combine_xyz_1.inputs[0].default_value = 1.0\n    combine_xyz_1.inputs[1].default_value = 1.0\n    combine_xyz_1.inputs[2].default_value = 1.0\n    multiply_2.inputs[1].default_value = [0.05, 0.05, 0.05]\n    multiply_2.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Old_brass']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[7])\n    links.new(group.outputs[2], principled_bsdf.inputs[9])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = [1.0, 1.0, 1.0]\n    displacement.inputs[2].default_value = 0.02\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[1].position = 0.345\n    colorramp.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp.color_ramp.elements.new(0.95)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.964)\n    colorramp.color_ramp.elements[3].color = [0.239, 0.239, 0.239, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'BURN'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    wave_texture.wave_profile = 'SAW'\n    wave_texture_1.inputs[1].default_value = 6.0\n    wave_texture_1.inputs[2].default_value = 60.0\n    wave_texture_1.bands_direction = 'Y'\n    wave_texture_1.wave_profile = 'SAW'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.432, 0.085, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.075\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.076, 0.022, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    decorative_glass = nodes.new('ShaderNodeGroup')\n    decorative_glass.node_tree = bpy.data.node_groups['Decorative_Glass_002']\n\n    # Create links to connect nodes\n    links.new(decorative_glass.outputs[0], material_output.inputs[0])\n    links.new(decorative_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(checker_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], mix_2.inputs[1])\n    links.new(voronoi_texture_2.outputs[1], mix_2.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(noise_texture.outputs[1], checker_texture.inputs[0])\n    links.new(mapping_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping_2.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.552, 0.552, 0.552, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.836\n    mix.inputs[0].default_value = 0.333\n    mix.blend_type = 'MULTIPLY'\n    mix_1.blend_type = 'SUBTRACT'\n    mix_2.blend_type = 'SCREEN'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [20.9, 20.9, 20.9]\n    voronoi_texture_1.inputs[2].default_value = 32.1\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 72.6\n    voronoi_texture_2.feature = 'SMOOTH_F1'\n    checker_texture.inputs[1].default_value = [0.8, 0.8, 0.8, 1.0]\n    checker_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    checker_texture.inputs[3].default_value = 93.2\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 1.0\n    mapping_2.inputs[3].default_value = [59.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.117\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(color_ramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(color_ramp_1.outputs[0], color_ramp.inputs[0])\n    links.new(wave_texture.outputs[1], color_ramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.02, 0.003, 0.0, 1.0]\n    color_ramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.048\n    color_ramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    color_ramp_1.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp_1.color_ramp.elements[0].position = 0.17\n    color_ramp_1.color_ramp.elements[1].position = 0.655\n    color_ramp_1.color_ramp.elements[1].color = [0.0, 0.05, 0.004, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.791)\n    color_ramp_1.color_ramp.elements[2].color = [0.0, 0.1, 0.007, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.918)\n    color_ramp_1.color_ramp.elements[3].color = [0.0, 0.15, 0.011, 1.0]\n    color_ramp_1.color_ramp.elements.new(1.0)\n    color_ramp_1.color_ramp.elements[4].color = [0.0, 0.363, 0.026, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[5].default_value = 0.25\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.45\n    noise_texture.inputs[5].default_value = 0.15\n    noise_texture.noise_dimensions = '4D'\n    bump.inputs[0].default_value = 0.65\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    wood_floor = nodes.new('ShaderNodeGroup')\n    wood_floor.node_tree = bpy.data.node_groups['wood_floor']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(wood_floor.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[2], wood_floor.inputs[27])\n\n    # Set parameters for each node\n    wood_floor.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    wood_floor.inputs[4].default_value = 0.02\n    wood_floor.inputs[5].default_value = 0.0\n    wood_floor.inputs[19].default_value = 0.5\n    wood_floor.inputs[21].default_value = 1.0\n    wood_floor.inputs[22].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(glossy_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.195\n    fresnel.inputs[0].default_value = 2.0\n    displacement.inputs[2].default_value = 0.02\n    voronoi_texture.inputs[2].default_value = 16.0\n    voronoi_texture.distance = 'MANHATTAN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(invert.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[1].position = 0.55\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 4.1\n    noise_texture.inputs[4].default_value = 0.667\n    noise_texture.inputs[5].default_value = 0.15\n    mapping.inputs[1].default_value = [2.7, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.063, 0.0, 0.0]\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.5]\n    emission.inputs[1].default_value = 1.1\n    colorramp_1.color_ramp.elements[0].position = 0.482\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.568\n    colorramp_1.color_ramp.elements[1].color = [0.634, 0.856, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.4\n    noise_texture_1.inputs[3].default_value = 6.5\n    noise_texture_1.inputs[4].default_value = 0.533\n    noise_texture_1.inputs[5].default_value = 1.3\n    mapping_1.inputs[1].default_value = [-1.29, 6.1, 3.6]\n    mapping_1.inputs[2].default_value = [0.079, 0.026, 0.0]\n    mapping_1.inputs[3].default_value = [-3.6, 0.4, 1.3]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['WO_Wood_Procedural_Smooth']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 80.0\n    group.inputs[3].default_value = 5.0\n    group.inputs[5].default_value = [0.516, 0.162, 0.057, 1.0]\n    group.inputs[11].default_value = 0.6\n    group.inputs[12].default_value = 20.0\n    group.inputs[14].default_value = 0.08\n    group.inputs[15].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Road']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.113, 0.137, 0.157, 1.0]\n    group.inputs[2].default_value = [0.241, 0.271, 0.297, 1.0]\n    group.inputs[4].default_value = [0.09, 0.115, 0.171, 1.0]\n    group.inputs[6].default_value = 5.0\n    group.inputs[7].default_value = 4.0\n    group.inputs[8].default_value = 5.0\n    group.inputs[9].default_value = 7.6\n    group.inputs[10].default_value = [0.215, 0.123, 0.074, 1.0]\n    group.inputs[11].default_value = [0.26, 0.294, 0.334, 1.0]\n    group.inputs[12].default_value = [0.1, 0.064, 0.012, 1.0]\n    group.inputs[13].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['alpha_metal_with_scratch_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.541, 0.424, 0.223, 1.0]\n    group.inputs[9].default_value = 0.073\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    rusty_metal = nodes.new('ShaderNodeGroup')\n    rusty_metal.node_tree = bpy.data.node_groups['Rusty_Metal']\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(rusty_metal.outputs[0], material_output.inputs[0])\n    links.new(rusty_metal.outputs[1], material_output.inputs[2])\n    links.new(mix.outputs[0], rusty_metal.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    rusty_metal.inputs[16].default_value = 0.1\n    rusty_metal.inputs[21].default_value = 0.15\n    rusty_metal.inputs[22].default_value = 1.1\n    rusty_metal.inputs[24].default_value = 0.15\n    rusty_metal.inputs[25].default_value = 0.218\n    rusty_metal.inputs[28].default_value = 1.0\n    mix.inputs[0].default_value = 0.15\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    rgb.outputs[0].default_value = [0.356, 0.337, 0.296, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    subtract = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(brick_texture.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], add_1.inputs[0])\n    links.new(multiply_1.outputs[0], add_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_1.inputs[0])\n    links.new(subtract.outputs[0], bump.inputs[2])\n    links.new(subtract_1.outputs[0], subtract.inputs[0])\n    links.new(noise_texture_2.outputs[0], subtract.inputs[1])\n    links.new(brick_texture.outputs[1], subtract_1.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    diffuse_bsdf.inputs[1].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.014\n    colorramp.color_ramp.elements[0].color = [0.072, 0.069, 0.07, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.022\n    colorramp.color_ramp.elements[1].color = [0.089, 0.013, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.511)\n    colorramp.color_ramp.elements[2].color = [0.106, 0.009, 0.005, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [0.271, 0.088, 0.0, 1.0]\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[1].default_value = 0.01\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 67.1\n    brick_texture.inputs[4].default_value = 0.8\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 0.0\n    brick_texture.inputs[8].default_value = 0.4\n    brick_texture.inputs[9].default_value = 0.4\n    brick_texture.offset = 0.0\n    brick_texture.offset_frequency = 1\n    brick_texture.squash_frequency = 1\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    multiply_1.inputs[1].default_value = 0.03\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    noise_texture_1.inputs[2].default_value = 17.5\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    subtract_1.inputs[0].default_value = 1.0\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    subtract_1.use_clamp = True\n    noise_texture_2.inputs[2].default_value = 11.3\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.316\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(light_path.outputs[5], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader_2.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_2.inputs[1])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 9.5\n    noise_texture.inputs[5].default_value = 4.8\n    glossy_bsdf.inputs[1].default_value = 0.224\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    scratched_glass_crystal = nodes.new('ShaderNodeGroup')\n    scratched_glass_crystal.node_tree = bpy.data.node_groups['Scratched_Glass_Crystal']\n\n    # Create links to connect nodes\n    links.new(scratched_glass_crystal.outputs[0], material_output.inputs[0])\n    links.new(scratched_glass_crystal.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    scratched_glass_crystal.inputs[0].default_value = [0.969, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    multiply_add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(multiply_add.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_add.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_add.inputs[1])\n    links.new(noise_texture_2.outputs[0], multiply_add.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture_2.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(multiply_add.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.573\n    principled_bsdf.inputs[8].default_value = 0.173\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.214\n    colorramp.color_ramp.elements[0].color = [0.002, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.241\n    colorramp.color_ramp.elements[1].color = [0.003, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements.new(0.468)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.509)\n    colorramp.color_ramp.elements[3].color = [0.001, 0.001, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.841)\n    colorramp.color_ramp.elements[4].color = [0.002, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements.new(0.991)\n    colorramp.color_ramp.elements[5].color = [0.008, 0.008, 0.007, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.161\n    colorramp_1.color_ramp.elements[1].position = 0.186\n    colorramp_1.color_ramp.elements.new(0.318)\n    colorramp_1.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.559)\n    colorramp_1.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[4].color = [0.83, 0.83, 0.83, 1.0]\n    multiply_add.operation = 'MULTIPLY_ADD'\n    noise_texture.inputs[2].default_value = 8.5\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture_1.inputs[2].default_value = 18.9\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.533\n    noise_texture_2.inputs[2].default_value = 4.2\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.383\n    colorramp_2.color_ramp.elements[0].position = 0.409\n    colorramp_2.color_ramp.elements[0].color = [0.83, 0.83, 0.83, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.632\n    colorramp_2.color_ramp.elements[1].color = [0.522, 0.522, 0.522, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.515\n    colorramp.color_ramp.elements[0].color = [0.044, 0.02, 0.013, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.544\n    colorramp.color_ramp.elements[1].color = [0.423, 0.171, 0.067, 1.0]\n    colorramp.color_ramp.elements.new(0.587)\n    colorramp.color_ramp.elements[2].color = [0.352, 0.112, 0.023, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.7\n    noise_texture.inputs[5].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 1.0, 20.0]\n    colorramp_1.color_ramp.elements[0].color = [0.055, 0.055, 0.055, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.057, 0.057, 0.057, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.63\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.8\n    bump_1.inputs[0].default_value = 0.15\n    noise_texture_1.inputs[2].default_value = 2.5\n    displacement.inputs[2].default_value = 0.1\n    noise_texture_2.inputs[2].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[9])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[14])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], gamma.inputs[0])\n    links.new(noise_texture_1.outputs[1], bright_contrast.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(gamma.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(gamma.outputs[0], principled_bsdf_1.inputs[14])\n    links.new(bump_1.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_1.outputs[1], bump_1.inputs[2])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 131.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.772\n    principled_bsdf.inputs[0].default_value = [0.114, 0.138, 0.136, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    gamma.inputs[1].default_value = 2.2\n    bright_contrast.inputs[1].default_value = 0.0\n    bright_contrast.inputs[2].default_value = 0.7\n    noise_texture_1.inputs[2].default_value = 206.0\n    noise_texture_1.inputs[3].default_value = 9.1\n    noise_texture_1.inputs[4].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.4\n    bump.inputs[0].default_value = 0.067\n    principled_bsdf_1.inputs[0].default_value = [0.047, 0.058, 0.067, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.524\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.067\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    blend_weight = nodes.new('ShaderNodeLayerWeight')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(blend_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n\n    # Set parameters for each node\n    blend_weight.inputs[0].default_value = 0.5\n    glass_bsdf.inputs[0].default_value = [0.8, 0.0, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.316\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[1])\n    links.new(multiply_2.outputs[0], displacement.inputs[0])\n    links.new(multiply_1.outputs[0], multiply_2.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 7.0\n    diffuse_bsdf.inputs[0].default_value = [0.482, 0.312, 0.127, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply_2.inputs[1].default_value = -7.0\n    multiply_2.inputs[2].default_value = 0.0\n    multiply_2.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.027, 0.027, 0.027, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[1].position = 0.909\n    noise_texture.inputs[2].default_value = 3.9\n    noise_texture.inputs[3].default_value = 7.8\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.02\n    bump.inputs[0].default_value = 0.111\n    bump.invert = True\n    noise_texture_1.inputs[2].default_value = 449.0\n    noise_texture_1.inputs[3].default_value = 1.6\n    noise_texture_1.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_3.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.297\n    voronoi_texture.inputs[2].default_value = 352.0\n    voronoi_texture.inputs[3].default_value = 0.028\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [0.8, 1.2, 1.2]\n    principled_bsdf.inputs[1].default_value = 0.176\n    principled_bsdf.inputs[7].default_value = 0.412\n    principled_bsdf.inputs[9].default_value = 0.036\n    colorramp_1.color_ramp.elements[0].color = [0.565, 0.521, 0.494, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.782\n    colorramp_1.color_ramp.elements[1].color = [0.058, 0.012, 0.006, 1.0]\n    voronoi_texture_1.inputs[2].default_value = 10.6\n    voronoi_texture_1.inputs[3].default_value = 0.656\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    bump.inputs[0].default_value = 0.211\n    bump.invert = True\n    principled_bsdf_1.inputs[7].default_value = 0.23\n    principled_bsdf_1.inputs[9].default_value = 0.142\n    colorramp_3.color_ramp.elements[0].position = 0.145\n    colorramp_3.color_ramp.elements[0].color = [0.009, 0.004, 0.003, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [1.0, 0.968, 0.847, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[14].default_value = 0.488\n    principled_bsdf.subsurface_method = 'BURLEY'\n    gamma.inputs[1].default_value = 2.1\n    voronoi_texture.inputs[2].default_value = 304.0\n    voronoi_texture.inputs[3].default_value = 0.239\n    voronoi_texture.feature = 'SMOOTH_F1'\n    voronoi_texture.voronoi_dimensions = '4D'\n    bump.inputs[0].default_value = 0.656\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    attribute = nodes.new('ShaderNodeAttribute')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(attribute.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    attribute.attribute_name = 'col'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    bevel = nodes.new('ShaderNodeBevel')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_4.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(dot_product.outputs[1], map_range.inputs[0])\n    links.new(bevel.outputs[0], dot_product.inputs[0])\n    links.new(geometry.outputs[1], dot_product.inputs[1])\n    links.new(multiply.outputs[0], bevel.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(brick_texture.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_3.outputs[0], mix_2.inputs[1])\n    links.new(colorramp.outputs[0], mix_3.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], mix_4.inputs[0])\n    links.new(bump.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_2.inputs[0])\n    links.new(mix_5.outputs[0], displacement.inputs[0])\n    links.new(invert.outputs[0], mix_5.inputs[1])\n    links.new(brick_texture.outputs[0], mix_5.inputs[2])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [0.067, 0.063, 0.054, 1.0]\n    mix.blend_type = 'LIGHTEN'\n    map_range.inputs[1].default_value = 0.8\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    dot_product.operation = 'DOT_PRODUCT'\n    multiply.inputs[0].default_value = 0.02\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 59.3\n    mix_1.inputs[2].default_value = [0.148, 0.124, 0.084, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.523\n    brick_texture.inputs[1].default_value = [0.025, 0.017, 0.008, 1.0]\n    brick_texture.inputs[2].default_value = [0.223, 0.134, 0.049, 1.0]\n    brick_texture.inputs[4].default_value = 4.0\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    mix_2.inputs[2].default_value = [0.541, 0.541, 0.541, 1.0]\n    mix_2.blend_type = 'SCREEN'\n    colorramp_1.color_ramp.elements[0].position = 0.482\n    colorramp_1.color_ramp.elements[0].color = [0.01, 0.01, 0.01, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.591\n    colorramp_1.color_ramp.elements[1].color = [0.571, 0.571, 0.571, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    mix_4.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.209\n    colorramp_2.color_ramp.elements[0].color = [0.01, 0.01, 0.01, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.571, 0.571, 0.571, 1.0]\n    noise_texture_2.inputs[2].default_value = 150.0\n    noise_texture_2.inputs[3].default_value = 10.0\n    noise_texture_2.inputs[4].default_value = 0.7\n    displacement.inputs[2].default_value = 0.007\n    mix_5.blend_type = 'ADD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_volume = nodes.new('ShaderNodeVolumePrincipled')\n\n    # Create links to connect nodes\n    links.new(glass_bsdf.outputs[0], material_output.inputs[0])\n    links.new(principled_volume.outputs[0], material_output.inputs[1])\n    links.new(voronoi_texture.outputs[0], glass_bsdf.inputs[1])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = -20.5\n    wave_texture.inputs[1].default_value = 0.3\n    wave_texture.inputs[2].default_value = 226.0\n    wave_texture.inputs[3].default_value = 0.7\n    wave_texture.inputs[4].default_value = -1.7\n    wave_texture.inputs[5].default_value = 0.223\n    noise_texture.inputs[2].default_value = -0.4\n    noise_texture.inputs[3].default_value = 2.4\n    noise_texture.inputs[4].default_value = 0.433\n    noise_texture.inputs[5].default_value = 105.0\n    principled_volume.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_volume.inputs[2].default_value = 0.2\n    principled_volume.inputs[4].default_value = 1.0\n    principled_volume.inputs[5].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_volume.inputs[6].default_value = 0.05\n    principled_volume.inputs[10].default_value = -26.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2_v_a_r = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp_1_v_a_r = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_1_v_a_r_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3_v_a_r = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_3_v_a_r.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(colorramp_1_v_a_r_1.outputs[0], mix.inputs[2])\n    links.new(colorramp_2_v_a_r.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1_v_a_r.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_2_v_a_r.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[1], colorramp_1_v_a_r.inputs[0])\n    links.new(noise_texture_1.outputs[1], wave_texture.inputs[0])\n    links.new(geometry.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_1_v_a_r_1.inputs[0])\n    links.new(geometry.outputs[0], noise_texture_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_3_v_a_r.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2_v_a_r.color_ramp.elements[0].position = 0.466\n    colorramp_2_v_a_r.color_ramp.elements[1].position = 0.526\n    noise_texture.inputs[1].default_value = 8.92\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.noise_dimensions = '4D'\n    colorramp_1_v_a_r.color_ramp.elements[1].position = 0.097\n    wave_texture.inputs[1].default_value = 2.63\n    wave_texture.inputs[2].default_value = 4.99\n    wave_texture.inputs[3].default_value = 27.7\n    noise_texture_1.inputs[1].default_value = 9.64\n    noise_texture_1.inputs[2].default_value = 0.5\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.noise_dimensions = '4D'\n    colorramp_1_v_a_r_1.color_ramp.elements[0].position = 0.223\n    colorramp_1_v_a_r_1.color_ramp.elements[0].color = [0.004, 0.004, 0.004, 1.0]\n    colorramp_1_v_a_r_1.color_ramp.elements[1].position = 0.509\n    colorramp_1_v_a_r_1.color_ramp.elements[1].color = [0.049, 0.046, 0.051, 1.0]\n    colorramp_1_v_a_r_1.color_ramp.elements.new(1.0)\n    colorramp_1_v_a_r_1.color_ramp.elements[2].color = [0.04, 0.047, 0.038, 1.0]\n    noise_texture_2.inputs[1].default_value = 4.38\n    noise_texture_2.inputs[2].default_value = 6.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.noise_dimensions = '4D'\n    colorramp_3_v_a_r.color_ramp.elements[0].position = 0.082\n    colorramp_3_v_a_r.color_ramp.elements[0].color = [0.678, 0.678, 0.678, 1.0]\n    colorramp_3_v_a_r.color_ramp.elements[1].position = 0.768\n    colorramp_3_v_a_r.color_ramp.elements[1].color = [0.787, 0.787, 0.787, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['TE_TableCloth']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(gamma.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(rgb_to_bw.outputs[0], mix.inputs[0])\n    links.new(group.outputs[0], rgb_to_bw.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], gamma_1.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.236\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.2\n    glossy_bsdf.inputs[1].default_value = 0.894\n    glossy_bsdf.distribution = 'BECKMANN'\n    mix.inputs[1].default_value = [0.056, 0.135, 0.28, 1.0]\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    group.inputs[1].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    gamma_1.inputs[1].default_value = 3.0\n    mix_1.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 40.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 0.785]\n    mapping_1.inputs[3].default_value = [5.0, 1.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 120.0\n    wave_texture_1.inputs[2].default_value = 4.0\n    wave_texture_1.inputs[4].default_value = 6.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[2].default_value = [0.0, -0.0, 2.36]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[7])\n    links.new(invert.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.007, 0.006, 0.005, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[1].position = 0.357\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.592)\n    colorramp.color_ramp.elements[2].color = [0.008, 0.008, 0.008, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 75.0\n    noise_texture.inputs[3].default_value = 256.0\n    noise_texture.inputs[4].default_value = 0.633\n    bump.inputs[0].default_value = 0.425\n    bump.inputs[1].default_value = 0.95\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['tilesss']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[4], principled_bsdf.inputs[9])\n    links.new(group.outputs[1], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 3.0\n    group.inputs[1].default_value = 100.0\n    group.inputs[3].default_value = [0.5, 0.0, 0.425, 1.0]\n    group.inputs[4].default_value = [0.5, 0.008, 0.0, 1.0]\n    group.inputs[5].default_value = [0.05, 0.5, 0.0, 1.0]\n    group.inputs[6].default_value = 67.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glitter = nodes.new('ShaderNodeGroup')\n    glitter.node_tree = bpy.data.node_groups['Glitter_003']\n\n    # Create links to connect nodes\n    links.new(glitter.outputs[0], material_output.inputs[0])\n    links.new(glitter.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    glitter.inputs[0].default_value = [1.0, 0.0, 0.771, 1.0]\n    glitter.inputs[1].default_value = [0.681, 0.904, 1.0, 1.0]\n    glitter.inputs[2].default_value = 0.4\n    glitter.inputs[5].default_value = 0.25\n    glitter.inputs[6].default_value = 0.015\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Quilted_leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.73, 0.008, 0.004, 1.0]\n    group.inputs[1].default_value = [0.069, 0.001, 0.001, 1.0]\n    group.inputs[2].default_value = [0.548, 0.524, 0.509, 1.0]\n    group.inputs[3].default_value = 70.0\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 70.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.7\n    group.inputs[9].default_value = 0.576\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Dry_Cracked_Soil']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[6].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_1 = nodes.new('ShaderNodeTexGradient')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_2 = nodes.new('ShaderNodeTexGradient')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_3 = nodes.new('ShaderNodeTexGradient')\n    mapping_3 = nodes.new('ShaderNodeMapping')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_4 = nodes.new('ShaderNodeTexGradient')\n    mapping_4 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(mix_3.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(gradient_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], gradient_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mix_4.outputs[0], mix_3.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_3.inputs[2])\n    links.new(colorramp_2.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_4.inputs[2])\n    links.new(gradient_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping_2.outputs[0], gradient_texture_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_2.inputs[0])\n    links.new(gradient_texture_3.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping_3.outputs[0], gradient_texture_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_3.inputs[0])\n    links.new(gradient_texture_4.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping_4.outputs[0], gradient_texture_4.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_4.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.15\n    principled_bsdf.inputs[17].default_value = 0.3\n    mix.inputs[2].default_value = [0.58, 0.58, 0.58, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    mix_1.inputs[1].default_value = [0.449, 0.123, 1.0, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.96\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.96\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mapping_1.inputs[2].default_value = [0.0, -1.57, 0.0]\n    mix_3.inputs[0].default_value = 1.0\n    mix_4.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].color = [0.0, 1.0, 0.887, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.16\n    gradient_texture_2.gradient_type = 'RADIAL'\n    colorramp_3.color_ramp.interpolation = 'CONSTANT'\n    colorramp_3.color_ramp.elements[0].color = [1.0, 0.0, 0.211, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.16\n    gradient_texture_3.gradient_type = 'RADIAL'\n    mapping_3.inputs[2].default_value = [0.0, 0.0, 2.09]\n    colorramp_4.color_ramp.interpolation = 'CONSTANT'\n    colorramp_4.color_ramp.elements[0].color = [0.083, 1.0, 0.0, 1.0]\n    colorramp_4.color_ramp.elements[1].position = 0.16\n    gradient_texture_4.gradient_type = 'RADIAL'\n    mapping_4.inputs[2].default_value = [0.0, 0.0, 4.19]\n    bump.inputs[0].default_value = 0.02\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    noise_texture_1.inputs[5].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    paint_over_rust = nodes.new('ShaderNodeGroup')\n    paint_over_rust.node_tree = bpy.data.node_groups['Paint_Over_Rust']\n\n    # Create links to connect nodes\n    links.new(paint_over_rust.outputs[0], material_output.inputs[0])\n    links.new(paint_over_rust.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    paint_over_rust.inputs[28].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(magic_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(magic_texture.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.008, 0.008, 0.008, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.459\n    principled_bsdf.inputs[20].default_value = 3.0\n    bump.inputs[0].default_value = 0.625\n    noise_texture.inputs[2].default_value = 12.7\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[5].default_value = 1.0\n    magic_texture.inputs[1].default_value = 0.2\n    magic_texture.inputs[2].default_value = 2.0\n    magic_texture.turbulence_depth = 3\n    displacement.inputs[2].default_value = 0.2\n    noise_texture_1.inputs[2].default_value = 2.6\n    noise_texture_1.inputs[3].default_value = 2.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Scratched_Paint']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[3], group.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.263, 0.014, 0.0, 1.0]\n    group.inputs[3].default_value = 0.65\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['True_BSDF']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    modulo = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeVectorMath')\n    subtract_1 = nodes.new('ShaderNodeVectorMath')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    cross_product = nodes.new('ShaderNodeVectorMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], group.inputs[0])\n    links.new(mix_2.outputs[0], group.inputs[20])\n    links.new(modulo.outputs[0], group.inputs[27])\n    links.new(modulo.outputs[0], colorramp.inputs[0])\n    links.new(subtract.outputs[0], modulo.inputs[0])\n    links.new(subtract_1.outputs[0], subtract.inputs[0])\n    links.new(mix_1.outputs[0], subtract.inputs[1])\n    links.new(wave_texture.outputs[0], subtract.inputs[3])\n    links.new(fraction.outputs[0], subtract_1.inputs[0])\n    links.new(colorramp_1.outputs[0], subtract_1.inputs[1])\n    links.new(cross_product.outputs[0], fraction.inputs[0])\n    links.new(mix.outputs[0], cross_product.inputs[0])\n    links.new(voronoi_texture.outputs[2], cross_product.inputs[1])\n    links.new(scale.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(scale.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(modulo.outputs[0], mix_2.inputs[1])\n    links.new(voronoi_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[22].default_value = 0.27\n    group.inputs[25].default_value = 0.5\n    group.inputs[26].default_value = 0.42\n    group.inputs[28].default_value = 0.678\n    group.inputs[29].default_value = -0.11\n    colorramp.color_ramp.elements[0].color = [0.033, 0.013, 0.081, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.922, 1.0, 1.0]\n    modulo.inputs[1].default_value = 0.55\n    modulo.inputs[2].default_value = 0.0\n    modulo.operation = 'MODULO'\n    subtract.operation = 'SUBTRACT'\n    subtract_1.operation = 'SUBTRACT'\n    fraction.operation = 'FRACTION'\n    cross_product.operation = 'CROSS_PRODUCT'\n    mix.inputs[0].default_value = 0.002\n    scale.operation = 'SCALE'\n    brick_texture.inputs[4].default_value = 152.0\n    brick_texture.inputs[5].default_value = 0.05\n    brick_texture.inputs[6].default_value = 0.26\n    brick_texture.inputs[7].default_value = 0.32\n    brick_texture.inputs[8].default_value = 0.17\n    brick_texture.inputs[9].default_value = 0.14\n    brick_texture.offset = 0.0\n    voronoi_texture.inputs[2].default_value = 24.0\n    voronoi_texture.inputs[5].default_value = 0.051\n    colorramp_1.color_ramp.elements[0].position = 0.442\n    colorramp_1.color_ramp.elements[1].position = 0.775\n    mix_1.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 125.0\n    wave_texture.inputs[2].default_value = 0.58\n    mix_2.inputs[0].default_value = 0.197\n    voronoi_texture_1.inputs[2].default_value = 800.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping_2.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate_2.outputs[3], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.432\n    principled_bsdf.inputs[9].default_value = 0.186\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    mix_1.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.264\n    colorramp.color_ramp.elements[1].color = [1.0, 0.99, 0.849, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 144.0\n    wave_texture.inputs[3].default_value = 20.0\n    wave_texture.inputs[5].default_value = 0.823\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.015, 0.001, 0.019, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.394\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.815)\n    colorramp_1.color_ramp.elements[2].color = [0.322, 0.24, 0.163, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[3].color = [1.0, 0.99, 0.849, 1.0]\n    wave_texture_1.inputs[1].default_value = 0.1\n    wave_texture_1.inputs[2].default_value = 128.0\n    wave_texture_1.inputs[3].default_value = 20.0\n    wave_texture_1.inputs[5].default_value = 0.823\n    colorramp_2.color_ramp.elements[0].position = 0.541\n    colorramp_2.color_ramp.elements[1].position = 0.891\n    colorramp_2.color_ramp.elements[1].color = [0.244, 0.364, 0.37, 1.0]\n    colorramp_2.color_ramp.elements.new(0.923)\n    colorramp_2.color_ramp.elements[2].color = [0.005, 0.013, 0.021, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 43.9\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    car_textured_rough_plastic = nodes.new('ShaderNodeGroup')\n    car_textured_rough_plastic.node_tree = bpy.data.node_groups['Car_Textured_Rough_Plastic']\n\n    # Create links to connect nodes\n    links.new(car_textured_rough_plastic.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    car_textured_rough_plastic.inputs[0].default_value = [0.02, 0.02, 0.02, 1.0]\n    car_textured_rough_plastic.inputs[6].default_value = [0.094, 0.086, 0.088, 1.0]\n    car_textured_rough_plastic.inputs[8].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['TE_TableCloth']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(gamma.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(rgb_to_bw.outputs[0], mix.inputs[0])\n    links.new(group.outputs[0], rgb_to_bw.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], gamma_1.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.236\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.2\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    mix.inputs[1].default_value = [0.777, 0.166, 0.053, 1.0]\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    group.inputs[1].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    bump.inputs[1].default_value = 0.1\n    gamma_1.inputs[1].default_value = 5.0\n    mix_1.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 80.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 0.785]\n    mapping_1.inputs[3].default_value = [5.0, 1.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 120.0\n    wave_texture_1.inputs[2].default_value = 4.0\n    wave_texture_1.inputs[4].default_value = 6.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[2].default_value = [0.0, -0.0, 2.36]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    wrap = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump_3 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(rgb_curves.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(mapping_1.outputs[0], noise_texture_2.inputs[0])\n    links.new(wrap.outputs[0], bump_2.inputs[2])\n    links.new(bump_3.outputs[0], bump_2.inputs[3])\n    links.new(colorramp_1.outputs[0], wrap.inputs[0])\n    links.new(noise_texture_3.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_3.inputs[0])\n    links.new(rgb_curves.outputs[0], bump_3.inputs[2])\n    links.new(rgb_curves.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    rgb_curves.mapping.curves[0].points[1].location = [0.491, 0.512]\n    rgb_curves.mapping.curves[0].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[1].points[1].location = [0.509, 0.488]\n    rgb_curves.mapping.curves[1].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[2].points[1].location = [0.518, 0.481]\n    rgb_curves.mapping.curves[2].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[3].points[1].location = [0.327, 0.35]\n    rgb_curves.mapping.curves[3].points.new(0.455, 0.575)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp.color_ramp.elements[0].position = 0.232\n    colorramp.color_ramp.elements[0].color = [0.371, 0.198, 0.095, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.49\n    colorramp.color_ramp.elements[1].color = [0.168, 0.074, 0.012, 1.0]\n    colorramp.color_ramp.elements.new(0.82)\n    colorramp.color_ramp.elements[2].color = [0.191, 0.041, 0.016, 1.0]\n    colorramp.color_ramp.elements.new(0.936)\n    colorramp.color_ramp.elements[3].color = [0.019, 0.018, 0.011, 1.0]\n    noise_texture.inputs[2].default_value = 4.5\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture.inputs[5].default_value = 0.4\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    noise_texture_1.inputs[2].default_value = 25.0\n    bump_1.inputs[0].default_value = 0.2\n    bump_1.invert = True\n    noise_texture_2.inputs[2].default_value = 2.9\n    bump_2.inputs[0].default_value = 0.3\n    bump_2.invert = True\n    wrap.inputs[2].default_value = 0.0\n    wrap.operation = 'WRAP'\n    colorramp_1.color_ramp.elements[0].position = 0.486\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    noise_texture_3.inputs[2].default_value = 3.5\n    bump_3.inputs[0].default_value = 0.15\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.547, 0.547, 0.547, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.4\n    bump.invert = True\n    voronoi_texture.inputs[2].default_value = 150.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    blocks_shadow = nodes.new('ShaderNodeMixRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Block_Rings']\n    colour_palette = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    bump = nodes.new('ShaderNodeBump')\n    roughness_curve = nodes.new('ShaderNodeFloatCurve')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement_1 = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement_1.outputs[0], material_output.inputs[2])\n    links.new(ambient_occlusion.outputs[0], principled_bsdf.inputs[0])\n    links.new(roughness_curve.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump_1.outputs[0], principled_bsdf.inputs[22])\n    links.new(blocks_shadow.outputs[0], ambient_occlusion.inputs[0])\n    links.new(displacement.outputs[0], ambient_occlusion.inputs[2])\n    links.new(group.outputs[0], blocks_shadow.inputs[0])\n    links.new(colour_palette.outputs[0], blocks_shadow.inputs[2])\n    links.new(voronoi_texture.outputs[0], colour_palette.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(group.outputs[2], noise_texture.inputs[0])\n    links.new(group.outputs[0], displacement.inputs[0])\n    links.new(bump.outputs[0], displacement.inputs[3])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], roughness_curve.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n    links.new(group.outputs[0], displacement_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.distribution = 'MULTI_GGX'\n    ambient_occlusion.only_local = True\n    ambient_occlusion.samples = 1\n    blocks_shadow.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    group.inputs[1].default_value = 7.0\n    group.inputs[2].default_value = 0.465\n    group.inputs[4].default_value = 0.4\n    group.inputs[7].default_value = 0.35\n    group.inputs[8].default_value = 10.0\n    colour_palette.color_ramp.interpolation = 'B_SPLINE'\n    colour_palette.color_ramp.elements[0].position = 0.315\n    colour_palette.color_ramp.elements[0].color = [0.025, 0.029, 0.033, 1.0]\n    colour_palette.color_ramp.elements[1].position = 0.407\n    colour_palette.color_ramp.elements[1].color = [0.115, 0.144, 0.159, 1.0]\n    colour_palette.color_ramp.elements.new(0.527)\n    colour_palette.color_ramp.elements[2].color = [0.096, 0.108, 0.127, 1.0]\n    colour_palette.color_ramp.elements.new(0.635)\n    colour_palette.color_ramp.elements[3].color = [0.178, 0.178, 0.168, 1.0]\n    voronoi_texture.inputs[2].default_value = 16.0\n    voronoi_texture.inputs[5].default_value = 0.815\n    voronoi_texture.feature = 'SMOOTH_F1'\n    voronoi_texture.voronoi_dimensions = '2D'\n    noise_texture.inputs[1].default_value = 2.7\n    noise_texture.inputs[2].default_value = 16.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 0.9\n    noise_texture.noise_dimensions = '2D'\n    displacement.inputs[1].default_value = 0.0\n    bump.inputs[1].default_value = 10.0\n    roughness_curve.mapping.curves[0].points[0].location = [0.008, 0.5]\n    roughness_curve.mapping.curves[0].points[1].location = [0.203, 0.67]\n    roughness_curve.mapping.curves[0].points.new(0.315, 0.903)\n    roughness_curve.mapping.curves[0].points.new(0.452, 0.608)\n    roughness_curve.mapping.curves[0].points.new(0.751, 0.926)\n    roughness_curve.mapping.curves[0].points.new(1.0, 0.648)\n    bump_1.inputs[0].default_value = 0.45\n    bump_1.inputs[1].default_value = 10.0\n    displacement_1.inputs[1].default_value = 0.0\n    displacement_1.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    node = nodes.new('ShaderNodeOutputMaterial')\n    bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix_legacy = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(bsdf.outputs[0], node.inputs[0])\n    links.new(displacement.outputs[0], node.inputs[2])\n    links.new(mix_legacy.outputs[0], bsdf.inputs[0])\n    links.new(colorramp_3.outputs[0], bsdf.inputs[9])\n    links.new(bump.outputs[0], bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix_legacy.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_legacy.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], noise_texture_1.inputs[4])\n    links.new(noise_texture_2.outputs[1], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_3.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_3.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump_2.inputs[2])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix_legacy.inputs[2].default_value = [0.056, 0.15, 0.021, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.543\n    colorramp.color_ramp.elements[1].position = 0.675\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.65\n    noise_texture.inputs[5].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.305, 0.184, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.335\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.05, 0.022, 1.0]\n    colorramp_1.color_ramp.elements.new(0.912)\n    colorramp_1.color_ramp.elements[2].color = [0.004, 0.003, 0.002, 1.0]\n    voronoi_texture.inputs[2].default_value = 8.0\n    voronoi_texture.distance = 'CHEBYCHEV'\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.2]\n    mix.inputs[0].default_value = 0.08\n    noise_texture_1.inputs[2].default_value = 8.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    colorramp_2.color_ramp.elements[0].position = 0.444\n    colorramp_2.color_ramp.elements[0].color = [0.44, 0.44, 0.44, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.649\n    colorramp_2.color_ramp.elements[1].color = [0.73, 0.73, 0.73, 1.0]\n    noise_texture_2.inputs[2].default_value = 3.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    colorramp_3.color_ramp.elements[0].color = [0.451, 0.451, 0.451, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [0.847, 0.847, 0.847, 1.0]\n    bump_1.inputs[0].default_value = 0.4\n    noise_texture_3.inputs[2].default_value = 4.0\n    noise_texture_3.inputs[3].default_value = 15.0\n    noise_texture_3.inputs[4].default_value = 0.6\n    bump_2.inputs[0].default_value = 0.35\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    map_range = nodes.new('ShaderNodeMapRange')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(map_range.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], map_range.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(magic_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    map_range.inputs[1].default_value = 0.13\n    map_range.inputs[2].default_value = -0.7\n    map_range.clamp = False\n    voronoi_texture.inputs[2].default_value = 58.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    principled_bsdf.inputs[9].default_value = 0.718\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.414\n    colorramp.color_ramp.elements[0].color = [0.022, 0.021, 0.086, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.677\n    colorramp.color_ramp.elements[1].color = [0.08, 0.035, 0.19, 1.0]\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 2.5\n    noise_texture.inputs[4].default_value = 1.0\n    emission.inputs[1].default_value = 30.0\n    colorramp_1.color_ramp.elements[0].color = [0.164, 0.025, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.851, 0.525, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = -1.4\n    magic_texture.inputs[2].default_value = 1.7\n    magic_texture.turbulence_depth = 3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    modulo = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    divide = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(modulo.outputs[0], multiply.inputs[0])\n    links.new(separate_xyz.outputs[2], modulo.inputs[0])\n    links.new(divide.outputs[0], modulo.inputs[1])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.044, 0.169, 0.505, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.14\n    principled_bsdf.inputs[2].default_value = [0.01, 0.01, 0.01]\n    principled_bsdf.inputs[3].default_value = [0.029, 0.071, 0.143, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[10].default_value = 0.5\n    principled_bsdf.inputs[11].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.72\n    multiply.inputs[1].default_value = 1000.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    modulo.inputs[2].default_value = 0.0\n    modulo.operation = 'MODULO'\n    divide.inputs[0].default_value = 5.0\n    divide.inputs[1].default_value = 1000.0\n    divide.inputs[2].default_value = 0.0\n    divide.operation = 'DIVIDE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(color_ramp.outputs[0], mix.inputs[1])\n    links.new(ambient_occlusion.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], color_ramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(mix_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_3.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_2.outputs[1], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.477\n    mix.inputs[0].default_value = 1.0\n    color_ramp.color_ramp.elements[0].position = 0.132\n    color_ramp.color_ramp.elements[0].color = [0.133, 0.133, 0.133, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.618\n    color_ramp.color_ramp.elements[1].color = [0.38, 0.38, 0.38, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    noise_texture.inputs[2].default_value = 6.8\n    noise_texture.inputs[3].default_value = 6.8\n    mix_2.inputs[0].default_value = 1.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    noise_texture_1.inputs[2].default_value = 6.8\n    noise_texture_1.inputs[3].default_value = 6.8\n    voronoi_texture.inputs[2].default_value = 6.51\n    voronoi_texture.distance = 'MANHATTAN'\n    voronoi_texture.feature = 'F2'\n    mix_3.inputs[0].default_value = 0.105\n    noise_texture_2.inputs[2].default_value = 6.8\n    noise_texture_2.inputs[3].default_value = 6.8\n    noise_texture_2.inputs[4].default_value = 0.588\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], emission.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_2.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_3.inputs[0])\n    links.new(mix_2.outputs[0], colorramp_4.inputs[0])\n    links.new(colorramp_4.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(colorramp_5.outputs[0], invert.inputs[1])\n    links.new(mix_2.outputs[0], colorramp_5.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.492\n    emission.inputs[1].default_value = 292.0\n    colorramp.color_ramp.elements[0].position = 0.059\n    colorramp.color_ramp.elements[1].position = 0.244\n    colorramp.color_ramp.elements[1].color = [1.0, 0.026, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.438)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.001, 0.0, 1.0]\n    mix.inputs[0].default_value = 0.533\n    mix.inputs[2].default_value = [0.016, 0.016, 0.016, 1.0]\n    mix_1.inputs[0].default_value = 0.247\n    colorramp_1.color_ramp.elements[0].position = 0.191\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.469\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(0.7)\n    colorramp_1.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.0\n    noise_texture.inputs[2].default_value = 7.1\n    noise_texture.inputs[3].default_value = 8.1\n    noise_texture.inputs[4].default_value = 0.383\n    noise_texture.inputs[5].default_value = 2.0\n    noise_texture.noise_dimensions = '4D'\n    colorramp_2.color_ramp.elements[0].color = [0.037, 0.047, 0.047, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 9.2\n    noise_texture_1.inputs[3].default_value = 8.1\n    noise_texture_1.inputs[4].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.3\n    colorramp_3.color_ramp.elements[0].position = 0.442\n    colorramp_3.color_ramp.elements[0].color = [1.0, 0.229, 0.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.525\n    colorramp_3.color_ramp.elements[1].color = [1.0, 0.033, 0.0, 1.0]\n    colorramp_3.color_ramp.elements.new(1.0)\n    colorramp_3.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_4.color_ramp.elements[0].position = 0.032\n    colorramp_4.color_ramp.elements[1].position = 0.51\n    colorramp_4.color_ramp.elements[1].color = [0.057, 0.057, 0.057, 1.0]\n    colorramp_4.color_ramp.elements.new(0.993)\n    colorramp_4.color_ramp.elements[2].color = [1.0, 0.046, 0.0, 1.0]\n    principled_bsdf.distribution = 'MULTI_GGX'\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[1].default_value = 1.0\n    displacement.inputs[2].default_value = 0.07\n    invert.inputs[0].default_value = 0.0\n    colorramp_5.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_5.color_ramp.elements[1].position = 0.1\n    colorramp_5.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metallic_car_paint = nodes.new('ShaderNodeGroup')\n    metallic_car_paint.node_tree = bpy.data.node_groups['UberShader_multi']\n\n    # Create links to connect nodes\n    links.new(metallic_car_paint.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    metallic_car_paint.inputs[0].default_value = [0.202, 0.466, 1.0, 1.0]\n    metallic_car_paint.inputs[4].default_value = 4.2\n    metallic_car_paint.inputs[5].default_value = [0.579, 0.944, 1.0, 1.0]\n    metallic_car_paint.inputs[6].default_value = 0.45\n    metallic_car_paint.inputs[7].default_value = 0.5\n    metallic_car_paint.inputs[8].default_value = 4.2\n    metallic_car_paint.inputs[9].default_value = 0.4\n    metallic_car_paint.inputs[10].default_value = [1.0, 1.0, 1.0, 1.0]\n    metallic_car_paint.inputs[11].default_value = 1.0\n    metallic_car_paint.inputs[12].default_value = 4.2\n    metallic_car_paint.inputs[13].default_value = 4.2\n    metallic_car_paint.inputs[15].default_value = [0.047, 0.457, 0.52, 1.0]\n    metallic_car_paint.inputs[16].default_value = 0.163\n    metallic_car_paint.inputs[17].default_value = [0.0, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(anisotropic_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], anisotropic_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], anisotropic_bsdf.inputs[1])\n    links.new(colorramp_2.outputs[0], anisotropic_bsdf.inputs[2])\n    links.new(colorramp_2.outputs[0], anisotropic_bsdf.inputs[3])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 20.0\n    colorramp_1.color_ramp.elements[0].color = [0.343, 0.343, 0.343, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.995\n    colorramp_1.color_ramp.elements[1].color = [0.447, 0.447, 0.447, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture_2 = nodes.new('ShaderNodeTexWave')\n    wave_texture_3 = nodes.new('ShaderNodeTexWave')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(checker_texture.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(mix_1.outputs[0], checker_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n    links.new(wave_texture_2.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture_3.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture_2.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_3.inputs[0])\n    links.new(mix_2.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix_2.inputs[0])\n    links.new(checker_texture.outputs[0], layer_weight.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 100.0\n    mapping.inputs[3].default_value = [3.0, 1.5, 1.0]\n    wave_texture.inputs[1].default_value = 200.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 1.57]\n    mapping_1.inputs[3].default_value = [1.0, 2.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 100.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[3].default_value = [4.0, 1.0, 1.0]\n    wave_texture_2.inputs[1].default_value = 100.0\n    wave_texture_2.inputs[6].default_value = 1.57\n    wave_texture_2.bands_direction = 'DIAGONAL'\n    wave_texture_2.rings_direction = 'SPHERICAL'\n    wave_texture_3.inputs[1].default_value = 200.0\n    wave_texture_3.inputs[6].default_value = 1.57\n    wave_texture_3.bands_direction = 'DIAGONAL'\n    wave_texture_3.rings_direction = 'SPHERICAL'\n    mix_2.inputs[1].default_value = [0.21, 0.21, 0.21, 1.0]\n    mix_2.inputs[2].default_value = [0.003, 0.003, 0.003, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    decorative_waves_crystal_glass = nodes.new('ShaderNodeGroup')\n    decorative_waves_crystal_glass.node_tree = bpy.data.node_groups['Decorative_Waves_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(decorative_waves_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(decorative_waves_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    decorative_waves_crystal_glass.inputs[26].default_value = 1.76\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.508, 0.146, 0.042, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[6])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[7])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.341\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.098\n    brick_texture.inputs[1].default_value = [0.8, 0.722, 0.587, 1.0]\n    brick_texture.inputs[2].default_value = [0.292, 0.263, 0.218, 1.0]\n    brick_texture.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[4].default_value = 1.7\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[8].default_value = 0.24\n    brick_texture.inputs[9].default_value = 0.11\n    brick_texture.offset = 0.469\n    voronoi_texture.inputs[2].default_value = 351.0\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 6.4\n    noise_texture.inputs[4].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    divide = nodes.new('ShaderNodeMath')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], colorramp_1.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(divide.outputs[0], noise_texture.inputs[1])\n    links.new(magic_texture.outputs[1], noise_texture.inputs[5])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 0.942\n    brick_texture.inputs[1].default_value = [0.8, 0.329, 0.074, 1.0]\n    brick_texture.inputs[2].default_value = [0.669, 0.077, 0.056, 1.0]\n    brick_texture.inputs[3].default_value = [0.506, 0.441, 0.487, 1.0]\n    brick_texture.inputs[6].default_value = 0.34\n    colorramp.color_ramp.elements[0].position = 0.409\n    colorramp.color_ramp.elements[0].color = [0.015, 0.047, 0.327, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.366\n    colorramp_1.color_ramp.elements[1].position = 0.715\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.09\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.noise_dimensions = '4D'\n    divide.inputs[0].default_value = 30.0\n    divide.inputs[1].default_value = 96.2\n    divide.operation = 'DIVIDE'\n    magic_texture.inputs[1].default_value = 2.42\n    magic_texture.inputs[2].default_value = 1.55\n    bump.inputs[0].default_value = 2.58\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    tangent = nodes.new('ShaderNodeTangent')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(tangent.outputs[0], principled_bsdf.inputs[24])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.033, 0.033, 0.033, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.673\n    principled_bsdf.inputs[8].default_value = 0.273\n    principled_bsdf.inputs[10].default_value = 0.832\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[14].default_value = 0.291\n    principled_bsdf.inputs[15].default_value = 0.105\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 61.4\n    voronoi_texture.inputs[3].default_value = 0.9\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.025\n    noise_texture.inputs[2].default_value = 253.0\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    carbon_fiber = nodes.new('ShaderNodeGroup')\n    carbon_fiber.node_tree = bpy.data.node_groups['Carbon_Fiber_001']\n\n    # Create links to connect nodes\n    links.new(carbon_fiber.outputs[0], material_output.inputs[0])\n    links.new(carbon_fiber.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    carbon_fiber.inputs[0].default_value = [0.025, 0.024, 0.026, 1.0]\n    carbon_fiber.inputs[2].default_value = [0.046, 0.046, 0.046, 1.0]\n    carbon_fiber.inputs[4].default_value = 1.0\n    carbon_fiber.inputs[11].default_value = [0.006, 0.006, 0.006, 1.0]\n    carbon_fiber.inputs[15].default_value = 0.85\n    carbon_fiber.inputs[16].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n    mix_6 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix_7 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_5.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[2])\n    links.new(brick_texture.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(mix_3.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_3.inputs[1])\n    links.new(checker_texture.outputs[0], mix_3.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(magic_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_4.outputs[0], magic_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_4.inputs[1])\n    links.new(checker_texture.outputs[0], mix_4.inputs[2])\n    links.new(magic_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(invert.outputs[0], colorramp_3.inputs[0])\n    links.new(mix_5.outputs[0], invert.inputs[1])\n    links.new(mix_1.outputs[0], mix_5.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_5.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix_6.outputs[0], colorramp_5.inputs[0])\n    links.new(mix_1.outputs[0], mix_6.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_6.inputs[2])\n    links.new(mix_7.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], mix_7.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.889\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.133, 0.133, 0.133, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.322, 0.322, 0.322, 1.0]\n    mix.inputs[0].default_value = 0.0\n    mix_1.inputs[0].default_value = 0.001\n    mix_1.blend_type = 'DODGE'\n    mix_2.inputs[0].default_value = 0.012\n    mix_2.blend_type = 'DIFFERENCE'\n    brick_texture.inputs[4].default_value = 27.2\n    brick_texture.inputs[6].default_value = 0.57\n    brick_texture.inputs[8].default_value = 2.69\n    brick_texture.inputs[9].default_value = 2.44\n    brick_texture.squash = 0.5\n    mix_3.inputs[0].default_value = 0.002\n    checker_texture.inputs[3].default_value = 57.9\n    colorramp_1.color_ramp.elements[0].position = 0.17\n    colorramp_1.color_ramp.elements[1].position = 0.297\n    magic_texture.inputs[1].default_value = 300.0\n    mix_4.inputs[0].default_value = 0.035\n    colorramp_2.color_ramp.elements[0].position = 0.902\n    colorramp_3.color_ramp.elements[0].position = 0.322\n    colorramp_3.color_ramp.elements[0].color = [0.35, 0.35, 0.35, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.471\n    colorramp_3.color_ramp.elements[1].color = [0.817, 0.817, 0.817, 1.0]\n    invert.inputs[0].default_value = 0.978\n    mix_5.inputs[0].default_value = 0.084\n    mix_5.blend_type = 'DIFFERENCE'\n    colorramp_4.color_ramp.elements[0].position = 0.42\n    colorramp_4.color_ramp.elements[1].position = 0.663\n    noise_texture.inputs[2].default_value = 8.7\n    noise_texture.inputs[3].default_value = 6.8\n    noise_texture.inputs[4].default_value = 0.907\n    noise_texture.inputs[5].default_value = 0.21\n    colorramp_5.color_ramp.elements[0].position = 0.293\n    colorramp_5.color_ramp.elements[0].color = [0.239, 0.239, 0.239, 1.0]\n    colorramp_5.color_ramp.elements[1].position = 0.674\n    colorramp_5.color_ramp.elements[1].color = [0.398, 0.398, 0.398, 1.0]\n    mix_6.inputs[0].default_value = 0.22\n    mix_6.blend_type = 'DIFFERENCE'\n    bump.inputs[0].default_value = 0.428\n    mix_7.inputs[0].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(mix_1.outputs[0], invert.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.05\n    principled_bsdf.inputs[3].default_value = [0.014, 0.03, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.006, 0.019, 0.004, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.008, 0.005, 0.003, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.441\n    voronoi_texture.inputs[2].default_value = 25.0\n    mix.inputs[0].default_value = 0.05\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.55\n    colorramp_2.color_ramp.elements[0].color = [0.517, 0.517, 0.517, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.299, 0.299, 0.299, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    bump_1.inputs[0].default_value = 0.142\n    bump_1.invert = True\n    displacement.inputs[2].default_value = 0.1\n    mix_1.inputs[0].default_value = 0.1\n    colorramp_3.color_ramp.elements[0].position = 0.245\n    colorramp_3.color_ramp.elements[1].position = 0.909\n    colorramp_3.color_ramp.elements[1].color = [0.188, 0.188, 0.188, 1.0]\n    noise_texture_1.inputs[2].default_value = 6.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.55\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.151\n    colorramp.color_ramp.elements[1].position = 0.441\n    noise_texture.inputs[2].default_value = 4.42\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.4\n    noise_texture.inputs[5].default_value = 0.7\n    principled_bsdf.inputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.116\n    principled_bsdf.subsurface_method = 'BURLEY'\n    principled_bsdf_1.inputs[9].default_value = 0.116\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    combine_rgb = nodes.new('ShaderNodeCombineColor')\n    rgb = nodes.new('ShaderNodeRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb_to_bw_1 = nodes.new('ShaderNodeRGBToBW')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    rgb_to_bw_2 = nodes.new('ShaderNodeRGBToBW')\n    emission = nodes.new('ShaderNodeEmission')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(rgb_to_bw.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(combine_rgb.outputs[0], mapping.inputs[1])\n    links.new(rgb.outputs[0], combine_rgb.inputs[0])\n    links.new(rgb.outputs[0], combine_rgb.inputs[1])\n    links.new(rgb.outputs[0], combine_rgb.inputs[2])\n    links.new(rgb_to_bw_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[7])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(rgb_to_bw_1.outputs[0], colorramp_2.inputs[0])\n    links.new(rgb_to_bw_1.outputs[0], colorramp_3.inputs[0])\n    links.new(colorramp_4.outputs[0], bump.inputs[2])\n    links.new(rgb_to_bw_2.outputs[0], colorramp_4.inputs[0])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw_2.inputs[0])\n    links.new(colorramp_4.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.873\n    colorramp.color_ramp.elements[1].position = 0.875\n    voronoi_texture.inputs[1].default_value = 1.0\n    voronoi_texture.inputs[3].default_value = 0.0\n    voronoi_texture.inputs[4].default_value = 20.5\n    voronoi_texture.distance = 'MANHATTAN'\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    rgb.outputs[0].default_value = [1.0, 0.027, 0.022, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.0, 0.004, 0.8, 1.0]\n    principled_bsdf.inputs[5].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 1.0\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.5\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.7\n    colorramp_1.color_ramp.elements[1].position = 0.8\n    colorramp_3.color_ramp.elements[0].position = 0.2\n    colorramp_3.color_ramp.elements[1].position = 0.6\n    emission.inputs[0].default_value = [0.0, 0.0, 1.0, 1.0]\n    emission.inputs[1].default_value = 100.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(anisotropic_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(colorramp.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[5].default_value = 1.0\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    mapping.inputs[3].default_value = [1.0, 1.0, 12.0]\n    mapping.vector_type = 'VECTOR'\n    anisotropic_bsdf.inputs[1].default_value = 0.316\n    anisotropic_bsdf.inputs[2].default_value = 0.3\n    anisotropic_bsdf.inputs[3].default_value = 0.6\n    diffuse_bsdf.inputs[0].default_value = [0.789, 1.0, 0.819, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = -0.05\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    sci_fi_panel_generator = nodes.new('ShaderNodeGroup')\n    sci_fi_panel_generator.node_tree = bpy.data.node_groups['Sci_Fi_Panel_Generator']\n\n    # Create links to connect nodes\n    links.new(sci_fi_panel_generator.outputs[0], material_output.inputs[0])\n    links.new(sci_fi_panel_generator.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    sci_fi_panel_generator.inputs[0].default_value = [0.012, 0.051, 0.102, 1.0]\n    sci_fi_panel_generator.inputs[1].default_value = [0.037, 0.332, 0.631, 1.0]\n    sci_fi_panel_generator.inputs[18].default_value = 1.0\n    sci_fi_panel_generator.inputs[24].default_value = 1.0\n    sci_fi_panel_generator.inputs[26].default_value = 0.003\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Asphalt']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[3], group.inputs[0])\n    links.new(group.outputs[2], bump.inputs[2])\n    links.new(group.outputs[2], displacement.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.15, 0.128, 0.118, 1.0]\n    group.inputs[4].default_value = 0.3\n    group.inputs[5].default_value = 0.286\n    group.inputs[6].default_value = 0.1\n    group.inputs[7].default_value = 90.0\n    group.inputs[12].default_value = 2.3\n    group.inputs[17].default_value = 0.1\n    group.inputs[19].default_value = [1.55, 1.0, 1.0]\n    displacement.inputs[1].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    object_info = nodes.new('ShaderNodeObjectInfo')\n    divide = nodes.new('ShaderNodeMath')\n    power = nodes.new('ShaderNodeMath')\n    divide_1 = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    divide_2 = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(divide.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(object_info.outputs[5], mix.inputs[1])\n    links.new(object_info.outputs[5], mix.inputs[2])\n    links.new(power.outputs[0], divide.inputs[0])\n    links.new(divide_1.outputs[0], power.inputs[0])\n    links.new(subtract.outputs[0], divide_1.inputs[0])\n    links.new(add.outputs[0], divide_1.inputs[1])\n    links.new(divide_2.outputs[0], bump.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[16].default_value = 0.5\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [0.5, 0.025, 0.025, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.13\n    colorramp.color_ramp.elements[1].color = [0.7, 0.254, 0.035, 1.0]\n    colorramp.color_ramp.elements.new(0.26)\n    colorramp.color_ramp.elements[2].color = [0.8, 0.656, 0.04, 1.0]\n    colorramp.color_ramp.elements.new(0.39)\n    colorramp.color_ramp.elements[3].color = [0.044, 0.45, 0.023, 1.0]\n    colorramp.color_ramp.elements.new(0.52)\n    colorramp.color_ramp.elements[4].color = [0.038, 0.109, 0.75, 1.0]\n    colorramp.color_ramp.elements.new(0.65)\n    colorramp.color_ramp.elements[5].color = [0.249, 0.033, 0.65, 1.0]\n    colorramp.color_ramp.elements.new(0.78)\n    colorramp.color_ramp.elements[6].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    divide.inputs[1].default_value = 0.08\n    divide.operation = 'DIVIDE'\n    power.inputs[1].default_value = 2.0\n    power.operation = 'POWER'\n    divide_1.operation = 'DIVIDE'\n    subtract.inputs[0].default_value = 1.49\n    subtract.inputs[1].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    add.inputs[0].default_value = 1.49\n    add.inputs[1].default_value = 1.0\n    divide_2.inputs[0].default_value = 1.0\n    divide_2.inputs[1].default_value = 10.0\n    divide_2.operation = 'DIVIDE'\n    multiply.inputs[0].default_value = 10.0\n    multiply.inputs[1].default_value = 1000.0\n    multiply.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    combine_color = nodes.new('ShaderNodeCombineColor')\n    separate_color = nodes.new('ShaderNodeSeparateColor')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(normal_map.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(combine_color.outputs[0], normal_map.inputs[1])\n    links.new(separate_color.outputs[0], combine_color.inputs[0])\n    links.new(separate_color.outputs[1], combine_color.inputs[1])\n    links.new(voronoi_texture.outputs[1], separate_color.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.1\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.inputs[14].default_value = 3.0\n    principled_bsdf.inputs[15].default_value = 0.01\n    mix.inputs[0].default_value = 0.1\n    colorramp.color_ramp.elements[0].color = [0.071, 0.483, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.022, 0.132, 0.27, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.012, 0.078, 0.175, 1.0]\n    noise_texture.inputs[2].default_value = 1000.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.071, 0.483, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.25\n    colorramp_1.color_ramp.elements.new(0.5)\n    colorramp_1.color_ramp.elements[2].color = [0.066, 0.472, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[3].color = [0.027, 0.222, 0.518, 1.0]\n    noise_texture_1.inputs[2].default_value = 1000.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    normal_map.inputs[0].default_value = 0.1\n    combine_color.inputs[2].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 20000.0\n    bump.inputs[1].default_value = 0.001\n    noise_texture_2.inputs[2].default_value = 1000.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Rubber_Camo']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 8.91\n    group.inputs[2].default_value = 1.8\n    group.inputs[3].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['3d_procedural_glass_eevee_cycles']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 4.0\n    group.inputs[8].default_value = 0.003\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(rgb_curves.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], noise_texture.inputs[5])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.839, 0.44, 0.162, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.4\n    mix.inputs[0].default_value = 0.017\n    mix.blend_type = 'LINEAR_LIGHT'\n    colorramp.color_ramp.elements[1].position = 0.523\n    noise_texture.inputs[2].default_value = 90.0\n    voronoi_texture.inputs[2].default_value = 260.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.595, 0.406]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    noise_texture_1.inputs[2].default_value = 50.0\n    noise_texture_1.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    greater_than = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(map_range_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_3.outputs[0], mix.inputs[2])\n    links.new(brick_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(map_range_1.outputs[0], mix_2.inputs[1])\n    links.new(greater_than.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture.outputs[0], map_range_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], greater_than.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], mix_3.inputs[0])\n    links.new(mix_4.outputs[0], map_range_2.inputs[0])\n    links.new(brick_texture.outputs[1], mix_4.inputs[0])\n    links.new(mix_2.outputs[0], mix_4.inputs[1])\n    links.new(mix_2.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(brick_texture.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    hue_saturation_value.inputs[1].default_value = 0.8\n    hue_saturation_value.inputs[2].default_value = 0.8\n    map_range.inputs[3].default_value = 0.2\n    map_range.inputs[4].default_value = 0.8\n    brick_texture.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[4].default_value = 10.0\n    brick_texture.inputs[5].default_value = 0.001\n    brick_texture.inputs[8].default_value = 0.3\n    brick_texture.inputs[9].default_value = 0.4\n    mix_1.inputs[1].default_value = [0.006, 0.009, 0.012, 1.0]\n    mix_1.inputs[2].default_value = [0.034, 0.044, 0.06, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    map_range_1.inputs[1].default_value = 0.3\n    map_range_1.inputs[2].default_value = 0.7\n    map_range_1.clamp = False\n    noise_texture.inputs[2].default_value = 1000.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.9\n    greater_than.inputs[1].default_value = 0.2\n    greater_than.operation = 'GREATER_THAN'\n    noise_texture_1.inputs[2].default_value = 1000.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.0\n    mix_3.inputs[1].default_value = [0.098, 0.126, 0.168, 1.0]\n    mix_3.inputs[2].default_value = [0.07, 0.093, 0.127, 1.0]\n    map_range_2.inputs[4].default_value = 1.2\n    mix_4.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Dented_Random_Metal_Plates']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 0.5\n    group.inputs[1].default_value = 6.2\n    group.inputs[2].default_value = 5.0\n    group.inputs[3].default_value = 5.0\n    group.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(hue_saturation_value.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(mapping.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], mix_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.125\n    mix.inputs[0].default_value = 0.2\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    mix_1.inputs[0].default_value = 1.0\n    noise_texture.inputs[2].default_value = 0.667\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[5].default_value = 2.5\n    bump.inputs[0].default_value = 0.12\n    bump.inputs[1].default_value = 0.1\n    glossy_bsdf.inputs[1].default_value = 0.316\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Circular_Patternator_001']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(group.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(colorramp_1.outputs[0], group.inputs[18])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(brick_texture.outputs[0], voronoi_texture.inputs[5])\n    links.new(texture_coordinate.outputs[2], brick_texture.inputs[0])\n    links.new(group.outputs[0], colorramp_2.inputs[0])\n    links.new(group.outputs[0], colorramp_3.inputs[0])\n    links.new(colorramp_4.outputs[0], bump.inputs[2])\n    links.new(group.outputs[0], colorramp_4.inputs[0])\n    links.new(colorramp_4.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.324\n    colorramp.color_ramp.elements[0].position = 0.203\n    colorramp.color_ramp.elements[0].color = [0.024, 0.045, 0.372, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.728\n    colorramp.color_ramp.elements[1].color = [0.017, 0.433, 1.0, 1.0]\n    group.inputs[1].default_value = 135.0\n    group.inputs[2].default_value = 38.3\n    group.inputs[3].default_value = -0.48\n    group.inputs[4].default_value = 1.69\n    group.inputs[5].default_value = 2.2\n    group.inputs[6].default_value = 0.073\n    group.inputs[8].default_value = 0.52\n    group.inputs[9].default_value = 0.233\n    group.inputs[11].default_value = 0.053\n    group.inputs[14].default_value = 0.43\n    group.inputs[16].default_value = -0.06\n    group.inputs[19].default_value = 0.15\n    colorramp_1.color_ramp.elements[0].position = 0.261\n    colorramp_1.color_ramp.elements[1].position = 0.264\n    voronoi_texture.inputs[2].default_value = 39.1\n    brick_texture.inputs[4].default_value = 50.0\n    colorramp_2.color_ramp.elements[0].position = 0.326\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.38\n    colorramp_3.color_ramp.elements[0].position = 0.286\n    colorramp_3.color_ramp.elements[0].color = [0.309, 0.309, 0.309, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.721\n    colorramp_3.color_ramp.elements[1].color = [0.495, 0.495, 0.495, 1.0]\n    bump.inputs[0].default_value = 0.389\n    bump.inputs[1].default_value = 0.6\n    colorramp_4.color_ramp.elements[0].position = 0.025\n    displacement.inputs[2].default_value = 0.025\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metal_imperfections = nodes.new('ShaderNodeGroup')\n    metal_imperfections.node_tree = bpy.data.node_groups['Metal_Imperfections']\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(metal_imperfections.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], metal_imperfections.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    metal_imperfections.inputs[17].default_value = 0.0\n    mix.inputs[0].default_value = 0.15\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    rgb.outputs[0].default_value = [1.0, 0.766, 0.336, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['OilPainting']\n    change_color = nodes.new('ShaderNodeRGB')\n    usury_color = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[6])\n    links.new(group.outputs[2], principled_bsdf.inputs[9])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(change_color.outputs[0], group.inputs[0])\n    links.new(usury_color.outputs[0], group.inputs[2])\n\n    # Set parameters for each node\n    change_color.outputs[0].default_value = [0.799, 0.023, 0.019, 1.0]\n    usury_color.outputs[0].default_value = [0.799, 0.799, 0.799, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix = nodes.new('ShaderNodeMixRGB')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    mix_shader_3 = nodes.new('ShaderNodeMixShader')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    combine_color = nodes.new('ShaderNodeCombineColor')\n    separate_color = nodes.new('ShaderNodeSeparateColor')\n    maximum = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_3.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[2])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(add.outputs[0], layer_weight.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[1])\n    links.new(mix.outputs[0], glossy_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(gamma.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader_2.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_2.inputs[2])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply_1.outputs[0], glossy_bsdf_1.inputs[0])\n    links.new(mix_1.outputs[0], glossy_bsdf_1.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf_1.inputs[2])\n    links.new(gamma.outputs[0], multiply_1.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader_3.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader_3.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader_3.inputs[2])\n    links.new(combine_color.outputs[0], translucent_bsdf.inputs[0])\n    links.new(separate_color.outputs[0], combine_color.inputs[0])\n    links.new(separate_color.outputs[1], combine_color.inputs[1])\n    links.new(maximum.outputs[0], combine_color.inputs[2])\n    links.new(gamma.outputs[0], separate_color.inputs[0])\n    links.new(separate_color.outputs[2], maximum.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.69\n    colorramp.color_ramp.elements[0].color = [0.026, 0.025, 0.051, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.787, 0.787, 0.787, 1.0]\n    add.inputs[0].default_value = 0.75\n    multiply.inputs[0].default_value = 1.0\n    multiply.inputs[1].default_value = 0.2\n    multiply.operation = 'MULTIPLY'\n    mix.inputs[0].default_value = 0.145\n    gamma.inputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.inputs[0].default_value = 0.145\n    mix_1.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.995\n    colorramp_1.color_ramp.elements[1].color = [0.263, 0.263, 0.263, 1.0]\n    noise_texture.inputs[2].default_value = 1500.0\n    noise_texture.inputs[5].default_value = 6.2\n    bump.inputs[0].default_value = 0.175\n    colorramp_2.color_ramp.elements[0].color = [0.051, 0.051, 0.051, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.692, 0.692, 0.692, 1.0]\n    principled_bsdf.inputs[8].default_value = 0.723\n    principled_bsdf.inputs[10].default_value = 0.423\n    principled_bsdf.inputs[12].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    multiply_1.inputs[1].default_value = 0.05\n    multiply_1.operation = 'MULTIPLY'\n    combine_color.mode = 'HSV'\n    separate_color.mode = 'HSV'\n    maximum.inputs[1].default_value = 0.05\n    maximum.operation = 'MAXIMUM'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    add_shader_1 = nodes.new('ShaderNodeAddShader')\n    add_shader_2 = nodes.new('ShaderNodeAddShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    add = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    add_1 = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    glass_bsdf_1 = nodes.new('ShaderNodeBsdfGlass')\n    glass_bsdf_2 = nodes.new('ShaderNodeBsdfGlass')\n    subtract = nodes.new('ShaderNodeMath')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Caustics_texure']\n    volume_absorption = nodes.new('ShaderNodeVolumeAbsorption')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(volume_absorption.outputs[0], material_output.inputs[1])\n    links.new(add_shader_1.outputs[0], add_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], add_shader.inputs[1])\n    links.new(add_shader_2.outputs[0], add_shader_1.inputs[0])\n    links.new(glass_bsdf_2.outputs[0], add_shader_1.inputs[1])\n    links.new(glass_bsdf.outputs[0], add_shader_2.inputs[0])\n    links.new(glass_bsdf_1.outputs[0], add_shader_2.inputs[1])\n    links.new(add.outputs[0], glass_bsdf.inputs[2])\n    links.new(bump.outputs[0], glass_bsdf.inputs[3])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(add_1.outputs[0], noise_texture_1.inputs[1])\n    links.new(multiply.outputs[0], noise_texture_1.inputs[2])\n    links.new(bump.outputs[0], glass_bsdf_1.inputs[3])\n    links.new(subtract.outputs[0], glass_bsdf_2.inputs[2])\n    links.new(bump.outputs[0], glass_bsdf_2.inputs[3])\n    links.new(multiply_1.outputs[0], transparent_bsdf.inputs[0])\n    links.new(group.outputs[0], multiply_1.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[0].default_value = [1.0, 0.0, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.005\n    add.inputs[0].default_value = 1.33\n    add.inputs[1].default_value = 0.003\n    bump.inputs[1].default_value = 0.05\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[5].default_value = 1.3\n    noise_texture.noise_dimensions = '4D'\n    noise_texture_1.inputs[5].default_value = 1.3\n    noise_texture_1.noise_dimensions = '4D'\n    add_1.inputs[0].default_value = 0.0\n    add_1.inputs[1].default_value = 1.0\n    multiply.inputs[0].default_value = 3.0\n    multiply.inputs[1].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    glass_bsdf_1.inputs[0].default_value = [0.0, 1.0, 0.0, 1.0]\n    glass_bsdf_1.inputs[1].default_value = 0.005\n    glass_bsdf_1.inputs[2].default_value = 1.33\n    glass_bsdf_2.inputs[0].default_value = [0.0, 0.0, 1.0, 1.0]\n    glass_bsdf_2.inputs[1].default_value = 0.005\n    subtract.inputs[0].default_value = 1.33\n    subtract.inputs[1].default_value = 0.003\n    subtract.operation = 'SUBTRACT'\n    multiply_1.inputs[1].default_value = 15.0\n    multiply_1.operation = 'MULTIPLY'\n    group.inputs[5].default_value = 0.23\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s = nodes.new('ShaderNodeValToRGB')\n    d_o_n_o_t_c_h_a_n_g_e = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(glass_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], glass_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.outputs[0], mix.inputs[1])\n    links.new(d_o_n_o_t_c_h_a_n_g_e.outputs[0], mix.inputs[2])\n    links.new(voronoi_texture.outputs[2], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.inputs[0])\n    links.new(noise_texture.outputs[1], d_o_n_o_t_c_h_a_n_g_e.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 0.146\n    glass_bsdf.inputs[2].default_value = 2.0\n    glass_bsdf.distribution = 'SHARP'\n    mix.blend_type = 'SCREEN'\n    noise_texture.inputs[2].default_value = 159.0\n    voronoi_texture.inputs[2].default_value = 15.5\n    voronoi_texture.inputs[3].default_value = 0.017\n    voronoi_texture.inputs[4].default_value = 32.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [1.6, 1.6, 1.6]\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements[0].position = 0.114\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements[1].position = 0.195\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements[1].color = [0.0, 0.117, 0.965, 1.0]\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements.new(0.832)\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements[2].color = [0.0, 0.04, 0.484, 1.0]\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements.new(0.886)\n    c_o_l_o_r_v_a_r_i_a_t_i_o_n_s.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements[0].position = 0.105\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements[1].position = 0.314\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements[1].color = [0.968, 0.902, 0.815, 1.0]\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements.new(0.686)\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements[2].color = [0.484, 0.484, 0.484, 1.0]\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements.new(0.805)\n    d_o_n_o_t_c_h_a_n_g_e.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(wave_texture.outputs[1], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [0.098, 0.127, 0.013, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.591\n    colorramp.color_ramp.elements[1].position = 0.641\n    noise_texture.inputs[2].default_value = 15.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.62\n    colorramp_1.color_ramp.elements[0].color = [0.038, 0.02, 0.013, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.995\n    colorramp_1.color_ramp.elements[1].color = [0.195, 0.134, 0.096, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.inputs[2].default_value = 7.0\n    wave_texture.inputs[3].default_value = 8.0\n    wave_texture.inputs[4].default_value = 3.5\n    colorramp_2.color_ramp.elements[0].color = [0.168, 0.168, 0.168, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.495\n    colorramp.color_ramp.elements[0].color = [0.072, 0.072, 0.072, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.927\n    colorramp.color_ramp.elements[1].color = [0.197, 0.197, 0.197, 1.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.725\n    hue_saturation_value.inputs[2].default_value = 0.68\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.091\n    colorramp_1.color_ramp.elements[1].position = 0.795\n    colorramp_1.color_ramp.elements[1].color = [0.619, 0.619, 0.619, 1.0]\n    noise_texture_1.inputs[2].default_value = 5.06\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.683\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    fish_pattern = nodes.new('ShaderNodeGroup')\n    fish_pattern.node_tree = bpy.data.node_groups['Fish_pattern']\n\n    # Create links to connect nodes\n    links.new(fish_pattern.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    fish_pattern.inputs[1].default_value = [0.017, 0.117, 0.173, 1.0]\n    fish_pattern.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapowanie = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapowanie_1 = nodes.new('ShaderNodeMapping')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(mapowanie.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapowanie.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapowanie.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapowanie_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_1.outputs[0], mapowanie_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.091\n    colorramp.color_ramp.elements[0].color = [0.242, 0.242, 0.242, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.616, 0.616, 0.616, 1.0]\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    colorramp_1.color_ramp.elements[1].position = 0.441\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.3\n    bump_1.inputs[0].default_value = 0.7\n    colorramp_2.color_ramp.elements[1].position = 0.018\n    voronoi_texture.inputs[2].default_value = 2.3\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mix_1.inputs[0].default_value = 0.8\n    noise_texture_1.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], musgrave_texture.inputs[0])\n    links.new(wave_texture.outputs[1], musgrave_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(scale.outputs[0], wave_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.509\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.019, 0.019, 0.019, 1.0]\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.09\n    scale.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    wave_texture.inputs[1].default_value = 1.5\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].color = [0.304, 0.186, 0.103, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.01, 0.01, 1.0]\n    colorramp_2.color_ramp.interpolation = 'EASE'\n    colorramp_2.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_volume = nodes.new('ShaderNodeVolumePrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    brightness_contrast = nodes.new('ShaderNodeBrightContrast')\n    color_ramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_volume.outputs[0], material_output.inputs[1])\n    links.new(color_ramp.outputs[0], principled_volume.inputs[0])\n    links.new(mix.outputs[0], principled_volume.inputs[2])\n    links.new(voronoi_texture.outputs[0], color_ramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(brightness_contrast.outputs[0], mix.inputs[1])\n    links.new(color_ramp_1.outputs[1], layer_weight.inputs[0])\n    links.new(texture_coordinate.outputs[3], layer_weight.inputs[1])\n    links.new(voronoi_texture.outputs[0], color_ramp_1.inputs[0])\n    links.new(color_ramp_2.outputs[0], brightness_contrast.inputs[0])\n    links.new(voronoi_texture.outputs[0], color_ramp_2.inputs[0])\n\n    # Set parameters for each node\n    color_ramp.color_ramp.elements[0].position = 0.25\n    color_ramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.42\n    color_ramp.color_ramp.elements[1].color = [0.05, 0.05, 0.05, 1.0]\n    voronoi_texture.voronoi_dimensions = '4D'\n    musgrave_texture.inputs[2].default_value = 1.75\n    musgrave_texture.inputs[3].default_value = 5.0\n    musgrave_texture.inputs[4].default_value = 5.0\n    musgrave_texture.inputs[5].default_value = 5.0\n    musgrave_texture.musgrave_dimensions = '4D'\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[4].default_value = 0.75\n    noise_texture.inputs[5].default_value = 0.5\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    color_ramp_1.color_ramp.elements[0].color = [0.0, 0.0, 0.0, 0.5]\n    color_ramp_1.color_ramp.elements[1].position = 0.4\n    brightness_contrast.inputs[1].default_value = 0.84\n    brightness_contrast.inputs[2].default_value = 4.0\n    color_ramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    color_ramp_2.color_ramp.elements[1].position = 0.5\n    color_ramp_2.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    color_ramp_2.color_ramp.elements.new(1.0)\n    color_ramp_2.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[19])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[21])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [1.0, 0.021, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.159\n    colorramp.color_ramp.elements[1].color = [1.0, 0.095, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.707)\n    colorramp.color_ramp.elements[2].color = [1.0, 0.058, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.745)\n    colorramp.color_ramp.elements[3].color = [1.0, 0.945, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.6\n    noise_texture.inputs[2].default_value = 25.3\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.717\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[7])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], hue_saturation_value.inputs[4])\n    links.new(layer_weight.outputs[1], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_3.outputs[0], bump_1.inputs[2])\n    links.new(magic_texture.outputs[1], colorramp_3.inputs[0])\n    links.new(mapping_1.outputs[0], magic_texture.inputs[0])\n    links.new(mix.outputs[0], mapping_1.inputs[0])\n    links.new(noise_texture_2.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 8.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.567\n    colorramp.color_ramp.elements[0].color = [0.189, 0.189, 0.189, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.638\n    colorramp.color_ramp.elements[1].color = [0.415, 0.415, 0.415, 1.0]\n    noise_texture.inputs[2].default_value = 4.53\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.792\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.054, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.83\n    bump.inputs[0].default_value = 0.281\n    colorramp_2.color_ramp.elements[1].position = 0.469\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.762\n    bump_1.inputs[0].default_value = 0.869\n    colorramp_3.color_ramp.elements[1].position = 0.077\n    magic_texture.inputs[1].default_value = 0.64\n    magic_texture.inputs[2].default_value = 3.03\n    magic_texture.turbulence_depth = 5\n    mix.inputs[0].default_value = 0.785\n    noise_texture_2.inputs[2].default_value = 3.99\n    noise_texture_2.inputs[3].default_value = 15.6\n    noise_texture_2.inputs[4].default_value = 0.454\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[3])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(magic_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(magic_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 1.0\n    principled_bsdf.inputs[2].default_value = [0.05, 0.05, 0.05]\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 1.0\n    principled_bsdf.inputs[12].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].color = [1.0, 0.002, 0.0, 1.0]\n    magic_texture.inputs[1].default_value = 100.0\n    magic_texture.inputs[2].default_value = 0.83\n    magic_texture.turbulence_depth = 4\n    bump.inputs[0].default_value = 0.7\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.559, 0.559, 0.559, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n    bump.inputs[0].default_value = 0.292\n    colorramp_1.color_ramp.elements[0].position = 0.391\n    colorramp_1.color_ramp.elements[1].position = 0.427\n    noise_texture.inputs[2].default_value = 0.8\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.69\n    noise_texture.inputs[5].default_value = 11.2\n    bump_1.inputs[0].default_value = 0.05\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.491\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(scale.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.055\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[19].default_value = [0.323, 0.789, 1.0, 1.0]\n    principled_bsdf.inputs[20].default_value = 0.0\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    mix.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.interpolation = 'EASE'\n    voronoi_texture.inputs[4].default_value = 1.04\n    scale.operation = 'SCALE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    human_skin = nodes.new('ShaderNodeGroup')\n    human_skin.node_tree = bpy.data.node_groups['Human_Skin']\n\n    # Create links to connect nodes\n    links.new(human_skin.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    human_skin.inputs[9].default_value = [0.893, 0.489, 0.378, 1.0]\n    human_skin.inputs[10].default_value = [0.893, 0.576, 0.533, 1.0]\n    human_skin.inputs[11].default_value = [0.841, 0.543, 0.503, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(multiply.outputs[0], principled_bsdf.inputs[20])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(invert.outputs[0], mix.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(scale.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], voronoi_texture.inputs[4])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[19].default_value = [0.407, 0.061, 1.0, 1.0]\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    invert.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].color = [0.134, 0.134, 0.134, 1.0]\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.distance = 'MINKOWSKI'\n    scale.operation = 'SCALE'\n    noise_texture.inputs[1].default_value = 0.153\n    noise_texture.inputs[2].default_value = 4.0\n    multiply.inputs[1].default_value = 9.4\n    multiply.operation = 'MULTIPLY'\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.764\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.5\n    colorramp_2.color_ramp.interpolation = 'EASE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.514\n    colorramp.color_ramp.elements.new(0.563)\n    colorramp.color_ramp.elements[2].color = [0.309, 0.041, 0.021, 1.0]\n    colorramp.color_ramp.elements.new(0.564)\n    colorramp.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.664)\n    colorramp.color_ramp.elements[4].color = [0.67, 0.11, 0.046, 1.0]\n    noise_texture.inputs[3].default_value = 9.0\n    noise_texture.inputs[4].default_value = 0.692\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.516\n    colorramp_1.color_ramp.elements.new(0.562)\n    colorramp_1.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.664)\n    colorramp_1.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.981)\n    colorramp_1.color_ramp.elements[4].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[0].color = [0.48, 0.48, 0.48, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.52\n    colorramp_2.color_ramp.elements[1].color = [0.146, 0.146, 0.146, 1.0]\n    colorramp_2.color_ramp.elements.new(0.562)\n    colorramp_2.color_ramp.elements[2].color = [0.904, 0.107, 0.052, 1.0]\n    colorramp_2.color_ramp.elements.new(0.623)\n    colorramp_2.color_ramp.elements[3].color = [0.922, 0.148, 0.06, 1.0]\n    colorramp_2.color_ramp.elements.new(0.999)\n    colorramp_2.color_ramp.elements[4].color = [1.0, 0.709, 0.675, 1.0]\n    colorramp_3.color_ramp.elements[0].color = [0.001, 0.001, 0.001, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.52\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_3.color_ramp.elements.new(0.562)\n    colorramp_3.color_ramp.elements[2].color = [0.904, 0.107, 0.052, 1.0]\n    colorramp_3.color_ramp.elements.new(0.623)\n    colorramp_3.color_ramp.elements[3].color = [0.922, 0.148, 0.06, 1.0]\n    colorramp_3.color_ramp.elements.new(0.981)\n    colorramp_3.color_ramp.elements[4].color = [0.766, 0.545, 0.519, 1.0]\n    noise_texture_1.inputs[2].default_value = 163.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    noise_texture_1.inputs[4].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['outdoor_plaster']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.162, 0.028, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.25\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.164, 0.164, 0.164, 1.0]\n    noise_texture.inputs[2].default_value = 28.5\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n    mapping.inputs[3].default_value = [1.0, 1.0, 23.7]\n    bump.inputs[0].default_value = 0.02\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    add_1 = nodes.new('ShaderNodeMath')\n    multiply_2 = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[1])\n    links.new(hue_saturation_value.outputs[0], emission.inputs[0])\n    links.new(multiply.outputs[0], emission.inputs[1])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], multiply.inputs[1])\n    links.new(colorramp_1.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(multiply_2.outputs[0], add_1.inputs[0])\n    links.new(colorramp_2.outputs[0], multiply_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.636\n    colorramp.color_ramp.elements[0].color = [1.0, 0.005, 0.003, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.764\n    colorramp.color_ramp.elements[1].color = [1.0, 0.622, 0.051, 1.0]\n    colorramp.color_ramp.elements.new(0.832)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 4.9\n    voronoi_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[2].default_value = 8.9\n    noise_texture.inputs[3].default_value = 10.4\n    noise_texture.inputs[4].default_value = 0.55\n    scale.inputs[3].default_value = 0.5\n    scale.operation = 'SCALE'\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[1].default_value = 200.0\n    multiply_1.operation = 'MULTIPLY'\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.636\n    colorramp_1.color_ramp.elements[1].position = 0.914\n    add_1.inputs[1].default_value = 1.0\n    multiply_2.inputs[1].default_value = 5.0\n    multiply_2.operation = 'MULTIPLY'\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.482\n    colorramp_2.color_ramp.elements[1].position = 0.641\n    colorramp_2.color_ramp.elements.new(0.664)\n    colorramp_2.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    attribute = nodes.new('ShaderNodeAttribute')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(attribute.outputs[0], mapping.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix_1.inputs[1])\n    links.new(mapping_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(attribute.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.2\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.468\n    colorramp.color_ramp.elements[0].color = [0.017, 0.009, 0.003, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.497, 0.258, 0.067, 1.0]\n    mix.inputs[0].default_value = 0.1\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.4\n    wave_texture.inputs[2].default_value = 1.0\n    wave_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[5].default_value = 0.8\n    wave_texture.inputs[6].default_value = 2.0\n    mapping.inputs[3].default_value = [0.5, 1.0, 1.0]\n    attribute.attribute_name = 'Position'\n    voronoi_texture.inputs[2].default_value = 8.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mix_1.inputs[0].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 5.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    brick_texture_1 = nodes.new('ShaderNodeTexBrick')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture_2 = nodes.new('ShaderNodeTexBrick')\n    mapping_3 = nodes.new('ShaderNodeMapping')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    brick_texture_3 = nodes.new('ShaderNodeTexBrick')\n    mapping_4 = nodes.new('ShaderNodeMapping')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    brick_texture_4 = nodes.new('ShaderNodeTexBrick')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(brick_texture_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(mix_4.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_5.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(brick_texture_2.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(mix_1.outputs[0], mapping.inputs[0])\n    links.new(brick_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(mapping_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], brick_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mapping_3.outputs[0], brick_texture_2.inputs[0])\n    links.new(mix_3.outputs[0], mapping_3.inputs[0])\n    links.new(brick_texture_3.outputs[0], mix_3.inputs[1])\n    links.new(mapping_4.outputs[0], mix_3.inputs[2])\n    links.new(mapping_4.outputs[0], brick_texture_3.inputs[0])\n    links.new(mix_2.outputs[0], mapping_4.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_4.inputs[2])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_2.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], noise_texture_1.inputs[0])\n    links.new(brick_texture_4.outputs[0], mix_5.inputs[1])\n    links.new(mapping.outputs[0], brick_texture_4.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 6.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].color = [0.264, 0.264, 0.264, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DIFFERENCE'\n    brick_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[5].default_value = 0.105\n    brick_texture.inputs[6].default_value = 0.03\n    mix_1.inputs[0].default_value = 0.42\n    brick_texture_1.inputs[5].default_value = 0.0\n    mapping_1.inputs[3].default_value = [1.13, 1.13, 1.13]\n    mix_2.inputs[0].default_value = 0.002\n    mapping_2.inputs[3].default_value = [0.77, 0.77, 0.77]\n    noise_texture.inputs[3].default_value = 8.9\n    noise_texture.inputs[4].default_value = 0.68\n    brick_texture_2.inputs[5].default_value = 0.0\n    mix_3.inputs[0].default_value = 0.42\n    brick_texture_3.inputs[5].default_value = 0.0\n    mapping_4.inputs[3].default_value = [1.13, 1.13, 1.13]\n    mix_4.inputs[0].default_value = 0.553\n    mix_4.blend_type = 'DIFFERENCE'\n    colorramp_2.color_ramp.elements[0].position = 0.207\n    colorramp_2.color_ramp.elements[1].position = 0.594\n    noise_texture_1.inputs[3].default_value = 8.9\n    noise_texture_1.inputs[4].default_value = 0.813\n    mix_5.inputs[0].default_value = 1.0\n    mix_5.inputs[2].default_value = [0.0, 0.258, 0.5, 1.0]\n    mix_5.blend_type = 'MULTIPLY'\n    brick_texture_4.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture_4.inputs[5].default_value = 0.125\n    brick_texture_4.inputs[6].default_value = 0.03\n    bump.inputs[0].default_value = 0.367\n    bump.inputs[1].default_value = 0.76\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.018\n    colorramp.color_ramp.elements[0].color = [0.102, 0.462, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.066\n    colorramp.color_ramp.elements[1].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.105)\n    colorramp.color_ramp.elements[2].color = [0.005, 0.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.191)\n    colorramp.color_ramp.elements[3].color = [1.0, 0.0, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.277)\n    colorramp.color_ramp.elements[4].color = [0.0, 1.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.336)\n    colorramp.color_ramp.elements[5].color = [0.288, 0.785, 0.196, 1.0]\n    colorramp.color_ramp.elements.new(0.414)\n    colorramp.color_ramp.elements[6].color = [0.103, 0.461, 1.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].position = 0.477\n    colorramp_1.color_ramp.elements[0].color = [0.174, 0.174, 0.174, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.632\n    colorramp_1.color_ramp.elements[1].color = [0.424, 0.424, 0.424, 1.0]\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.025\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.75\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    rgb = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(noise_texture.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 17.0\n    noise_texture.inputs[5].default_value = 0.46\n    rgb.outputs[0].default_value = [1.0, 0.841, 0.15, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(mix_1.outputs[0], checker_texture.inputs[2])\n    links.new(mapping_1.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[1], noise_texture.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], noise_texture_2.inputs[0])\n    links.new(colorramp_2.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture_3.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_3.inputs[0])\n    links.new(noise_texture_3.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 12.0\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    mix.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.255\n    colorramp.color_ramp.elements[1].position = 0.559\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.55\n    noise_texture.inputs[5].default_value = 0.3\n    noise_texture_1.inputs[2].default_value = 8.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.55\n    mix_1.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.636\n    colorramp_1.color_ramp.elements[1].position = 0.809\n    noise_texture_2.inputs[2].default_value = 15.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    noise_texture_2.inputs[4].default_value = 0.55\n    noise_texture_2.inputs[5].default_value = 1.0\n    colorramp_2.color_ramp.elements[0].position = 0.364\n    colorramp_2.color_ramp.elements[1].position = 0.677\n    colorramp_2.color_ramp.elements[1].color = [0.212, 0.212, 0.212, 1.0]\n    noise_texture_3.inputs[2].default_value = 10.0\n    noise_texture_3.inputs[3].default_value = 15.0\n    noise_texture_3.inputs[4].default_value = 0.7\n    bump.inputs[0].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], add_shader.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [0.378, 0.312, 0.321, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.224\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    combine_color = nodes.new('ShaderNodeCombineColor')\n    map_range = nodes.new('ShaderNodeMapRange')\n    separate_color = nodes.new('ShaderNodeSeparateColor')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(combine_color.outputs[0], color_ramp.inputs[0])\n    links.new(map_range.outputs[0], combine_color.inputs[0])\n    links.new(map_range_1.outputs[0], combine_color.inputs[1])\n    links.new(map_range_2.outputs[0], combine_color.inputs[2])\n    links.new(separate_color.outputs[0], map_range.inputs[0])\n    links.new(color_ramp_1.outputs[0], separate_color.inputs[0])\n    links.new(noise_texture.outputs[1], color_ramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(separate_color.outputs[1], map_range_1.inputs[0])\n    links.new(separate_color.outputs[2], map_range_2.inputs[0])\n    links.new(combine_color.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    color_ramp.color_ramp.color_mode = 'HSL'\n    color_ramp.color_ramp.hue_interpolation = 'FAR'\n    color_ramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.2\n    color_ramp.color_ramp.elements[1].color = [0.0, 1.0, 0.014, 1.0]\n    map_range.inputs[2].default_value = 0.3\n    map_range.inputs[3].default_value = 0.1\n    map_range.inputs[4].default_value = 0.2\n    map_range.inputs[5].default_value = 5.0\n    map_range.interpolation_type = 'STEPPED'\n    color_ramp_1.color_ramp.interpolation = 'EASE'\n    color_ramp_1.color_ramp.elements[0].position = 0.206\n    color_ramp_1.color_ramp.elements[1].position = 0.935\n    noise_texture.inputs[1].default_value = 3.1\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.25\n    noise_texture.inputs[5].default_value = 0.2\n    noise_texture.noise_dimensions = '4D'\n    map_range_1.inputs[1].default_value = 0.3\n    map_range_1.inputs[2].default_value = 0.6\n    map_range_1.inputs[3].default_value = 0.1\n    map_range_1.inputs[4].default_value = 0.2\n    map_range_1.inputs[5].default_value = 5.0\n    map_range_1.interpolation_type = 'STEPPED'\n    map_range_2.inputs[1].default_value = 0.6\n    map_range_2.inputs[2].default_value = 0.9\n    map_range_2.inputs[3].default_value = 0.1\n    map_range_2.inputs[4].default_value = 0.2\n    map_range_2.inputs[5].default_value = 5.0\n    map_range_2.interpolation_type = 'STEPPED'\n    bump.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump.outputs[0], displacement.inputs[3])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].color = [0.604, 0.544, 0.263, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.632\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.023\n    voronoi_texture.inputs[2].default_value = 10.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mix.inputs[0].default_value = 0.892\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_2.color_ramp.elements[0].position = 0.936\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.6\n    bump.inputs[1].default_value = 0.005\n    displacement.inputs[1].default_value = 0.2\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    insect_screen_mosquito_net = nodes.new('ShaderNodeGroup')\n    insect_screen_mosquito_net.node_tree = bpy.data.node_groups['Insect_Screen_Mosquito_Net']\n\n    # Create links to connect nodes\n    links.new(insect_screen_mosquito_net.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    insect_screen_mosquito_net.inputs[5].default_value = 1.0\n    insect_screen_mosquito_net.inputs[9].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.55\n    principled_bsdf.inputs[9].default_value = 0.464\n    principled_bsdf.inputs[10].default_value = 0.564\n    principled_bsdf.inputs[11].default_value = 0.255\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.65\n    colorramp.color_ramp.elements[1].color = [1.0, 0.253, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 15.0\n    voronoi_texture.inputs[3].default_value = 0.05\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n    displacement.space = 'WORLD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.283, 1.0, 0.122, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.15\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    toon_shader_diamonds_pattern = nodes.new('ShaderNodeGroup')\n    toon_shader_diamonds_pattern.node_tree = bpy.data.node_groups['Toon_Shader_Diamonds_Pattern_001']\n\n    # Create links to connect nodes\n    links.new(toon_shader_diamonds_pattern.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    toon_shader_diamonds_pattern.inputs[0].default_value = [0.244, 0.204, 0.206, 1.0]\n    toon_shader_diamonds_pattern.inputs[7].default_value = 0.785\n    toon_shader_diamonds_pattern.inputs[11].default_value = 0.85\n    toon_shader_diamonds_pattern.inputs[12].default_value = 0.973\n    toon_shader_diamonds_pattern.inputs[14].default_value = 0.35\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.776, 0.723, 0.571, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.295\n    principled_bsdf.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    checker_texture_1 = nodes.new('ShaderNodeTexChecker')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    checker_texture_2 = nodes.new('ShaderNodeTexChecker')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix.inputs[2])\n    links.new(checker_texture.outputs[0], mix_1.inputs[1])\n    links.new(checker_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(checker_texture.outputs[0], checker_texture_1.inputs[0])\n    links.new(checker_texture.outputs[0], checker_texture_1.inputs[1])\n    links.new(bright_contrast.outputs[0], checker_texture_1.inputs[2])\n    links.new(mix_2.outputs[0], bright_contrast.inputs[0])\n    links.new(checker_texture_2.outputs[0], mix_2.inputs[1])\n    links.new(checker_texture.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], checker_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[16].default_value = 1.5\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    mix_1.blend_type = 'SOFT_LIGHT'\n    checker_texture.inputs[1].default_value = [0.063, 0.13, 0.263, 1.0]\n    checker_texture.inputs[2].default_value = [0.604, 0.367, 0.187, 0.99]\n    checker_texture.inputs[3].default_value = 30.0\n    mapping.inputs[1].default_value = [0.71, 0.0, 0.5]\n    mapping.inputs[2].default_value = [0.785, 0.785, 0.0]\n    mapping.vector_type = 'TEXTURE'\n    checker_texture_1.inputs[3].default_value = 2.0\n    bright_contrast.inputs[1].default_value = -1.0\n    bright_contrast.inputs[2].default_value = 1.0\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'DIFFERENCE'\n    checker_texture_2.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    checker_texture_2.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    checker_texture_2.inputs[3].default_value = 24.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    simple_voronoi_crystal_glass = nodes.new('ShaderNodeGroup')\n    simple_voronoi_crystal_glass.node_tree = bpy.data.node_groups['Simple_Voronoi_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(simple_voronoi_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(simple_voronoi_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    simple_voronoi_crystal_glass.inputs[15].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    volume_absorption = nodes.new('ShaderNodeVolumeAbsorption')\n    multiply = nodes.new('ShaderNodeMath')\n    less_than = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    volume_scatter = nodes.new('ShaderNodeVolumeScatter')\n\n    # Create links to connect nodes\n    links.new(add_shader.outputs[0], material_output.inputs[1])\n    links.new(volume_absorption.outputs[0], add_shader.inputs[0])\n    links.new(volume_scatter.outputs[0], add_shader.inputs[1])\n    links.new(multiply.outputs[0], volume_absorption.inputs[1])\n    links.new(less_than.outputs[0], multiply.inputs[0])\n    links.new(subtract.outputs[0], less_than.inputs[0])\n    links.new(multiply_1.outputs[0], subtract.inputs[1])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], volume_scatter.inputs[1])\n\n    # Set parameters for each node\n    volume_absorption.inputs[0].default_value = [1.0, 0.909, 0.0, 1.0]\n    multiply.inputs[1].default_value = 100.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    less_than.inputs[1].default_value = 0.5\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    subtract.inputs[0].default_value = 1.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 10.0\n    volume_scatter.inputs[0].default_value = [1.0, 0.909, 0.0, 1.0]\n    volume_scatter.inputs[2].default_value = -0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    add_shader = nodes.new('ShaderNodeAddShader')\n    add_shader_1 = nodes.new('ShaderNodeAddShader')\n    glass_bsdf_1 = nodes.new('ShaderNodeBsdfGlass')\n    subtract = nodes.new('ShaderNodeMath')\n    glass_bsdf_2 = nodes.new('ShaderNodeBsdfGlass')\n    glass_bsdf_3 = nodes.new('ShaderNodeBsdfGlass')\n    add = nodes.new('ShaderNodeMath')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(light_path.outputs[0], mix_shader_1.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(add_shader.outputs[0], mix_shader_1.inputs[2])\n    links.new(add_shader_1.outputs[0], add_shader.inputs[0])\n    links.new(glass_bsdf_3.outputs[0], add_shader.inputs[1])\n    links.new(glass_bsdf_1.outputs[0], add_shader_1.inputs[0])\n    links.new(glass_bsdf_2.outputs[0], add_shader_1.inputs[1])\n    links.new(subtract.outputs[0], glass_bsdf_1.inputs[2])\n    links.new(add.outputs[0], glass_bsdf_3.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    glass_bsdf.inputs[1].default_value = 0.001\n    glass_bsdf.inputs[2].default_value = 2.0\n    glass_bsdf.distribution = 'GGX'\n    glass_bsdf_1.inputs[0].default_value = [1.0, 0.0, 0.0, 1.0]\n    glass_bsdf_1.inputs[1].default_value = 0.001\n    glass_bsdf_1.distribution = 'GGX'\n    subtract.inputs[0].default_value = 2.0\n    subtract.inputs[1].default_value = 0.044\n    subtract.operation = 'SUBTRACT'\n    glass_bsdf_2.inputs[0].default_value = [0.0, 1.0, 0.0, 1.0]\n    glass_bsdf_2.inputs[1].default_value = 0.001\n    glass_bsdf_2.inputs[2].default_value = 2.0\n    glass_bsdf_2.distribution = 'GGX'\n    glass_bsdf_3.inputs[0].default_value = [0.0, 0.0, 1.0, 1.0]\n    glass_bsdf_3.inputs[1].default_value = 0.001\n    glass_bsdf_3.distribution = 'GGX'\n    add.inputs[0].default_value = 2.0\n    add.inputs[1].default_value = 0.044\n    principled_bsdf.inputs[17].default_value = 0.91\n    rgb.outputs[0].default_value = [1.0, 0.543, 0.294, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.289\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 15.0\n    bump.inputs[0].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.343\n    colorramp_1.color_ramp.elements[1].position = 0.606\n    bump_1.inputs[0].default_value = 0.1\n    noise_texture_1.inputs[2].default_value = 3.3\n    noise_texture_1.inputs[3].default_value = 15.0\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.distance = 'MANHATTAN'\n    voronoi_texture.feature = 'F2'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    add = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply = nodes.new('ShaderNodeMath')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    map_range = nodes.new('ShaderNodeMapRange')\n    pingpong = nodes.new('ShaderNodeMath')\n    emission = nodes.new('ShaderNodeEmission')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    add_1 = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    emission_1 = nodes.new('ShaderNodeEmission')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(add.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], add.inputs[0])\n    links.new(rgb_curves.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(multiply.outputs[0], noise_texture.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(map_range.outputs[0], rgb_curves.inputs[1])\n    links.new(pingpong.outputs[0], map_range.inputs[0])\n    links.new(multiply_1.outputs[0], emission.inputs[1])\n    links.new(rgb_curves.outputs[0], multiply_1.inputs[0])\n    links.new(add_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(emission_1.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(colorramp_1.outputs[0], add_1.inputs[0])\n    links.new(rgb_curves.outputs[0], add_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(multiply_1.outputs[0], emission_1.inputs[1])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[0])\n    links.new(map_range_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture.outputs[0], map_range_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    add.inputs[2].default_value = 0.0\n    add.use_clamp = True\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.186\n    colorramp.color_ramp.elements[1].position = 0.459\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[5].default_value = 3.0\n    noise_texture.noise_dimensions = '4D'\n    multiply.inputs[0].default_value = 227.0\n    multiply.inputs[1].default_value = 0.001\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    rgb_curves.mapping.curves[3].points[1].location = [0.209, 0.044]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    map_range.inputs[2].default_value = 50.0\n    pingpong.inputs[0].default_value = 227.0\n    pingpong.inputs[1].default_value = 50.0\n    pingpong.inputs[2].default_value = 0.0\n    pingpong.operation = 'PINGPONG'\n    emission.inputs[0].default_value = [1.0, 0.214, 0.014, 1.0]\n    multiply_1.inputs[1].default_value = 100.0\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    add_1.inputs[2].default_value = 0.0\n    add_1.use_clamp = True\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.191\n    colorramp_1.color_ramp.elements[1].position = 0.627\n    emission_1.inputs[0].default_value = [0.8, 0.002, 0.0, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.elements[0].position = 0.142\n    colorramp_2.color_ramp.elements[0].color = [0.014, 0.014, 0.014, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.364\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements.new(0.666)\n    colorramp_2.color_ramp.elements[2].color = [0.033, 0.033, 0.033, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    map_range_1.inputs[1].default_value = 0.4\n    map_range_1.inputs[2].default_value = 0.7\n    map_range_1.inputs[3].default_value = 0.5\n    map_range_1.clamp = False\n    map_range_1.interpolation_type = 'SMOOTHSTEP'\n    bump.inputs[0].default_value = 0.4\n    bump.inputs[1].default_value = 10.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(invert.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], invert.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.4\n    principled_bsdf.inputs[3].default_value = [0.445, 0.009, 0.0, 1.0]\n    principled_bsdf.inputs[8].default_value = 0.631\n    principled_bsdf.inputs[9].default_value = 0.3\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.359, 0.083, 0.008, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.228\n    colorramp.color_ramp.elements[1].color = [0.579, 0.203, 0.012, 1.0]\n    colorramp.color_ramp.elements.new(0.784)\n    colorramp.color_ramp.elements[2].color = [0.799, 0.299, 0.014, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.378\n    colorramp_1.color_ramp.elements[1].color = [0.32, 0.32, 0.32, 1.0]\n    colorramp_1.color_ramp.elements.new(0.772)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 70.0\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.002\n    mix.inputs[0].default_value = 0.847\n    colorramp_2.color_ramp.elements[0].position = 0.249\n    colorramp_2.color_ramp.elements[0].color = [0.138, 0.138, 0.138, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.495, 0.495, 0.495, 1.0]\n    voronoi_texture_1.inputs[2].default_value = 100.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.7\n    colorramp.color_ramp.elements[0].color = [0.17, 0.043, 0.014, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.227\n    colorramp.color_ramp.elements[1].color = [0.332, 0.081, 0.019, 1.0]\n    colorramp.color_ramp.elements.new(0.468)\n    colorramp.color_ramp.elements[2].color = [0.864, 0.294, 0.135, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [0.949, 0.319, 0.069, 1.0]\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[2].default_value = 6.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 1.0\n    bump.inputs[0].default_value = 0.15\n    noise_texture_1.inputs[2].default_value = 8.0\n    noise_texture_1.inputs[3].default_value = 0.0\n    bump_1.inputs[0].default_value = 0.3\n    noise_texture_2.inputs[2].default_value = 15.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    noise_texture_2.inputs[4].default_value = 0.6\n    bump_2.inputs[0].default_value = 0.3\n    bump_2.invert = True\n    voronoi_texture.inputs[2].default_value = 300.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[1])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(hue_saturation_value.outputs[0], bright_contrast.inputs[0])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(geometry.outputs[7], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[1], bump.inputs[2])\n    links.new(colorramp.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[2].default_value = [1.0, 0.2, 0.2]\n    principled_bsdf.inputs[7].default_value = 0.02\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = 0.05\n    hue_saturation_value.inputs[0].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.405\n    colorramp.color_ramp.elements[0].color = [0.015, 0.126, 0.331, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.474\n    colorramp.color_ramp.elements[1].color = [0.358, 0.205, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.509)\n    colorramp.color_ramp.elements[2].color = [0.256, 0.256, 0.256, 1.0]\n    colorramp.color_ramp.elements.new(0.586)\n    colorramp.color_ramp.elements[3].color = [0.358, 0.003, 0.014, 1.0]\n    colorramp.color_ramp.elements.new(0.843)\n    colorramp.color_ramp.elements[4].color = [0.703, 0.698, 0.684, 1.0]\n    noise_texture.inputs[2].default_value = 0.2\n    noise_texture.inputs[5].default_value = 0.1\n    mapping.inputs[1].default_value = [0.0, 158.0, 0.0]\n    mapping.inputs[2].default_value = [0.0, 6.0, 0.0]\n    mapping.inputs[3].default_value = [100.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.468\n    colorramp_1.color_ramp.elements[1].position = 0.618\n    bump.inputs[0].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.886\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    invert = nodes.new('ShaderNodeInvert')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    multiply_2 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    bump_2 = nodes.new('ShaderNodeBump')\n    multiply_3 = nodes.new('ShaderNodeMath')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    multiply_4 = nodes.new('ShaderNodeMath')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_5 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(rgb_to_bw.outputs[0], colorramp.inputs[0])\n    links.new(invert.outputs[0], rgb_to_bw.inputs[0])\n    links.new(multiply.outputs[0], invert.inputs[0])\n    links.new(mix_1.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], mix_1.inputs[1])\n    links.new(multiply_1.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture_1.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n    links.new(multiply_2.outputs[0], voronoi_texture_1.inputs[2])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(multiply_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(multiply_3.outputs[0], bump_2.inputs[2])\n    links.new(voronoi_texture_2.outputs[0], multiply_3.inputs[0])\n    links.new(voronoi_texture_2.outputs[0], multiply_3.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_2.inputs[0])\n    links.new(multiply_4.outputs[0], voronoi_texture_2.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(bump.outputs[0], translucent_bsdf.inputs[1])\n    links.new(multiply_5.outputs[0], displacement.inputs[0])\n    links.new(bump.outputs[0], multiply_5.inputs[1])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.25\n    diffuse_bsdf.inputs[1].default_value = 0.1\n    mix.inputs[2].default_value = [0.5, 0.256, 0.008, 1.0]\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.205\n    colorramp.color_ramp.elements[1].position = 0.236\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 25.0\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    multiply_2.inputs[0].default_value = 25.0\n    multiply_2.inputs[1].default_value = 1.7\n    multiply_2.inputs[2].default_value = 0.0\n    multiply_2.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.3\n    bump.inputs[1].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.3\n    bump_1.inputs[1].default_value = 0.05\n    bump_2.inputs[0].default_value = 0.2\n    bump_2.inputs[1].default_value = 0.05\n    multiply_3.inputs[2].default_value = 0.0\n    multiply_3.operation = 'MULTIPLY'\n    multiply_4.inputs[0].default_value = 25.0\n    multiply_4.inputs[1].default_value = 2.5\n    multiply_4.inputs[2].default_value = 0.0\n    multiply_4.operation = 'MULTIPLY'\n    glossy_bsdf.inputs[1].default_value = 0.387\n    glossy_bsdf.distribution = 'BECKMANN'\n    translucent_bsdf.inputs[0].default_value = [0.38, 0.38, 0.38, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply_5.inputs[2].default_value = 0.0\n    multiply_5.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(musgrave_texture.outputs[0], musgrave_texture_1.inputs[4])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.336\n    principled_bsdf.inputs[10].default_value = 1.0\n    principled_bsdf.inputs[11].default_value = 0.236\n    colorramp.color_ramp.elements[0].color = [0.321, 0.321, 0.321, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.407, 0.407, 0.407, 1.0]\n    musgrave_texture.inputs[2].default_value = 7.9\n    musgrave_texture.inputs[3].default_value = 3.9\n    musgrave_texture.inputs[4].default_value = 0.2\n    colorramp_1.color_ramp.elements[0].position = 0.009\n    colorramp_1.color_ramp.elements[0].color = [0.275, 0.275, 0.275, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    potato = nodes.new('ShaderNodeGroup')\n    potato.node_tree = bpy.data.node_groups['Potatoe']\n\n    # Create links to connect nodes\n    links.new(potato.outputs[0], material_output.inputs[0])\n    links.new(potato.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_1.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_shader_2.inputs[0])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_2.inputs[1])\n    links.new(principled_bsdf_2.outputs[0], mix_shader_2.inputs[2])\n    links.new(mix.outputs[0], colorramp_3.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(colorramp_2.outputs[0], principled_bsdf_2.inputs[9])\n\n    # Set parameters for each node\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.608\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.718\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 5.67\n    voronoi_texture.inputs[3].default_value = 0.326\n    voronoi_texture.feature = 'SMOOTH_F1'\n    colorramp_1.color_ramp.elements[0].position = 0.429\n    colorramp_1.color_ramp.elements[1].position = 0.703\n    noise_texture.inputs[2].default_value = 5.6\n    noise_texture.inputs[3].default_value = 12.0\n    noise_texture.inputs[4].default_value = 0.817\n    principled_bsdf.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.722, 0.722, 0.722, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_2.color_ramp.elements[0].position = 0.444\n    colorramp_2.color_ramp.elements[0].color = [0.026, 0.026, 0.026, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.586\n    colorramp_2.color_ramp.elements[1].color = [0.735, 0.735, 0.735, 1.0]\n    noise_texture_1.inputs[2].default_value = 7.91\n    noise_texture_1.inputs[3].default_value = 12.0\n    noise_texture_1.inputs[4].default_value = 0.708\n    diffuse_bsdf.inputs[0].default_value = [0.678, 0.678, 0.678, 1.0]\n    colorramp_3.color_ramp.elements[0].position = 0.586\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.669\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mix.inputs[0].default_value = 0.588\n    voronoi_texture_1.inputs[2].default_value = 45.2\n    voronoi_texture_1.inputs[3].default_value = 0.326\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    principled_bsdf_1.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    principled_bsdf_2.inputs[0].default_value = [0.678, 0.678, 0.678, 1.0]\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    vector_rotate = nodes.new('ShaderNodeVectorRotate')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert = nodes.new('ShaderNodeInvert')\n    divide = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(less_than.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], less_than.inputs[0])\n    links.new(invert.outputs[0], less_than.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(vector_rotate.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[2], vector_rotate.inputs[0])\n    links.new(divide.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture_1.outputs[0], divide.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(vector_rotate.outputs[0], mapping_1.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping_2.outputs[0], gradient_texture.inputs[0])\n    links.new(vector_rotate.outputs[0], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    less_than.use_clamp = True\n    voronoi_texture.inputs[2].default_value = 41.2\n    voronoi_texture.inputs[5].default_value = 0.0\n    mapping.inputs[1].default_value = [0.4, 0.3, 0.0]\n    vector_rotate.inputs[1].default_value = [0.5, 0.5, 0.0]\n    vector_rotate.inputs[3].default_value = 0.785\n    divide.inputs[1].default_value = 0.4\n    divide.inputs[2].default_value = 0.0\n    divide.operation = 'DIVIDE'\n    divide.use_clamp = True\n    voronoi_texture_1.inputs[1].default_value = 1.0\n    voronoi_texture_1.inputs[2].default_value = 0.8\n    voronoi_texture_1.inputs[5].default_value = 0.0\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    mapping_1.inputs[1].default_value = [2.02, 2.02, 0.0]\n    mapping_1.inputs[3].default_value = [0.9, 0.9, 1.0]\n    principled_bsdf.inputs[0].default_value = [0.013, 0.276, 0.28, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.276\n    principled_bsdf.inputs[9].default_value = 0.367\n    principled_bsdf.subsurface_method = 'BURLEY'\n    principled_bsdf_1.inputs[7].default_value = 0.642\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.003, 0.0, 0.349, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.129\n    colorramp.color_ramp.elements[1].color = [0.998, 0.0, 0.004, 1.0]\n    colorramp.color_ramp.elements.new(0.25)\n    colorramp.color_ramp.elements[2].color = [0.007, 0.856, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[3].color = [0.0, 0.0, 0.611, 1.0]\n    colorramp.color_ramp.elements.new(0.713)\n    colorramp.color_ramp.elements[4].color = [0.437, 0.0, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.997)\n    colorramp.color_ramp.elements[5].color = [0.114, 0.0, 0.001, 1.0]\n    gradient_texture.gradient_type = 'SPHERICAL'\n    mapping_2.inputs[1].default_value = [-1.3, -1.3, 0.0]\n    mapping_2.inputs[3].default_value = [2.6, 2.6, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    bright_contrast_1 = nodes.new('ShaderNodeBrightContrast')\n    invert = nodes.new('ShaderNodeInvert')\n    bright_contrast_2 = nodes.new('ShaderNodeBrightContrast')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    mix_6 = nodes.new('ShaderNodeMixRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    normal_map_1 = nodes.new('ShaderNodeNormalMap')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bright_contrast_1.outputs[0], principled_bsdf.inputs[6])\n    links.new(bright_contrast_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_5.outputs[0], principled_bsdf.inputs[23])\n    links.new(hue_saturation_value.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], hue_saturation_value.inputs[4])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(bright_contrast.outputs[0], mix_1.inputs[1])\n    links.new(ambient_occlusion.outputs[1], bright_contrast.inputs[0])\n    links.new(invert.outputs[0], bright_contrast_1.inputs[0])\n    links.new(noise_texture.outputs[0], bright_contrast_2.inputs[0])\n    links.new(multiply.outputs[0], mix_2.inputs[1])\n    links.new(mix_3.outputs[0], bump.inputs[2])\n    links.new(normal_map.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], mix_3.inputs[1])\n    links.new(mix.outputs[0], mix_3.inputs[2])\n    links.new(mix_4.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mix_4.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_4.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(mix_6.outputs[0], mix_5.inputs[1])\n    links.new(bump_1.outputs[0], mix_5.inputs[2])\n    links.new(bump.outputs[0], mix_6.inputs[1])\n    links.new(normal_map_1.outputs[0], bump_1.inputs[3])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.696\n    principled_bsdf.inputs[16].default_value = 2.58\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DARKEN'\n    hue_saturation_value.inputs[1].default_value = 1.51\n    noise_texture.inputs[1].default_value = 0.99\n    noise_texture.inputs[2].default_value = 1.09\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 1.7\n    noise_texture.noise_dimensions = '4D'\n    colorramp.color_ramp.elements[0].position = 0.257\n    colorramp.color_ramp.elements[1].position = 0.761\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.blend_type = 'LIGHTEN'\n    bright_contrast_2.inputs[1].default_value = -0.5\n    bright_contrast_2.inputs[2].default_value = 0.13\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    mix_2.blend_type = 'COLOR'\n    multiply.inputs[0].default_value = 1.0\n    multiply.inputs[1].default_value = 0.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.328\n    bump.inputs[1].default_value = 0.14\n    mix_3.inputs[0].default_value = 0.0\n    mix_3.blend_type = 'DARKEN'\n    noise_texture_1.inputs[1].default_value = 0.99\n    noise_texture_1.inputs[2].default_value = 3.28\n    noise_texture_1.inputs[3].default_value = 4.47\n    noise_texture_1.inputs[4].default_value = 0.0\n    noise_texture_1.inputs[5].default_value = 1.0\n    noise_texture_1.noise_dimensions = '4D'\n    mix_4.inputs[0].default_value = 0.133\n    voronoi_texture.inputs[1].default_value = 3.5\n    voronoi_texture.inputs[2].default_value = 39.1\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    voronoi_texture.voronoi_dimensions = '4D'\n    normal_map.inputs[0].default_value = 0.5\n    mix_5.inputs[0].default_value = 0.0\n    mix_6.inputs[0].default_value = 0.0\n    mix_6.inputs[2].default_value = [0.5, 0.5, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    combine_xyz_1 = nodes.new('ShaderNodeCombineXYZ')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(rgb_curves.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], rgb_curves.inputs[1])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(combine_xyz.outputs[0], mapping_1.inputs[3])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_2.outputs[0], gradient_texture.inputs[0])\n    links.new(mapping.outputs[0], mapping_2.inputs[0])\n    links.new(combine_xyz_1.outputs[0], mapping_2.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.011, 0.005, 0.001, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.024\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.042, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.357\n    bump.inputs[0].default_value = 0.02\n    bump.invert = True\n    musgrave_texture.inputs[2].default_value = 500.0\n    mapping.inputs[3].default_value = [1.4, 1.4, 1.4]\n    bump_1.inputs[0].default_value = 0.02\n    bump_1.invert = True\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.55\n    displacement.inputs[2].default_value = 0.05\n    mix.inputs[0].default_value = 1.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.245, 0.281]\n    rgb_curves.mapping.curves[3].points.new(0.5, 0.813)\n    rgb_curves.mapping.curves[3].points.new(1.0, 0.931)\n    colorramp.color_ramp.elements[1].position = 0.155\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    mapping_1.inputs[1].default_value = [0.1, 0.0, 0.0]\n    combine_xyz.inputs[0].default_value = 1.4\n    combine_xyz.inputs[1].default_value = 1.3\n    colorramp_1.color_ramp.elements[0].position = 0.341\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.368\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mapping_2.inputs[2].default_value = [0.0, 1.57, 0.0]\n    combine_xyz_1.inputs[0].default_value = 0.34\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    less_than = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['SK_Leather']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    group_1 = nodes.new('ShaderNodeGroup')\n    group_1.node_tree = bpy.data.node_groups['SK_Leather']\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    group_2 = nodes.new('ShaderNodeGroup')\n    group_2.node_tree = bpy.data.node_groups['SK_Leather']\n    mapping_3 = nodes.new('ShaderNodeMapping')\n    mapping_4 = nodes.new('ShaderNodeMapping')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(less_than.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], less_than.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(group_2.outputs[0], mix_1.inputs[2])\n    links.new(group.outputs[0], mix_2.inputs[1])\n    links.new(group_1.outputs[0], mix_2.inputs[2])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[0], group.inputs[1])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], group_1.inputs[0])\n    links.new(mapping_2.outputs[0], group_1.inputs[1])\n    links.new(mapping_2.outputs[0], mapping_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_2.inputs[0])\n    links.new(mapping_3.outputs[0], group_2.inputs[0])\n    links.new(mapping_4.outputs[0], group_2.inputs[1])\n    links.new(mapping_4.outputs[0], mapping_3.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_4.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(mix_3.outputs[0], bump.inputs[2])\n    links.new(mix_4.outputs[0], mix_3.inputs[1])\n    links.new(group_2.outputs[1], mix_3.inputs[2])\n    links.new(group.outputs[1], mix_4.inputs[1])\n    links.new(group_1.outputs[1], mix_4.inputs[2])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.4\n    colorramp.color_ramp.elements[0].color = [0.181, 0.076, 0.042, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.119, 0.054, 0.033, 1.0]\n    colorramp.color_ramp.elements.new(0.805)\n    colorramp.color_ramp.elements[2].color = [0.087, 0.043, 0.029, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [0.056, 0.032, 0.025, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    less_than.inputs[1].default_value = 0.3\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    mix_1.inputs[0].default_value = 0.75\n    mix_2.inputs[0].default_value = 0.85\n    group.inputs[2].default_value = 9.0\n    group.inputs[3].default_value = 5.0\n    group.inputs[4].default_value = 14.0\n    mapping.inputs[2].default_value = [0.0, -0.0, 1.57]\n    group_1.inputs[2].default_value = 15.0\n    group_1.inputs[3].default_value = 5.0\n    group_1.inputs[4].default_value = 18.0\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 1.57]\n    mapping_2.inputs[2].default_value = [1.04, -0.147, 1.04]\n    group_2.inputs[2].default_value = 20.0\n    group_2.inputs[3].default_value = 5.0\n    group_2.inputs[4].default_value = 16.0\n    mapping_3.inputs[2].default_value = [0.0, -0.0, 1.57]\n    mapping_4.inputs[2].default_value = [0.695, -0.218, 1.11]\n    noise_texture.inputs[2].default_value = 7.5\n    noise_texture.inputs[3].default_value = 1.0\n    bump.inputs[0].default_value = 2.0\n    bump.inputs[1].default_value = 0.1\n    mix_3.inputs[0].default_value = 0.75\n    mix_4.inputs[0].default_value = 0.85\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(glossy_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(noise_texture_2.outputs[0], mix.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    glossy_bsdf.distribution = 'MULTI_GGX'\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].color = [0.095, 0.107, 0.905, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.068\n    colorramp.color_ramp.elements[1].color = [0.153, 0.876, 0.831, 1.0]\n    colorramp.color_ramp.elements.new(0.141)\n    colorramp.color_ramp.elements[2].color = [0.188, 0.132, 0.705, 1.0]\n    colorramp.color_ramp.elements.new(0.214)\n    colorramp.color_ramp.elements[3].color = [0.078, 0.091, 0.474, 1.0]\n    colorramp.color_ramp.elements.new(0.291)\n    colorramp.color_ramp.elements[4].color = [0.122, 0.352, 0.558, 1.0]\n    colorramp.color_ramp.elements.new(0.368)\n    colorramp.color_ramp.elements[5].color = [0.518, 0.34, 0.374, 1.0]\n    colorramp.color_ramp.elements.new(0.445)\n    colorramp.color_ramp.elements[6].color = [0.88, 0.584, 0.753, 1.0]\n    colorramp.color_ramp.elements.new(0.523)\n    colorramp.color_ramp.elements[7].color = [0.242, 0.578, 0.617, 1.0]\n    colorramp.color_ramp.elements.new(0.598)\n    colorramp.color_ramp.elements[8].color = [0.701, 0.105, 0.631, 1.0]\n    colorramp.color_ramp.elements.new(0.672)\n    colorramp.color_ramp.elements[9].color = [0.491, 0.61, 0.597, 1.0]\n    colorramp.color_ramp.elements.new(0.739)\n    colorramp.color_ramp.elements[10].color = [0.202, 0.847, 0.292, 1.0]\n    colorramp.color_ramp.elements.new(0.808)\n    colorramp.color_ramp.elements[11].color = [0.05, 0.956, 0.407, 1.0]\n    colorramp.color_ramp.elements.new(0.873)\n    colorramp.color_ramp.elements[12].color = [0.913, 0.815, 0.091, 1.0]\n    colorramp.color_ramp.elements.new(0.936)\n    colorramp.color_ramp.elements[13].color = [0.141, 0.098, 0.479, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[14].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 1.6\n    noise_texture.inputs[3].default_value = 3.6\n    noise_texture.inputs[4].default_value = 0.333\n    noise_texture.inputs[5].default_value = -0.6\n    noise_texture.noise_dimensions = '4D'\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.609\n    colorramp_1.color_ramp.elements[1].position = 0.991\n    mix.blend_type = 'OVERLAY'\n    colorramp_2.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_2.color_ramp.elements[0].position = 0.423\n    colorramp_2.color_ramp.elements[1].position = 0.65\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 3.6\n    noise_texture_1.inputs[4].default_value = 0.333\n    noise_texture_1.inputs[5].default_value = -0.6\n    noise_texture_1.noise_dimensions = '4D'\n    noise_texture_2.inputs[2].default_value = 2.0\n    noise_texture_2.inputs[3].default_value = 9.4\n    noise_texture_2.inputs[4].default_value = 1.0\n    noise_texture_2.inputs[5].default_value = 1.1\n    mapping_1.inputs[3].default_value = [1.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.03\n    bump.inputs[1].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(mix_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_2.outputs[0], mix_1.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.839, 0.44, 0.162, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.invert = True\n    mix.inputs[0].default_value = 0.017\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.509\n    noise_texture.inputs[2].default_value = 30.0\n    noise_texture.inputs[3].default_value = 16.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    mix_1.inputs[0].default_value = 0.808\n    mix_1.blend_type = 'MULTIPLY'\n    noise_texture_1.inputs[2].default_value = 100.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[2].default_value = 514.0\n    noise_texture_2.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[1], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.464\n    colorramp.color_ramp.elements[0].color = [0.283, 0.024, 0.017, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.493\n    colorramp.color_ramp.elements[1].color = [0.238, 0.098, 0.014, 1.0]\n    colorramp.color_ramp.elements.new(0.623)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.713, 0.685, 1.0]\n    noise_texture.inputs[2].default_value = 4.0\n    noise_texture.inputs[3].default_value = 9.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.322\n    colorramp_1.color_ramp.elements[1].position = 0.457\n    bump_1.inputs[0].default_value = 0.073\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    greater_than = nodes.new('ShaderNodeMath')\n    maximum = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(greater_than.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(maximum.outputs[0], greater_than.inputs[0])\n    links.new(wave_texture.outputs[0], maximum.inputs[0])\n    links.new(wave_texture_1.outputs[0], maximum.inputs[1])\n    links.new(scale.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(scale.outputs[0], wave_texture_1.inputs[0])\n    links.new(rgb_curves.outputs[0], bump.inputs[2])\n    links.new(maximum.outputs[0], rgb_curves.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[19].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[20].default_value = 0.0\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    greater_than.inputs[1].default_value = 0.51\n    greater_than.operation = 'GREATER_THAN'\n    maximum.operation = 'MAXIMUM'\n    wave_texture.inputs[1].default_value = 15.0\n    wave_texture.inputs[4].default_value = 2.0\n    scale.operation = 'SCALE'\n    wave_texture_1.inputs[1].default_value = 15.0\n    wave_texture_1.inputs[4].default_value = 2.0\n    wave_texture_1.bands_direction = 'Y'\n    wave_texture_1.rings_direction = 'Y'\n    bump.inputs[0].default_value = 0.2\n    rgb_curves.mapping.curves[3].points[1].location = [0.291, 0.65]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    add_1 = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    add_2 = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(add_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture_2.outputs[0], multiply.inputs[1])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], add.inputs[1])\n    links.new(add_1.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(noise_texture_1.outputs[0], add_1.inputs[0])\n    links.new(voronoi_texture_3.outputs[0], add_1.inputs[1])\n    links.new(invert.outputs[0], add_2.inputs[0])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(multiply_1.outputs[0], bump.inputs[2])\n    links.new(colorramp_2.outputs[0], multiply_1.inputs[0])\n    links.new(colorramp_3.outputs[0], multiply_1.inputs[1])\n    links.new(colorramp.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_4.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.05\n    principled_bsdf.inputs[2].default_value = [0.2, 0.2, 0.1]\n    principled_bsdf.inputs[14].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.275, 0.279, 0.254, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.009\n    colorramp.color_ramp.elements[1].color = [0.508, 0.454, 0.396, 1.0]\n    colorramp.color_ramp.elements.new(0.027)\n    colorramp.color_ramp.elements[2].color = [0.631, 0.638, 0.584, 1.0]\n    colorramp.color_ramp.elements.new(0.173)\n    colorramp.color_ramp.elements[3].color = [0.753, 0.761, 0.701, 1.0]\n    colorramp.color_ramp.elements.new(0.275)\n    colorramp.color_ramp.elements[4].color = [0.738, 0.745, 0.687, 1.0]\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 7.1\n    voronoi_texture.inputs[5].default_value = 0.0\n    noise_texture.inputs[1].default_value = -0.6\n    noise_texture.inputs[2].default_value = 1.3\n    noise_texture.inputs[3].default_value = 15.0\n    voronoi_texture_1.inputs[2].default_value = 0.5\n    voronoi_texture_1.feature = 'DISTANCE_TO_EDGE'\n    voronoi_texture_2.inputs[2].default_value = 6.9\n    voronoi_texture_2.inputs[5].default_value = 0.0\n    noise_texture_1.inputs[1].default_value = -0.6\n    noise_texture_1.inputs[2].default_value = 1.6\n    noise_texture_1.inputs[3].default_value = 15.0\n    voronoi_texture_3.inputs[2].default_value = 0.3\n    voronoi_texture_3.feature = 'DISTANCE_TO_EDGE'\n    add_2.inputs[1].default_value = 0.1\n    colorramp_1.color_ramp.elements[0].position = 0.15\n    colorramp_1.color_ramp.elements[1].position = 0.341\n    bump.inputs[0].default_value = 0.01\n    bump.inputs[1].default_value = 0.12\n    multiply_1.operation = 'MULTIPLY'\n    colorramp_2.color_ramp.elements[0].position = 0.25\n    colorramp_2.color_ramp.elements[1].position = 0.436\n    colorramp_3.color_ramp.interpolation = 'EASE'\n    colorramp_3.color_ramp.elements[1].position = 0.036\n    voronoi_texture_4.inputs[2].default_value = 26.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    invert = nodes.new('ShaderNodeInvert')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[0], mix_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], brick_texture.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_3.inputs[0])\n    links.new(colorramp_4.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_2.outputs[0], colorramp_4.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_2.inputs[0])\n    links.new(invert.outputs[0], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], invert.inputs[1])\n    links.new(invert.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'LIGHTEN'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.333\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.667)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.distance = 'MANHATTAN'\n    brick_texture.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[4].default_value = 1.0\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[8].default_value = 0.4\n    brick_texture.inputs[9].default_value = 0.1\n    brick_texture.offset = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.168\n    colorramp_1.color_ramp.elements[0].color = [0.226, 1.0, 0.103, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.355\n    colorramp_1.color_ramp.elements[1].color = [0.01, 0.01, 0.01, 1.0]\n    colorramp_1.color_ramp.elements.new(0.555)\n    colorramp_1.color_ramp.elements[2].color = [0.965, 0.759, 0.658, 1.0]\n    colorramp_1.color_ramp.elements.new(0.691)\n    colorramp_1.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 40.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.65\n    colorramp_2.color_ramp.elements[0].position = 0.291\n    colorramp_2.color_ramp.elements[0].color = [0.003, 0.263, 0.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.55\n    colorramp_2.color_ramp.elements[1].color = [0.05, 0.133, 0.044, 1.0]\n    colorramp_2.color_ramp.elements.new(0.691)\n    colorramp_2.color_ramp.elements[2].color = [0.171, 0.041, 0.007, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[3].color = [0.075, 0.263, 0.073, 1.0]\n    noise_texture_1.inputs[2].default_value = 40.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.65\n    colorramp_3.color_ramp.elements[0].color = [0.073, 0.073, 0.073, 1.0]\n    colorramp_4.color_ramp.elements[0].position = 0.141\n    colorramp_4.color_ramp.elements[1].color = [0.02, 0.02, 0.02, 1.0]\n    noise_texture_2.inputs[2].default_value = 20.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    noise_texture_2.inputs[4].default_value = 0.62\n    displacement.inputs[2].default_value = 0.015\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.559, 0.559, 0.559, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n    bump.inputs[0].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    color = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    divide = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(color.outputs[0], mix.inputs[1])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(divide.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[1], multiply.inputs[1])\n    links.new(multiply_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[1])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.16\n    mix_shader_1.inputs[0].default_value = 0.0\n    mix.inputs[2].default_value = [0.85, 0.85, 0.85, 1.0]\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 0.0\n    color.outputs[0].default_value = [0.855, 0.875, 0.9, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    divide.inputs[0].default_value = -16.0\n    divide.inputs[1].default_value = 20.0\n    divide.inputs[2].default_value = 0.0\n    divide.operation = 'DIVIDE'\n    colorramp.color_ramp.elements[0].position = 0.009\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.245\n    colorramp.color_ramp.elements[1].color = [1.0, 1.0, 1.0, 0.6]\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 20.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader.inputs[2])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [0.031, 0.031, 0.031, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.447\n    glossy_bsdf_1.inputs[1].default_value = 0.224\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix = nodes.new('ShaderNodeMixRGB')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[21])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], layer_weight.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix.inputs[1])\n    links.new(noise_texture.outputs[1], mix.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.2\n    principled_bsdf.inputs[19].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[20].default_value = 4.0\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.395\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    layer_weight.inputs[0].default_value = 0.72\n    mix.inputs[0].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mesh_grid_holes_car_paint_surface = nodes.new('ShaderNodeGroup')\n    mesh_grid_holes_car_paint_surface.node_tree = bpy.data.node_groups['Mesh_Grid_Holes_Car_Paint_Surface']\n\n    # Create links to connect nodes\n    links.new(mesh_grid_holes_car_paint_surface.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    mix = nodes.new('ShaderNodeMixRGB')\n    hue_saturation_value_1 = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_4.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], hue_saturation_value.inputs[0])\n    links.new(mix.outputs[0], hue_saturation_value.inputs[4])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(hue_saturation_value_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_3.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], hue_saturation_value_1.inputs[0])\n    links.new(colorramp_2.outputs[0], hue_saturation_value_1.inputs[4])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[1])\n    links.new(voronoi_texture_1.outputs[1], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_2.outputs[0], noise_texture.inputs[0])\n    links.new(scale.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(scale.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix_2.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mix_3.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_3.inputs[0])\n    links.new(voronoi_texture_2.outputs[0], mix_3.inputs[1])\n    links.new(voronoi_texture_3.outputs[0], mix_3.inputs[2])\n    links.new(mix_2.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(mix_2.outputs[0], voronoi_texture_3.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_3.inputs[0])\n    links.new(mix_1.outputs[0], colorramp_4.inputs[0])\n    links.new(mix_3.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.3\n    invert.inputs[0].default_value = 0.0\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.elements[0].color = [0.48, 0.48, 0.48, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.52, 0.52, 0.52, 1.0]\n    colorramp_1.color_ramp.interpolation = 'EASE'\n    colorramp_1.color_ramp.elements[0].position = 0.414\n    colorramp_1.color_ramp.elements[1].position = 0.627\n    mix_2.inputs[0].default_value = 0.041\n    scale.inputs[3].default_value = 0.5\n    scale.operation = 'SCALE'\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.575\n    voronoi_texture.inputs[2].default_value = 40.0\n    voronoi_texture_1.inputs[2].default_value = 80.0\n    colorramp_2.color_ramp.elements[0].color = [0.022, 0.084, 0.009, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.068\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2.color_ramp.elements.new(0.841)\n    colorramp_2.color_ramp.elements[2].color = [0.211, 1.0, 0.071, 1.0]\n    voronoi_texture_2.inputs[2].default_value = 40.0\n    voronoi_texture_2.feature = 'DISTANCE_TO_EDGE'\n    voronoi_texture_3.inputs[2].default_value = 80.0\n    voronoi_texture_3.feature = 'DISTANCE_TO_EDGE'\n    colorramp_4.color_ramp.interpolation = 'EASE'\n    colorramp_4.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.703\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.01, 0.01, 0.01, 1.0]\n    principled_bsdf.inputs[7].default_value = 0.15\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[1].default_value = 0.002\n    bump.invert = True\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].position = 0.514\n    noise_texture.inputs[2].default_value = 140.0\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.533\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    felt_textile = nodes.new('ShaderNodeGroup')\n    felt_textile.node_tree = bpy.data.node_groups['Felt_Textile']\n\n    # Create links to connect nodes\n    links.new(felt_textile.outputs[0], material_output.inputs[0])\n    links.new(felt_textile.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    felt_textile.inputs[3].default_value = 1.0\n    felt_textile.inputs[7].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(mix_2.outputs[0], displacement.inputs[2])\n    links.new(brick_texture.outputs[0], mix_2.inputs[1])\n    links.new(invert.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], brick_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(mix_3.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], mix_3.inputs[1])\n    links.new(mix_1.outputs[0], mix_3.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 1.0\n    mix.inputs[0].default_value = 1.0\n    colorramp.color_ramp.elements[0].position = 0.386\n    colorramp.color_ramp.elements[0].color = [0.374, 0.334, 0.301, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.432\n    colorramp.color_ramp.elements[1].color = [0.15, 0.143, 0.153, 1.0]\n    colorramp.color_ramp.elements.new(0.5)\n    colorramp.color_ramp.elements[2].color = [0.347, 0.315, 0.326, 1.0]\n    colorramp.color_ramp.elements.new(0.573)\n    colorramp.color_ramp.elements[3].color = [0.272, 0.241, 0.241, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    voronoi_texture.voronoi_dimensions = '4D'\n    add.inputs[0].default_value = 3.4\n    add.inputs[1].default_value = 0.2\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.55\n    noise_texture_1.inputs[2].default_value = 93.3\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.558\n    displacement.inputs[0].default_value = 1.2\n    mix_2.inputs[0].default_value = 1.0\n    brick_texture.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[4].default_value = 0.6\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    invert.inputs[0].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.155\n    colorramp_1.color_ramp.elements[1].position = 0.205\n    colorramp_1.color_ramp.elements[1].color = [0.562, 0.454, 0.368, 1.0]\n    colorramp_1.color_ramp.elements.new(0.405)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 0.243, 0.006, 1.0]\n    colorramp_1.color_ramp.elements.new(0.5)\n    colorramp_1.color_ramp.elements[3].color = [0.347, 0.156, 0.075, 1.0]\n    colorramp_1.color_ramp.elements.new(0.609)\n    colorramp_1.color_ramp.elements[4].color = [0.344, 0.292, 0.251, 1.0]\n    mix_3.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[1])\n    links.new(texture_coordinate.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    noise_texture.inputs[3].default_value = 5.4\n    noise_texture.inputs[4].default_value = 0.808\n    bump.inputs[0].default_value = 0.417\n    colorramp.color_ramp.elements[1].position = 0.486\n    bump_1.inputs[0].default_value = 0.592\n    colorramp_1.color_ramp.elements[1].position = 0.586\n    mix_1.inputs[0].default_value = 0.783\n    noise_texture_1.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 0.523, 0.722, 1.0]\n    principled_bsdf.inputs[17].default_value = 0.945\n    principled_bsdf.inputs[20].default_value = 4.4\n    colorramp.color_ramp.elements[0].position = 0.3\n    colorramp.color_ramp.elements[1].color = [0.413, 0.413, 0.413, 1.0]\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.1\n    bump.inputs[0].default_value = 0.06\n    colorramp_1.color_ramp.elements[0].position = 0.309\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    bump_1.inputs[0].default_value = 0.1\n    noise_texture_1.inputs[2].default_value = 1.7\n    noise_texture_1.inputs[3].default_value = 15.0\n    displacement.inputs[2].default_value = 0.1\n    voronoi_texture.inputs[2].default_value = 3.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(scale.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[1], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[4].default_value = 1.01\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.055\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[19].default_value = [0.323, 0.789, 1.0, 1.0]\n    principled_bsdf.inputs[20].default_value = 0.0\n    principled_bsdf.subsurface_method = 'RANDOM_WALK_FIXED_RADIUS'\n    mix.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[1].position = 0.586\n    colorramp.color_ramp.elements[1].color = [0.12, 0.12, 0.12, 1.0]\n    colorramp.color_ramp.elements.new(0.805)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    voronoi_texture.inputs[4].default_value = 0.35\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix_1.inputs[0].default_value = 1.0\n    scale.operation = 'SCALE'\n    noise_texture.inputs[3].default_value = 5.0\n    noise_texture.inputs[4].default_value = 0.275\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    principled_volume = nodes.new('ShaderNodeVolumePrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(principled_volume.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_volume.inputs[7])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mix.outputs[0], musgrave_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[17].default_value = 1.0\n    principled_volume.inputs[2].default_value = 0.0\n    principled_volume.inputs[6].default_value = 40.0\n    colorramp.color_ramp.elements[0].position = 0.623\n    colorramp.color_ramp.elements[1].position = 0.691\n    colorramp.color_ramp.elements[1].color = [0.118, 1.0, 0.907, 1.0]\n    musgrave_texture.inputs[2].default_value = 3.5\n    mix.inputs[0].default_value = 0.75\n    noise_texture_1.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    multiply_2 = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    multiply_3 = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    multiply_4 = nodes.new('ShaderNodeMath')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    add_1 = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply_5 = nodes.new('ShaderNodeMath')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    bump = nodes.new('ShaderNodeBump')\n    add_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(multiply_2.outputs[0], multiply_1.inputs[0])\n    links.new(multiply_4.outputs[0], multiply_1.inputs[1])\n    links.new(noise_texture.outputs[0], multiply_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_3.outputs[0], add.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_3.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(bright_contrast.outputs[0], multiply_4.inputs[0])\n    links.new(noise_texture_2.outputs[0], bright_contrast.inputs[0])\n    links.new(add_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(subtract.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(multiply_1.outputs[0], add_1.inputs[0])\n    links.new(multiply_5.outputs[0], subtract.inputs[1])\n    links.new(rgb_curves.outputs[0], multiply_5.inputs[0])\n    links.new(multiply_1.outputs[0], rgb_curves.inputs[1])\n    links.new(add_2.outputs[0], bump.inputs[2])\n    links.new(rgb_curves.outputs[0], add_2.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 1.5\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    multiply_2.operation = 'MULTIPLY'\n    noise_texture.inputs[3].default_value = 7.0\n    noise_texture.inputs[5].default_value = 0.5\n    add.inputs[1].default_value = 120.0\n    multiply_3.inputs[1].default_value = 2.0\n    multiply_3.operation = 'MULTIPLY'\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 1.0\n    multiply_4.inputs[1].default_value = 1.0\n    multiply_4.operation = 'MULTIPLY'\n    bright_contrast.inputs[2].default_value = 0.5\n    noise_texture_2.inputs[2].default_value = 20.0\n    noise_texture_2.inputs[3].default_value = 7.0\n    glass_bsdf.inputs[1].default_value = 0.001\n    glass_bsdf.inputs[2].default_value = 1.5\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.7, 0.1, 0.1, 1.0]\n    principled_bsdf.inputs[16].default_value = 1.5\n    principled_bsdf.distribution = 'MULTI_GGX'\n    principled_bsdf.subsurface_method = 'BURLEY'\n    add_1.inputs[1].default_value = 0.65\n    add_1.use_clamp = True\n    subtract.inputs[0].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    subtract.use_clamp = True\n    multiply_5.inputs[1].default_value = 2.0\n    multiply_5.operation = 'MULTIPLY'\n    multiply_5.use_clamp = True\n    rgb_curves.mapping.curves[3].points[1].location = [0.014, 0.0]\n    rgb_curves.mapping.curves[3].points.new(0.445, 0.55)\n    rgb_curves.mapping.curves[3].points.new(1.0, 0.85)\n    bump.inputs[0].default_value = 0.05\n    add_2.inputs[1].default_value = 0.0\n    add_2.use_clamp = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    normal = nodes.new('ShaderNodeNormal')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(colorramp.outputs[0], brick_texture.inputs[1])\n    links.new(colorramp.outputs[0], brick_texture.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mix.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(brick_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n    links.new(brick_texture.outputs[1], displacement.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[3])\n    links.new(normal.outputs[0], invert.inputs[1])\n    links.new(brick_texture.outputs[1], normal.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[3].default_value = [0.193, 0.193, 0.193, 1.0]\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 0.0\n    brick_texture.inputs[8].default_value = 3.5\n    brick_texture.inputs[9].default_value = 2.0\n    brick_texture.offset = 0.0\n    colorramp.color_ramp.elements[0].position = 0.545\n    colorramp.color_ramp.elements[0].color = [0.028, 0.828, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.605\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[2].default_value = 89.3\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.583\n    wave_texture.inputs[1].default_value = 30.9\n    wave_texture.inputs[2].default_value = 16.4\n    wave_texture.inputs[3].default_value = 12.9\n    wave_texture.inputs[4].default_value = 0.6\n    wave_texture.inputs[5].default_value = 0.423\n    wave_texture.inputs[6].default_value = -20.5\n    mapping_1.inputs[2].default_value = [1.57, 1.57, 0.0]\n    colorramp_1.color_ramp.elements[0].position = 0.123\n    colorramp_1.color_ramp.elements[1].position = 0.682\n    bump.inputs[1].default_value = 0.1\n    bump.invert = True\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.29\n    invert.inputs[0].default_value = 0.758\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(colorramp_3.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.177\n    colorramp.color_ramp.elements[0].color = [0.033, 0.02, 0.011, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.523\n    colorramp.color_ramp.elements[1].color = [0.325, 0.183, 0.109, 1.0]\n    colorramp.color_ramp.elements.new(0.918)\n    colorramp.color_ramp.elements[2].color = [0.74, 0.477, 0.245, 1.0]\n    noise_texture.inputs[2].default_value = 8.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.019, 0.019, 0.019, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    bump.inputs[0].default_value = 0.3\n    bump_1.inputs[0].default_value = 0.4\n    colorramp_2.color_ramp.elements[0].color = [0.033, 0.033, 0.033, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.518\n    voronoi_texture.inputs[2].default_value = 14.0\n    voronoi_texture.inputs[3].default_value = 0.2\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.01\n    displacement.inputs[2].default_value = 0.15\n    mix_1.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp_3.color_ramp.elements[0].position = 0.359\n    colorramp_3.color_ramp.elements[1].position = 0.564\n    noise_texture_2.inputs[2].default_value = 2.0\n    noise_texture_2.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_volume = nodes.new('ShaderNodeVolumePrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n\n    # Create links to connect nodes\n    links.new(principled_volume.outputs[0], material_output.inputs[1])\n    links.new(colorramp.outputs[0], principled_volume.inputs[6])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(gradient_texture.outputs[1], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_volume.inputs[2].default_value = 0.0\n    principled_volume.inputs[7].default_value = [1.0, 0.944, 0.986, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.171\n    colorramp.color_ramp.elements[1].position = 0.545\n    mix.inputs[0].default_value = 0.72\n    noise_texture.inputs[2].default_value = 3.7\n    noise_texture.inputs[3].default_value = 15.0\n    mapping.inputs[2].default_value = [0.0, -1.57, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    frozen_water_snow = nodes.new('ShaderNodeGroup')\n    frozen_water_snow.node_tree = bpy.data.node_groups['Frozen_Water_Snow']\n\n    # Create links to connect nodes\n    links.new(frozen_water_snow.outputs[0], material_output.inputs[0])\n    links.new(frozen_water_snow.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    layer_weight_1 = nodes.new('ShaderNodeLayerWeight')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight_1.outputs[1], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(rgb_curves.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(wave_texture.outputs[1], rgb_curves.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.3\n    diffuse_bsdf.inputs[0].default_value = [0.472, 0.214, 0.065, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    mix.inputs[0].default_value = 1.0\n    rgb_curves.mapping.curves[3].points[1].location = [0.044, 0.817]\n    rgb_curves.mapping.curves[3].points.new(0.083, 0.883)\n    rgb_curves.mapping.curves[3].points.new(0.15, 0.933)\n    rgb_curves.mapping.curves[3].points.new(0.278, 0.972)\n    rgb_curves.mapping.curves[3].points.new(0.606, 1.0)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    wave_texture.inputs[1].default_value = 20.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping.inputs[2].default_value = [0.0, 0.0, 0.785]\n    mapping.inputs[3].default_value = [2.5, 1.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 60.0\n    wave_texture_1.inputs[2].default_value = 4.0\n    wave_texture_1.inputs[4].default_value = 6.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, 0.0, 2.36]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    musgrave_texture_2 = nodes.new('ShaderNodeTexMusgrave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[7])\n    links.new(bright_contrast.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(gamma.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(musgrave_texture_2.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(mapping_1.outputs[0], musgrave_texture_2.inputs[0])\n    links.new(texture_coordinate_1.outputs[2], mapping_1.inputs[0])\n    links.new(colorramp_1.outputs[0], invert.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[2].default_value = [0.195, 0.172, 0.202, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[1].default_value = 90.0\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[2].default_value = 9.3\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n    mapping.inputs[3].default_value = [0.5, 0.03, 0.0]\n    gamma.inputs[1].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [0.242, 0.109, 0.038, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.273\n    colorramp.color_ramp.elements[1].color = [0.503, 0.258, 0.082, 1.0]\n    colorramp.color_ramp.elements.new(0.605)\n    colorramp.color_ramp.elements[2].color = [0.381, 0.168, 0.058, 1.0]\n    colorramp.color_ramp.elements.new(0.805)\n    colorramp.color_ramp.elements[3].color = [0.262, 0.1, 0.044, 1.0]\n    colorramp.color_ramp.elements.new(0.966)\n    colorramp.color_ramp.elements[4].color = [0.138, 0.058, 0.023, 1.0]\n    musgrave_texture_1.inputs[2].default_value = 21.0\n    musgrave_texture_1.inputs[3].default_value = 20.0\n    musgrave_texture_1.inputs[4].default_value = 0.06\n    musgrave_texture_2.inputs[2].default_value = 0.45\n    musgrave_texture_2.inputs[3].default_value = 0.15\n    musgrave_texture_2.inputs[4].default_value = 0.0\n    musgrave_texture_2.inputs[5].default_value = 0.0\n    musgrave_texture_2.musgrave_type = 'MULTIFRACTAL'\n    mapping_1.inputs[3].default_value = [120.0, 1.6, 0.0]\n    invert.inputs[1].default_value = [0.081, 0.081, 0.081, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.527\n    colorramp_1.color_ramp.elements[1].color = [0.566, 0.566, 0.566, 1.0]\n    colorramp_1.color_ramp.elements.new(0.914)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    bright_contrast.inputs[1].default_value = 0.1\n    bright_contrast.inputs[2].default_value = -0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    cosine = nodes.new('ShaderNodeMath')\n    snap = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    wrap_1 = nodes.new('ShaderNodeMath')\n    divide = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    wrap_2 = nodes.new('ShaderNodeMath')\n    musgrave_texture_2 = nodes.new('ShaderNodeTexMusgrave')\n    fract = nodes.new('ShaderNodeMath')\n    musgrave_texture_3 = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(cosine.outputs[0], colorramp.inputs[0])\n    links.new(snap.outputs[0], cosine.inputs[0])\n    links.new(snap.outputs[0], cosine.inputs[1])\n    links.new(wrap.outputs[0], snap.inputs[0])\n    links.new(wrap_1.outputs[0], wrap.inputs[0])\n    links.new(wrap_2.outputs[0], wrap.inputs[1])\n    links.new(divide.outputs[0], wrap_1.inputs[0])\n    links.new(add.outputs[0], wrap_1.inputs[1])\n    links.new(add.outputs[0], divide.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], divide.inputs[1])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(musgrave_texture_2.outputs[0], wrap_2.inputs[1])\n    links.new(fract.outputs[0], wrap_2.inputs[2])\n    links.new(mapping.outputs[0], musgrave_texture_2.inputs[0])\n    links.new(musgrave_texture_3.outputs[0], fract.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_3.inputs[0])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(cosine.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.682\n    principled_bsdf.inputs[14].default_value = 0.082\n    principled_bsdf.inputs[15].default_value = 0.198\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[0].color = [0.069, 0.003, 0.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.207\n    colorramp.color_ramp.elements[1].color = [0.027, 0.007, 0.003, 1.0]\n    colorramp.color_ramp.elements.new(0.836)\n    colorramp.color_ramp.elements[2].color = [0.015, 0.001, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.991)\n    colorramp.color_ramp.elements[3].color = [0.003, 0.002, 0.001, 1.0]\n    cosine.inputs[2].default_value = 1.0\n    cosine.operation = 'COSINE'\n    snap.inputs[1].default_value = -6.1\n    snap.inputs[2].default_value = 0.64\n    snap.operation = 'SNAP'\n    wrap.inputs[2].default_value = 121.0\n    wrap.operation = 'WRAP'\n    wrap_1.inputs[2].default_value = -61.6\n    wrap_1.operation = 'WRAP'\n    divide.inputs[2].default_value = 0.0\n    divide.operation = 'DIVIDE'\n    add.inputs[1].default_value = 63.2\n    add.inputs[2].default_value = 0.0\n    musgrave_texture.inputs[2].default_value = 1000.0\n    musgrave_texture.inputs[5].default_value = 0.2\n    mapping.inputs[3].default_value = [-8.1, 0.8, 1.7]\n    musgrave_texture_1.inputs[2].default_value = 7.9\n    musgrave_texture_1.inputs[4].default_value = 13.1\n    wrap_2.operation = 'WRAP'\n    musgrave_texture_2.inputs[2].default_value = 60.0\n    musgrave_texture_2.inputs[3].default_value = 1.14\n    musgrave_texture_2.inputs[5].default_value = 0.03\n    fract.inputs[1].default_value = 63.9\n    fract.inputs[2].default_value = 0.0\n    fract.operation = 'FRACT'\n    musgrave_texture_3.inputs[2].default_value = 50.0\n    bump.inputs[0].default_value = 0.75\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Sizzlin_Brick']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    simple_car_paint = nodes.new('ShaderNodeGroup')\n    simple_car_paint.node_tree = bpy.data.node_groups['Simple_Car_Paint']\n\n    # Create links to connect nodes\n    links.new(simple_car_paint.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    simple_car_paint.inputs[7].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    multiply_add = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(multiply_add.outputs[0], mix.inputs[1])\n    links.new(add.outputs[0], multiply_add.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_add.inputs[1])\n    links.new(multiply.outputs[0], multiply_add.inputs[2])\n    links.new(colorramp_1.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], multiply.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply.inputs[1])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(multiply_add.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.17, 0.059, 0.021, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.282\n    colorramp.color_ramp.elements[1].color = [0.234, 0.213, 0.205, 1.0]\n    mix.inputs[2].default_value = [0.025, 0.025, 0.025, 1.0]\n    mix.blend_type = 'MULTIPLY'\n    multiply_add.operation = 'MULTIPLY_ADD'\n    multiply_add.use_clamp = True\n    add.inputs[2].default_value = 0.0\n    add.use_clamp = True\n    colorramp_1.color_ramp.elements[0].position = 0.305\n    colorramp_1.color_ramp.elements[0].color = [0.125, 0.125, 0.125, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[2].default_value = 100.0\n    voronoi_texture.inputs[2].default_value = 24.0\n    voronoi_texture.distance = 'MANHATTAN'\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    noise_texture_1.inputs[2].default_value = 50.0\n    colorramp_2.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_2.color_ramp.elements[0].color = [0.18, 0.18, 0.18, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.37\n    colorramp_2.color_ramp.elements[1].color = [0.25, 0.25, 0.25, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[2].color = [0.109, 0.109, 0.109, 1.0]\n    bump.inputs[0].default_value = 0.021\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_4.outputs[0], principled_bsdf.inputs[1])\n    links.new(mix_4.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[2])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_2.outputs[0], mapping.inputs[1])\n    links.new(mix_3.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix_2.inputs[2])\n    links.new(noise_texture.outputs[1], mix_3.inputs[1])\n    links.new(wave_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[1], wave_texture_1.inputs[1])\n    links.new(texture_coordinate_1.outputs[2], mapping_1.inputs[0])\n    links.new(rgb_curves.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], rgb_curves.inputs[1])\n    links.new(mapping_2.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate_2.outputs[2], mapping_2.inputs[0])\n    links.new(mix_1.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_2.outputs[0], mix_4.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[1])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[2].default_value = [0.2, 0.2, 0.1]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.552, 0.142, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.019, 0.013, 0.007, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.177\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    wave_texture.inputs[1].default_value = 0.2\n    wave_texture.inputs[6].default_value = -4.37\n    wave_texture.bands_direction = 'Y'\n    wave_texture.wave_profile = 'SAW'\n    mix_2.inputs[0].default_value = 0.01\n    mix_3.inputs[0].default_value = 0.975\n    noise_texture.inputs[2].default_value = 120.0\n    noise_texture_1.inputs[2].default_value = 5000.0\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.795\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    wave_texture_1.inputs[6].default_value = 8.97\n    wave_texture_1.bands_direction = 'Y'\n    wave_texture_1.wave_profile = 'SAW'\n    mapping_1.inputs[3].default_value = [0.3, 0.3, 1.0]\n    noise_texture_2.inputs[2].default_value = 10.1\n    noise_texture_2.inputs[3].default_value = 7.3\n    colorramp_2.color_ramp.elements[0].position = 0.045\n    colorramp_2.color_ramp.elements[0].color = [0.203, 0.111, 0.023, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.386\n    colorramp_2.color_ramp.elements[1].color = [0.504, 0.303, 0.078, 1.0]\n    rgb_curves.mapping.curves[3].points[1].location = [0.741, 0.194]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    voronoi_texture.inputs[2].default_value = 600.0\n    mix_4.inputs[0].default_value = 0.842\n    mix_4.blend_type = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[6])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(voronoi_texture.outputs[0], color_ramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], add.inputs[0])\n    links.new(mix.outputs[0], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 1.0\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[17].default_value = 0.2\n    color_ramp.color_ramp.color_mode = 'HSL'\n    color_ramp.color_ramp.hue_interpolation = 'FAR'\n    color_ramp.color_ramp.elements[0].color = [1.0, 0.0, 0.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.4\n    color_ramp.color_ramp.elements[1].color = [1.0, 0.0, 0.006, 1.0]\n    voronoi_texture.feature = 'DISTANCE_TO_EDGE'\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[4].default_value = 0.5\n    musgrave_texture.inputs[5].default_value = 0.1\n    mapping_1.inputs[3].default_value = [6.0, 6.0, 6.0]\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.1\n"
]