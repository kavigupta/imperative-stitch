[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(map_range_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], map_range_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(map_range_2.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], map_range_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.9\n    mix.inputs[1].default_value = [0.025, 0.011, 0.008, 1.0]\n    mix.inputs[2].default_value = [0.047, 0.076, 0.235, 1.0]\n    map_range.inputs[1].default_value = -1.0\n    map_range.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    map_range_1.inputs[1].default_value = -1.0\n    map_range_1.inputs[2].default_value = 2.0\n    map_range_1.inputs[3].default_value = 0.4\n    map_range_1.inputs[4].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    map_range_2.inputs[1].default_value = 0.45\n    map_range_2.inputs[2].default_value = 0.55\n    noise_texture_2.inputs[2].default_value = 250.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.85\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    subtract = nodes.new('ShaderNodeMath')\n    snap = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    compare = nodes.new('ShaderNodeMath')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(invert.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(subtract.outputs[0], colorramp.inputs[0])\n    links.new(snap.outputs[0], subtract.inputs[0])\n    links.new(voronoi_texture_3.outputs[0], subtract.inputs[1])\n    links.new(subtract_1.outputs[0], snap.inputs[0])\n    links.new(voronoi_texture.outputs[0], subtract_1.inputs[0])\n    links.new(compare.outputs[0], subtract_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], musgrave_texture.inputs[4])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], compare.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], compare.inputs[2])\n    links.new(voronoi_texture_2.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_3.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(subtract.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_4.outputs[1], colorramp_2.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_4.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.305\n    colorramp.color_ramp.elements[0].color = [0.421, 0.421, 0.421, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.323\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    snap.inputs[1].default_value = -0.68\n    snap.inputs[2].default_value = 0.0\n    snap.operation = 'SNAP'\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    voronoi_texture.inputs[5].default_value = 0.0\n    mapping.inputs[3].default_value = [20.8, 20.8, 20.8]\n    musgrave_texture.inputs[2].default_value = 17.7\n    musgrave_texture.inputs[3].default_value = 10.2\n    compare.operation = 'COMPARE'\n    musgrave_texture_1.inputs[2].default_value = 98.9\n    musgrave_texture_1.inputs[3].default_value = 10.2\n    voronoi_texture_2.inputs[2].default_value = 0.0\n    voronoi_texture_3.inputs[2].default_value = -4.8\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.423\n    colorramp_2.color_ramp.elements[0].position = 0.586\n    colorramp_2.color_ramp.elements[1].position = 0.682\n    voronoi_texture_4.inputs[2].default_value = 61.4\n    voronoi_texture_4.inputs[3].default_value = 0.9\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    mapping_1.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.258\n    colorramp_3.color_ramp.elements[0].position = 0.032\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.384\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    tablecloth_red = nodes.new('ShaderNodeGroup')\n    tablecloth_red.node_tree = bpy.data.node_groups['Tablecloth_red']\n\n    # Create links to connect nodes\n    links.new(tablecloth_red.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    tablecloth_red.inputs[3].default_value = 3.42\n    tablecloth_red.inputs[4].default_value = 0.333\n    tablecloth_red.inputs[7].default_value = 0.3\n    tablecloth_red.inputs[10].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    scale = nodes.new('ShaderNodeVectorMath')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    compare = nodes.new('ShaderNodeMath')\n    absolute = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(colorramp_1.outputs[0], multiply.inputs[1])\n    links.new(invert.outputs[0], colorramp.inputs[0])\n    links.new(layer_weight.outputs[1], invert.inputs[1])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_5.outputs[0], mix.inputs[2])\n    links.new(fraction.outputs[0], colorramp_2.inputs[0])\n    links.new(combine_xyz.outputs[0], fraction.inputs[0])\n    links.new(multiply_1.outputs[0], combine_xyz.inputs[0])\n    links.new(colorramp_3.outputs[0], multiply_1.inputs[0])\n    links.new(mix_1.outputs[0], multiply_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(separate_xyz.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(scale.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(invert_1.outputs[0], colorramp_5.inputs[0])\n    links.new(compare.outputs[0], invert_1.inputs[1])\n    links.new(absolute.outputs[0], compare.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], absolute.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    colorramp.color_ramp.elements[1].position = 0.881\n    layer_weight.inputs[0].default_value = 0.72\n    colorramp_1.color_ramp.elements[0].position = 0.108\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    mix.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[1].color = [0.426, 0.497, 1.0, 1.0]\n    fraction.inputs[3].default_value = 3.0\n    fraction.operation = 'FRACTION'\n    multiply_1.inputs[2].default_value = 0.002\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    colorramp_3.color_ramp.elements[0].position = 0.508\n    voronoi_texture.inputs[2].default_value = 98.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    mapping.inputs[1].default_value = [0.0, 1.0, 0.0]\n    add.inputs[0].default_value = 1.0\n    add.inputs[1].default_value = 1.0\n    add.inputs[2].default_value = 0.0\n    mix_1.inputs[0].default_value = 1.0\n    scale.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    colorramp_4.color_ramp.elements[0].position = 0.384\n    noise_texture.inputs[2].default_value = -2.2\n    noise_texture.inputs[3].default_value = 10.5\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_5.color_ramp.elements[1].color = [1.0, 0.014, 0.363, 1.0]\n    compare.inputs[1].default_value = 1.2\n    compare.inputs[2].default_value = 0.734\n    compare.operation = 'COMPARE'\n    compare.use_clamp = True\n    absolute.inputs[2].default_value = 0.0\n    absolute.operation = 'ABSOLUTE'\n    absolute.use_clamp = True\n    voronoi_texture_1.inputs[1].default_value = 1.0\n    voronoi_texture_1.inputs[2].default_value = 16.5\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    mapping_1.inputs[3].default_value = [0.5, -1.13, 1.0]\n    emission.inputs[1].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    fresnel.inputs[0].default_value = 1.0\n    glass_bsdf.inputs[0].default_value = [1.0, 0.587, 0.034, 1.0]\n    glass_bsdf.inputs[2].default_value = 1.0\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 0.3\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    comic_half_tone = nodes.new('ShaderNodeGroup')\n    comic_half_tone.node_tree = bpy.data.node_groups['Comic_Half_Tone']\n\n    # Create links to connect nodes\n    links.new(comic_half_tone.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    comic_half_tone.inputs[1].default_value = [0.829, 0.839, 0.671, 1.0]\n    comic_half_tone.inputs[6].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[1], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.15\n    colorramp.color_ramp.elements[1].color = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.inputs[3].default_value = 0.35\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.563, 0.563, 0.563, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n    displacement.inputs[2].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_3 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_shader_2.inputs[0])\n    links.new(principled_bsdf_2.outputs[0], mix_shader_2.inputs[1])\n    links.new(principled_bsdf_3.outputs[0], mix_shader_2.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_2.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_2.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate_2.outputs[3], voronoi_texture_2.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_2.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_2.inputs[22])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    rgb.outputs[0].default_value = [0.179, 0.179, 0.179, 1.0]\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.459\n    colorramp.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 1.47\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    voronoi_texture.inputs[4].default_value = 2.14\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.96\n    noise_texture.inputs[2].default_value = 31.6\n    noise_texture.inputs[3].default_value = 3.7\n    noise_texture.inputs[4].default_value = 0.625\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.65\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.668\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 2.6\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    mix_1.inputs[0].default_value = 0.125\n    voronoi_texture_2.distance = 'MINKOWSKI'\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.583\n    bump_1.invert = True\n    principled_bsdf_3.inputs[6].default_value = 1.0\n    principled_bsdf_3.inputs[9].default_value = 0.009\n    principled_bsdf_3.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    rgb = nodes.new('ShaderNodeRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(less_than.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], less_than.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(rgb.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    less_than.inputs[1].default_value = 0.25\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    voronoi_texture.inputs[2].default_value = 10000.0\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.9\n    rgb.outputs[0].default_value = [0.953, 0.382, 0.173, 1.0]\n    bright_contrast.inputs[1].default_value = -0.9\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    gradient_particles = nodes.new('ShaderNodeGroup')\n    gradient_particles.node_tree = bpy.data.node_groups['Gradient_Particles']\n\n    # Create links to connect nodes\n    links.new(gradient_particles.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    gradient_particles.inputs[2].default_value = 1.0\n    gradient_particles.inputs[3].default_value = 0.6\n    gradient_particles.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_2 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], bump_2.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[1].position = 0.509\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.9\n    colorramp_1.color_ramp.elements[0].position = 0.168\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.035, 0.013, 0.006, 1.0]\n    colorramp_1.color_ramp.elements.new(0.823)\n    colorramp_1.color_ramp.elements[2].color = [0.074, 0.045, 0.035, 1.0]\n    noise_texture_1.inputs[2].default_value = 60.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.064\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump_1.inputs[0].default_value = 0.15\n    principled_bsdf_1.inputs[0].default_value = [0.195, 0.195, 0.195, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.25\n    bump_2.inputs[0].default_value = 0.02\n    noise_texture_2.inputs[2].default_value = 6.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_2 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_2.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], fresnel.inputs[1])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(layer_weight.outputs[1], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(bump.outputs[0], layer_weight.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_1.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_2.inputs[2])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.7\n    bump.inputs[0].default_value = 0.076\n    bump.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 150.0\n    glossy_bsdf.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    glossy_bsdf_1.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.837\n    glossy_bsdf_2.inputs[0].default_value = [0.111, 0.226, 0.326, 1.0]\n    glossy_bsdf_2.inputs[1].default_value = 0.707\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[21])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 44.1\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.241\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.514\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.832)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    mapping.inputs[3].default_value = [0.6, 1.0, 1.2]\n    colorramp_1.color_ramp.elements[1].position = 0.65\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.739)\n    colorramp_1.color_ramp.elements[2].color = [0.032, 0.019, 0.127, 1.0]\n    colorramp_1.color_ramp.elements.new(0.805)\n    colorramp_1.color_ramp.elements[3].color = [0.565, 0.068, 0.095, 1.0]\n    colorramp_1.color_ramp.elements.new(0.878)\n    colorramp_1.color_ramp.elements[4].color = [0.823, 0.171, 0.038, 1.0]\n    colorramp_1.color_ramp.elements.new(0.96)\n    colorramp_1.color_ramp.elements[5].color = [0.922, 0.371, 0.007, 1.0]\n    wave_texture.inputs[1].default_value = -2.1\n    wave_texture.inputs[2].default_value = 10.5\n    wave_texture.inputs[3].default_value = 13.5\n    wave_texture.inputs[4].default_value = 5.1\n    wave_texture.inputs[5].default_value = 0.623\n    mapping_1.inputs[1].default_value = [0.0, 17.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    textured_glow_crystal_glass = nodes.new('ShaderNodeGroup')\n    textured_glow_crystal_glass.node_tree = bpy.data.node_groups['Textured_Glow_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(textured_glow_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(textured_glow_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Faux_Leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], rgb_curves.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], rgb_curves_2.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.294, 0.294, 0.294, 1.0]\n    mix.inputs[2].default_value = [0.289, 0.269, 0.214, 1.0]\n    mix.blend_type = 'LINEAR_LIGHT'\n    rgb_curves.mapping.curves[3].points[1].location = [0.3, 0.656]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'BURN'\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.541, 0.475]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.558\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    texture_coordinate.from_instancer = True\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.65\n    noise_texture_1.inputs[5].default_value = 1.5\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.664, 0.4]\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'OVERLAY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    power = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], emission.inputs[0])\n    links.new(power.outputs[0], checker_texture.inputs[0])\n    links.new(colorramp.outputs[0], checker_texture.inputs[1])\n    links.new(colorramp_1.outputs[0], checker_texture.inputs[2])\n    links.new(voronoi_texture.outputs[1], power.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], power.inputs[1])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[5])\n    links.new(voronoi_texture_2.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_3.outputs[1], voronoi_texture_1.inputs[2])\n    links.new(voronoi_texture_4.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    emission.inputs[1].default_value = 2.0\n    checker_texture.inputs[3].default_value = 99.0\n    power.inputs[2].default_value = 0.0\n    power.operation = 'POWER'\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.distance = 'CHEBYCHEV'\n    wave_texture.inputs[1].default_value = 0.4\n    wave_texture.inputs[2].default_value = 132.0\n    wave_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[4].default_value = 1.2\n    wave_texture.inputs[5].default_value = 1.0\n    wave_texture.wave_profile = 'SAW'\n    voronoi_texture_1.inputs[5].default_value = 0.0\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 2.77\n    voronoi_texture_2.distance = 'MANHATTAN'\n    voronoi_texture_2.feature = 'F2'\n    voronoi_texture_3.inputs[2].default_value = 5.37\n    voronoi_texture_3.inputs[3].default_value = 0.823\n    voronoi_texture_4.inputs[2].default_value = 49.5\n    voronoi_texture_4.inputs[3].default_value = 0.0\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.102\n    colorramp.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.335\n    colorramp.color_ramp.elements[1].color = [0.003, 0.069, 0.224, 1.0]\n    colorramp.color_ramp.elements.new(0.566)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.714)\n    colorramp.color_ramp.elements[3].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].position = 0.102\n    colorramp_1.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.151\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.231)\n    colorramp_1.color_ramp.elements[2].color = [0.006, 0.147, 0.444, 1.0]\n    colorramp_1.color_ramp.elements.new(0.281)\n    colorramp_1.color_ramp.elements[3].color = [0.077, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.294)\n    colorramp_1.color_ramp.elements[4].color = [0.08, 0.024, 0.365, 1.0]\n    colorramp_1.color_ramp.elements.new(0.311)\n    colorramp_1.color_ramp.elements[5].color = [0.038, 0.005, 0.056, 1.0]\n    colorramp_1.color_ramp.elements.new(0.421)\n    colorramp_1.color_ramp.elements[6].color = [0.049, 0.003, 0.008, 1.0]\n    colorramp_1.color_ramp.elements.new(0.464)\n    colorramp_1.color_ramp.elements[7].color = [1.0, 0.617, 0.082, 1.0]\n    colorramp_1.color_ramp.elements.new(0.502)\n    colorramp_1.color_ramp.elements[8].color = [0.004, 0.038, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.543)\n    colorramp_1.color_ramp.elements[9].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.604)\n    colorramp_1.color_ramp.elements[10].color = [0.05, 0.208, 0.022, 1.0]\n    colorramp_1.color_ramp.elements.new(0.714)\n    colorramp_1.color_ramp.elements[11].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.elements.new(0.748)\n    colorramp_1.color_ramp.elements[12].color = [0.035, 0.097, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.81)\n    colorramp_1.color_ramp.elements[13].color = [0.515, 0.207, 0.416, 1.0]\n    colorramp_1.color_ramp.elements.new(0.907)\n    colorramp_1.color_ramp.elements[14].color = [0.093, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    rgb_to_bw_1 = nodes.new('ShaderNodeRGBToBW')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    rgb_to_bw_2 = nodes.new('ShaderNodeRGBToBW')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(rgb_to_bw_2.outputs[0], mix.inputs[2])\n    links.new(invert.outputs[0], mix_1.inputs[1])\n    links.new(invert_1.outputs[0], mix_1.inputs[2])\n    links.new(rgb_to_bw.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(rgb_to_bw_1.outputs[0], invert_1.inputs[1])\n    links.new(multiply.outputs[0], rgb_to_bw_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[2], voronoi_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], rgb_to_bw_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(multiply_1.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.85\n    glossy_bsdf.inputs[1].default_value = 0.424\n    glossy_bsdf.distribution = 'BECKMANN'\n    rgb.outputs[0].default_value = [0.332, 0.153, 0.082, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[0].default_value = 0.44\n    mix_1.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 200.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    noise_texture.inputs[3].default_value = 5.0\n    multiply_1.inputs[0].default_value = 200.0\n    multiply_1.inputs[1].default_value = 0.75\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.292, 0.091, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.042\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.007, 0.0, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    add_2 = nodes.new('ShaderNodeMath')\n    wave_texture_2 = nodes.new('ShaderNodeTexWave')\n    wave_texture_3 = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(map_range.outputs[0], mix_1.inputs[0])\n    links.new(add.outputs[0], map_range.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(add_2.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], add_1.inputs[0])\n    links.new(wave_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(wave_texture_2.outputs[0], add_2.inputs[0])\n    links.new(wave_texture_3.outputs[0], add_2.inputs[1])\n    links.new(mapping.outputs[0], wave_texture_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_3.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(map_range_1.outputs[0], displacement.inputs[0])\n    links.new(add.outputs[0], map_range_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.253\n    principled_bsdf.inputs[12].default_value = 0.269\n    mix.inputs[2].default_value = [0.882, 0.882, 0.882, 1.0]\n    layer_weight.inputs[0].default_value = 0.1\n    mix_1.inputs[1].default_value = [0.04, 0.007, 0.0, 1.0]\n    mix_1.inputs[2].default_value = [0.823, 0.613, 0.257, 1.0]\n    map_range.inputs[1].default_value = 1.2\n    map_range.inputs[2].default_value = 1.7\n    map_range.inputs[3].default_value = -1.0\n    map_range.inputs[4].default_value = 0.9\n    wave_texture.inputs[1].default_value = 20.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n    wave_texture_1.inputs[1].default_value = 20.0\n    wave_texture_1.bands_direction = 'Z'\n    wave_texture_2.inputs[1].default_value = 4.0\n    wave_texture_2.wave_profile = 'SAW'\n    wave_texture_3.inputs[1].default_value = 4.0\n    wave_texture_3.bands_direction = 'Z'\n    wave_texture_3.wave_profile = 'SAW'\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.607, 0.607, 0.607, 1.0]\n    bump.inputs[0].default_value = 0.693\n    noise_texture.inputs[2].default_value = 400.0\n    displacement.inputs[2].default_value = 0.001\n    map_range_1.inputs[1].default_value = 1.1\n    map_range_1.inputs[2].default_value = 0.7\n    map_range_1.inputs[3].default_value = -0.5\n    map_range_1.inputs[4].default_value = 8.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    gamma = nodes.new('ShaderNodeGamma')\n    map_range = nodes.new('ShaderNodeMapRange')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    add_1 = nodes.new('ShaderNodeMath')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[7])\n    links.new(map_range.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(gamma_1.outputs[0], map_range.inputs[0])\n    links.new(voronoi_texture.outputs[1], gamma_1.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(subtract.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], multiply.inputs[1])\n    links.new(noise_texture_2.outputs[0], subtract.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(add_1.outputs[0], musgrave_texture.inputs[3])\n    links.new(noise_texture_3.outputs[0], add_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.191\n    principled_bsdf.inputs[12].default_value = 0.127\n    principled_bsdf.inputs[13].default_value = 0.514\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.492\n    mix.blend_type = 'COLOR'\n    colorramp.color_ramp.elements[0].color = [0.521, 0.323, 0.231, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.595\n    colorramp.color_ramp.elements[1].color = [0.262, 0.068, 0.032, 1.0]\n    noise_texture.inputs[2].default_value = 0.59\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.747\n    noise_texture.inputs[5].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 4.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.521, 0.25, 0.102, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.468\n    colorramp_1.color_ramp.elements[1].color = [0.381, 0.138, 0.058, 1.0]\n    noise_texture_1.inputs[2].default_value = 0.59\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.747\n    noise_texture_1.inputs[5].default_value = 0.7\n    mapping_1.inputs[3].default_value = [1.0, 4.83, 1.0]\n    gamma.inputs[1].default_value = 0.99\n    map_range.inputs[1].default_value = -0.19\n    map_range.inputs[2].default_value = 0.85\n    gamma_1.inputs[1].default_value = 2.89\n    voronoi_texture.inputs[2].default_value = 34.1\n    add.inputs[1].default_value = 27.7\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[1].default_value = 252.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    musgrave_texture.inputs[2].default_value = 2.43\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 0.0\n    add_1.inputs[1].default_value = 13.2\n    add_1.inputs[2].default_value = 0.0\n    noise_texture_3.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.092\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metallic_camo = nodes.new('ShaderNodeGroup')\n    metallic_camo.node_tree = bpy.data.node_groups['Metallic_Camo']\n\n    # Create links to connect nodes\n    links.new(metallic_camo.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    metallic_camo.inputs[0].default_value = 0.4\n    metallic_camo.inputs[13].default_value = [0.345, 0.32, 0.316, 1.0]\n    metallic_camo.inputs[14].default_value = 0.228\n    metallic_camo.inputs[15].default_value = 0.295\n    metallic_camo.inputs[17].default_value = 0.35\n    metallic_camo.inputs[18].default_value = 0.664\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(gamma.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], gamma.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.15\n    glossy_bsdf.inputs[1].default_value = 0.447\n    glossy_bsdf.distribution = 'BECKMANN'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.438, 0.438, 0.438, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.101, 0.101, 0.101, 1.0]\n    fresnel.inputs[0].default_value = 2.45\n    bump.inputs[0].default_value = 1.2\n    bump.inputs[1].default_value = 0.5\n    gamma.inputs[1].default_value = 9.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.114\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.171, 0.171, 0.171, 0.507]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 0.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[5].default_value = 8.0\n    mapping.inputs[3].default_value = [0.1, 1000.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.658, 0.429, 0.038, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    color_ramp.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp.color_ramp.elements[0].position = 0.3\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture_3.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.423\n    colorramp.color_ramp.elements[1].position = 0.445\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 16.0\n    principled_bsdf.inputs[0].default_value = [0.585, 0.585, 0.585, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].position = 0.259\n    colorramp_1.color_ramp.elements[0].color = [0.275, 0.275, 0.275, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.675, 0.675, 0.675, 1.0]\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.75\n    principled_bsdf_1.inputs[0].default_value = [0.8, 0.029, 0.133, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.elements[0].position = 0.364\n    colorramp_2.color_ramp.elements[0].color = [0.183, 0.183, 0.183, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.65\n    colorramp_2.color_ramp.elements[1].color = [0.494, 0.494, 0.494, 1.0]\n    noise_texture_2.inputs[2].default_value = 10.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.05\n    noise_texture_3.inputs[2].default_value = 600.0\n    noise_texture_3.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['GraniteProcedural']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[9])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.296, 0.227, 0.216, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = 1.0\n    group.inputs[6].default_value = 2.0\n    group.inputs[9].default_value = 1.0\n    group.inputs[16].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.337\n    colorramp.color_ramp.elements[0].color = [0.667, 0.192, 0.029, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.703\n    colorramp.color_ramp.elements[1].color = [0.133, 0.042, 0.009, 1.0]\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.84\n    noise_texture.inputs[5].default_value = 5.0\n    mapping.inputs[3].default_value = [3.9, 4.2, 0.1]\n    bump.inputs[0].default_value = 0.373\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_3 = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], gradient_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate_2.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate_3.outputs[3], noise_texture_2.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.595\n    colorramp.color_ramp.elements[1].position = 0.6\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.595\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.371, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    gradient_texture.gradient_type = 'QUADRATIC_SPHERE'\n    colorramp_2.color_ramp.elements[0].position = 0.609\n    colorramp_2.color_ramp.elements[1].position = 0.627\n    noise_texture_1.inputs[3].default_value = 10.0\n    colorramp_3.color_ramp.elements[0].position = 0.636\n    noise_texture_2.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.005\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix_shader_3 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_4 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf_1 = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_5 = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    translucent_bsdf_2 = nodes.new('ShaderNodeBsdfTranslucent')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_2.inputs[0])\n    links.new(mix_shader_3.outputs[0], mix_shader_2.inputs[1])\n    links.new(translucent_bsdf_2.outputs[0], mix_shader_2.inputs[2])\n    links.new(fresnel.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_3.inputs[0])\n    links.new(translucent_bsdf.outputs[0], mix_shader_3.inputs[1])\n    links.new(mix_shader_4.outputs[0], mix_shader_3.inputs[2])\n    links.new(translucent_bsdf_1.outputs[0], mix_shader_4.inputs[1])\n    links.new(mix_shader_5.outputs[0], mix_shader_4.inputs[2])\n    links.new(glass_bsdf.outputs[0], mix_shader_5.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader_5.inputs[2])\n    links.new(normal_map.outputs[0], glossy_bsdf.inputs[2])\n    links.new(voronoi_texture_1.outputs[1], normal_map.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.209\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.245\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 200.0\n    voronoi_texture.inputs[4].default_value = 0.7\n    voronoi_texture.distance = 'MINKOWSKI'\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.159\n    colorramp_1.color_ramp.elements[0].color = [0.222, 0.222, 0.222, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.218\n    fresnel.inputs[0].default_value = 2.5\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.486, 0.091, 1.0]\n    translucent_bsdf_1.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.2\n    glass_bsdf.inputs[2].default_value = 1.5\n    transparent_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    translucent_bsdf_2.inputs[0].default_value = [0.772, 0.059, 0.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.485, 0.091, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.0\n    normal_map.inputs[0].default_value = 10.0\n    normal_map.space = 'WORLD'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    voronoi_texture_1.inputs[4].default_value = 0.7\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    glossy_bsdf_1.inputs[0].default_value = [1.0, 0.61, 0.273, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    divide = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(diffuse_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(map_range.outputs[0], mix.inputs[2])\n    links.new(ambient_occlusion.outputs[1], map_range.inputs[0])\n    links.new(divide.outputs[0], ambient_occlusion.inputs[1])\n    links.new(fresnel.outputs[0], mix_1.inputs[0])\n    links.new(multiply.outputs[0], mix_1.inputs[2])\n    links.new(subtract.outputs[0], multiply.inputs[1])\n    links.new(multiply_1.outputs[0], subtract.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix_2.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_2.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(multiply_2.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.947, 0.965, 1.0, 1.0]\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    ambient_occlusion.only_local = True\n    divide.inputs[0].default_value = 0.05\n    divide.inputs[1].default_value = 0.75\n    divide.operation = 'DIVIDE'\n    mix_1.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[0].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[0].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    multiply_1.inputs[0].default_value = 0.25\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.75\n    bump.inputs[1].default_value = 0.05\n    mix_2.inputs[0].default_value = 0.8\n    noise_texture.inputs[3].default_value = 15.0\n    multiply_2.inputs[0].default_value = 1.0\n    multiply_2.inputs[1].default_value = 10.0\n    multiply_2.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.559, 0.559, 0.559, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], gradient_texture.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.05\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[0].color = [0.007, 0.095, 0.434, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.335, 0.011, 0.004, 1.0]\n    colorramp.color_ramp.elements.new(0.65)\n    colorramp.color_ramp.elements[2].color = [0.339, 0.142, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[3].color = [0.719, 0.719, 0.719, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.46, 0.46, 0.46, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.145\n    colorramp_1.color_ramp.elements[1].color = [0.574, 0.574, 0.574, 1.0]\n    colorramp_1.color_ramp.elements.new(0.968)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.02\n    mix.blend_type = 'BURN'\n    mix_1.inputs[0].default_value = 0.1\n    mix_1.blend_type = 'MULTIPLY'\n    mapping.inputs[1].default_value = [0.35, 0.0, 0.0]\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[5].default_value = 10.0\n    musgrave_texture.inputs[2].default_value = 25.0\n    musgrave_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.75\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.005\n    colorramp.color_ramp.elements[0].color = [0.312, 0.312, 0.312, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.741\n    colorramp.color_ramp.elements[1].color = [0.107, 0.107, 0.107, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.264\n    colorramp_1.color_ramp.elements[0].color = [0.02, 0.02, 0.02, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.514\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 4.5\n    noise_texture.inputs[4].default_value = 0.742\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['CarPaintMaterial']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    less_than = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], multiply_1.inputs[0])\n    links.new(less_than.outputs[0], multiply_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(separate_xyz.outputs[2], less_than.inputs[0])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(separate_xyz.outputs[2], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 8.47\n    multiply.operation = 'MULTIPLY'\n    multiply_1.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.118\n    colorramp.color_ramp.elements[1].position = 0.773\n    musgrave_texture.inputs[2].default_value = 14.9\n    less_than.inputs[1].default_value = 0.85\n    less_than.operation = 'LESS_THAN'\n    principled_bsdf.inputs[1].default_value = 0.02\n    principled_bsdf.inputs[2].default_value = [0.01, 0.1, 0.1]\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 2.0\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[16].default_value = 1.3\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.912\n    colorramp_1.color_ramp.elements[0].color = [0.062, 0.52, 0.196, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.934\n    colorramp_1.color_ramp.elements[1].color = [0.89, 0.064, 0.038, 1.0]\n    diffuse_bsdf.inputs[0].default_value = [0.062, 0.52, 0.223, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 0.721\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    divide = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    divide_1 = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    musgrave_texture_2 = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    add_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], add.inputs[0])\n    links.new(divide.outputs[0], add.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], divide.inputs[0])\n    links.new(divide_1.outputs[0], divide.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(map_range.outputs[0], divide_1.inputs[0])\n    links.new(colorramp_3.outputs[0], divide_1.inputs[1])\n    links.new(musgrave_texture_2.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_2.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add_1.outputs[0], displacement.inputs[0])\n    links.new(voronoi_texture.outputs[0], add_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix.inputs[1])\n    links.new(mapping_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.505\n    colorramp.color_ramp.elements[1].color = [0.939, 0.624, 0.053, 1.0]\n    add.use_clamp = True\n    colorramp_1.color_ramp.elements[0].position = 0.377\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.436\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 74.7\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 5.0\n    musgrave_texture.inputs[5].default_value = 3.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n    mapping.inputs[3].default_value = [6.0, 6.0, 6.0]\n    divide.operation = 'DIVIDE'\n    divide.use_clamp = True\n    colorramp_2.color_ramp.elements[0].position = 0.491\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    musgrave_texture_1.inputs[2].default_value = 16.9\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 5.0\n    musgrave_texture_1.inputs[5].default_value = 3.0\n    musgrave_texture_1.musgrave_type = 'MULTIFRACTAL'\n    divide_1.operation = 'DIVIDE'\n    divide_1.use_clamp = True\n    map_range.inputs[3].default_value = 1.0\n    map_range.interpolation_type = 'SMOOTHERSTEP'\n    musgrave_texture_2.inputs[2].default_value = 2.4\n    musgrave_texture_2.inputs[3].default_value = 15.0\n    musgrave_texture_2.inputs[4].default_value = 5.0\n    musgrave_texture_2.inputs[5].default_value = 3.0\n    colorramp_3.color_ramp.elements[0].position = 0.591\n    colorramp_3.color_ramp.elements[1].position = 0.768\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 0.6\n    displacement.inputs[2].default_value = 0.005\n    voronoi_texture.inputs[2].default_value = 122.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.275\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    mapping_1.inputs[3].default_value = [0.1, 0.1, 0.1]\n    voronoi_texture_1.inputs[2].default_value = 27.6\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(musgrave_texture.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.95\n    mix.inputs[1].default_value = [0.008, 0.002, 0.001, 1.0]\n    mix.inputs[2].default_value = [0.5, 0.118, 0.032, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    musgrave_texture.inputs[6].default_value = 0.025\n    musgrave_texture.inputs[7].default_value = 120.0\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    musgrave_texture_1.inputs[2].default_value = 2.0\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 0.3\n    musgrave_texture_1.inputs[6].default_value = 0.025\n    musgrave_texture_1.inputs[7].default_value = 120.0\n    musgrave_texture_1.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.01\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], voronoi_texture.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.01\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.11, 0.008, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.491\n    colorramp.color_ramp.elements[0].color = [0.019, 0.011, 0.009, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.002, 0.001, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.573)\n    colorramp.color_ramp.elements[2].color = [0.009, 0.006, 0.006, 1.0]\n    colorramp.color_ramp.elements.new(0.577)\n    colorramp.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.327, 0.327, 0.327, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.018\n    colorramp_1.color_ramp.elements[1].color = [0.735, 0.735, 0.735, 1.0]\n    bump.inputs[0].default_value = 0.4\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DIVIDE'\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    colorramp_2.color_ramp.elements[0].position = 0.729\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.805\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_2.inputs[2].default_value = 70.0\n    noise_texture_2.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(multiply_1.outputs[0], principled_bsdf.inputs[20])\n    links.new(brick_texture.outputs[1], principled_bsdf.inputs[21])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], brick_texture.inputs[5])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.0, 0.327, 1.0, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    add.inputs[1].default_value = 0.01\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 3.0\n    mix.inputs[0].default_value = 0.119\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.168\n    colorramp.color_ramp.elements[0].color = [0.001, 0.757, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.782\n    colorramp.color_ramp.elements[1].color = [0.305, 0.338, 1.0, 1.0]\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], displacement.inputs[2])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.109\n    principled_bsdf.inputs[20].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.482\n    colorramp.color_ramp.elements[0].color = [1.0, 0.967, 0.941, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.986\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[2].default_value = 10.5\n    noise_texture.inputs[3].default_value = 9.9\n    noise_texture.inputs[4].default_value = 0.583\n    colorramp_1.color_ramp.elements[0].position = 0.473\n    colorramp_1.color_ramp.elements[1].position = 0.986\n    displacement.inputs[0].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [0.077, 0.059, 0.146, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.818\n    colorramp_2.color_ramp.elements[1].color = [0.922, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    color_ramp_2 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(color_ramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(color_ramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(noise_texture_1.outputs[0], color_ramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(color_ramp_2.outputs[0], bump_2.inputs[2])\n    links.new(wave_texture.outputs[0], color_ramp_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.038, 0.09, 0.22, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    color_ramp.color_ramp.elements[0].position = 0.25\n    noise_texture.inputs[2].default_value = 0.3\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.625\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    bump_1.inputs[1].default_value = 0.1\n    bump_1.invert = True\n    color_ramp_1.color_ramp.interpolation = 'EASE'\n    color_ramp_1.color_ramp.elements[0].position = 0.55\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 14.5\n    noise_texture_1.inputs[5].default_value = 1.0\n    bump_2.inputs[0].default_value = 0.07\n    bump_2.inputs[1].default_value = 0.1\n    bump_2.invert = True\n    color_ramp_2.color_ramp.elements[0].position = 0.85\n    wave_texture.inputs[1].default_value = 200.0\n    wave_texture.inputs[2].default_value = 14.5\n    wave_texture.inputs[3].default_value = 14.5\n    wave_texture.inputs[4].default_value = 2.5\n    wave_texture.inputs[5].default_value = 0.75\n    wave_texture.bands_direction = 'Z'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    granite_blue = nodes.new('ShaderNodeGroup')\n    granite_blue.node_tree = bpy.data.node_groups['Granite_Blue']\n    add = nodes.new('ShaderNodeVectorMath')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_1 = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    combine_xyz_1 = nodes.new('ShaderNodeCombineXYZ')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    multiply_2 = nodes.new('ShaderNodeVectorMath')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(granite_blue.outputs[0], principled_bsdf.inputs[0])\n    links.new(granite_blue.outputs[1], principled_bsdf.inputs[9])\n    links.new(granite_blue.outputs[2], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], granite_blue.inputs[0])\n    links.new(rgb_to_bw.outputs[0], granite_blue.inputs[1])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], multiply.inputs[0])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(multiply_1.outputs[0], mapping.inputs[3])\n    links.new(combine_xyz.outputs[0], multiply_1.inputs[0])\n    links.new(combine_xyz_1.outputs[0], multiply_1.inputs[1])\n    links.new(multiply_2.outputs[0], add_1.inputs[0])\n    links.new(mapping.outputs[0], add_1.inputs[1])\n    links.new(noise_texture.outputs[1], multiply_2.inputs[0])\n    links.new(colorramp.outputs[0], rgb_to_bw.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    granite_blue.inputs[3].default_value = 0.48\n    granite_blue.inputs[4].default_value = [0.035, 0.032, 0.058, 1.0]\n    granite_blue.inputs[5].default_value = 0.08\n    granite_blue.inputs[6].default_value = 0.3\n    granite_blue.inputs[7].default_value = [0.017, 0.035, 0.031, 1.0]\n    granite_blue.inputs[8].default_value = 0.04\n    granite_blue.inputs[9].default_value = 0.1\n    multiply.inputs[1].default_value = [0.02, 0.02, 0.02]\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 0.3\n    wave_texture.inputs[4].default_value = 0.0\n    wave_texture.inputs[5].default_value = 0.523\n    mix.inputs[0].default_value = 0.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.2\n    noise_texture.inputs[4].default_value = 0.425\n    noise_texture.inputs[5].default_value = 0.2\n    mapping.inputs[1].default_value = [12.0, -12.0, -3.0]\n    mapping.inputs[2].default_value = [-0.279, 0.332, 0.777]\n    multiply_1.operation = 'MULTIPLY'\n    combine_xyz.inputs[0].default_value = 0.6\n    combine_xyz.inputs[1].default_value = 0.4\n    combine_xyz.inputs[2].default_value = 1.0\n    combine_xyz_1.inputs[0].default_value = 1.0\n    combine_xyz_1.inputs[1].default_value = 1.0\n    combine_xyz_1.inputs[2].default_value = 1.0\n    multiply_2.inputs[1].default_value = [0.05, 0.05, 0.05]\n    multiply_2.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Old_brass']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[7])\n    links.new(group.outputs[2], principled_bsdf.inputs[9])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = [1.0, 1.0, 1.0]\n    displacement.inputs[2].default_value = 0.02\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[1].position = 0.345\n    colorramp.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp.color_ramp.elements.new(0.95)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.964)\n    colorramp.color_ramp.elements[3].color = [0.239, 0.239, 0.239, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'BURN'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    wave_texture.wave_profile = 'SAW'\n    wave_texture_1.inputs[1].default_value = 6.0\n    wave_texture_1.inputs[2].default_value = 60.0\n    wave_texture_1.bands_direction = 'Y'\n    wave_texture_1.wave_profile = 'SAW'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.432, 0.085, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.075\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.076, 0.022, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    decorative_glass = nodes.new('ShaderNodeGroup')\n    decorative_glass.node_tree = bpy.data.node_groups['Decorative_Glass_002']\n\n    # Create links to connect nodes\n    links.new(decorative_glass.outputs[0], material_output.inputs[0])\n    links.new(decorative_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(checker_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], mix_2.inputs[1])\n    links.new(voronoi_texture_2.outputs[1], mix_2.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(noise_texture.outputs[1], checker_texture.inputs[0])\n    links.new(mapping_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping_2.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.552, 0.552, 0.552, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.836\n    mix.inputs[0].default_value = 0.333\n    mix.blend_type = 'MULTIPLY'\n    mix_1.blend_type = 'SUBTRACT'\n    mix_2.blend_type = 'SCREEN'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [20.9, 20.9, 20.9]\n    voronoi_texture_1.inputs[2].default_value = 32.1\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 72.6\n    voronoi_texture_2.feature = 'SMOOTH_F1'\n    checker_texture.inputs[1].default_value = [0.8, 0.8, 0.8, 1.0]\n    checker_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    checker_texture.inputs[3].default_value = 93.2\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 1.0\n    mapping_2.inputs[3].default_value = [59.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.117\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(color_ramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(color_ramp_1.outputs[0], color_ramp.inputs[0])\n    links.new(wave_texture.outputs[1], color_ramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.02, 0.003, 0.0, 1.0]\n    color_ramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.048\n    color_ramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    color_ramp_1.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp_1.color_ramp.elements[0].position = 0.17\n    color_ramp_1.color_ramp.elements[1].position = 0.655\n    color_ramp_1.color_ramp.elements[1].color = [0.0, 0.05, 0.004, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.791)\n    color_ramp_1.color_ramp.elements[2].color = [0.0, 0.1, 0.007, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.918)\n    color_ramp_1.color_ramp.elements[3].color = [0.0, 0.15, 0.011, 1.0]\n    color_ramp_1.color_ramp.elements.new(1.0)\n    color_ramp_1.color_ramp.elements[4].color = [0.0, 0.363, 0.026, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[5].default_value = 0.25\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.45\n    noise_texture.inputs[5].default_value = 0.15\n    noise_texture.noise_dimensions = '4D'\n    bump.inputs[0].default_value = 0.65\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    wood_floor = nodes.new('ShaderNodeGroup')\n    wood_floor.node_tree = bpy.data.node_groups['wood_floor']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(wood_floor.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[2], wood_floor.inputs[27])\n\n    # Set parameters for each node\n    wood_floor.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    wood_floor.inputs[4].default_value = 0.02\n    wood_floor.inputs[5].default_value = 0.0\n    wood_floor.inputs[19].default_value = 0.5\n    wood_floor.inputs[21].default_value = 1.0\n    wood_floor.inputs[22].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(glossy_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.195\n    fresnel.inputs[0].default_value = 2.0\n    displacement.inputs[2].default_value = 0.02\n    voronoi_texture.inputs[2].default_value = 16.0\n    voronoi_texture.distance = 'MANHATTAN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(invert.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[1].position = 0.55\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 4.1\n    noise_texture.inputs[4].default_value = 0.667\n    noise_texture.inputs[5].default_value = 0.15\n    mapping.inputs[1].default_value = [2.7, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.063, 0.0, 0.0]\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.5]\n    emission.inputs[1].default_value = 1.1\n    colorramp_1.color_ramp.elements[0].position = 0.482\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.568\n    colorramp_1.color_ramp.elements[1].color = [0.634, 0.856, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.4\n    noise_texture_1.inputs[3].default_value = 6.5\n    noise_texture_1.inputs[4].default_value = 0.533\n    noise_texture_1.inputs[5].default_value = 1.3\n    mapping_1.inputs[1].default_value = [-1.29, 6.1, 3.6]\n    mapping_1.inputs[2].default_value = [0.079, 0.026, 0.0]\n    mapping_1.inputs[3].default_value = [-3.6, 0.4, 1.3]\n"
]