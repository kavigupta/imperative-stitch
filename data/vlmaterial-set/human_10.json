[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(map_range_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], map_range_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(map_range_2.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], map_range_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.9\n    mix.inputs[1].default_value = [0.025, 0.011, 0.008, 1.0]\n    mix.inputs[2].default_value = [0.047, 0.076, 0.235, 1.0]\n    map_range.inputs[1].default_value = -1.0\n    map_range.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    map_range_1.inputs[1].default_value = -1.0\n    map_range_1.inputs[2].default_value = 2.0\n    map_range_1.inputs[3].default_value = 0.4\n    map_range_1.inputs[4].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    map_range_2.inputs[1].default_value = 0.45\n    map_range_2.inputs[2].default_value = 0.55\n    noise_texture_2.inputs[2].default_value = 250.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.85\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    subtract = nodes.new('ShaderNodeMath')\n    snap = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    compare = nodes.new('ShaderNodeMath')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(invert.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(subtract.outputs[0], colorramp.inputs[0])\n    links.new(snap.outputs[0], subtract.inputs[0])\n    links.new(voronoi_texture_3.outputs[0], subtract.inputs[1])\n    links.new(subtract_1.outputs[0], snap.inputs[0])\n    links.new(voronoi_texture.outputs[0], subtract_1.inputs[0])\n    links.new(compare.outputs[0], subtract_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], musgrave_texture.inputs[4])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], compare.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], compare.inputs[2])\n    links.new(voronoi_texture_2.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_3.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(subtract.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_4.outputs[1], colorramp_2.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_4.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.305\n    colorramp.color_ramp.elements[0].color = [0.421, 0.421, 0.421, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.323\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    snap.inputs[1].default_value = -0.68\n    snap.inputs[2].default_value = 0.0\n    snap.operation = 'SNAP'\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    voronoi_texture.inputs[5].default_value = 0.0\n    mapping.inputs[3].default_value = [20.8, 20.8, 20.8]\n    musgrave_texture.inputs[2].default_value = 17.7\n    musgrave_texture.inputs[3].default_value = 10.2\n    compare.operation = 'COMPARE'\n    musgrave_texture_1.inputs[2].default_value = 98.9\n    musgrave_texture_1.inputs[3].default_value = 10.2\n    voronoi_texture_2.inputs[2].default_value = 0.0\n    voronoi_texture_3.inputs[2].default_value = -4.8\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.423\n    colorramp_2.color_ramp.elements[0].position = 0.586\n    colorramp_2.color_ramp.elements[1].position = 0.682\n    voronoi_texture_4.inputs[2].default_value = 61.4\n    voronoi_texture_4.inputs[3].default_value = 0.9\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    mapping_1.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.258\n    colorramp_3.color_ramp.elements[0].position = 0.032\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.384\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    tablecloth_red = nodes.new('ShaderNodeGroup')\n    tablecloth_red.node_tree = bpy.data.node_groups['Tablecloth_red']\n\n    # Create links to connect nodes\n    links.new(tablecloth_red.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    tablecloth_red.inputs[3].default_value = 3.42\n    tablecloth_red.inputs[4].default_value = 0.333\n    tablecloth_red.inputs[7].default_value = 0.3\n    tablecloth_red.inputs[10].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    scale = nodes.new('ShaderNodeVectorMath')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    compare = nodes.new('ShaderNodeMath')\n    absolute = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(colorramp_1.outputs[0], multiply.inputs[1])\n    links.new(invert.outputs[0], colorramp.inputs[0])\n    links.new(layer_weight.outputs[1], invert.inputs[1])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_5.outputs[0], mix.inputs[2])\n    links.new(fraction.outputs[0], colorramp_2.inputs[0])\n    links.new(combine_xyz.outputs[0], fraction.inputs[0])\n    links.new(multiply_1.outputs[0], combine_xyz.inputs[0])\n    links.new(colorramp_3.outputs[0], multiply_1.inputs[0])\n    links.new(mix_1.outputs[0], multiply_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(separate_xyz.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(scale.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(invert_1.outputs[0], colorramp_5.inputs[0])\n    links.new(compare.outputs[0], invert_1.inputs[1])\n    links.new(absolute.outputs[0], compare.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], absolute.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    colorramp.color_ramp.elements[1].position = 0.881\n    layer_weight.inputs[0].default_value = 0.72\n    colorramp_1.color_ramp.elements[0].position = 0.108\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    mix.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[1].color = [0.426, 0.497, 1.0, 1.0]\n    fraction.inputs[3].default_value = 3.0\n    fraction.operation = 'FRACTION'\n    multiply_1.inputs[2].default_value = 0.002\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    colorramp_3.color_ramp.elements[0].position = 0.508\n    voronoi_texture.inputs[2].default_value = 98.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    mapping.inputs[1].default_value = [0.0, 1.0, 0.0]\n    add.inputs[0].default_value = 1.0\n    add.inputs[1].default_value = 1.0\n    add.inputs[2].default_value = 0.0\n    mix_1.inputs[0].default_value = 1.0\n    scale.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    colorramp_4.color_ramp.elements[0].position = 0.384\n    noise_texture.inputs[2].default_value = -2.2\n    noise_texture.inputs[3].default_value = 10.5\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_5.color_ramp.elements[1].color = [1.0, 0.014, 0.363, 1.0]\n    compare.inputs[1].default_value = 1.2\n    compare.inputs[2].default_value = 0.734\n    compare.operation = 'COMPARE'\n    compare.use_clamp = True\n    absolute.inputs[2].default_value = 0.0\n    absolute.operation = 'ABSOLUTE'\n    absolute.use_clamp = True\n    voronoi_texture_1.inputs[1].default_value = 1.0\n    voronoi_texture_1.inputs[2].default_value = 16.5\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    mapping_1.inputs[3].default_value = [0.5, -1.13, 1.0]\n    emission.inputs[1].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    fresnel.inputs[0].default_value = 1.0\n    glass_bsdf.inputs[0].default_value = [1.0, 0.587, 0.034, 1.0]\n    glass_bsdf.inputs[2].default_value = 1.0\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 0.3\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    comic_half_tone = nodes.new('ShaderNodeGroup')\n    comic_half_tone.node_tree = bpy.data.node_groups['Comic_Half_Tone']\n\n    # Create links to connect nodes\n    links.new(comic_half_tone.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    comic_half_tone.inputs[1].default_value = [0.829, 0.839, 0.671, 1.0]\n    comic_half_tone.inputs[6].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[1], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.15\n    colorramp.color_ramp.elements[1].color = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.inputs[3].default_value = 0.35\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.563, 0.563, 0.563, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n    displacement.inputs[2].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_3 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_shader_2.inputs[0])\n    links.new(principled_bsdf_2.outputs[0], mix_shader_2.inputs[1])\n    links.new(principled_bsdf_3.outputs[0], mix_shader_2.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_2.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_2.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate_2.outputs[3], voronoi_texture_2.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_2.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_2.inputs[22])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    rgb.outputs[0].default_value = [0.179, 0.179, 0.179, 1.0]\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.459\n    colorramp.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 1.47\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    voronoi_texture.inputs[4].default_value = 2.14\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.96\n    noise_texture.inputs[2].default_value = 31.6\n    noise_texture.inputs[3].default_value = 3.7\n    noise_texture.inputs[4].default_value = 0.625\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.65\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.668\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 2.6\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    mix_1.inputs[0].default_value = 0.125\n    voronoi_texture_2.distance = 'MINKOWSKI'\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.583\n    bump_1.invert = True\n    principled_bsdf_3.inputs[6].default_value = 1.0\n    principled_bsdf_3.inputs[9].default_value = 0.009\n    principled_bsdf_3.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    rgb = nodes.new('ShaderNodeRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(less_than.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], less_than.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(rgb.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    less_than.inputs[1].default_value = 0.25\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    voronoi_texture.inputs[2].default_value = 10000.0\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.9\n    rgb.outputs[0].default_value = [0.953, 0.382, 0.173, 1.0]\n    bright_contrast.inputs[1].default_value = -0.9\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    gradient_particles = nodes.new('ShaderNodeGroup')\n    gradient_particles.node_tree = bpy.data.node_groups['Gradient_Particles']\n\n    # Create links to connect nodes\n    links.new(gradient_particles.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    gradient_particles.inputs[2].default_value = 1.0\n    gradient_particles.inputs[3].default_value = 0.6\n    gradient_particles.inputs[4].default_value = 1.0\n"
]