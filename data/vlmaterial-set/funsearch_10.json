[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    light_path = nodes.new('ShaderNodeLightPath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(light_path.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.0, 0.5, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.1\n    principled_bsdf.inputs[0].default_value = [0.2, 0.5, 0.8, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.4\n    principled_bsdf.inputs[7].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], musgrave_texture.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[20].default_value = 0.5\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n    musgrave_texture.inputs[2].default_value = 6.0\n    musgrave_texture.inputs[3].default_value = 12.0\n    musgrave_texture.inputs[4].default_value = 0.4\n    mix.blend_type = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.2, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.9, 0.9, 0.9, 1.0]\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Electromagnetic_Shield']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 0.5\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 1.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.0\n    group.inputs[9].default_value = -10.0\n    group.inputs[21].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], mix_shader.inputs[2])\n    links.new(checker_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    checker_texture.inputs[2].default_value = [0.1, 0.1, 0.1, 1.0]\n    checker_texture.inputs[3].default_value = 10.0\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    hue_saturation_value = nodes.new('ShaderNodeHueSaturation')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    invert = nodes.new('ShaderNodeInvert')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(hue_saturation_value.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], hue_saturation_value.inputs[4])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[2])\n    links.new(invert.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[1], add.inputs[1])\n    links.new(voronoi_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.7\n    principled_bsdf.inputs[17].default_value = 0.5\n    principled_bsdf.inputs[18].default_value = 0.1\n    hue_saturation_value.inputs[1].default_value = 0.2\n    hue_saturation_value.inputs[2].default_value = 1.5\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.8, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.4, 0.7, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    invert.inputs[0].default_value = 0.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], principled_bsdf_1.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[3].default_value = 5.0\n    bump.inputs[0].default_value = 0.1\n    principled_bsdf_1.inputs[0].default_value = [0.8, 0.1, 0.1, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].color = [0.8, 0.2, 0.2, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.45\n    colorramp_1.color_ramp.elements[1].color = [0.665, 0.335, 0.335, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [0.2, 0.2, 0.2, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(scale.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], scale.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.4\n    principled_bsdf.inputs[9].default_value = 0.25\n    colorramp.color_ramp.elements[0].color = [0.7, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 1.0\n    scale.operation = 'SCALE'\n    bump.inputs[0].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.4\n    glossy_bsdf.inputs[1].default_value = 0.55\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(wave_texture.outputs[1], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.0\n    principled_bsdf.inputs[17].default_value = 0.1\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [0.1, 0.2, 0.3, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.5, 0.4, 0.3, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[1].default_value = 5.0\n    mapping.inputs[3].default_value = [2.0, 2.0, 0.1]\n    wave_texture.inputs[1].default_value = 1.0\n    bump.inputs[1].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], principled_bsdf.inputs[9])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(musgrave_texture.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], add.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.2\n    principled_bsdf.inputs[12].default_value = 0.1\n    principled_bsdf.inputs[13].default_value = 0.8\n    colorramp.color_ramp.elements[0].color = [1.0, 0.8, 0.5, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.2, 0.2, 0.1, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[3].default_value = [2.0, 1.0, 1.0]\n    musgrave_texture.inputs[1].default_value = 3.0\n    musgrave_texture.inputs[2].default_value = 2.0\n"
]