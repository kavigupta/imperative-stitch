[
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    map_range_2 = nodes.new('ShaderNodeMapRange')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(map_range_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_1.outputs[0], map_range_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(map_range_2.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], map_range_2.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.9\n    mix.inputs[1].default_value = [0.025, 0.011, 0.008, 1.0]\n    mix.inputs[2].default_value = [0.047, 0.076, 0.235, 1.0]\n    map_range.inputs[1].default_value = -1.0\n    map_range.inputs[2].default_value = 0.5\n    noise_texture.inputs[3].default_value = 4.0\n    noise_texture.inputs[4].default_value = 0.2\n    bump.inputs[0].default_value = 0.1\n    map_range_1.inputs[1].default_value = -1.0\n    map_range_1.inputs[2].default_value = 2.0\n    map_range_1.inputs[3].default_value = 0.4\n    map_range_1.inputs[4].default_value = 0.8\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    map_range_2.inputs[1].default_value = 0.45\n    map_range_2.inputs[2].default_value = 0.55\n    noise_texture_2.inputs[2].default_value = 250.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.85\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    subtract = nodes.new('ShaderNodeMath')\n    snap = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    compare = nodes.new('ShaderNodeMath')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(invert.outputs[0], principled_bsdf.inputs[21])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(subtract.outputs[0], colorramp.inputs[0])\n    links.new(snap.outputs[0], subtract.inputs[0])\n    links.new(voronoi_texture_3.outputs[0], subtract.inputs[1])\n    links.new(subtract_1.outputs[0], snap.inputs[0])\n    links.new(voronoi_texture.outputs[0], subtract_1.inputs[0])\n    links.new(compare.outputs[0], subtract_1.inputs[1])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(voronoi_texture_1.outputs[2], musgrave_texture.inputs[4])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], compare.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], compare.inputs[2])\n    links.new(voronoi_texture_2.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_3.inputs[0])\n    links.new(musgrave_texture_1.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(colorramp_1.outputs[0], invert.inputs[1])\n    links.new(subtract.outputs[0], colorramp_1.inputs[0])\n    links.new(voronoi_texture_4.outputs[1], colorramp_2.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_4.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n    links.new(subtract.outputs[0], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.305\n    colorramp.color_ramp.elements[0].color = [0.421, 0.421, 0.421, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.323\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    snap.inputs[1].default_value = -0.68\n    snap.inputs[2].default_value = 0.0\n    snap.operation = 'SNAP'\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    voronoi_texture.inputs[5].default_value = 0.0\n    mapping.inputs[3].default_value = [20.8, 20.8, 20.8]\n    musgrave_texture.inputs[2].default_value = 17.7\n    musgrave_texture.inputs[3].default_value = 10.2\n    compare.operation = 'COMPARE'\n    musgrave_texture_1.inputs[2].default_value = 98.9\n    musgrave_texture_1.inputs[3].default_value = 10.2\n    voronoi_texture_2.inputs[2].default_value = 0.0\n    voronoi_texture_3.inputs[2].default_value = -4.8\n    colorramp_1.color_ramp.elements[0].position = 0.418\n    colorramp_1.color_ramp.elements[1].position = 0.423\n    colorramp_2.color_ramp.elements[0].position = 0.586\n    colorramp_2.color_ramp.elements[1].position = 0.682\n    voronoi_texture_4.inputs[2].default_value = 61.4\n    voronoi_texture_4.inputs[3].default_value = 0.9\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    mapping_1.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.258\n    colorramp_3.color_ramp.elements[0].position = 0.032\n    colorramp_3.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.384\n    colorramp_3.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    tablecloth_red = nodes.new('ShaderNodeGroup')\n    tablecloth_red.node_tree = bpy.data.node_groups['Tablecloth_red']\n\n    # Create links to connect nodes\n    links.new(tablecloth_red.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    tablecloth_red.inputs[3].default_value = 3.42\n    tablecloth_red.inputs[4].default_value = 0.333\n    tablecloth_red.inputs[7].default_value = 0.3\n    tablecloth_red.inputs[10].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    scale = nodes.new('ShaderNodeVectorMath')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    compare = nodes.new('ShaderNodeMath')\n    absolute = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    emission = nodes.new('ShaderNodeEmission')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], multiply.inputs[0])\n    links.new(colorramp_1.outputs[0], multiply.inputs[1])\n    links.new(invert.outputs[0], colorramp.inputs[0])\n    links.new(layer_weight.outputs[1], invert.inputs[1])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], mix.inputs[1])\n    links.new(colorramp_5.outputs[0], mix.inputs[2])\n    links.new(fraction.outputs[0], colorramp_2.inputs[0])\n    links.new(combine_xyz.outputs[0], fraction.inputs[0])\n    links.new(multiply_1.outputs[0], combine_xyz.inputs[0])\n    links.new(colorramp_3.outputs[0], multiply_1.inputs[0])\n    links.new(mix_1.outputs[0], multiply_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[1])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(separate_xyz.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(scale.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add.outputs[0], noise_texture.inputs[1])\n    links.new(invert_1.outputs[0], colorramp_5.inputs[0])\n    links.new(compare.outputs[0], invert_1.inputs[1])\n    links.new(absolute.outputs[0], compare.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], absolute.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mix.outputs[0], emission.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply.use_clamp = True\n    colorramp.color_ramp.elements[1].position = 0.881\n    layer_weight.inputs[0].default_value = 0.72\n    colorramp_1.color_ramp.elements[0].position = 0.108\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    mix.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.elements[1].color = [0.426, 0.497, 1.0, 1.0]\n    fraction.inputs[3].default_value = 3.0\n    fraction.operation = 'FRACTION'\n    multiply_1.inputs[2].default_value = 0.002\n    multiply_1.operation = 'MULTIPLY'\n    multiply_1.use_clamp = True\n    colorramp_3.color_ramp.elements[0].position = 0.508\n    voronoi_texture.inputs[2].default_value = 98.0\n    voronoi_texture.inputs[5].default_value = 0.0\n    voronoi_texture.feature = 'F2'\n    voronoi_texture.voronoi_dimensions = '4D'\n    mapping.inputs[1].default_value = [0.0, 1.0, 0.0]\n    add.inputs[0].default_value = 1.0\n    add.inputs[1].default_value = 1.0\n    add.inputs[2].default_value = 0.0\n    mix_1.inputs[0].default_value = 1.0\n    scale.inputs[3].default_value = 5.0\n    scale.operation = 'SCALE'\n    colorramp_4.color_ramp.elements[0].position = 0.384\n    noise_texture.inputs[2].default_value = -2.2\n    noise_texture.inputs[3].default_value = 10.5\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_5.color_ramp.elements[1].color = [1.0, 0.014, 0.363, 1.0]\n    compare.inputs[1].default_value = 1.2\n    compare.inputs[2].default_value = 0.734\n    compare.operation = 'COMPARE'\n    compare.use_clamp = True\n    absolute.inputs[2].default_value = 0.0\n    absolute.operation = 'ABSOLUTE'\n    absolute.use_clamp = True\n    voronoi_texture_1.inputs[1].default_value = 1.0\n    voronoi_texture_1.inputs[2].default_value = 16.5\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    mapping_1.inputs[3].default_value = [0.5, -1.13, 1.0]\n    emission.inputs[1].default_value = 6.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[2])\n    links.new(fresnel.outputs[0], mix_shader_1.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(translucent_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(multiply.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    fresnel.inputs[0].default_value = 1.0\n    glass_bsdf.inputs[0].default_value = [1.0, 0.587, 0.034, 1.0]\n    glass_bsdf.inputs[2].default_value = 1.0\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.584, 0.034, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply.inputs[0].default_value = 0.3\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    comic_half_tone = nodes.new('ShaderNodeGroup')\n    comic_half_tone.node_tree = bpy.data.node_groups['Comic_Half_Tone']\n\n    # Create links to connect nodes\n    links.new(comic_half_tone.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    comic_half_tone.inputs[1].default_value = [0.829, 0.839, 0.671, 1.0]\n    comic_half_tone.inputs[6].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[1], mix.inputs[1])\n    links.new(noise_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(voronoi_texture.outputs[1], bump_1.inputs[2])\n    links.new(mix_1.outputs[0], displacement.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.15\n    colorramp.color_ramp.elements[1].color = [0.01, 0.01, 0.01, 1.0]\n    mix.inputs[0].default_value = 1.0\n    voronoi_texture.inputs[2].default_value = 2.0\n    voronoi_texture.inputs[3].default_value = 0.35\n    voronoi_texture.feature = 'SMOOTH_F1'\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    colorramp_1.color_ramp.elements[0].color = [0.563, 0.563, 0.563, 1.0]\n    bump.inputs[0].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n    displacement.inputs[2].default_value = 0.25\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb = nodes.new('ShaderNodeRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf_2 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_3 = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader.inputs[2])\n    links.new(principled_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(colorramp_1.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(texture_coordinate_1.outputs[3], mix.inputs[2])\n    links.new(texture_coordinate_1.outputs[3], noise_texture.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_shader_2.inputs[0])\n    links.new(principled_bsdf_2.outputs[0], mix_shader_2.inputs[1])\n    links.new(principled_bsdf_3.outputs[0], mix_shader_2.inputs[2])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_2.outputs[1], mix_1.inputs[1])\n    links.new(texture_coordinate_2.outputs[3], mix_1.inputs[2])\n    links.new(texture_coordinate_2.outputs[3], voronoi_texture_2.inputs[0])\n    links.new(rgb.outputs[0], principled_bsdf_2.inputs[0])\n    links.new(bump_1.outputs[0], principled_bsdf_2.inputs[22])\n    links.new(colorramp_2.outputs[0], bump_1.inputs[2])\n    links.new(rgb.outputs[0], principled_bsdf_3.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    rgb.outputs[0].default_value = [0.179, 0.179, 0.179, 1.0]\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.459\n    colorramp.color_ramp.elements[1].position = 0.595\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 1.47\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump.invert = True\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.141\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 30.0\n    voronoi_texture.inputs[4].default_value = 2.14\n    voronoi_texture.distance = 'MINKOWSKI'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.96\n    noise_texture.inputs[2].default_value = 31.6\n    noise_texture.inputs[3].default_value = 3.7\n    noise_texture.inputs[4].default_value = 0.625\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].position = 0.65\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.668\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[3].default_value = 2.6\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    mix_1.inputs[0].default_value = 0.125\n    voronoi_texture_2.distance = 'MINKOWSKI'\n    principled_bsdf_2.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.583\n    bump_1.invert = True\n    principled_bsdf_3.inputs[6].default_value = 1.0\n    principled_bsdf_3.inputs[9].default_value = 0.009\n    principled_bsdf_3.subsurface_method = 'BURLEY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    less_than = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    rgb = nodes.new('ShaderNodeRGB')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(less_than.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], less_than.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n    links.new(bright_contrast.outputs[0], mix.inputs[2])\n    links.new(rgb.outputs[0], bright_contrast.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    less_than.inputs[1].default_value = 0.25\n    less_than.inputs[2].default_value = 0.0\n    less_than.operation = 'LESS_THAN'\n    voronoi_texture.inputs[2].default_value = 10000.0\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    layer_weight.inputs[0].default_value = 0.9\n    rgb.outputs[0].default_value = [0.953, 0.382, 0.173, 1.0]\n    bright_contrast.inputs[1].default_value = -0.9\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    gradient_particles = nodes.new('ShaderNodeGroup')\n    gradient_particles.node_tree = bpy.data.node_groups['Gradient_Particles']\n\n    # Create links to connect nodes\n    links.new(gradient_particles.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    gradient_particles.inputs[2].default_value = 1.0\n    gradient_particles.inputs[3].default_value = 0.6\n    gradient_particles.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_2 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(colorramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], bump_2.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[1].position = 0.509\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.9\n    colorramp_1.color_ramp.elements[0].position = 0.168\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.035, 0.013, 0.006, 1.0]\n    colorramp_1.color_ramp.elements.new(0.823)\n    colorramp_1.color_ramp.elements[2].color = [0.074, 0.045, 0.035, 1.0]\n    noise_texture_1.inputs[2].default_value = 60.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    noise_texture_1.inputs[4].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.064\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.3\n    bump_1.inputs[0].default_value = 0.15\n    principled_bsdf_1.inputs[0].default_value = [0.195, 0.195, 0.195, 1.0]\n    principled_bsdf_1.inputs[6].default_value = 1.0\n    principled_bsdf_1.inputs[9].default_value = 0.25\n    bump_2.inputs[0].default_value = 0.02\n    noise_texture_2.inputs[2].default_value = 6.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n    glossy_bsdf_2 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(fresnel.outputs[0], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_2.outputs[0], mix_shader.inputs[2])\n    links.new(bump.outputs[0], fresnel.inputs[1])\n    links.new(multiply.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply.inputs[1])\n    links.new(layer_weight.outputs[1], mix_shader_1.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader_1.inputs[2])\n    links.new(bump.outputs[0], layer_weight.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_1.inputs[2])\n    links.new(bump.outputs[0], glossy_bsdf_2.inputs[2])\n\n    # Set parameters for each node\n    fresnel.inputs[0].default_value = 1.7\n    bump.inputs[0].default_value = 0.076\n    bump.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 150.0\n    glossy_bsdf.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.632\n    glossy_bsdf_1.inputs[0].default_value = [0.262, 0.548, 0.8, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.837\n    glossy_bsdf_2.inputs[0].default_value = [0.111, 0.226, 0.326, 1.0]\n    glossy_bsdf_2.inputs[1].default_value = 0.707\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[21])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[20].default_value = 44.1\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.241\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.514\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.832)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mapping.inputs[1].default_value = [0.5, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    mapping.inputs[3].default_value = [0.6, 1.0, 1.2]\n    colorramp_1.color_ramp.elements[1].position = 0.65\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.739)\n    colorramp_1.color_ramp.elements[2].color = [0.032, 0.019, 0.127, 1.0]\n    colorramp_1.color_ramp.elements.new(0.805)\n    colorramp_1.color_ramp.elements[3].color = [0.565, 0.068, 0.095, 1.0]\n    colorramp_1.color_ramp.elements.new(0.878)\n    colorramp_1.color_ramp.elements[4].color = [0.823, 0.171, 0.038, 1.0]\n    colorramp_1.color_ramp.elements.new(0.96)\n    colorramp_1.color_ramp.elements[5].color = [0.922, 0.371, 0.007, 1.0]\n    wave_texture.inputs[1].default_value = -2.1\n    wave_texture.inputs[2].default_value = 10.5\n    wave_texture.inputs[3].default_value = 13.5\n    wave_texture.inputs[4].default_value = 5.1\n    wave_texture.inputs[5].default_value = 0.623\n    mapping_1.inputs[1].default_value = [0.0, 17.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    textured_glow_crystal_glass = nodes.new('ShaderNodeGroup')\n    textured_glow_crystal_glass.node_tree = bpy.data.node_groups['Textured_Glow_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(textured_glow_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(textured_glow_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Faux_Leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    rgb_curves_1 = nodes.new('ShaderNodeRGBCurve')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    rgb_curves_2 = nodes.new('ShaderNodeRGBCurve')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(rgb_curves_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(rgb_curves.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], rgb_curves.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(noise_texture.outputs[0], rgb_curves_1.inputs[1])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_2.outputs[0], rgb_curves_2.inputs[1])\n    links.new(rgb_curves_1.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(mix_1.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[1].default_value = [0.294, 0.294, 0.294, 1.0]\n    mix.inputs[2].default_value = [0.289, 0.269, 0.214, 1.0]\n    mix.blend_type = 'LINEAR_LIGHT'\n    rgb_curves.mapping.curves[3].points[1].location = [0.3, 0.656]\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    mix_1.inputs[0].default_value = 1.0\n    mix_1.blend_type = 'BURN'\n    rgb_curves_1.mapping.curves[3].points[1].location = [0.541, 0.475]\n    rgb_curves_1.mapping.curves[3].points.new(1.0, 1.0)\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.558\n    mapping.inputs[3].default_value = [2.0, 2.0, 2.0]\n    texture_coordinate.from_instancer = True\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.65\n    noise_texture_1.inputs[5].default_value = 1.5\n    rgb_curves_2.mapping.curves[3].points[1].location = [0.664, 0.4]\n    rgb_curves_2.mapping.curves[3].points.new(1.0, 1.0)\n    mix_2.inputs[0].default_value = 1.0\n    mix_2.blend_type = 'OVERLAY'\n    bump.inputs[0].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    emission = nodes.new('ShaderNodeEmission')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    power = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_3 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_4 = nodes.new('ShaderNodeTexVoronoi')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(emission.outputs[0], material_output.inputs[0])\n    links.new(checker_texture.outputs[0], emission.inputs[0])\n    links.new(power.outputs[0], checker_texture.inputs[0])\n    links.new(colorramp.outputs[0], checker_texture.inputs[1])\n    links.new(colorramp_1.outputs[0], checker_texture.inputs[2])\n    links.new(voronoi_texture.outputs[1], power.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], power.inputs[1])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[5])\n    links.new(voronoi_texture_2.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(voronoi_texture_3.outputs[1], voronoi_texture_1.inputs[2])\n    links.new(voronoi_texture_4.outputs[0], voronoi_texture_3.inputs[5])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    emission.inputs[1].default_value = 2.0\n    checker_texture.inputs[3].default_value = 99.0\n    power.inputs[2].default_value = 0.0\n    power.operation = 'POWER'\n    voronoi_texture.inputs[2].default_value = 6.0\n    voronoi_texture.distance = 'CHEBYCHEV'\n    wave_texture.inputs[1].default_value = 0.4\n    wave_texture.inputs[2].default_value = 132.0\n    wave_texture.inputs[3].default_value = 16.0\n    wave_texture.inputs[4].default_value = 1.2\n    wave_texture.inputs[5].default_value = 1.0\n    wave_texture.wave_profile = 'SAW'\n    voronoi_texture_1.inputs[5].default_value = 0.0\n    voronoi_texture_1.distance = 'MANHATTAN'\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 2.77\n    voronoi_texture_2.distance = 'MANHATTAN'\n    voronoi_texture_2.feature = 'F2'\n    voronoi_texture_3.inputs[2].default_value = 5.37\n    voronoi_texture_3.inputs[3].default_value = 0.823\n    voronoi_texture_4.inputs[2].default_value = 49.5\n    voronoi_texture_4.inputs[3].default_value = 0.0\n    voronoi_texture_4.feature = 'SMOOTH_F1'\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].position = 0.102\n    colorramp.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.335\n    colorramp.color_ramp.elements[1].color = [0.003, 0.069, 0.224, 1.0]\n    colorramp.color_ramp.elements.new(0.566)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.714)\n    colorramp.color_ramp.elements[3].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].position = 0.102\n    colorramp_1.color_ramp.elements[0].color = [0.281, 0.0, 0.007, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.151\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.231)\n    colorramp_1.color_ramp.elements[2].color = [0.006, 0.147, 0.444, 1.0]\n    colorramp_1.color_ramp.elements.new(0.281)\n    colorramp_1.color_ramp.elements[3].color = [0.077, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.294)\n    colorramp_1.color_ramp.elements[4].color = [0.08, 0.024, 0.365, 1.0]\n    colorramp_1.color_ramp.elements.new(0.311)\n    colorramp_1.color_ramp.elements[5].color = [0.038, 0.005, 0.056, 1.0]\n    colorramp_1.color_ramp.elements.new(0.421)\n    colorramp_1.color_ramp.elements[6].color = [0.049, 0.003, 0.008, 1.0]\n    colorramp_1.color_ramp.elements.new(0.464)\n    colorramp_1.color_ramp.elements[7].color = [1.0, 0.617, 0.082, 1.0]\n    colorramp_1.color_ramp.elements.new(0.502)\n    colorramp_1.color_ramp.elements[8].color = [0.004, 0.038, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.543)\n    colorramp_1.color_ramp.elements[9].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.604)\n    colorramp_1.color_ramp.elements[10].color = [0.05, 0.208, 0.022, 1.0]\n    colorramp_1.color_ramp.elements.new(0.714)\n    colorramp_1.color_ramp.elements[11].color = [0.103, 0.463, 0.374, 1.0]\n    colorramp_1.color_ramp.elements.new(0.748)\n    colorramp_1.color_ramp.elements[12].color = [0.035, 0.097, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.81)\n    colorramp_1.color_ramp.elements[13].color = [0.515, 0.207, 0.416, 1.0]\n    colorramp_1.color_ramp.elements.new(0.907)\n    colorramp_1.color_ramp.elements[14].color = [0.093, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    rgb = nodes.new('ShaderNodeRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert_1 = nodes.new('ShaderNodeInvert')\n    rgb_to_bw_1 = nodes.new('ShaderNodeRGBToBW')\n    multiply = nodes.new('ShaderNodeMath')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    rgb_to_bw_2 = nodes.new('ShaderNodeRGBToBW')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(rgb.outputs[0], glossy_bsdf.inputs[0])\n    links.new(mix.outputs[0], displacement.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(rgb_to_bw_2.outputs[0], mix.inputs[2])\n    links.new(invert.outputs[0], mix_1.inputs[1])\n    links.new(invert_1.outputs[0], mix_1.inputs[2])\n    links.new(rgb_to_bw.outputs[0], invert.inputs[1])\n    links.new(voronoi_texture.outputs[1], rgb_to_bw.inputs[0])\n    links.new(texture_coordinate.outputs[2], voronoi_texture.inputs[0])\n    links.new(rgb_to_bw_1.outputs[0], invert_1.inputs[1])\n    links.new(multiply.outputs[0], rgb_to_bw_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[2], voronoi_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], rgb_to_bw_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(multiply_1.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.85\n    glossy_bsdf.inputs[1].default_value = 0.424\n    glossy_bsdf.distribution = 'BECKMANN'\n    rgb.outputs[0].default_value = [0.332, 0.153, 0.082, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    mix.inputs[0].default_value = 0.44\n    mix_1.inputs[0].default_value = 0.3\n    voronoi_texture.inputs[2].default_value = 200.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    noise_texture.inputs[3].default_value = 5.0\n    multiply_1.inputs[0].default_value = 200.0\n    multiply_1.inputs[1].default_value = 0.75\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.292, 0.091, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.042\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.007, 0.0, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    add = nodes.new('ShaderNodeMath')\n    add_1 = nodes.new('ShaderNodeMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    add_2 = nodes.new('ShaderNodeMath')\n    wave_texture_2 = nodes.new('ShaderNodeTexWave')\n    wave_texture_3 = nodes.new('ShaderNodeTexWave')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    map_range_1 = nodes.new('ShaderNodeMapRange')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(layer_weight.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(map_range.outputs[0], mix_1.inputs[0])\n    links.new(add.outputs[0], map_range.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[0])\n    links.new(add_2.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], add_1.inputs[0])\n    links.new(wave_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n    links.new(wave_texture_2.outputs[0], add_2.inputs[0])\n    links.new(wave_texture_3.outputs[0], add_2.inputs[1])\n    links.new(mapping.outputs[0], wave_texture_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_3.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(map_range_1.outputs[0], displacement.inputs[0])\n    links.new(add.outputs[0], map_range_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.253\n    principled_bsdf.inputs[12].default_value = 0.269\n    mix.inputs[2].default_value = [0.882, 0.882, 0.882, 1.0]\n    layer_weight.inputs[0].default_value = 0.1\n    mix_1.inputs[1].default_value = [0.04, 0.007, 0.0, 1.0]\n    mix_1.inputs[2].default_value = [0.823, 0.613, 0.257, 1.0]\n    map_range.inputs[1].default_value = 1.2\n    map_range.inputs[2].default_value = 1.7\n    map_range.inputs[3].default_value = -1.0\n    map_range.inputs[4].default_value = 0.9\n    wave_texture.inputs[1].default_value = 20.0\n    mapping.inputs[3].default_value = [4.0, 4.0, 4.0]\n    wave_texture_1.inputs[1].default_value = 20.0\n    wave_texture_1.bands_direction = 'Z'\n    wave_texture_2.inputs[1].default_value = 4.0\n    wave_texture_2.wave_profile = 'SAW'\n    wave_texture_3.inputs[1].default_value = 4.0\n    wave_texture_3.bands_direction = 'Z'\n    wave_texture_3.wave_profile = 'SAW'\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[0].color = [0.1, 0.1, 0.1, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.607, 0.607, 0.607, 1.0]\n    bump.inputs[0].default_value = 0.693\n    noise_texture.inputs[2].default_value = 400.0\n    displacement.inputs[2].default_value = 0.001\n    map_range_1.inputs[1].default_value = 1.1\n    map_range_1.inputs[2].default_value = 0.7\n    map_range_1.inputs[3].default_value = -0.5\n    map_range_1.inputs[4].default_value = 8.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    gamma = nodes.new('ShaderNodeGamma')\n    map_range = nodes.new('ShaderNodeMapRange')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    add_1 = nodes.new('ShaderNodeMath')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[7])\n    links.new(map_range.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(gamma_1.outputs[0], map_range.inputs[0])\n    links.new(voronoi_texture.outputs[1], gamma_1.inputs[0])\n    links.new(add.outputs[0], voronoi_texture.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(subtract.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], multiply.inputs[1])\n    links.new(noise_texture_2.outputs[0], subtract.inputs[0])\n    links.new(musgrave_texture.outputs[0], noise_texture_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(add_1.outputs[0], musgrave_texture.inputs[3])\n    links.new(noise_texture_3.outputs[0], add_1.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[8].default_value = 0.191\n    principled_bsdf.inputs[12].default_value = 0.127\n    principled_bsdf.inputs[13].default_value = 0.514\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.inputs[0].default_value = 0.492\n    mix.blend_type = 'COLOR'\n    colorramp.color_ramp.elements[0].color = [0.521, 0.323, 0.231, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.595\n    colorramp.color_ramp.elements[1].color = [0.262, 0.068, 0.032, 1.0]\n    noise_texture.inputs[2].default_value = 0.59\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.747\n    noise_texture.inputs[5].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 4.8, 1.0]\n    colorramp_1.color_ramp.elements[0].color = [0.521, 0.25, 0.102, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.468\n    colorramp_1.color_ramp.elements[1].color = [0.381, 0.138, 0.058, 1.0]\n    noise_texture_1.inputs[2].default_value = 0.59\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.747\n    noise_texture_1.inputs[5].default_value = 0.7\n    mapping_1.inputs[3].default_value = [1.0, 4.83, 1.0]\n    gamma.inputs[1].default_value = 0.99\n    map_range.inputs[1].default_value = -0.19\n    map_range.inputs[2].default_value = 0.85\n    gamma_1.inputs[1].default_value = 2.89\n    voronoi_texture.inputs[2].default_value = 34.1\n    add.inputs[1].default_value = 27.7\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[1].default_value = 252.0\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    musgrave_texture.inputs[2].default_value = 2.43\n    musgrave_texture.inputs[4].default_value = 0.0\n    musgrave_texture.inputs[5].default_value = 0.0\n    add_1.inputs[1].default_value = 13.2\n    add_1.inputs[2].default_value = 0.0\n    noise_texture_3.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.092\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metallic_camo = nodes.new('ShaderNodeGroup')\n    metallic_camo.node_tree = bpy.data.node_groups['Metallic_Camo']\n\n    # Create links to connect nodes\n    links.new(metallic_camo.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    metallic_camo.inputs[0].default_value = 0.4\n    metallic_camo.inputs[13].default_value = [0.345, 0.32, 0.316, 1.0]\n    metallic_camo.inputs[14].default_value = 0.228\n    metallic_camo.inputs[15].default_value = 0.295\n    metallic_camo.inputs[17].default_value = 0.35\n    metallic_camo.inputs[18].default_value = 0.664\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    bump = nodes.new('ShaderNodeBump')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(layer_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(gamma.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], gamma.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    layer_weight.inputs[0].default_value = 0.15\n    glossy_bsdf.inputs[1].default_value = 0.447\n    glossy_bsdf.distribution = 'BECKMANN'\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].color = [0.438, 0.438, 0.438, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.101, 0.101, 0.101, 1.0]\n    fresnel.inputs[0].default_value = 2.45\n    bump.inputs[0].default_value = 1.2\n    bump.inputs[1].default_value = 0.5\n    gamma.inputs[1].default_value = 9.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.114\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    colorramp_1.color_ramp.elements[1].color = [0.171, 0.171, 0.171, 0.507]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 0.0]\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 1.0\n    noise_texture.inputs[5].default_value = 8.0\n    mapping.inputs[3].default_value = [0.1, 1000.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.658, 0.429, 0.038, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    color_ramp.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp.color_ramp.elements[0].position = 0.3\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.7\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(mix.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(noise_texture_3.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.423\n    colorramp.color_ramp.elements[1].position = 0.445\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 16.0\n    principled_bsdf.inputs[0].default_value = [0.585, 0.585, 0.585, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp_1.color_ramp.elements[0].position = 0.259\n    colorramp_1.color_ramp.elements[0].color = [0.275, 0.275, 0.275, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.675, 0.675, 0.675, 1.0]\n    noise_texture_1.inputs[2].default_value = 20.0\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.75\n    principled_bsdf_1.inputs[0].default_value = [0.8, 0.029, 0.133, 1.0]\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    colorramp_2.color_ramp.elements[0].position = 0.364\n    colorramp_2.color_ramp.elements[0].color = [0.183, 0.183, 0.183, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.65\n    colorramp_2.color_ramp.elements[1].color = [0.494, 0.494, 0.494, 1.0]\n    noise_texture_2.inputs[2].default_value = 10.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    bump.inputs[0].default_value = 0.2\n    bump_1.inputs[0].default_value = 0.05\n    noise_texture_3.inputs[2].default_value = 600.0\n    noise_texture_3.inputs[3].default_value = 16.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['GraniteProcedural']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[9])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.296, 0.227, 0.216, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = 1.0\n    group.inputs[6].default_value = 2.0\n    group.inputs[9].default_value = 1.0\n    group.inputs[16].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.337\n    colorramp.color_ramp.elements[0].color = [0.667, 0.192, 0.029, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.703\n    colorramp.color_ramp.elements[1].color = [0.133, 0.042, 0.009, 1.0]\n    noise_texture.inputs[2].default_value = 1.2\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.84\n    noise_texture.inputs[5].default_value = 5.0\n    mapping.inputs[3].default_value = [3.9, 4.2, 0.1]\n    bump.inputs[0].default_value = 0.373\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate_3 = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_3.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(colorramp_1.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], gradient_texture.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate_2.outputs[3], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_3.inputs[0])\n    links.new(texture_coordinate_3.outputs[3], noise_texture_2.inputs[0])\n    links.new(colorramp_3.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.595\n    colorramp.color_ramp.elements[1].position = 0.6\n    noise_texture.inputs[3].default_value = 10.0\n    colorramp_1.color_ramp.elements[0].position = 0.595\n    colorramp_1.color_ramp.elements[0].color = [1.0, 0.371, 0.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [1.0, 0.0, 0.0, 1.0]\n    gradient_texture.gradient_type = 'QUADRATIC_SPHERE'\n    colorramp_2.color_ramp.elements[0].position = 0.609\n    colorramp_2.color_ramp.elements[1].position = 0.627\n    noise_texture_1.inputs[3].default_value = 10.0\n    colorramp_3.color_ramp.elements[0].position = 0.636\n    noise_texture_2.inputs[3].default_value = 10.0\n    bump.inputs[0].default_value = 0.005\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    mix_shader_3 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_4 = nodes.new('ShaderNodeMixShader')\n    translucent_bsdf_1 = nodes.new('ShaderNodeBsdfTranslucent')\n    mix_shader_5 = nodes.new('ShaderNodeMixShader')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n    translucent_bsdf_2 = nodes.new('ShaderNodeBsdfTranslucent')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    normal_map = nodes.new('ShaderNodeNormalMap')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    glossy_bsdf_1 = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], mix_shader_1.inputs[0])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader_1.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], voronoi_texture.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_2.inputs[0])\n    links.new(mix_shader_3.outputs[0], mix_shader_2.inputs[1])\n    links.new(translucent_bsdf_2.outputs[0], mix_shader_2.inputs[2])\n    links.new(fresnel.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_shader_3.inputs[0])\n    links.new(translucent_bsdf.outputs[0], mix_shader_3.inputs[1])\n    links.new(mix_shader_4.outputs[0], mix_shader_3.inputs[2])\n    links.new(translucent_bsdf_1.outputs[0], mix_shader_4.inputs[1])\n    links.new(mix_shader_5.outputs[0], mix_shader_4.inputs[2])\n    links.new(glass_bsdf.outputs[0], mix_shader_5.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader_5.inputs[2])\n    links.new(normal_map.outputs[0], glossy_bsdf.inputs[2])\n    links.new(voronoi_texture_1.outputs[1], normal_map.inputs[1])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.1\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.209\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.245\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    voronoi_texture.inputs[2].default_value = 200.0\n    voronoi_texture.inputs[4].default_value = 0.7\n    voronoi_texture.distance = 'MINKOWSKI'\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.159\n    colorramp_1.color_ramp.elements[0].color = [0.222, 0.222, 0.222, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.218\n    fresnel.inputs[0].default_value = 2.5\n    translucent_bsdf.inputs[0].default_value = [1.0, 0.486, 0.091, 1.0]\n    translucent_bsdf_1.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.2\n    glass_bsdf.inputs[2].default_value = 1.5\n    transparent_bsdf.inputs[0].default_value = [1.0, 0.238, 0.0, 1.0]\n    translucent_bsdf_2.inputs[0].default_value = [0.772, 0.059, 0.0, 1.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.485, 0.091, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.0\n    normal_map.inputs[0].default_value = 10.0\n    normal_map.space = 'WORLD'\n    voronoi_texture_1.inputs[2].default_value = 200.0\n    voronoi_texture_1.inputs[4].default_value = 0.7\n    voronoi_texture_1.distance = 'MINKOWSKI'\n    glossy_bsdf_1.inputs[0].default_value = [1.0, 0.61, 0.273, 1.0]\n    glossy_bsdf_1.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    divide = nodes.new('ShaderNodeMath')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    multiply = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(diffuse_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], diffuse_bsdf.inputs[1])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(map_range.outputs[0], mix.inputs[2])\n    links.new(ambient_occlusion.outputs[1], map_range.inputs[0])\n    links.new(divide.outputs[0], ambient_occlusion.inputs[1])\n    links.new(fresnel.outputs[0], mix_1.inputs[0])\n    links.new(multiply.outputs[0], mix_1.inputs[2])\n    links.new(subtract.outputs[0], multiply.inputs[1])\n    links.new(multiply_1.outputs[0], subtract.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(mix_2.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix_2.inputs[1])\n    links.new(texture_coordinate.outputs[3], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(multiply_2.outputs[0], noise_texture.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.947, 0.965, 1.0, 1.0]\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    ambient_occlusion.only_local = True\n    divide.inputs[0].default_value = 0.05\n    divide.inputs[1].default_value = 0.75\n    divide.operation = 'DIVIDE'\n    mix_1.inputs[1].default_value = [1.0, 1.0, 1.0, 1.0]\n    multiply.inputs[0].default_value = 1.0\n    multiply.operation = 'MULTIPLY'\n    subtract.inputs[0].default_value = 1.0\n    subtract.operation = 'SUBTRACT'\n    multiply_1.inputs[0].default_value = 0.25\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.operation = 'MULTIPLY'\n    bump.inputs[0].default_value = 0.75\n    bump.inputs[1].default_value = 0.05\n    mix_2.inputs[0].default_value = 0.8\n    noise_texture.inputs[3].default_value = 15.0\n    multiply_2.inputs[0].default_value = 1.0\n    multiply_2.inputs[1].default_value = 10.0\n    multiply_2.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.155\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].color = [0.161, 0.161, 0.161, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.559, 0.559, 0.559, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 82.0\n    wave_texture.inputs[3].default_value = 19.0\n    wave_texture.inputs[5].default_value = 0.823\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], gradient_texture.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(musgrave_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.05\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'CARDINAL'\n    colorramp.color_ramp.elements[0].position = 0.45\n    colorramp.color_ramp.elements[0].color = [0.007, 0.095, 0.434, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.6\n    colorramp.color_ramp.elements[1].color = [0.335, 0.011, 0.004, 1.0]\n    colorramp.color_ramp.elements.new(0.65)\n    colorramp.color_ramp.elements[2].color = [0.339, 0.142, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.8)\n    colorramp.color_ramp.elements[3].color = [0.719, 0.719, 0.719, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.46, 0.46, 0.46, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.145\n    colorramp_1.color_ramp.elements[1].color = [0.574, 0.574, 0.574, 1.0]\n    colorramp_1.color_ramp.elements.new(0.968)\n    colorramp_1.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    mix.inputs[0].default_value = 0.02\n    mix.blend_type = 'BURN'\n    mix_1.inputs[0].default_value = 0.1\n    mix_1.blend_type = 'MULTIPLY'\n    mapping.inputs[1].default_value = [0.35, 0.0, 0.0]\n    noise_texture.inputs[2].default_value = 50.0\n    noise_texture.inputs[5].default_value = 10.0\n    musgrave_texture.inputs[2].default_value = 25.0\n    musgrave_texture.inputs[3].default_value = 15.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(colorramp_1.outputs[0], mix.inputs[2])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(musgrave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.75\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.005\n    colorramp.color_ramp.elements[0].color = [0.312, 0.312, 0.312, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.741\n    colorramp.color_ramp.elements[1].color = [0.107, 0.107, 0.107, 1.0]\n    musgrave_texture.inputs[2].default_value = 1.0\n    musgrave_texture.inputs[3].default_value = 16.0\n    musgrave_texture.inputs[4].default_value = 0.0\n    colorramp_1.color_ramp.elements[0].position = 0.264\n    colorramp_1.color_ramp.elements[0].color = [0.02, 0.02, 0.02, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.514\n    noise_texture.inputs[2].default_value = 1.5\n    noise_texture.inputs[3].default_value = 4.5\n    noise_texture.inputs[4].default_value = 0.742\n    bump.inputs[0].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['CarPaintMaterial']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[0], group.inputs[0])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    less_than = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(colorramp.outputs[0], multiply_1.inputs[0])\n    links.new(less_than.outputs[0], multiply_1.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(separate_xyz.outputs[2], less_than.inputs[0])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[3])\n    links.new(separate_xyz.outputs[2], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[1].default_value = 8.47\n    multiply.operation = 'MULTIPLY'\n    multiply_1.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].position = 0.118\n    colorramp.color_ramp.elements[1].position = 0.773\n    musgrave_texture.inputs[2].default_value = 14.9\n    less_than.inputs[1].default_value = 0.85\n    less_than.operation = 'LESS_THAN'\n    principled_bsdf.inputs[1].default_value = 0.02\n    principled_bsdf.inputs[2].default_value = [0.01, 0.1, 0.1]\n    principled_bsdf.inputs[4].default_value = 0.0\n    principled_bsdf.inputs[7].default_value = 0.0\n    principled_bsdf.inputs[9].default_value = 2.0\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.inputs[16].default_value = 1.3\n    principled_bsdf.inputs[20].default_value = 0.0\n    colorramp_1.color_ramp.interpolation = 'B_SPLINE'\n    colorramp_1.color_ramp.elements[0].position = 0.912\n    colorramp_1.color_ramp.elements[0].color = [0.062, 0.52, 0.196, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.934\n    colorramp_1.color_ramp.elements[1].color = [0.89, 0.064, 0.038, 1.0]\n    diffuse_bsdf.inputs[0].default_value = [0.062, 0.52, 0.223, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 0.721\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    divide = nodes.new('ShaderNodeMath')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    divide_1 = nodes.new('ShaderNodeMath')\n    map_range = nodes.new('ShaderNodeMapRange')\n    musgrave_texture_2 = nodes.new('ShaderNodeTexMusgrave')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    add_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], add.inputs[0])\n    links.new(divide.outputs[0], add.inputs[1])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp_2.outputs[0], divide.inputs[0])\n    links.new(divide_1.outputs[0], divide.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(map_range.outputs[0], divide_1.inputs[0])\n    links.new(colorramp_3.outputs[0], divide_1.inputs[1])\n    links.new(musgrave_texture_2.outputs[0], map_range.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_2.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(add_1.outputs[0], displacement.inputs[0])\n    links.new(voronoi_texture.outputs[0], add_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[0], add_1.inputs[1])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture_1.outputs[1], mix.inputs[1])\n    links.new(mapping_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(mapping.outputs[0], mapping_1.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[3].default_value = [0.0, 0.0, 0.0, 1.0]\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.505\n    colorramp.color_ramp.elements[1].color = [0.939, 0.624, 0.053, 1.0]\n    add.use_clamp = True\n    colorramp_1.color_ramp.elements[0].position = 0.377\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.436\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    musgrave_texture.inputs[2].default_value = 74.7\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 5.0\n    musgrave_texture.inputs[5].default_value = 3.0\n    musgrave_texture.musgrave_type = 'MULTIFRACTAL'\n    mapping.inputs[3].default_value = [6.0, 6.0, 6.0]\n    divide.operation = 'DIVIDE'\n    divide.use_clamp = True\n    colorramp_2.color_ramp.elements[0].position = 0.491\n    colorramp_2.color_ramp.elements[1].position = 0.6\n    musgrave_texture_1.inputs[2].default_value = 16.9\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 5.0\n    musgrave_texture_1.inputs[5].default_value = 3.0\n    musgrave_texture_1.musgrave_type = 'MULTIFRACTAL'\n    divide_1.operation = 'DIVIDE'\n    divide_1.use_clamp = True\n    map_range.inputs[3].default_value = 1.0\n    map_range.interpolation_type = 'SMOOTHERSTEP'\n    musgrave_texture_2.inputs[2].default_value = 2.4\n    musgrave_texture_2.inputs[3].default_value = 15.0\n    musgrave_texture_2.inputs[4].default_value = 5.0\n    musgrave_texture_2.inputs[5].default_value = 3.0\n    colorramp_3.color_ramp.elements[0].position = 0.591\n    colorramp_3.color_ramp.elements[1].position = 0.768\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 0.6\n    displacement.inputs[2].default_value = 0.005\n    voronoi_texture.inputs[2].default_value = 122.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mix.inputs[0].default_value = 0.275\n    noise_texture_1.inputs[2].default_value = 2.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    mapping_1.inputs[3].default_value = [0.1, 0.1, 0.1]\n    voronoi_texture_1.inputs[2].default_value = 27.6\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    musgrave_texture_1 = nodes.new('ShaderNodeTexMusgrave')\n    bump = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(musgrave_texture.outputs[0], principled_bsdf.inputs[7])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], musgrave_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_1.inputs[1])\n    links.new(musgrave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], musgrave_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(colorramp_1.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.95\n    mix.inputs[1].default_value = [0.008, 0.002, 0.001, 1.0]\n    mix.inputs[2].default_value = [0.5, 0.118, 0.032, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.8\n    musgrave_texture.inputs[2].default_value = 2.0\n    musgrave_texture.inputs[3].default_value = 15.0\n    musgrave_texture.inputs[4].default_value = 0.3\n    musgrave_texture.inputs[6].default_value = 0.025\n    musgrave_texture.inputs[7].default_value = 120.0\n    musgrave_texture.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    musgrave_texture_1.inputs[2].default_value = 2.0\n    musgrave_texture_1.inputs[3].default_value = 15.0\n    musgrave_texture_1.inputs[4].default_value = 0.3\n    musgrave_texture_1.inputs[6].default_value = 0.025\n    musgrave_texture_1.inputs[7].default_value = 120.0\n    musgrave_texture_1.musgrave_type = 'RIDGED_MULTIFRACTAL'\n    bump.inputs[0].default_value = 0.1\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.01\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], colorramp_1.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], voronoi_texture.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.01\n    principled_bsdf.inputs[2].default_value = [1.0, 1.0, 1.0]\n    principled_bsdf.inputs[3].default_value = [0.8, 0.11, 0.008, 1.0]\n    principled_bsdf.inputs[6].default_value = 0.5\n    principled_bsdf.inputs[7].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.491\n    colorramp.color_ramp.elements[0].color = [0.019, 0.011, 0.009, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.5\n    colorramp.color_ramp.elements[1].color = [0.002, 0.001, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.573)\n    colorramp.color_ramp.elements[2].color = [0.009, 0.006, 0.006, 1.0]\n    colorramp.color_ramp.elements.new(0.577)\n    colorramp.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 1.0\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.327, 0.327, 0.327, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.018\n    colorramp_1.color_ramp.elements[1].color = [0.735, 0.735, 0.735, 1.0]\n    bump.inputs[0].default_value = 0.4\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'DIVIDE'\n    noise_texture_1.inputs[2].default_value = 1.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    colorramp_2.color_ramp.elements[0].position = 0.729\n    colorramp_2.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.805\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_2.inputs[2].default_value = 70.0\n    noise_texture_2.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply_1 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[19])\n    links.new(multiply_1.outputs[0], principled_bsdf.inputs[20])\n    links.new(brick_texture.outputs[1], principled_bsdf.inputs[21])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(add.outputs[0], brick_texture.inputs[5])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    brick_texture.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    brick_texture.inputs[3].default_value = [0.0, 0.327, 1.0, 1.0]\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    add.inputs[1].default_value = 0.01\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[1].default_value = 0.02\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 10.0\n    noise_texture.inputs[3].default_value = 3.0\n    mix.inputs[0].default_value = 0.119\n    mix.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.168\n    colorramp.color_ramp.elements[0].color = [0.001, 0.757, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.782\n    colorramp.color_ramp.elements[1].color = [0.305, 0.338, 1.0, 1.0]\n    multiply_1.inputs[1].default_value = 10.0\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], colorramp_1.inputs[0])\n    links.new(colorramp_2.outputs[0], displacement.inputs[2])\n    links.new(mix.outputs[0], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[1].default_value = 0.109\n    principled_bsdf.inputs[20].default_value = 0.2\n    colorramp.color_ramp.elements[0].position = 0.482\n    colorramp.color_ramp.elements[0].color = [1.0, 0.967, 0.941, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.986\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'OVERLAY'\n    noise_texture.inputs[2].default_value = 10.5\n    noise_texture.inputs[3].default_value = 9.9\n    noise_texture.inputs[4].default_value = 0.583\n    colorramp_1.color_ramp.elements[0].position = 0.473\n    colorramp_1.color_ramp.elements[1].position = 0.986\n    displacement.inputs[0].default_value = 0.6\n    colorramp_2.color_ramp.elements[0].color = [0.077, 0.059, 0.146, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.818\n    colorramp_2.color_ramp.elements[1].color = [0.922, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    color_ramp_2 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], color_ramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(color_ramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(color_ramp_1.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(noise_texture_1.outputs[0], color_ramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(color_ramp_2.outputs[0], bump_2.inputs[2])\n    links.new(wave_texture.outputs[0], color_ramp_2.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.038, 0.09, 0.22, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    color_ramp.color_ramp.elements[0].position = 0.25\n    noise_texture.inputs[2].default_value = 0.3\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.625\n    bump.inputs[0].default_value = 0.1\n    bump.inputs[1].default_value = 0.1\n    bump_1.inputs[0].default_value = 0.5\n    bump_1.inputs[1].default_value = 0.1\n    bump_1.invert = True\n    color_ramp_1.color_ramp.interpolation = 'EASE'\n    color_ramp_1.color_ramp.elements[0].position = 0.55\n    noise_texture_1.inputs[2].default_value = 10.0\n    noise_texture_1.inputs[3].default_value = 14.5\n    noise_texture_1.inputs[5].default_value = 1.0\n    bump_2.inputs[0].default_value = 0.07\n    bump_2.inputs[1].default_value = 0.1\n    bump_2.invert = True\n    color_ramp_2.color_ramp.elements[0].position = 0.85\n    wave_texture.inputs[1].default_value = 200.0\n    wave_texture.inputs[2].default_value = 14.5\n    wave_texture.inputs[3].default_value = 14.5\n    wave_texture.inputs[4].default_value = 2.5\n    wave_texture.inputs[5].default_value = 0.75\n    wave_texture.bands_direction = 'Z'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    granite_blue = nodes.new('ShaderNodeGroup')\n    granite_blue.node_tree = bpy.data.node_groups['Granite_Blue']\n    add = nodes.new('ShaderNodeVectorMath')\n    multiply = nodes.new('ShaderNodeVectorMath')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_1 = nodes.new('ShaderNodeVectorMath')\n    combine_xyz = nodes.new('ShaderNodeCombineXYZ')\n    combine_xyz_1 = nodes.new('ShaderNodeCombineXYZ')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    multiply_2 = nodes.new('ShaderNodeVectorMath')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(granite_blue.outputs[0], principled_bsdf.inputs[0])\n    links.new(granite_blue.outputs[1], principled_bsdf.inputs[9])\n    links.new(granite_blue.outputs[2], principled_bsdf.inputs[22])\n    links.new(add.outputs[0], granite_blue.inputs[0])\n    links.new(rgb_to_bw.outputs[0], granite_blue.inputs[1])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(add_1.outputs[0], add.inputs[1])\n    links.new(wave_texture.outputs[0], multiply.inputs[0])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(noise_texture.outputs[1], mix.inputs[1])\n    links.new(mapping.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(multiply_1.outputs[0], mapping.inputs[3])\n    links.new(combine_xyz.outputs[0], multiply_1.inputs[0])\n    links.new(combine_xyz_1.outputs[0], multiply_1.inputs[1])\n    links.new(multiply_2.outputs[0], add_1.inputs[0])\n    links.new(mapping.outputs[0], add_1.inputs[1])\n    links.new(noise_texture.outputs[1], multiply_2.inputs[0])\n    links.new(colorramp.outputs[0], rgb_to_bw.inputs[0])\n    links.new(add.outputs[0], colorramp.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    granite_blue.inputs[3].default_value = 0.48\n    granite_blue.inputs[4].default_value = [0.035, 0.032, 0.058, 1.0]\n    granite_blue.inputs[5].default_value = 0.08\n    granite_blue.inputs[6].default_value = 0.3\n    granite_blue.inputs[7].default_value = [0.017, 0.035, 0.031, 1.0]\n    granite_blue.inputs[8].default_value = 0.04\n    granite_blue.inputs[9].default_value = 0.1\n    multiply.inputs[1].default_value = [0.02, 0.02, 0.02]\n    multiply.operation = 'MULTIPLY'\n    wave_texture.inputs[1].default_value = 4.0\n    wave_texture.inputs[2].default_value = 0.3\n    wave_texture.inputs[4].default_value = 0.0\n    wave_texture.inputs[5].default_value = 0.523\n    mix.inputs[0].default_value = 0.0\n    noise_texture.inputs[2].default_value = 3.0\n    noise_texture.inputs[3].default_value = 5.2\n    noise_texture.inputs[4].default_value = 0.425\n    noise_texture.inputs[5].default_value = 0.2\n    mapping.inputs[1].default_value = [12.0, -12.0, -3.0]\n    mapping.inputs[2].default_value = [-0.279, 0.332, 0.777]\n    multiply_1.operation = 'MULTIPLY'\n    combine_xyz.inputs[0].default_value = 0.6\n    combine_xyz.inputs[1].default_value = 0.4\n    combine_xyz.inputs[2].default_value = 1.0\n    combine_xyz_1.inputs[0].default_value = 1.0\n    combine_xyz_1.inputs[1].default_value = 1.0\n    combine_xyz_1.inputs[2].default_value = 1.0\n    multiply_2.inputs[1].default_value = [0.05, 0.05, 0.05]\n    multiply_2.operation = 'MULTIPLY'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.8, 0.8, 0.8, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Old_brass']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[1], principled_bsdf.inputs[7])\n    links.new(group.outputs[2], principled_bsdf.inputs[9])\n    links.new(group.outputs[3], principled_bsdf.inputs[22])\n    links.new(texture_coordinate.outputs[2], group.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], wave_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    group.inputs[1].default_value = [1.0, 1.0, 1.0]\n    displacement.inputs[2].default_value = 0.02\n    colorramp.color_ramp.interpolation = 'B_SPLINE'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[1].position = 0.345\n    colorramp.color_ramp.elements[1].color = [0.137, 0.137, 0.137, 1.0]\n    colorramp.color_ramp.elements.new(0.95)\n    colorramp.color_ramp.elements[2].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements.new(0.964)\n    colorramp.color_ramp.elements[3].color = [0.239, 0.239, 0.239, 1.0]\n    mix.inputs[0].default_value = 1.0\n    mix.blend_type = 'BURN'\n    wave_texture.inputs[1].default_value = 3.0\n    wave_texture.bands_direction = 'Y'\n    wave_texture.wave_profile = 'SAW'\n    wave_texture_1.inputs[1].default_value = 6.0\n    wave_texture_1.inputs[2].default_value = 60.0\n    wave_texture_1.bands_direction = 'Y'\n    wave_texture_1.wave_profile = 'SAW'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply_add = nodes.new('ShaderNodeMath')\n    wrap = nodes.new('ShaderNodeMath')\n    add = nodes.new('ShaderNodeMath')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    bump = nodes.new('ShaderNodeBump')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(multiply_add.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(wrap.outputs[0], multiply_add.inputs[0])\n    links.new(light_path.outputs[10], multiply_add.inputs[1])\n    links.new(mix.outputs[0], multiply_add.inputs[2])\n    links.new(add.outputs[0], wrap.inputs[0])\n    links.new(light_path.outputs[2], wrap.inputs[1])\n    links.new(light_path.outputs[3], add.inputs[0])\n    links.new(light_path.outputs[5], add.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[0])\n    links.new(noise_texture.outputs[0], mix.inputs[1])\n    links.new(geometry.outputs[7], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], noise_texture.inputs[0])\n    links.new(gradient_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(multiply_add.outputs[0], glossy_bsdf.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    multiply_add.operation = 'MULTIPLY_ADD'\n    wrap.inputs[2].default_value = 0.1\n    wrap.operation = 'WRAP'\n    add.inputs[2].default_value = 0.0\n    mix.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.473\n    colorramp.color_ramp.elements[1].position = 0.682\n    noise_texture.inputs[2].default_value = 7.7\n    noise_texture.inputs[3].default_value = 12.2\n    noise_texture.inputs[4].default_value = 0.558\n    noise_texture.inputs[5].default_value = 170.0\n    colorramp_1.color_ramp.elements[0].color = [0.003, 0.003, 0.003, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    glossy_bsdf.inputs[0].default_value = [1.0, 0.432, 0.085, 1.0]\n    glossy_bsdf.distribution = 'BECKMANN'\n    bump.inputs[0].default_value = 0.075\n    bump.inputs[1].default_value = 0.05\n    diffuse_bsdf.inputs[0].default_value = [0.217, 0.076, 0.022, 1.0]\n    diffuse_bsdf.inputs[1].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    decorative_glass = nodes.new('ShaderNodeGroup')\n    decorative_glass.node_tree = bpy.data.node_groups['Decorative_Glass_002']\n\n    # Create links to connect nodes\n    links.new(decorative_glass.outputs[0], material_output.inputs[0])\n    links.new(decorative_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    \n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    voronoi_texture_2 = nodes.new('ShaderNodeTexVoronoi')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(checker_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[1], mix_2.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], mix_2.inputs[1])\n    links.new(voronoi_texture_2.outputs[1], mix_2.inputs[2])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_2.inputs[0])\n    links.new(noise_texture.outputs[1], checker_texture.inputs[0])\n    links.new(mapping_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping_1.outputs[0], mapping_2.inputs[0])\n    links.new(mix.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.552, 0.552, 0.552, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.2\n    colorramp.color_ramp.elements[1].position = 0.836\n    mix.inputs[0].default_value = 0.333\n    mix.blend_type = 'MULTIPLY'\n    mix_1.blend_type = 'SUBTRACT'\n    mix_2.blend_type = 'SCREEN'\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [20.9, 20.9, 20.9]\n    voronoi_texture_1.inputs[2].default_value = 32.1\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_2.inputs[2].default_value = 72.6\n    voronoi_texture_2.feature = 'SMOOTH_F1'\n    checker_texture.inputs[1].default_value = [0.8, 0.8, 0.8, 1.0]\n    checker_texture.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    checker_texture.inputs[3].default_value = 93.2\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 1.0\n    mapping_2.inputs[3].default_value = [59.0, 1.0, 1.0]\n    bump.inputs[0].default_value = 0.117\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    color_ramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(color_ramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(color_ramp_1.outputs[0], principled_bsdf.inputs[19])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(color_ramp_1.outputs[0], color_ramp.inputs[0])\n    links.new(wave_texture.outputs[1], color_ramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], wave_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.02, 0.003, 0.0, 1.0]\n    color_ramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.048\n    color_ramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    color_ramp_1.color_ramp.interpolation = 'B_SPLINE'\n    color_ramp_1.color_ramp.elements[0].position = 0.17\n    color_ramp_1.color_ramp.elements[1].position = 0.655\n    color_ramp_1.color_ramp.elements[1].color = [0.0, 0.05, 0.004, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.791)\n    color_ramp_1.color_ramp.elements[2].color = [0.0, 0.1, 0.007, 1.0]\n    color_ramp_1.color_ramp.elements.new(0.918)\n    color_ramp_1.color_ramp.elements[3].color = [0.0, 0.15, 0.011, 1.0]\n    color_ramp_1.color_ramp.elements.new(1.0)\n    color_ramp_1.color_ramp.elements[4].color = [0.0, 0.363, 0.026, 1.0]\n    wave_texture.inputs[1].default_value = 2.0\n    wave_texture.inputs[2].default_value = 8.0\n    wave_texture.inputs[3].default_value = 15.0\n    wave_texture.inputs[5].default_value = 0.25\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.45\n    noise_texture.inputs[5].default_value = 0.15\n    noise_texture.noise_dimensions = '4D'\n    bump.inputs[0].default_value = 0.65\n    bump.inputs[1].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    wood_floor = nodes.new('ShaderNodeGroup')\n    wood_floor.node_tree = bpy.data.node_groups['wood_floor']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(wood_floor.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[2], wood_floor.inputs[27])\n\n    # Set parameters for each node\n    wood_floor.inputs[0].default_value = [0.1, 0.1, 0.1, 1.0]\n    wood_floor.inputs[4].default_value = 0.02\n    wood_floor.inputs[5].default_value = 0.0\n    wood_floor.inputs[19].default_value = 0.5\n    wood_floor.inputs[21].default_value = 1.0\n    wood_floor.inputs[22].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    fresnel = nodes.new('ShaderNodeFresnel')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    musgrave_texture = nodes.new('ShaderNodeTexMusgrave')\n\n    # Create links to connect nodes\n    links.new(glossy_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(colorramp.outputs[0], glossy_bsdf.inputs[0])\n    links.new(fresnel.outputs[0], colorramp.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n    links.new(musgrave_texture.outputs[0], voronoi_texture.inputs[0])\n\n    # Set parameters for each node\n    glossy_bsdf.inputs[1].default_value = 0.0\n    colorramp.color_ramp.elements[1].position = 0.195\n    fresnel.inputs[0].default_value = 2.0\n    displacement.inputs[2].default_value = 0.02\n    voronoi_texture.inputs[2].default_value = 16.0\n    voronoi_texture.distance = 'MANHATTAN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    transparent_bsdf = nodes.new('ShaderNodeBsdfTransparent')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(invert.outputs[0], mix_shader.inputs[0])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(transparent_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping_1.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.455\n    colorramp.color_ramp.elements[1].position = 0.55\n    noise_texture.inputs[2].default_value = 20.0\n    noise_texture.inputs[3].default_value = 4.1\n    noise_texture.inputs[4].default_value = 0.667\n    noise_texture.inputs[5].default_value = 0.15\n    mapping.inputs[1].default_value = [2.7, 0.0, 0.0]\n    mapping.inputs[2].default_value = [0.063, 0.0, 0.0]\n    mapping.inputs[3].default_value = [0.2, 0.2, 0.5]\n    emission.inputs[1].default_value = 1.1\n    colorramp_1.color_ramp.elements[0].position = 0.482\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.568\n    colorramp_1.color_ramp.elements[1].color = [0.634, 0.856, 1.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 10.4\n    noise_texture_1.inputs[3].default_value = 6.5\n    noise_texture_1.inputs[4].default_value = 0.533\n    noise_texture_1.inputs[5].default_value = 1.3\n    mapping_1.inputs[1].default_value = [-1.29, 6.1, 3.6]\n    mapping_1.inputs[2].default_value = [0.079, 0.026, 0.0]\n    mapping_1.inputs[3].default_value = [-3.6, 0.4, 1.3]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['WO_Wood_Procedural_Smooth']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = 80.0\n    group.inputs[3].default_value = 5.0\n    group.inputs[5].default_value = [0.516, 0.162, 0.057, 1.0]\n    group.inputs[11].default_value = 0.6\n    group.inputs[12].default_value = 20.0\n    group.inputs[14].default_value = 0.08\n    group.inputs[15].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Road']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.113, 0.137, 0.157, 1.0]\n    group.inputs[2].default_value = [0.241, 0.271, 0.297, 1.0]\n    group.inputs[4].default_value = [0.09, 0.115, 0.171, 1.0]\n    group.inputs[6].default_value = 5.0\n    group.inputs[7].default_value = 4.0\n    group.inputs[8].default_value = 5.0\n    group.inputs[9].default_value = 7.6\n    group.inputs[10].default_value = [0.215, 0.123, 0.074, 1.0]\n    group.inputs[11].default_value = [0.26, 0.294, 0.334, 1.0]\n    group.inputs[12].default_value = [0.1, 0.064, 0.012, 1.0]\n    group.inputs[13].default_value = 0.4\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['alpha_metal_with_scratch_001']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.541, 0.424, 0.223, 1.0]\n    group.inputs[9].default_value = 0.073\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    rusty_metal = nodes.new('ShaderNodeGroup')\n    rusty_metal.node_tree = bpy.data.node_groups['Rusty_Metal']\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb = nodes.new('ShaderNodeRGB')\n\n    # Create links to connect nodes\n    links.new(rusty_metal.outputs[0], material_output.inputs[0])\n    links.new(rusty_metal.outputs[1], material_output.inputs[2])\n    links.new(mix.outputs[0], rusty_metal.inputs[0])\n    links.new(rgb.outputs[0], mix.inputs[1])\n\n    # Set parameters for each node\n    rusty_metal.inputs[16].default_value = 0.1\n    rusty_metal.inputs[21].default_value = 0.15\n    rusty_metal.inputs[22].default_value = 1.1\n    rusty_metal.inputs[24].default_value = 0.15\n    rusty_metal.inputs[25].default_value = 0.218\n    rusty_metal.inputs[28].default_value = 1.0\n    mix.inputs[0].default_value = 0.15\n    mix.inputs[2].default_value = [1.0, 1.0, 1.0, 1.0]\n    rgb.outputs[0].default_value = [0.356, 0.337, 0.296, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    add = nodes.new('ShaderNodeMath')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    add_1 = nodes.new('ShaderNodeVectorMath')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    subtract = nodes.new('ShaderNodeMath')\n    subtract_1 = nodes.new('ShaderNodeMath')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(add.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], add.inputs[0])\n    links.new(brick_texture.outputs[0], add.inputs[1])\n    links.new(noise_texture.outputs[0], multiply.inputs[0])\n    links.new(add_1.outputs[0], brick_texture.inputs[0])\n    links.new(mapping.outputs[0], add_1.inputs[0])\n    links.new(multiply_1.outputs[0], add_1.inputs[1])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_1.inputs[0])\n    links.new(subtract.outputs[0], bump.inputs[2])\n    links.new(subtract_1.outputs[0], subtract.inputs[0])\n    links.new(noise_texture_2.outputs[0], subtract.inputs[1])\n    links.new(brick_texture.outputs[1], subtract_1.inputs[1])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.05\n    diffuse_bsdf.inputs[1].default_value = 0.4\n    colorramp.color_ramp.elements[0].position = 0.014\n    colorramp.color_ramp.elements[0].color = [0.072, 0.069, 0.07, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.022\n    colorramp.color_ramp.elements[1].color = [0.089, 0.013, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.511)\n    colorramp.color_ramp.elements[2].color = [0.106, 0.009, 0.005, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [0.271, 0.088, 0.0, 1.0]\n    add.inputs[2].default_value = 0.0\n    multiply.inputs[1].default_value = 0.01\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 67.1\n    brick_texture.inputs[4].default_value = 0.8\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 0.0\n    brick_texture.inputs[8].default_value = 0.4\n    brick_texture.inputs[9].default_value = 0.4\n    brick_texture.offset = 0.0\n    brick_texture.offset_frequency = 1\n    brick_texture.squash_frequency = 1\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    multiply_1.inputs[1].default_value = 0.03\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    noise_texture_1.inputs[2].default_value = 17.5\n    bump.inputs[0].default_value = 0.2\n    bump.inputs[1].default_value = 0.1\n    subtract.inputs[2].default_value = 0.0\n    subtract.operation = 'SUBTRACT'\n    subtract_1.inputs[0].default_value = 1.0\n    subtract_1.inputs[2].default_value = 0.0\n    subtract_1.operation = 'SUBTRACT'\n    subtract_1.use_clamp = True\n    noise_texture_2.inputs[2].default_value = 11.3\n    glossy_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    glossy_bsdf.inputs[1].default_value = 0.316\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    light_path = nodes.new('ShaderNodeLightPath')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    mix_shader_2 = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(light_path.outputs[5], mix_shader.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(mix_shader_2.outputs[0], mix_shader_1.inputs[1])\n    links.new(noise_texture.outputs[0], mix_shader_2.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader_2.inputs[1])\n    links.new(noise_texture.outputs[1], glossy_bsdf.inputs[0])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 9.5\n    noise_texture.inputs[5].default_value = 4.8\n    glossy_bsdf.inputs[1].default_value = 0.224\n    glossy_bsdf.distribution = 'BECKMANN'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    scratched_glass_crystal = nodes.new('ShaderNodeGroup')\n    scratched_glass_crystal.node_tree = bpy.data.node_groups['Scratched_Glass_Crystal']\n\n    # Create links to connect nodes\n    links.new(scratched_glass_crystal.outputs[0], material_output.inputs[0])\n    links.new(scratched_glass_crystal.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    scratched_glass_crystal.inputs[0].default_value = [0.969, 1.0, 1.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    multiply_add = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_2.outputs[0], principled_bsdf.inputs[6])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(multiply_add.outputs[0], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[0], multiply_add.inputs[0])\n    links.new(noise_texture_1.outputs[0], multiply_add.inputs[1])\n    links.new(noise_texture_2.outputs[0], multiply_add.inputs[2])\n    links.new(texture_coordinate.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[0], noise_texture_2.inputs[0])\n    links.new(colorramp_1.outputs[0], colorramp_2.inputs[0])\n    links.new(multiply_add.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.573\n    principled_bsdf.inputs[8].default_value = 0.173\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.214\n    colorramp.color_ramp.elements[0].color = [0.002, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.241\n    colorramp.color_ramp.elements[1].color = [0.003, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements.new(0.468)\n    colorramp.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.509)\n    colorramp.color_ramp.elements[3].color = [0.001, 0.001, 0.001, 1.0]\n    colorramp.color_ramp.elements.new(0.841)\n    colorramp.color_ramp.elements[4].color = [0.002, 0.002, 0.002, 1.0]\n    colorramp.color_ramp.elements.new(0.991)\n    colorramp.color_ramp.elements[5].color = [0.008, 0.008, 0.007, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.161\n    colorramp_1.color_ramp.elements[1].position = 0.186\n    colorramp_1.color_ramp.elements.new(0.318)\n    colorramp_1.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.559)\n    colorramp_1.color_ramp.elements[3].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[4].color = [0.83, 0.83, 0.83, 1.0]\n    multiply_add.operation = 'MULTIPLY_ADD'\n    noise_texture.inputs[2].default_value = 8.5\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture_1.inputs[2].default_value = 18.9\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.inputs[4].default_value = 0.533\n    noise_texture_2.inputs[2].default_value = 4.2\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.inputs[4].default_value = 0.383\n    colorramp_2.color_ramp.elements[0].position = 0.409\n    colorramp_2.color_ramp.elements[0].color = [0.83, 0.83, 0.83, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.632\n    colorramp_2.color_ramp.elements[1].color = [0.522, 0.522, 0.522, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.515\n    colorramp.color_ramp.elements[0].color = [0.044, 0.02, 0.013, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.544\n    colorramp.color_ramp.elements[1].color = [0.423, 0.171, 0.067, 1.0]\n    colorramp.color_ramp.elements.new(0.587)\n    colorramp.color_ramp.elements[2].color = [0.352, 0.112, 0.023, 1.0]\n    noise_texture.inputs[2].default_value = 2.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.7\n    noise_texture.inputs[5].default_value = 0.7\n    mapping.inputs[3].default_value = [1.0, 1.0, 20.0]\n    colorramp_1.color_ramp.elements[0].color = [0.055, 0.055, 0.055, 1.0]\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], mix.inputs[1])\n    links.new(bump_1.outputs[0], mix.inputs[2])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(noise_texture_1.outputs[0], bump_1.inputs[2])\n    links.new(noise_texture_2.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.057, 0.057, 0.057, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.63\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.1\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.8\n    bump_1.inputs[0].default_value = 0.15\n    noise_texture_1.inputs[2].default_value = 2.5\n    displacement.inputs[2].default_value = 0.1\n    noise_texture_2.inputs[2].default_value = 1.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    bright_contrast = nodes.new('ShaderNodeBrightContrast')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(noise_texture.outputs[1], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[9])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[14])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bright_contrast.outputs[0], gamma.inputs[0])\n    links.new(noise_texture_1.outputs[1], bright_contrast.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n    links.new(gamma.outputs[0], principled_bsdf_1.inputs[9])\n    links.new(gamma.outputs[0], principled_bsdf_1.inputs[14])\n    links.new(bump_1.outputs[0], principled_bsdf_1.inputs[22])\n    links.new(noise_texture_1.outputs[1], bump_1.inputs[2])\n\n    # Set parameters for each node\n    noise_texture.inputs[2].default_value = 131.0\n    noise_texture.inputs[3].default_value = 16.0\n    noise_texture.inputs[4].default_value = 0.772\n    principled_bsdf.inputs[0].default_value = [0.114, 0.138, 0.136, 1.0]\n    principled_bsdf.subsurface_method = 'BURLEY'\n    gamma.inputs[1].default_value = 2.2\n    bright_contrast.inputs[1].default_value = 0.0\n    bright_contrast.inputs[2].default_value = 0.7\n    noise_texture_1.inputs[2].default_value = 206.0\n    noise_texture_1.inputs[3].default_value = 9.1\n    noise_texture_1.inputs[4].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.4\n    bump.inputs[0].default_value = 0.067\n    principled_bsdf_1.inputs[0].default_value = [0.047, 0.058, 0.067, 1.0]\n    principled_bsdf_1.inputs[7].default_value = 0.524\n    principled_bsdf_1.subsurface_method = 'BURLEY'\n    bump_1.inputs[0].default_value = 0.067\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    blend_weight = nodes.new('ShaderNodeLayerWeight')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(blend_weight.outputs[1], mix_shader.inputs[0])\n    links.new(glass_bsdf.outputs[0], mix_shader.inputs[1])\n\n    # Set parameters for each node\n    blend_weight.inputs[0].default_value = 0.5\n    glass_bsdf.inputs[0].default_value = [0.8, 0.0, 0.0, 1.0]\n    glass_bsdf.inputs[1].default_value = 0.316\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    multiply = nodes.new('ShaderNodeMath')\n    multiply_1 = nodes.new('ShaderNodeMath')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    multiply_2 = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(multiply.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(multiply_1.outputs[0], multiply.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[0])\n    links.new(voronoi_texture.outputs[0], multiply_1.inputs[1])\n    links.new(multiply_2.outputs[0], displacement.inputs[0])\n    links.new(multiply_1.outputs[0], multiply_2.inputs[0])\n\n    # Set parameters for each node\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    multiply_1.inputs[2].default_value = 0.0\n    multiply_1.operation = 'MULTIPLY'\n    voronoi_texture.inputs[2].default_value = 7.0\n    diffuse_bsdf.inputs[0].default_value = [0.482, 0.312, 0.127, 1.0]\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.1\n    multiply_2.inputs[1].default_value = -7.0\n    multiply_2.inputs[2].default_value = 0.0\n    multiply_2.operation = 'MULTIPLY'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[1], colorramp.inputs[0])\n    links.new(noise_texture_1.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.027, 0.027, 0.027, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.068\n    colorramp.color_ramp.elements[1].position = 0.909\n    noise_texture.inputs[2].default_value = 3.9\n    noise_texture.inputs[3].default_value = 7.8\n    noise_texture.inputs[4].default_value = 1.0\n    noise_texture.inputs[5].default_value = 0.02\n    bump.inputs[0].default_value = 0.111\n    bump.invert = True\n    noise_texture_1.inputs[2].default_value = 449.0\n    noise_texture_1.inputs[3].default_value = 1.6\n    noise_texture_1.inputs[4].default_value = 1.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf_1 = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf_1.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp_1.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(colorramp_3.outputs[0], principled_bsdf_1.inputs[0])\n    links.new(voronoi_texture_1.outputs[1], colorramp_3.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.297\n    voronoi_texture.inputs[2].default_value = 352.0\n    voronoi_texture.inputs[3].default_value = 0.028\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [0.8, 1.2, 1.2]\n    principled_bsdf.inputs[1].default_value = 0.176\n    principled_bsdf.inputs[7].default_value = 0.412\n    principled_bsdf.inputs[9].default_value = 0.036\n    colorramp_1.color_ramp.elements[0].color = [0.565, 0.521, 0.494, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.782\n    colorramp_1.color_ramp.elements[1].color = [0.058, 0.012, 0.006, 1.0]\n    voronoi_texture_1.inputs[2].default_value = 10.6\n    voronoi_texture_1.inputs[3].default_value = 0.656\n    voronoi_texture_1.feature = 'SMOOTH_F1'\n    voronoi_texture_1.voronoi_dimensions = '4D'\n    bump.inputs[0].default_value = 0.211\n    bump.invert = True\n    principled_bsdf_1.inputs[7].default_value = 0.23\n    principled_bsdf_1.inputs[9].default_value = 0.142\n    colorramp_3.color_ramp.elements[0].position = 0.145\n    colorramp_3.color_ramp.elements[0].color = [0.009, 0.004, 0.003, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [1.0, 0.968, 0.847, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    gamma = nodes.new('ShaderNodeGamma')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(gamma.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(colorramp.outputs[0], gamma.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[14].default_value = 0.488\n    principled_bsdf.subsurface_method = 'BURLEY'\n    gamma.inputs[1].default_value = 2.1\n    voronoi_texture.inputs[2].default_value = 304.0\n    voronoi_texture.inputs[3].default_value = 0.239\n    voronoi_texture.feature = 'SMOOTH_F1'\n    voronoi_texture.voronoi_dimensions = '4D'\n    bump.inputs[0].default_value = 0.656\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    attribute = nodes.new('ShaderNodeAttribute')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(attribute.outputs[0], principled_bsdf.inputs[0])\n\n    # Set parameters for each node\n    attribute.attribute_name = 'col'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    map_range = nodes.new('ShaderNodeMapRange')\n    dot_product = nodes.new('ShaderNodeVectorMath')\n    bevel = nodes.new('ShaderNodeBevel')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    mix_5 = nodes.new('ShaderNodeMixRGB')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_2.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_4.outputs[0], principled_bsdf.inputs[22])\n    links.new(map_range.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(dot_product.outputs[1], map_range.inputs[0])\n    links.new(bevel.outputs[0], dot_product.inputs[0])\n    links.new(geometry.outputs[1], dot_product.inputs[1])\n    links.new(multiply.outputs[0], bevel.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(texture_coordinate.outputs[2], noise_texture.inputs[0])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(brick_texture.outputs[0], mix_1.inputs[1])\n    links.new(brick_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mix_3.outputs[0], mix_2.inputs[1])\n    links.new(colorramp.outputs[0], mix_3.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_1.inputs[0])\n    links.new(colorramp.outputs[0], mix_4.inputs[0])\n    links.new(bump.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_2.outputs[0], bump.inputs[2])\n    links.new(noise_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[2], noise_texture_2.inputs[0])\n    links.new(mix_5.outputs[0], displacement.inputs[0])\n    links.new(invert.outputs[0], mix_5.inputs[1])\n    links.new(brick_texture.outputs[0], mix_5.inputs[2])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n\n    # Set parameters for each node\n    mix.inputs[2].default_value = [0.067, 0.063, 0.054, 1.0]\n    mix.blend_type = 'LIGHTEN'\n    map_range.inputs[1].default_value = 0.8\n    map_range.inputs[3].default_value = 1.0\n    map_range.inputs[4].default_value = 0.0\n    dot_product.operation = 'DOT_PRODUCT'\n    multiply.inputs[0].default_value = 0.02\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 1.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.0\n    noise_texture.inputs[5].default_value = 59.3\n    mix_1.inputs[2].default_value = [0.148, 0.124, 0.084, 1.0]\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[1].position = 0.523\n    brick_texture.inputs[1].default_value = [0.025, 0.017, 0.008, 1.0]\n    brick_texture.inputs[2].default_value = [0.223, 0.134, 0.049, 1.0]\n    brick_texture.inputs[4].default_value = 4.0\n    brick_texture.inputs[5].default_value = 0.01\n    brick_texture.inputs[6].default_value = 1.0\n    brick_texture.inputs[9].default_value = 0.5\n    brick_texture.offset = 0.0\n    mix_2.inputs[2].default_value = [0.541, 0.541, 0.541, 1.0]\n    mix_2.blend_type = 'SCREEN'\n    colorramp_1.color_ramp.elements[0].position = 0.482\n    colorramp_1.color_ramp.elements[0].color = [0.01, 0.01, 0.01, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.591\n    colorramp_1.color_ramp.elements[1].color = [0.571, 0.571, 0.571, 1.0]\n    noise_texture_1.inputs[2].default_value = 15.0\n    noise_texture_1.inputs[3].default_value = 10.0\n    noise_texture_1.inputs[4].default_value = 0.7\n    mix_4.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    bump.inputs[0].default_value = 0.209\n    colorramp_2.color_ramp.elements[0].color = [0.01, 0.01, 0.01, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.571, 0.571, 0.571, 1.0]\n    noise_texture_2.inputs[2].default_value = 150.0\n    noise_texture_2.inputs[3].default_value = 10.0\n    noise_texture_2.inputs[4].default_value = 0.7\n    displacement.inputs[2].default_value = 0.007\n    mix_5.blend_type = 'ADD'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glass_bsdf = nodes.new('ShaderNodeBsdfGlass')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    principled_volume = nodes.new('ShaderNodeVolumePrincipled')\n\n    # Create links to connect nodes\n    links.new(glass_bsdf.outputs[0], material_output.inputs[0])\n    links.new(principled_volume.outputs[0], material_output.inputs[1])\n    links.new(voronoi_texture.outputs[0], glass_bsdf.inputs[1])\n    links.new(wave_texture.outputs[0], voronoi_texture.inputs[0])\n    links.new(noise_texture.outputs[0], wave_texture.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = -20.5\n    wave_texture.inputs[1].default_value = 0.3\n    wave_texture.inputs[2].default_value = 226.0\n    wave_texture.inputs[3].default_value = 0.7\n    wave_texture.inputs[4].default_value = -1.7\n    wave_texture.inputs[5].default_value = 0.223\n    noise_texture.inputs[2].default_value = -0.4\n    noise_texture.inputs[3].default_value = 2.4\n    noise_texture.inputs[4].default_value = 0.433\n    noise_texture.inputs[5].default_value = 105.0\n    principled_volume.inputs[0].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_volume.inputs[2].default_value = 0.2\n    principled_volume.inputs[4].default_value = 1.0\n    principled_volume.inputs[5].default_value = [1.0, 1.0, 1.0, 1.0]\n    principled_volume.inputs[6].default_value = 0.05\n    principled_volume.inputs[10].default_value = -26.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2_v_a_r = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    geometry = nodes.new('ShaderNodeNewGeometry')\n    colorramp_1_v_a_r = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_1_v_a_r_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3_v_a_r = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(colorramp_3_v_a_r.outputs[0], principled_bsdf.inputs[9])\n    links.new(mix_1.outputs[0], mix.inputs[0])\n    links.new(colorramp_1_v_a_r_1.outputs[0], mix.inputs[2])\n    links.new(colorramp_2_v_a_r.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1_v_a_r.outputs[0], mix_1.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp_2_v_a_r.inputs[0])\n    links.new(geometry.outputs[0], noise_texture.inputs[0])\n    links.new(wave_texture.outputs[1], colorramp_1_v_a_r.inputs[0])\n    links.new(noise_texture_1.outputs[1], wave_texture.inputs[0])\n    links.new(geometry.outputs[0], noise_texture_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_1_v_a_r_1.inputs[0])\n    links.new(geometry.outputs[0], noise_texture_2.inputs[0])\n    links.new(noise_texture_2.outputs[0], colorramp_3_v_a_r.inputs[0])\n\n    # Set parameters for each node\n    mix.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    colorramp_2_v_a_r.color_ramp.elements[0].position = 0.466\n    colorramp_2_v_a_r.color_ramp.elements[1].position = 0.526\n    noise_texture.inputs[1].default_value = 8.92\n    noise_texture.inputs[2].default_value = 2.5\n    noise_texture.noise_dimensions = '4D'\n    colorramp_1_v_a_r.color_ramp.elements[1].position = 0.097\n    wave_texture.inputs[1].default_value = 2.63\n    wave_texture.inputs[2].default_value = 4.99\n    wave_texture.inputs[3].default_value = 27.7\n    noise_texture_1.inputs[1].default_value = 9.64\n    noise_texture_1.inputs[2].default_value = 0.5\n    noise_texture_1.inputs[3].default_value = 16.0\n    noise_texture_1.noise_dimensions = '4D'\n    colorramp_1_v_a_r_1.color_ramp.elements[0].position = 0.223\n    colorramp_1_v_a_r_1.color_ramp.elements[0].color = [0.004, 0.004, 0.004, 1.0]\n    colorramp_1_v_a_r_1.color_ramp.elements[1].position = 0.509\n    colorramp_1_v_a_r_1.color_ramp.elements[1].color = [0.049, 0.046, 0.051, 1.0]\n    colorramp_1_v_a_r_1.color_ramp.elements.new(1.0)\n    colorramp_1_v_a_r_1.color_ramp.elements[2].color = [0.04, 0.047, 0.038, 1.0]\n    noise_texture_2.inputs[1].default_value = 4.38\n    noise_texture_2.inputs[2].default_value = 6.0\n    noise_texture_2.inputs[3].default_value = 16.0\n    noise_texture_2.noise_dimensions = '4D'\n    colorramp_3_v_a_r.color_ramp.elements[0].position = 0.082\n    colorramp_3_v_a_r.color_ramp.elements[0].color = [0.678, 0.678, 0.678, 1.0]\n    colorramp_3_v_a_r.color_ramp.elements[1].position = 0.768\n    colorramp_3_v_a_r.color_ramp.elements[1].color = [0.787, 0.787, 0.787, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    glossy_bsdf = nodes.new('ShaderNodeBsdfGlossy')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['TE_TableCloth']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(glossy_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(gamma.outputs[0], glossy_bsdf.inputs[0])\n    links.new(bump.outputs[0], glossy_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(rgb_to_bw.outputs[0], mix.inputs[0])\n    links.new(group.outputs[0], rgb_to_bw.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], gamma_1.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.236\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.2\n    glossy_bsdf.inputs[1].default_value = 0.894\n    glossy_bsdf.distribution = 'BECKMANN'\n    mix.inputs[1].default_value = [0.056, 0.135, 0.28, 1.0]\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    group.inputs[1].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    bump.inputs[0].default_value = 0.5\n    bump.inputs[1].default_value = 0.1\n    gamma_1.inputs[1].default_value = 3.0\n    mix_1.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 40.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 0.785]\n    mapping_1.inputs[3].default_value = [5.0, 1.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 120.0\n    wave_texture_1.inputs[2].default_value = 4.0\n    wave_texture_1.inputs[4].default_value = 6.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[2].default_value = [0.0, -0.0, 2.36]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    invert = nodes.new('ShaderNodeInvert')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[7])\n    links.new(invert.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(colorramp.outputs[0], invert.inputs[1])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.007, 0.006, 0.005, 1.0]\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.interpolation = 'EASE'\n    colorramp.color_ramp.elements[1].position = 0.357\n    colorramp.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp.color_ramp.elements.new(0.592)\n    colorramp.color_ramp.elements[2].color = [0.008, 0.008, 0.008, 1.0]\n    colorramp.color_ramp.elements.new(1.0)\n    colorramp.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 75.0\n    noise_texture.inputs[3].default_value = 256.0\n    noise_texture.inputs[4].default_value = 0.633\n    bump.inputs[0].default_value = 0.425\n    bump.inputs[1].default_value = 0.95\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['tilesss']\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[0], principled_bsdf.inputs[0])\n    links.new(group.outputs[4], principled_bsdf.inputs[9])\n    links.new(group.outputs[1], principled_bsdf.inputs[22])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = 3.0\n    group.inputs[1].default_value = 100.0\n    group.inputs[3].default_value = [0.5, 0.0, 0.425, 1.0]\n    group.inputs[4].default_value = [0.5, 0.008, 0.0, 1.0]\n    group.inputs[5].default_value = [0.05, 0.5, 0.0, 1.0]\n    group.inputs[6].default_value = 67.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    glitter = nodes.new('ShaderNodeGroup')\n    glitter.node_tree = bpy.data.node_groups['Glitter_003']\n\n    # Create links to connect nodes\n    links.new(glitter.outputs[0], material_output.inputs[0])\n    links.new(glitter.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    glitter.inputs[0].default_value = [1.0, 0.0, 0.771, 1.0]\n    glitter.inputs[1].default_value = [0.681, 0.904, 1.0, 1.0]\n    glitter.inputs[2].default_value = 0.4\n    glitter.inputs[5].default_value = 0.25\n    glitter.inputs[6].default_value = 0.015\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Quilted_leather']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[0].default_value = [0.73, 0.008, 0.004, 1.0]\n    group.inputs[1].default_value = [0.069, 0.001, 0.001, 1.0]\n    group.inputs[2].default_value = [0.548, 0.524, 0.509, 1.0]\n    group.inputs[3].default_value = 70.0\n    group.inputs[4].default_value = 1.0\n    group.inputs[5].default_value = 1.0\n    group.inputs[6].default_value = 70.0\n    group.inputs[7].default_value = 1.0\n    group.inputs[8].default_value = 1.7\n    group.inputs[9].default_value = 0.576\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Dry_Cracked_Soil']\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(group.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    group.inputs[6].default_value = 0.05\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    gradient_texture = nodes.new('ShaderNodeTexGradient')\n    mapping = nodes.new('ShaderNodeMapping')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_1 = nodes.new('ShaderNodeTexGradient')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    mix_4 = nodes.new('ShaderNodeMixRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_2 = nodes.new('ShaderNodeTexGradient')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_3 = nodes.new('ShaderNodeTexGradient')\n    mapping_3 = nodes.new('ShaderNodeMapping')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    gradient_texture_4 = nodes.new('ShaderNodeTexGradient')\n    mapping_4 = nodes.new('ShaderNodeMapping')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    bump_1 = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], mix.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(mix_2.outputs[0], mix_1.inputs[0])\n    links.new(mix_3.outputs[0], mix_1.inputs[2])\n    links.new(colorramp.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[2])\n    links.new(gradient_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], gradient_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(gradient_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], gradient_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_1.inputs[0])\n    links.new(mix_4.outputs[0], mix_3.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_3.inputs[2])\n    links.new(colorramp_2.outputs[0], mix_4.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_4.inputs[2])\n    links.new(gradient_texture_2.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping_2.outputs[0], gradient_texture_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_2.inputs[0])\n    links.new(gradient_texture_3.outputs[0], colorramp_3.inputs[0])\n    links.new(mapping_3.outputs[0], gradient_texture_3.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_3.inputs[0])\n    links.new(gradient_texture_4.outputs[0], colorramp_4.inputs[0])\n    links.new(mapping_4.outputs[0], gradient_texture_4.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping_4.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(mix_1.outputs[0], bump_1.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.15\n    principled_bsdf.inputs[17].default_value = 0.3\n    mix.inputs[2].default_value = [0.58, 0.58, 0.58, 1.0]\n    noise_texture.inputs[3].default_value = 15.0\n    mix_1.inputs[1].default_value = [0.449, 0.123, 1.0, 1.0]\n    mix_2.inputs[0].default_value = 1.0\n    colorramp.color_ramp.interpolation = 'CONSTANT'\n    colorramp.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.96\n    colorramp.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mapping.inputs[2].default_value = [0.0, 1.57, 0.0]\n    colorramp_1.color_ramp.interpolation = 'CONSTANT'\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.96\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    mapping_1.inputs[2].default_value = [0.0, -1.57, 0.0]\n    mix_3.inputs[0].default_value = 1.0\n    mix_4.inputs[0].default_value = 1.0\n    colorramp_2.color_ramp.interpolation = 'CONSTANT'\n    colorramp_2.color_ramp.elements[0].color = [0.0, 1.0, 0.887, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.16\n    gradient_texture_2.gradient_type = 'RADIAL'\n    colorramp_3.color_ramp.interpolation = 'CONSTANT'\n    colorramp_3.color_ramp.elements[0].color = [1.0, 0.0, 0.211, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.16\n    gradient_texture_3.gradient_type = 'RADIAL'\n    mapping_3.inputs[2].default_value = [0.0, 0.0, 2.09]\n    colorramp_4.color_ramp.interpolation = 'CONSTANT'\n    colorramp_4.color_ramp.elements[0].color = [0.083, 1.0, 0.0, 1.0]\n    colorramp_4.color_ramp.elements[1].position = 0.16\n    gradient_texture_4.gradient_type = 'RADIAL'\n    mapping_4.inputs[2].default_value = [0.0, 0.0, 4.19]\n    bump.inputs[0].default_value = 0.02\n    noise_texture_1.inputs[2].default_value = 3.0\n    noise_texture_1.inputs[3].default_value = 5.0\n    noise_texture_1.inputs[5].default_value = 0.5\n    bump_1.inputs[0].default_value = 0.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    paint_over_rust = nodes.new('ShaderNodeGroup')\n    paint_over_rust.node_tree = bpy.data.node_groups['Paint_Over_Rust']\n\n    # Create links to connect nodes\n    links.new(paint_over_rust.outputs[0], material_output.inputs[0])\n    links.new(paint_over_rust.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    paint_over_rust.inputs[28].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(noise_texture.outputs[0], bump.inputs[2])\n    links.new(magic_texture.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(colorramp.outputs[0], displacement.inputs[0])\n    links.new(noise_texture_1.outputs[0], colorramp.inputs[0])\n    links.new(magic_texture.outputs[0], noise_texture_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.008, 0.008, 0.008, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.459\n    principled_bsdf.inputs[20].default_value = 3.0\n    bump.inputs[0].default_value = 0.625\n    noise_texture.inputs[2].default_value = 12.7\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[5].default_value = 1.0\n    magic_texture.inputs[1].default_value = 0.2\n    magic_texture.inputs[2].default_value = 2.0\n    magic_texture.turbulence_depth = 3\n    displacement.inputs[2].default_value = 0.2\n    noise_texture_1.inputs[2].default_value = 2.6\n    noise_texture_1.inputs[3].default_value = 2.5\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Scratched_Paint']\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(texture_coordinate.outputs[3], group.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[1].default_value = [0.263, 0.014, 0.0, 1.0]\n    group.inputs[3].default_value = 0.65\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['True_BSDF']\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    modulo = nodes.new('ShaderNodeMath')\n    subtract = nodes.new('ShaderNodeVectorMath')\n    subtract_1 = nodes.new('ShaderNodeVectorMath')\n    fraction = nodes.new('ShaderNodeVectorMath')\n    cross_product = nodes.new('ShaderNodeVectorMath')\n    mix = nodes.new('ShaderNodeMixRGB')\n    scale = nodes.new('ShaderNodeVectorMath')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    voronoi_texture_1 = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(group.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], group.inputs[0])\n    links.new(mix_2.outputs[0], group.inputs[20])\n    links.new(modulo.outputs[0], group.inputs[27])\n    links.new(modulo.outputs[0], colorramp.inputs[0])\n    links.new(subtract.outputs[0], modulo.inputs[0])\n    links.new(subtract_1.outputs[0], subtract.inputs[0])\n    links.new(mix_1.outputs[0], subtract.inputs[1])\n    links.new(wave_texture.outputs[0], subtract.inputs[3])\n    links.new(fraction.outputs[0], subtract_1.inputs[0])\n    links.new(colorramp_1.outputs[0], subtract_1.inputs[1])\n    links.new(cross_product.outputs[0], fraction.inputs[0])\n    links.new(mix.outputs[0], cross_product.inputs[0])\n    links.new(voronoi_texture.outputs[2], cross_product.inputs[1])\n    links.new(scale.outputs[0], mix.inputs[1])\n    links.new(brick_texture.outputs[0], mix.inputs[2])\n    links.new(texture_coordinate.outputs[2], scale.inputs[0])\n    links.new(scale.outputs[0], brick_texture.inputs[0])\n    links.new(mix.outputs[0], voronoi_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(wave_texture.outputs[0], mix_1.inputs[1])\n    links.new(mix.outputs[0], wave_texture.inputs[0])\n    links.new(modulo.outputs[0], mix_2.inputs[1])\n    links.new(voronoi_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], voronoi_texture_1.inputs[0])\n\n    # Set parameters for each node\n    group.inputs[22].default_value = 0.27\n    group.inputs[25].default_value = 0.5\n    group.inputs[26].default_value = 0.42\n    group.inputs[28].default_value = 0.678\n    group.inputs[29].default_value = -0.11\n    colorramp.color_ramp.elements[0].color = [0.033, 0.013, 0.081, 1.0]\n    colorramp.color_ramp.elements[1].color = [0.0, 0.922, 1.0, 1.0]\n    modulo.inputs[1].default_value = 0.55\n    modulo.inputs[2].default_value = 0.0\n    modulo.operation = 'MODULO'\n    subtract.operation = 'SUBTRACT'\n    subtract_1.operation = 'SUBTRACT'\n    fraction.operation = 'FRACTION'\n    cross_product.operation = 'CROSS_PRODUCT'\n    mix.inputs[0].default_value = 0.002\n    scale.operation = 'SCALE'\n    brick_texture.inputs[4].default_value = 152.0\n    brick_texture.inputs[5].default_value = 0.05\n    brick_texture.inputs[6].default_value = 0.26\n    brick_texture.inputs[7].default_value = 0.32\n    brick_texture.inputs[8].default_value = 0.17\n    brick_texture.inputs[9].default_value = 0.14\n    brick_texture.offset = 0.0\n    voronoi_texture.inputs[2].default_value = 24.0\n    voronoi_texture.inputs[5].default_value = 0.051\n    colorramp_1.color_ramp.elements[0].position = 0.442\n    colorramp_1.color_ramp.elements[1].position = 0.775\n    mix_1.inputs[0].default_value = 0.2\n    wave_texture.inputs[1].default_value = 125.0\n    wave_texture.inputs[2].default_value = 0.58\n    mix_2.inputs[0].default_value = 0.197\n    voronoi_texture_1.inputs[2].default_value = 800.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_2 = nodes.new('ShaderNodeTexCoord')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(colorramp_2.outputs[0], mix.inputs[2])\n    links.new(colorramp.outputs[0], mix_1.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(wave_texture_1.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping_1.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp_2.inputs[0])\n    links.new(mapping_2.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate_2.outputs[3], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[6].default_value = 0.432\n    principled_bsdf.inputs[9].default_value = 0.186\n    principled_bsdf.subsurface_method = 'BURLEY'\n    mix.blend_type = 'ADD'\n    mix_1.inputs[2].default_value = [0.0, 0.0, 0.0, 1.0]\n    mix_1.blend_type = 'ADD'\n    colorramp.color_ramp.elements[0].position = 0.264\n    colorramp.color_ramp.elements[1].color = [1.0, 0.99, 0.849, 1.0]\n    wave_texture.inputs[1].default_value = 0.1\n    wave_texture.inputs[2].default_value = 144.0\n    wave_texture.inputs[3].default_value = 20.0\n    wave_texture.inputs[5].default_value = 0.823\n    colorramp_1.color_ramp.elements[0].position = 0.005\n    colorramp_1.color_ramp.elements[0].color = [0.015, 0.001, 0.019, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.394\n    colorramp_1.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_1.color_ramp.elements.new(0.815)\n    colorramp_1.color_ramp.elements[2].color = [0.322, 0.24, 0.163, 1.0]\n    colorramp_1.color_ramp.elements.new(1.0)\n    colorramp_1.color_ramp.elements[3].color = [1.0, 0.99, 0.849, 1.0]\n    wave_texture_1.inputs[1].default_value = 0.1\n    wave_texture_1.inputs[2].default_value = 128.0\n    wave_texture_1.inputs[3].default_value = 20.0\n    wave_texture_1.inputs[5].default_value = 0.823\n    colorramp_2.color_ramp.elements[0].position = 0.541\n    colorramp_2.color_ramp.elements[1].position = 0.891\n    colorramp_2.color_ramp.elements[1].color = [0.244, 0.364, 0.37, 1.0]\n    colorramp_2.color_ramp.elements.new(0.923)\n    colorramp_2.color_ramp.elements[2].color = [0.005, 0.013, 0.021, 1.0]\n    colorramp_2.color_ramp.elements.new(1.0)\n    colorramp_2.color_ramp.elements[3].color = [1.0, 1.0, 1.0, 1.0]\n    noise_texture.inputs[2].default_value = 43.9\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.6\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    car_textured_rough_plastic = nodes.new('ShaderNodeGroup')\n    car_textured_rough_plastic.node_tree = bpy.data.node_groups['Car_Textured_Rough_Plastic']\n\n    # Create links to connect nodes\n    links.new(car_textured_rough_plastic.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    car_textured_rough_plastic.inputs[0].default_value = [0.02, 0.02, 0.02, 1.0]\n    car_textured_rough_plastic.inputs[6].default_value = [0.094, 0.086, 0.088, 1.0]\n    car_textured_rough_plastic.inputs[8].default_value = 0.3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    gamma = nodes.new('ShaderNodeGamma')\n    mix = nodes.new('ShaderNodeMixRGB')\n    rgb_to_bw = nodes.new('ShaderNodeRGBToBW')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['TE_TableCloth']\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    gamma_1 = nodes.new('ShaderNodeGamma')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], mix_shader.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(layer_weight.outputs[1], colorramp.inputs[0])\n    links.new(gamma.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(bump.outputs[0], diffuse_bsdf.inputs[2])\n    links.new(mix.outputs[0], gamma.inputs[0])\n    links.new(rgb_to_bw.outputs[0], mix.inputs[0])\n    links.new(group.outputs[0], rgb_to_bw.inputs[0])\n    links.new(mapping.outputs[0], group.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(gamma_1.outputs[0], bump.inputs[2])\n    links.new(mix_1.outputs[0], gamma_1.inputs[0])\n    links.new(wave_texture.outputs[1], mix_1.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n\n    # Set parameters for each node\n    colorramp.color_ramp.elements[0].position = 0.236\n    colorramp.color_ramp.elements[1].position = 0.75\n    layer_weight.inputs[0].default_value = 0.2\n    diffuse_bsdf.inputs[1].default_value = 1.0\n    mix.inputs[1].default_value = [0.777, 0.166, 0.053, 1.0]\n    mix.inputs[2].default_value = [0.8, 0.8, 0.8, 1.0]\n    group.inputs[1].default_value = 10.0\n    mapping.inputs[2].default_value = [0.0, -0.0, 0.785]\n    bump.inputs[1].default_value = 0.1\n    gamma_1.inputs[1].default_value = 5.0\n    mix_1.inputs[0].default_value = 1.0\n    wave_texture.inputs[1].default_value = 80.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 0.785]\n    mapping_1.inputs[3].default_value = [5.0, 1.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 120.0\n    wave_texture_1.inputs[2].default_value = 4.0\n    wave_texture_1.inputs[4].default_value = 6.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[2].default_value = [0.0, -0.0, 2.36]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    rgb_curves = nodes.new('ShaderNodeRGBCurve')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    texture_coordinate_1 = nodes.new('ShaderNodeTexCoord')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    wrap = nodes.new('ShaderNodeMath')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump_3 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(rgb_curves.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], rgb_curves.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(noise_texture_1.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(mapping_1.outputs[0], noise_texture_1.inputs[0])\n    links.new(texture_coordinate_1.outputs[3], mapping_1.inputs[0])\n    links.new(noise_texture_2.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(mapping_1.outputs[0], noise_texture_2.inputs[0])\n    links.new(wrap.outputs[0], bump_2.inputs[2])\n    links.new(bump_3.outputs[0], bump_2.inputs[3])\n    links.new(colorramp_1.outputs[0], wrap.inputs[0])\n    links.new(noise_texture_3.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_3.inputs[0])\n    links.new(rgb_curves.outputs[0], bump_3.inputs[2])\n    links.new(rgb_curves.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.8\n    rgb_curves.mapping.curves[0].points[1].location = [0.491, 0.512]\n    rgb_curves.mapping.curves[0].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[1].points[1].location = [0.509, 0.488]\n    rgb_curves.mapping.curves[1].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[2].points[1].location = [0.518, 0.481]\n    rgb_curves.mapping.curves[2].points.new(1.0, 1.0)\n    rgb_curves.mapping.curves[3].points[1].location = [0.327, 0.35]\n    rgb_curves.mapping.curves[3].points.new(0.455, 0.575)\n    rgb_curves.mapping.curves[3].points.new(1.0, 1.0)\n    colorramp.color_ramp.elements[0].position = 0.232\n    colorramp.color_ramp.elements[0].color = [0.371, 0.198, 0.095, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.49\n    colorramp.color_ramp.elements[1].color = [0.168, 0.074, 0.012, 1.0]\n    colorramp.color_ramp.elements.new(0.82)\n    colorramp.color_ramp.elements[2].color = [0.191, 0.041, 0.016, 1.0]\n    colorramp.color_ramp.elements.new(0.936)\n    colorramp.color_ramp.elements[3].color = [0.019, 0.018, 0.011, 1.0]\n    noise_texture.inputs[2].default_value = 4.5\n    noise_texture.inputs[3].default_value = 10.0\n    noise_texture.inputs[4].default_value = 0.6\n    noise_texture.inputs[5].default_value = 0.4\n    bump.inputs[0].default_value = 0.1\n    bump.invert = True\n    noise_texture_1.inputs[2].default_value = 25.0\n    bump_1.inputs[0].default_value = 0.2\n    bump_1.invert = True\n    noise_texture_2.inputs[2].default_value = 2.9\n    bump_2.inputs[0].default_value = 0.3\n    bump_2.invert = True\n    wrap.inputs[2].default_value = 0.0\n    wrap.operation = 'WRAP'\n    colorramp_1.color_ramp.elements[0].position = 0.486\n    colorramp_1.color_ramp.elements[1].position = 0.495\n    noise_texture_3.inputs[2].default_value = 3.5\n    bump_3.inputs[0].default_value = 0.15\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.547, 0.547, 0.547, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.subsurface_method = 'BURLEY'\n    bump.inputs[0].default_value = 0.4\n    bump.invert = True\n    voronoi_texture.inputs[2].default_value = 150.0\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    blocks_shadow = nodes.new('ShaderNodeMixRGB')\n    group = nodes.new('ShaderNodeGroup')\n    group.node_tree = bpy.data.node_groups['Procedural_Block_Rings']\n    colour_palette = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    bump = nodes.new('ShaderNodeBump')\n    roughness_curve = nodes.new('ShaderNodeFloatCurve')\n    bump_1 = nodes.new('ShaderNodeBump')\n    displacement_1 = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement_1.outputs[0], material_output.inputs[2])\n    links.new(ambient_occlusion.outputs[0], principled_bsdf.inputs[0])\n    links.new(roughness_curve.outputs[0], principled_bsdf.inputs[9])\n    links.new(bump_1.outputs[0], principled_bsdf.inputs[22])\n    links.new(blocks_shadow.outputs[0], ambient_occlusion.inputs[0])\n    links.new(displacement.outputs[0], ambient_occlusion.inputs[2])\n    links.new(group.outputs[0], blocks_shadow.inputs[0])\n    links.new(colour_palette.outputs[0], blocks_shadow.inputs[2])\n    links.new(voronoi_texture.outputs[0], colour_palette.inputs[0])\n    links.new(noise_texture.outputs[1], voronoi_texture.inputs[0])\n    links.new(group.outputs[2], noise_texture.inputs[0])\n    links.new(group.outputs[0], displacement.inputs[0])\n    links.new(bump.outputs[0], displacement.inputs[3])\n    links.new(voronoi_texture.outputs[0], bump.inputs[2])\n    links.new(voronoi_texture.outputs[0], roughness_curve.inputs[1])\n    links.new(voronoi_texture.outputs[0], bump_1.inputs[2])\n    links.new(group.outputs[0], displacement_1.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.distribution = 'MULTI_GGX'\n    ambient_occlusion.only_local = True\n    ambient_occlusion.samples = 1\n    blocks_shadow.inputs[1].default_value = [0.0, 0.0, 0.0, 1.0]\n    group.inputs[1].default_value = 7.0\n    group.inputs[2].default_value = 0.465\n    group.inputs[4].default_value = 0.4\n    group.inputs[7].default_value = 0.35\n    group.inputs[8].default_value = 10.0\n    colour_palette.color_ramp.interpolation = 'B_SPLINE'\n    colour_palette.color_ramp.elements[0].position = 0.315\n    colour_palette.color_ramp.elements[0].color = [0.025, 0.029, 0.033, 1.0]\n    colour_palette.color_ramp.elements[1].position = 0.407\n    colour_palette.color_ramp.elements[1].color = [0.115, 0.144, 0.159, 1.0]\n    colour_palette.color_ramp.elements.new(0.527)\n    colour_palette.color_ramp.elements[2].color = [0.096, 0.108, 0.127, 1.0]\n    colour_palette.color_ramp.elements.new(0.635)\n    colour_palette.color_ramp.elements[3].color = [0.178, 0.178, 0.168, 1.0]\n    voronoi_texture.inputs[2].default_value = 16.0\n    voronoi_texture.inputs[5].default_value = 0.815\n    voronoi_texture.feature = 'SMOOTH_F1'\n    voronoi_texture.voronoi_dimensions = '2D'\n    noise_texture.inputs[1].default_value = 2.7\n    noise_texture.inputs[2].default_value = 16.0\n    noise_texture.inputs[3].default_value = 8.0\n    noise_texture.inputs[4].default_value = 0.9\n    noise_texture.noise_dimensions = '2D'\n    displacement.inputs[1].default_value = 0.0\n    bump.inputs[1].default_value = 10.0\n    roughness_curve.mapping.curves[0].points[0].location = [0.008, 0.5]\n    roughness_curve.mapping.curves[0].points[1].location = [0.203, 0.67]\n    roughness_curve.mapping.curves[0].points.new(0.315, 0.903)\n    roughness_curve.mapping.curves[0].points.new(0.452, 0.608)\n    roughness_curve.mapping.curves[0].points.new(0.751, 0.926)\n    roughness_curve.mapping.curves[0].points.new(1.0, 0.648)\n    bump_1.inputs[0].default_value = 0.45\n    bump_1.inputs[1].default_value = 10.0\n    displacement_1.inputs[1].default_value = 0.0\n    displacement_1.inputs[2].default_value = 0.01\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    node = nodes.new('ShaderNodeOutputMaterial')\n    bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix_legacy = nodes.new('ShaderNodeMixRGB')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    mix = nodes.new('ShaderNodeMixRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    bump = nodes.new('ShaderNodeBump')\n    bump_1 = nodes.new('ShaderNodeBump')\n    noise_texture_3 = nodes.new('ShaderNodeTexNoise')\n    bump_2 = nodes.new('ShaderNodeBump')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(bsdf.outputs[0], node.inputs[0])\n    links.new(displacement.outputs[0], node.inputs[2])\n    links.new(mix_legacy.outputs[0], bsdf.inputs[0])\n    links.new(colorramp_3.outputs[0], bsdf.inputs[9])\n    links.new(bump.outputs[0], bsdf.inputs[22])\n    links.new(colorramp.outputs[0], mix_legacy.inputs[0])\n    links.new(colorramp_1.outputs[0], mix_legacy.inputs[1])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_1.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mix.outputs[0], mapping.inputs[0])\n    links.new(texture_coordinate.outputs[3], mix.inputs[1])\n    links.new(noise_texture_1.outputs[1], mix.inputs[2])\n    links.new(texture_coordinate.outputs[3], noise_texture_1.inputs[0])\n    links.new(colorramp_2.outputs[0], noise_texture_1.inputs[4])\n    links.new(noise_texture_2.outputs[1], colorramp_2.inputs[0])\n    links.new(texture_coordinate.outputs[3], noise_texture_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], colorramp_3.inputs[0])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(bump_1.outputs[0], bump.inputs[3])\n    links.new(noise_texture_3.outputs[0], bump_1.inputs[2])\n    links.new(bump_2.outputs[0], bump_1.inputs[3])\n    links.new(texture_coordinate.outputs[3], noise_texture_3.inputs[0])\n    links.new(voronoi_texture.outputs[0], bump_2.inputs[2])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    mix_legacy.inputs[2].default_value = [0.056, 0.15, 0.021, 1.0]\n    colorramp.color_ramp.elements[0].position = 0.543\n    colorramp.color_ramp.elements[1].position = 0.675\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 15.0\n    noise_texture.inputs[4].default_value = 0.65\n    noise_texture.inputs[5].default_value = 0.3\n    colorramp_1.color_ramp.elements[0].color = [0.305, 0.184, 0.1, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.335\n    colorramp_1.color_ramp.elements[1].color = [0.1, 0.05, 0.022, 1.0]\n    colorramp_1.color_ramp.elements.new(0.912)\n    colorramp_1.color_ramp.elements[2].color = [0.004, 0.003, 0.002, 1.0]\n    voronoi_texture.inputs[2].default_value = 8.0\n    voronoi_texture.distance = 'CHEBYCHEV'\n    mapping.inputs[3].default_value = [1.0, 1.0, 0.2]\n    mix.inputs[0].default_value = 0.08\n    noise_texture_1.inputs[2].default_value = 8.0\n    noise_texture_1.inputs[3].default_value = 15.0\n    colorramp_2.color_ramp.elements[0].position = 0.444\n    colorramp_2.color_ramp.elements[0].color = [0.44, 0.44, 0.44, 1.0]\n    colorramp_2.color_ramp.elements[1].position = 0.649\n    colorramp_2.color_ramp.elements[1].color = [0.73, 0.73, 0.73, 1.0]\n    noise_texture_2.inputs[2].default_value = 3.0\n    noise_texture_2.inputs[3].default_value = 15.0\n    colorramp_3.color_ramp.elements[0].color = [0.451, 0.451, 0.451, 1.0]\n    colorramp_3.color_ramp.elements[1].color = [0.847, 0.847, 0.847, 1.0]\n    bump_1.inputs[0].default_value = 0.4\n    noise_texture_3.inputs[2].default_value = 4.0\n    noise_texture_3.inputs[3].default_value = 15.0\n    noise_texture_3.inputs[4].default_value = 0.6\n    bump_2.inputs[0].default_value = 0.35\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    map_range = nodes.new('ShaderNodeMapRange')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(map_range.outputs[0], mix_shader.inputs[0])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[1])\n    links.new(emission.outputs[0], mix_shader.inputs[2])\n    links.new(voronoi_texture.outputs[0], map_range.inputs[0])\n    links.new(colorramp.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], colorramp.inputs[0])\n    links.new(colorramp_1.outputs[0], emission.inputs[0])\n    links.new(magic_texture.outputs[0], colorramp_1.inputs[0])\n\n    # Set parameters for each node\n    map_range.inputs[1].default_value = 0.13\n    map_range.inputs[2].default_value = -0.7\n    map_range.clamp = False\n    voronoi_texture.inputs[2].default_value = 58.0\n    voronoi_texture.feature = 'SMOOTH_F1'\n    principled_bsdf.inputs[9].default_value = 0.718\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.414\n    colorramp.color_ramp.elements[0].color = [0.022, 0.021, 0.086, 1.0]\n    colorramp.color_ramp.elements[1].position = 0.677\n    colorramp.color_ramp.elements[1].color = [0.08, 0.035, 0.19, 1.0]\n    noise_texture.inputs[2].default_value = 7.0\n    noise_texture.inputs[3].default_value = 2.5\n    noise_texture.inputs[4].default_value = 1.0\n    emission.inputs[1].default_value = 30.0\n    colorramp_1.color_ramp.elements[0].color = [0.164, 0.025, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].color = [0.851, 0.525, 1.0, 1.0]\n    magic_texture.inputs[1].default_value = -1.4\n    magic_texture.inputs[2].default_value = 1.7\n    magic_texture.turbulence_depth = 3\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    bump = nodes.new('ShaderNodeBump')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    modulo = nodes.new('ShaderNodeMath')\n    separate_xyz = nodes.new('ShaderNodeSeparateXYZ')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    divide = nodes.new('ShaderNodeMath')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(colorramp.outputs[0], bump.inputs[2])\n    links.new(multiply.outputs[0], colorramp.inputs[0])\n    links.new(modulo.outputs[0], multiply.inputs[0])\n    links.new(separate_xyz.outputs[2], modulo.inputs[0])\n    links.new(divide.outputs[0], modulo.inputs[1])\n    links.new(mapping.outputs[0], separate_xyz.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.044, 0.169, 0.505, 1.0]\n    principled_bsdf.inputs[1].default_value = 0.14\n    principled_bsdf.inputs[2].default_value = [0.01, 0.01, 0.01]\n    principled_bsdf.inputs[3].default_value = [0.029, 0.071, 0.143, 1.0]\n    principled_bsdf.inputs[7].default_value = 1.0\n    principled_bsdf.inputs[9].default_value = 0.4\n    principled_bsdf.inputs[10].default_value = 0.5\n    principled_bsdf.inputs[11].default_value = 0.8\n    principled_bsdf.subsurface_method = 'BURLEY'\n    colorramp.color_ramp.elements[0].position = 0.72\n    multiply.inputs[1].default_value = 1000.0\n    multiply.inputs[2].default_value = 0.0\n    multiply.operation = 'MULTIPLY'\n    modulo.inputs[2].default_value = 0.0\n    modulo.operation = 'MODULO'\n    divide.inputs[0].default_value = 5.0\n    divide.inputs[1].default_value = 1000.0\n    divide.inputs[2].default_value = 0.0\n    divide.operation = 'DIVIDE'\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    color_ramp = nodes.new('ShaderNodeValToRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mix_3 = nodes.new('ShaderNodeMixRGB')\n    noise_texture_2 = nodes.new('ShaderNodeTexNoise')\n    ambient_occlusion = nodes.new('ShaderNodeAmbientOcclusion')\n    displacement = nodes.new('ShaderNodeDisplacement')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(color_ramp.outputs[0], mix.inputs[1])\n    links.new(ambient_occlusion.outputs[0], mix.inputs[2])\n    links.new(mix_1.outputs[0], color_ramp.inputs[0])\n    links.new(noise_texture.outputs[0], mix_1.inputs[1])\n    links.new(voronoi_texture.outputs[0], mix_1.inputs[2])\n    links.new(mix_2.outputs[0], noise_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_2.inputs[1])\n    links.new(noise_texture_1.outputs[0], mix_2.inputs[2])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(mapping.outputs[0], noise_texture_1.inputs[0])\n    links.new(mix_3.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], mix_3.inputs[1])\n    links.new(noise_texture_2.outputs[1], mix_3.inputs[2])\n    links.new(mapping.outputs[0], noise_texture_2.inputs[0])\n    links.new(voronoi_texture.outputs[0], displacement.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[9].default_value = 0.477\n    mix.inputs[0].default_value = 1.0\n    color_ramp.color_ramp.elements[0].position = 0.132\n    color_ramp.color_ramp.elements[0].color = [0.133, 0.133, 0.133, 1.0]\n    color_ramp.color_ramp.elements[1].position = 0.618\n    color_ramp.color_ramp.elements[1].color = [0.38, 0.38, 0.38, 1.0]\n    mix_1.inputs[0].default_value = 1.0\n    noise_texture.inputs[2].default_value = 6.8\n    noise_texture.inputs[3].default_value = 6.8\n    mix_2.inputs[0].default_value = 1.0\n    mapping.inputs[3].default_value = [0.5, 0.5, 0.5]\n    noise_texture_1.inputs[2].default_value = 6.8\n    noise_texture_1.inputs[3].default_value = 6.8\n    voronoi_texture.inputs[2].default_value = 6.51\n    voronoi_texture.distance = 'MANHATTAN'\n    voronoi_texture.feature = 'F2'\n    mix_3.inputs[0].default_value = 0.105\n    noise_texture_2.inputs[2].default_value = 6.8\n    noise_texture_2.inputs[3].default_value = 6.8\n    noise_texture_2.inputs[4].default_value = 0.588\n    displacement.inputs[2].default_value = 0.1\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    emission = nodes.new('ShaderNodeEmission')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    mix = nodes.new('ShaderNodeMixRGB')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n    noise_texture_1 = nodes.new('ShaderNodeTexNoise')\n    colorramp_3 = nodes.new('ShaderNodeValToRGB')\n    colorramp_4 = nodes.new('ShaderNodeValToRGB')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n    colorramp_5 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(emission.outputs[0], mix_shader.inputs[1])\n    links.new(principled_bsdf.outputs[0], mix_shader.inputs[2])\n    links.new(colorramp.outputs[0], emission.inputs[0])\n    links.new(mix.outputs[0], colorramp.inputs[0])\n    links.new(mix_1.outputs[0], mix.inputs[1])\n    links.new(mix_2.outputs[0], mix_1.inputs[1])\n    links.new(colorramp_4.outputs[0], mix_1.inputs[2])\n    links.new(colorramp_1.outputs[0], mix_2.inputs[0])\n    links.new(colorramp_2.outputs[0], mix_2.inputs[1])\n    links.new(colorramp_3.outputs[0], mix_2.inputs[2])\n    links.new(noise_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_2.inputs[0])\n    links.new(noise_texture_1.outputs[1], colorramp_3.inputs[0])\n    links.new(mix_2.outputs[0], colorramp_4.inputs[0])\n    links.new(colorramp_4.outputs[0], principled_bsdf.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(colorramp_5.outputs[0], invert.inputs[1])\n    links.new(mix_2.outputs[0], colorramp_5.inputs[0])\n\n    # Set parameters for each node\n    mix_shader.inputs[0].default_value = 0.492\n    emission.inputs[1].default_value = 292.0\n    colorramp.color_ramp.elements[0].position = 0.059\n    colorramp.color_ramp.elements[1].position = 0.244\n    colorramp.color_ramp.elements[1].color = [1.0, 0.026, 0.0, 1.0]\n    colorramp.color_ramp.elements.new(0.438)\n    colorramp.color_ramp.elements[2].color = [0.5, 0.001, 0.0, 1.0]\n    mix.inputs[0].default_value = 0.533\n    mix.inputs[2].default_value = [0.016, 0.016, 0.016, 1.0]\n    mix_1.inputs[0].default_value = 0.247\n    colorramp_1.color_ramp.elements[0].position = 0.191\n    colorramp_1.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.469\n    colorramp_1.color_ramp.elements[1].color = [0.5, 0.5, 0.5, 1.0]\n    colorramp_1.color_ramp.elements.new(0.7)\n    colorramp_1.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture.inputs[1].default_value = 0.0\n    noise_texture.inputs[2].default_value = 7.1\n    noise_texture.inputs[3].default_value = 8.1\n    noise_texture.inputs[4].default_value = 0.383\n    noise_texture.inputs[5].default_value = 2.0\n    noise_texture.noise_dimensions = '4D'\n    colorramp_2.color_ramp.elements[0].color = [0.037, 0.047, 0.047, 1.0]\n    colorramp_2.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n    noise_texture_1.inputs[2].default_value = 9.2\n    noise_texture_1.inputs[3].default_value = 8.1\n    noise_texture_1.inputs[4].default_value = 1.0\n    noise_texture_1.inputs[5].default_value = 0.3\n    colorramp_3.color_ramp.elements[0].position = 0.442\n    colorramp_3.color_ramp.elements[0].color = [1.0, 0.229, 0.0, 1.0]\n    colorramp_3.color_ramp.elements[1].position = 0.525\n    colorramp_3.color_ramp.elements[1].color = [1.0, 0.033, 0.0, 1.0]\n    colorramp_3.color_ramp.elements.new(1.0)\n    colorramp_3.color_ramp.elements[2].color = [0.0, 0.0, 0.0, 1.0]\n    colorramp_4.color_ramp.elements[0].position = 0.032\n    colorramp_4.color_ramp.elements[1].position = 0.51\n    colorramp_4.color_ramp.elements[1].color = [0.057, 0.057, 0.057, 1.0]\n    colorramp_4.color_ramp.elements.new(0.993)\n    colorramp_4.color_ramp.elements[2].color = [1.0, 0.046, 0.0, 1.0]\n    principled_bsdf.distribution = 'MULTI_GGX'\n    principled_bsdf.subsurface_method = 'BURLEY'\n    displacement.inputs[1].default_value = 1.0\n    displacement.inputs[2].default_value = 0.07\n    invert.inputs[0].default_value = 0.0\n    colorramp_5.color_ramp.elements[0].color = [1.0, 1.0, 1.0, 1.0]\n    colorramp_5.color_ramp.elements[1].position = 0.1\n    colorramp_5.color_ramp.elements[1].color = [0.0, 0.0, 0.0, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    metallic_car_paint = nodes.new('ShaderNodeGroup')\n    metallic_car_paint.node_tree = bpy.data.node_groups['UberShader_multi']\n\n    # Create links to connect nodes\n    links.new(metallic_car_paint.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    metallic_car_paint.inputs[0].default_value = [0.202, 0.466, 1.0, 1.0]\n    metallic_car_paint.inputs[4].default_value = 4.2\n    metallic_car_paint.inputs[5].default_value = [0.579, 0.944, 1.0, 1.0]\n    metallic_car_paint.inputs[6].default_value = 0.45\n    metallic_car_paint.inputs[7].default_value = 0.5\n    metallic_car_paint.inputs[8].default_value = 4.2\n    metallic_car_paint.inputs[9].default_value = 0.4\n    metallic_car_paint.inputs[10].default_value = [1.0, 1.0, 1.0, 1.0]\n    metallic_car_paint.inputs[11].default_value = 1.0\n    metallic_car_paint.inputs[12].default_value = 4.2\n    metallic_car_paint.inputs[13].default_value = 4.2\n    metallic_car_paint.inputs[15].default_value = [0.047, 0.457, 0.52, 1.0]\n    metallic_car_paint.inputs[16].default_value = 0.163\n    metallic_car_paint.inputs[17].default_value = [0.0, 0.0, 0.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    anisotropic_bsdf = nodes.new('ShaderNodeBsdfAnisotropic')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    colorramp_2 = nodes.new('ShaderNodeValToRGB')\n\n    # Create links to connect nodes\n    links.new(anisotropic_bsdf.outputs[0], material_output.inputs[0])\n    links.new(colorramp.outputs[0], anisotropic_bsdf.inputs[0])\n    links.new(colorramp_1.outputs[0], anisotropic_bsdf.inputs[1])\n    links.new(colorramp_2.outputs[0], anisotropic_bsdf.inputs[2])\n    links.new(colorramp_2.outputs[0], anisotropic_bsdf.inputs[3])\n    links.new(voronoi_texture.outputs[1], colorramp.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[3], mapping.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_1.inputs[0])\n    links.new(voronoi_texture.outputs[1], colorramp_2.inputs[0])\n\n    # Set parameters for each node\n    voronoi_texture.inputs[2].default_value = 20.0\n    colorramp_1.color_ramp.elements[0].color = [0.343, 0.343, 0.343, 1.0]\n    colorramp_1.color_ramp.elements[1].position = 0.995\n    colorramp_1.color_ramp.elements[1].color = [0.447, 0.447, 0.447, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    mix_shader = nodes.new('ShaderNodeMixShader')\n    mix_shader_1 = nodes.new('ShaderNodeMixShader')\n    checker_texture = nodes.new('ShaderNodeTexChecker')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    mix = nodes.new('ShaderNodeMixRGB')\n    wave_texture = nodes.new('ShaderNodeTexWave')\n    mapping_1 = nodes.new('ShaderNodeMapping')\n    wave_texture_1 = nodes.new('ShaderNodeTexWave')\n    mapping_2 = nodes.new('ShaderNodeMapping')\n    mix_1 = nodes.new('ShaderNodeMixRGB')\n    wave_texture_2 = nodes.new('ShaderNodeTexWave')\n    wave_texture_3 = nodes.new('ShaderNodeTexWave')\n    diffuse_bsdf = nodes.new('ShaderNodeBsdfDiffuse')\n    mix_2 = nodes.new('ShaderNodeMixRGB')\n    layer_weight = nodes.new('ShaderNodeLayerWeight')\n\n    # Create links to connect nodes\n    links.new(mix_shader.outputs[0], material_output.inputs[0])\n    links.new(mix_shader_1.outputs[0], mix_shader.inputs[1])\n    links.new(checker_texture.outputs[0], mix_shader_1.inputs[0])\n    links.new(diffuse_bsdf.outputs[0], mix_shader_1.inputs[1])\n    links.new(mapping.outputs[0], checker_texture.inputs[0])\n    links.new(mix.outputs[0], checker_texture.inputs[1])\n    links.new(mix_1.outputs[0], checker_texture.inputs[2])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(wave_texture.outputs[0], mix.inputs[1])\n    links.new(wave_texture_1.outputs[0], mix.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_1.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_1.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping_2.inputs[0])\n    links.new(wave_texture_2.outputs[0], mix_1.inputs[1])\n    links.new(wave_texture_3.outputs[0], mix_1.inputs[2])\n    links.new(mapping_1.outputs[0], wave_texture_2.inputs[0])\n    links.new(mapping_2.outputs[0], wave_texture_3.inputs[0])\n    links.new(mix_2.outputs[0], diffuse_bsdf.inputs[0])\n    links.new(layer_weight.outputs[1], mix_2.inputs[0])\n    links.new(checker_texture.outputs[0], layer_weight.inputs[0])\n\n    # Set parameters for each node\n    checker_texture.inputs[3].default_value = 100.0\n    mapping.inputs[3].default_value = [3.0, 1.5, 1.0]\n    wave_texture.inputs[1].default_value = 200.0\n    wave_texture.inputs[6].default_value = 1.57\n    wave_texture.bands_direction = 'DIAGONAL'\n    wave_texture.rings_direction = 'SPHERICAL'\n    mapping_1.inputs[2].default_value = [0.0, -0.0, 1.57]\n    mapping_1.inputs[3].default_value = [1.0, 2.0, 1.0]\n    wave_texture_1.inputs[1].default_value = 100.0\n    wave_texture_1.inputs[6].default_value = 1.57\n    wave_texture_1.bands_direction = 'DIAGONAL'\n    wave_texture_1.rings_direction = 'SPHERICAL'\n    mapping_2.inputs[3].default_value = [4.0, 1.0, 1.0]\n    wave_texture_2.inputs[1].default_value = 100.0\n    wave_texture_2.inputs[6].default_value = 1.57\n    wave_texture_2.bands_direction = 'DIAGONAL'\n    wave_texture_2.rings_direction = 'SPHERICAL'\n    wave_texture_3.inputs[1].default_value = 200.0\n    wave_texture_3.inputs[6].default_value = 1.57\n    wave_texture_3.bands_direction = 'DIAGONAL'\n    wave_texture_3.rings_direction = 'SPHERICAL'\n    mix_2.inputs[1].default_value = [0.21, 0.21, 0.21, 1.0]\n    mix_2.inputs[2].default_value = [0.003, 0.003, 0.003, 1.0]\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    decorative_waves_crystal_glass = nodes.new('ShaderNodeGroup')\n    decorative_waves_crystal_glass.node_tree = bpy.data.node_groups['Decorative_Waves_Crystal_Glass']\n\n    # Create links to connect nodes\n    links.new(decorative_waves_crystal_glass.outputs[0], material_output.inputs[0])\n    links.new(decorative_waves_crystal_glass.outputs[1], material_output.inputs[2])\n\n    # Set parameters for each node\n    decorative_waves_crystal_glass.inputs[26].default_value = 1.76\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.508, 0.146, 0.042, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[8].default_value = 0.5\n    principled_bsdf.inputs[9].default_value = 0.2\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    displacement = nodes.new('ShaderNodeDisplacement')\n    invert = nodes.new('ShaderNodeInvert')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(displacement.outputs[0], material_output.inputs[2])\n    links.new(brick_texture.outputs[0], principled_bsdf.inputs[0])\n    links.new(noise_texture.outputs[0], principled_bsdf.inputs[9])\n    links.new(mapping.outputs[0], brick_texture.inputs[0])\n    links.new(voronoi_texture.outputs[0], brick_texture.inputs[6])\n    links.new(noise_texture.outputs[0], brick_texture.inputs[7])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(mapping.outputs[0], noise_texture.inputs[0])\n    links.new(invert.outputs[0], displacement.inputs[0])\n    links.new(brick_texture.outputs[1], invert.inputs[1])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[7].default_value = 0.341\n    principled_bsdf.inputs[14].default_value = 1.0\n    principled_bsdf.inputs[15].default_value = 0.098\n    brick_texture.inputs[1].default_value = [0.8, 0.722, 0.587, 1.0]\n    brick_texture.inputs[2].default_value = [0.292, 0.263, 0.218, 1.0]\n    brick_texture.inputs[3].default_value = [1.0, 1.0, 1.0, 1.0]\n    brick_texture.inputs[4].default_value = 1.7\n    brick_texture.inputs[5].default_value = 0.005\n    brick_texture.inputs[8].default_value = 0.24\n    brick_texture.inputs[9].default_value = 0.11\n    brick_texture.offset = 0.469\n    voronoi_texture.inputs[2].default_value = 351.0\n    noise_texture.inputs[2].default_value = 12.0\n    noise_texture.inputs[3].default_value = 6.4\n    noise_texture.inputs[4].default_value = 1.0\n    displacement.inputs[1].default_value = 0.0\n    displacement.inputs[2].default_value = 0.005\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    mix = nodes.new('ShaderNodeMixRGB')\n    brick_texture = nodes.new('ShaderNodeTexBrick')\n    colorramp = nodes.new('ShaderNodeValToRGB')\n    colorramp_1 = nodes.new('ShaderNodeValToRGB')\n    multiply = nodes.new('ShaderNodeMath')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    divide = nodes.new('ShaderNodeMath')\n    magic_texture = nodes.new('ShaderNodeTexMagic')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(mix.outputs[0], principled_bsdf.inputs[0])\n    links.new(bump.outputs[0], principled_bsdf.inputs[22])\n    links.new(brick_texture.outputs[0], mix.inputs[1])\n    links.new(colorramp.outputs[0], mix.inputs[2])\n    links.new(colorramp_1.outputs[0], colorramp.inputs[0])\n    links.new(multiply.outputs[0], colorramp_1.inputs[0])\n    links.new(brick_texture.outputs[1], multiply.inputs[0])\n    links.new(noise_texture.outputs[0], multiply.inputs[1])\n    links.new(divide.outputs[0], noise_texture.inputs[1])\n    links.new(magic_texture.outputs[1], noise_texture.inputs[5])\n    links.new(mapping.outputs[0], magic_texture.inputs[0])\n    links.new(texture_coordinate.outputs[0], mapping.inputs[0])\n    links.new(brick_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    mix.inputs[0].default_value = 0.942\n    brick_texture.inputs[1].default_value = [0.8, 0.329, 0.074, 1.0]\n    brick_texture.inputs[2].default_value = [0.669, 0.077, 0.056, 1.0]\n    brick_texture.inputs[3].default_value = [0.506, 0.441, 0.487, 1.0]\n    brick_texture.inputs[6].default_value = 0.34\n    colorramp.color_ramp.elements[0].position = 0.409\n    colorramp.color_ramp.elements[0].color = [0.015, 0.047, 0.327, 1.0]\n    colorramp_1.color_ramp.elements[0].position = 0.366\n    colorramp_1.color_ramp.elements[1].position = 0.715\n    multiply.operation = 'MULTIPLY'\n    noise_texture.inputs[2].default_value = 8.09\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.noise_dimensions = '4D'\n    divide.inputs[0].default_value = 30.0\n    divide.inputs[1].default_value = 96.2\n    divide.operation = 'DIVIDE'\n    magic_texture.inputs[1].default_value = 2.42\n    magic_texture.inputs[2].default_value = 1.55\n    bump.inputs[0].default_value = 2.58\n",
  "import bpy\n\ndef shader_material(material: bpy.types.Material):\n    material.use_nodes = True\n    nodes = material.node_tree.nodes\n    links = material.node_tree.links\n\n    # Create nodes\n    material_output = nodes.new('ShaderNodeOutputMaterial')\n    principled_bsdf = nodes.new('ShaderNodeBsdfPrincipled')\n    voronoi_texture = nodes.new('ShaderNodeTexVoronoi')\n    mapping = nodes.new('ShaderNodeMapping')\n    texture_coordinate = nodes.new('ShaderNodeTexCoord')\n    bump = nodes.new('ShaderNodeBump')\n    noise_texture = nodes.new('ShaderNodeTexNoise')\n    tangent = nodes.new('ShaderNodeTangent')\n\n    # Create links to connect nodes\n    links.new(principled_bsdf.outputs[0], material_output.inputs[0])\n    links.new(voronoi_texture.outputs[1], principled_bsdf.inputs[9])\n    links.new(bump.outputs[0], principled_bsdf.inputs[23])\n    links.new(tangent.outputs[0], principled_bsdf.inputs[24])\n    links.new(mapping.outputs[0], voronoi_texture.inputs[0])\n    links.new(texture_coordinate.outputs[2], mapping.inputs[0])\n    links.new(noise_texture.outputs[1], bump.inputs[2])\n\n    # Set parameters for each node\n    principled_bsdf.inputs[0].default_value = [0.033, 0.033, 0.033, 1.0]\n    principled_bsdf.inputs[6].default_value = 1.0\n    principled_bsdf.inputs[7].default_value = 0.673\n    principled_bsdf.inputs[8].default_value = 0.273\n    principled_bsdf.inputs[10].default_value = 0.832\n    principled_bsdf.inputs[13].default_value = 0.0\n    principled_bsdf.inputs[14].default_value = 0.291\n    principled_bsdf.inputs[15].default_value = 0.105\n    principled_bsdf.subsurface_method = 'BURLEY'\n    voronoi_texture.inputs[2].default_value = 61.4\n    voronoi_texture.inputs[3].default_value = 0.9\n    voronoi_texture.feature = 'SMOOTH_F1'\n    mapping.inputs[3].default_value = [382.0, 0.2, 1.0]\n    bump.inputs[0].default_value = 0.025\n    noise_texture.inputs[2].default_value = 253.0\n    noise_texture.inputs[3].default_value = 0.0\n    noise_texture.inputs[4].default_value = 1.0\n"
]