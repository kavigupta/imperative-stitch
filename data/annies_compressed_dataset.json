{
    "548": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store)) (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) None) #0) (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) #0 (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store) (Name %6 Load) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) s_append Load) (list (_starred_content (Name %4 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq) None) ?0 (Return (Subscript (Name %7 Load) (_slice_content (Name %1 Load)) Load)))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil))) nil) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (FunctionDef %5 (arguments nil (list (arg %4 None None)) None nil nil None nil) #0 nil None None) (FunctionDef %10 (arguments nil (list (arg %6 None None) (arg %8 None None)) None nil nil None nil) (/seq (Assign (list (Name %7 Store)) (Call (Name %5 Load) (list (_starred_content (Name %6 Load))) nil) None) (Assign (list (Name %9 Store)) (Call (Name %5 Load) (list (_starred_content (Name %8 Load))) nil) None) (If (Compare (Name %7 Load) (list NotEq) (list (Name %9 Load))) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %7 Load)) Load) (list Gt) (list (Subscript (Name %3 Load) (_slice_content (Name %9 Load)) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %9 Load)) Store)) (Name %7 Load) None)) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %7 Load)) Load) (list Lt) (list (Subscript (Name %3 Load) (_slice_content (Name %9 Load)) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %7 Load)) Store)) (Name %9 Load) None)) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %9 Load)) Store)) (Name %7 Load) None) (AugAssign (Subscript (Name %3 Load) (_slice_content (Name %7 Load)) Store) Add (Constant i1 None))))))) (/seq))) nil None None))",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store)) (BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load) Add (Subscript (Name %2 Load) (_slice_content #0) Load)) Mod (Name %1 Load)) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i3 None))) Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (For (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store) (Name %4 Load) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None)))) nil))) (/seq) None) ?0 (FunctionDef %9 (arguments nil (list (arg %5 None None)) None nil nil None nil) (/seq (If (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Store)) (Constant True None) None) (Assign (list (Name %7 Store)) (Constant i1 None) None) (For (Name %8 Store) (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (/seq (AugAssign (Name %7 Store) Add (Call (Name %9 Load) (list (_starred_content (Name %8 Load))) nil))) (/seq) None) (Return (Name %7 Load))) nil None None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load) (/seq (If (Compare (Name %1 Load) (list Lt) (list (Name %3 Load))) (/seq (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store) Sub (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) ?0) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Constant i1 None) LShift (Name %1 Load))) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Constant i1 None) LShift (Name %1 Load)))) nil) #0 (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %1 None None) (arg %6 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (ListComp (Call (Name g_set Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store) (Name %6 Load) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %5 Load) Sub (Constant i1 None))) Load) s_add Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load) s_add Load) (list (_starred_content (BinOp (Name %5 Load) Sub (Constant i1 None)))) nil))) (/seq) None) ?0 (Return (Subscript (Name %7 Load) (_slice_content (Name %1 Load)) Load))) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 #0 %4 %3 %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %1 Load))) nil))) nil))) (/seq))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Call (Name g_set Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store) Add (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) BitXor (BinOp (Constant i1 None) LShift #0))) Load)) (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store) Mod (Name %3 Load)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) s_add Load) (list (_starred_content (Name %1 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) s_add Load) (list (_starred_content (Name %2 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Store)) (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) Mult (Constant i2 None)) Mod (Name %1 Load)) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) Mult (Constant i2 None)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %2 None None) (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list NotIn) (list (Name %2 Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (List nil Load) None)) (/seq)) (Expr (Call (Attribute (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) s_append Load) (list (_starred_content (Name %3 Load))) nil))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %2 Store) (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (/seq (If (Compare (Name %2 Load) (list Lt) (list (Name %4 Load))) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Store)) (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) Sub (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) Mod (Name %1 Load)) None)) (/seq))) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (/splice (fn_1 (Name g_tuple Load) %4 %3 %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %1 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List nil Load) None) #0 (fn_12 %3 %2) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name %6 Store) (Name %1 Load) (/seq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (BinOp (Name %6 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (fn_7 (BinOp (Name %4 Load) Sub (Name %6 Load)) %5 %2 %4)) (/seq) None)) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (Name %1 Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name %3 Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) nil) None)) (/seq)) (Return (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Name %1 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) s_append Load) (list (_starred_content (Name %2 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &N:1 &_:3 &bad_adj:1 &b:1 &a:1 &bad_pairs:1 &dp:1 (/choiceseq (/splice (fn_2 (fn_26 &MOD:0 &b:1 &dp:1 &i:1 &bad_adj:1) &N:1 &dp:1 &i:1)))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &P:0 Store))) Store)) (fn_16) None) (Assign (list (Name &bad_pairs:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &P:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &parent:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:1 Load) Add (Constant i1 None)))) nil))) nil) None) (fn_12 &N:1 &rank:1) (FunctionDef &find:1 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (fn_29 &x:2 &parent:1 &find:1) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &x:3 None None) (arg &y:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &xroot:3 Store)) (_starred_content (Name &yroot:3 Store))) Store)) (Tuple (list (_starred_content (Call (Name &find:1 Load) (list (_starred_content (Name &x:3 Load))) nil)) (_starred_content (Call (Name &find:1 Load) (list (_starred_content (Name &y:3 Load))) nil))) Load) None) (If (Compare (Name &xroot:3 Load) (list Eq) (list (Name &yroot:3 Load))) (/seq (Return None)) (/seq)) (If (Compare (Subscript (Name &rank:1 Load) (_slice_content (Name &xroot:3 Load)) Load) (list Lt) (list (Subscript (Name &rank:1 Load) (_slice_content (Name &yroot:3 Load)) Load))) (/seq (Assign (list (Subscript (Name &parent:1 Load) (_slice_content (Name &xroot:3 Load)) Store)) (Name &yroot:3 Load) None)) (/seq (If (Compare (Subscript (Name &rank:1 Load) (_slice_content (Name &xroot:3 Load)) Load) (list Gt) (list (Subscript (Name &rank:1 Load) (_slice_content (Name &yroot:3 Load)) Load))) (/seq (Assign (list (Subscript (Name &parent:1 Load) (_slice_content (Name &yroot:3 Load)) Store)) (Name &xroot:3 Load) None)) (/seq (Assign (list (Subscript (Name &parent:1 Load) (_slice_content (Name &yroot:3 Load)) Store)) (Name &xroot:3 Load) None) (AugAssign (Subscript (Name &rank:1 Load) (_slice_content (Name &xroot:3 Load)) Store) Add (Constant i1 None))))))) nil None None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (Expr (Call (Name &union:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (/seq) None) (Assign (list (Name &result:1 Store)) (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name &find:1 Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &N:1) nil i0))))) nil))) nil) None) (Return (BinOp (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &result:1 Load)) (_starred_content (Name &MOD:0 Load))) nil) Sub (Constant i1 None)))) nil None None) (fn_18 (Name g_list Load) &bad_pairs:0 &_:4 &N:0 &P:0 &solve:0)) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (/splice (fn_6 (fn_29 &x:2 &parent:1 &find:1) &N:1 &parent:1 &rank:1 &x:2 &find:1 &x:3 &rootX:3 &y:3 &rootY:3 &union:1)) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (Expr (Call (Name &union:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (/seq) None) (Assign (list (Name &roots:1 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name &find:1 Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &N:1) nil i0))))) nil) None) (Return (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &roots:1 Load))) nil) Sub (Constant i1 None))) (_starred_content (Name &MOD:0 Load))) nil))) nil None None) (/splice (fn_1 (Name g_tuple Load) &P:0 &N:0 &_:4 &bad_pairs:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &P:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_8 &P:0 &N:0) (Assign (list (Name &bad_pairs_graph:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:0 Load))) nil) (/seq (fn_8 &b:0 &a:0) (/splice (fn_30 &b:0 &a:0 &bad_pairs_graph:0))) (/seq) None) (For (Name &key:0 Store) (Call (Attribute (Name &bad_pairs_graph:0 Load) s_keys Load) nil nil) (/seq (Assign (list (Subscript (Name &bad_pairs_graph:0 Load) (_slice_content (Name &key:0 Load)) Store)) (Call (Name g_sorted Load) (list (_starred_content (Subscript (Name &bad_pairs_graph:0 Load) (_slice_content (Name &key:0 Load)) Load))) nil) None)) (/seq) None) (/splice (fn_2 (For (Name &j:0 Store) (fn_10 &i:0) (/seq (Assign (list (Name &bad_in_range:0 Store)) (Constant False None) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &i:0 Load) Sub (Name &j:0 Load)) Add (Constant i1 None))) (_starred_content (Name &i:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list In) (list (Subscript (Name &bad_pairs_graph:0 Load) (_slice_content (Name &k:0 Load)) Load))) (/seq (Assign (list (Name &bad_in_range:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &bad_in_range:0 Load)) (/seq (fn_7 (BinOp (Name &i:0 Load) Sub (Name &j:0 Load)) &MOD:0 &dp:0 &i:0)) (/seq))) (/seq) None) &N:0 &dp:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (While (Name &b:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (BinOp (Name &a:1 Load) Mod (Name &b:1 Load)))) Load) None)) (/seq)) (Return (Name &a:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil (list (arg &N:2 None None) (arg &P:2 None None) (arg &bad_pairs:2 None None)) None nil nil None nil) (/seq (fn_12 &N:2 &edges:2) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Name &bad_pairs:2 Load) (/seq (AugAssign (Subscript (Name &edges:2 Load) (_slice_content (Name &u:2 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:2 Load) (_slice_content (Name &v:2 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &G:2 Store)) (Call (Name &gcd:0 Load) (list (_starred_content (Name &N:2 Load)) (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &edges:2 Load))) nil))) nil) None) (Return (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &G:2 Load)) (_starred_content (Name &MOD:0 Load))) nil))) nil None None) (fn_18 (Name g_tuple Load) &bad_pairs:0 &_:3 &N:0 &P:0 &main:0)) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Name g_tuple Load) &P:1 &N:1 &_:3 &bad_pairs:1)) (Return (Tuple (list (_starred_content (Name &N:1 Load)) (_starred_content (Name &bad_pairs:1 Load))) Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &bad_pairs:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &adj:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Name &bad_pairs:2 Load) (/seq (/splice (fn_30 &v:2 &u:2 &adj:2))) (/seq) None) (/splice (fn_4 (/seq (fn_24 &i:2 &dp:2) (fn_13 &u:2 &dp:2 &i:2 &adj:2 (/choiceseq)) (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) Mod (Name &MOD:0 Load)) None)) &N:2 &dp:2 &i:2)) (Return (Subscript (Name &dp:2 Load) (_slice_content (Name &N:2 Load)) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &bad_pairs:0 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &N:1 &_:2 &graph:1 &b:1 &a:1 &bad_pairs:1 &dp:1 (/choiceseq (/splice (fn_4 (/seq (fn_23 &MOD:0 &i:1 &dp:1) (fn_13 &bad:1 &dp:1 &i:1 &graph:1 (/choiceseq (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Mod (Name &MOD:0 Load))))) &N:1 &dp:1 &i:1)))))) nil None None) (/splice (fn_9 (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &P:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil) &P:0 &N:0 &bad_pairs:0))) nil)",
            "(Module (/seq (FunctionDef &count_set_bits:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (While (Name &n:1 Load) (/seq (AugAssign (Name &count:1 Store) Add (BinOp (Name &n:1 Load) BitAnd (Constant i1 None))) (AugAssign (Name &n:1 Store) RShift (Constant i1 None))) (/seq)) (Return (Name &count:1 Load))) nil None None) (FunctionDef &count_drink_nights:0 (arguments nil (list (arg &N:2 None None) (arg &P:2 None None) (arg &bad_pairs:2 None None)) None nil nil None nil) (/seq (fn_3 &mod:2) (Assign (list (Name &conflicts:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:2 Load)) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store) (Name &bad_pairs:2 Load) (/seq (AugAssign (Subscript (Name &conflicts:2 Load) (_slice_content (BinOp (Name &a:2 Load) Sub (Constant i1 None))) Store) BitOr (BinOp (Constant i1 None) LShift (BinOp (Name &b:2 Load) Sub (Constant i1 None)))) (AugAssign (Subscript (Name &conflicts:2 Load) (_slice_content (BinOp (Name &b:2 Load) Sub (Constant i1 None))) Store) BitOr (BinOp (Constant i1 None) LShift (BinOp (Name &a:2 Load) Sub (Constant i1 None))))) (/seq) None) (/splice (fn_14 (/seq (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &mask:2 Load)) Store)) (Constant i0 None) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:2 Load))) nil) (/seq (If (BinOp (Name &mask:2 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &j:2 Load))) (/seq (If (UnaryOp Not (BinOp (Subscript (Name &conflicts:2 Load) (_slice_content (Name &j:2 Load)) Load) BitAnd (Name &mask:2 Load))) (fn_20 (Name &j:2 Load) &mask:2 &dp:2 &mod:2) (/seq))) (/seq))) (/seq) None)) &N:2 &dp:2 &mask:2)) (Return (Subscript (Name &dp:2 Load) (_slice_content (BinOp (BinOp (Constant i1 None) LShift (Name &N:2 Load)) Sub (Constant i1 None))) Load))) nil None None) (/splice (fn_9 (Call (Name &count_drink_nights:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &P:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil) &P:0 &N:0 &bad_pairs:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &calculate_number_of_possible_drink_combinations:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (fn_12 &n:1 &adj:1) (For (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (AugAssign (Subscript (Name &adj:1 Load) (_slice_content (Name &x:1 Load)) Store) BitOr (BinOp (Constant i1 None) LShift (Name &y:1 Load))) (AugAssign (Subscript (Name &adj:1 Load) (_slice_content (Name &y:1 Load)) Store) BitOr (BinOp (Constant i1 None) LShift (Name &x:1 Load)))) (/seq) None) (/splice (fn_14 (/seq (Assign (list (Name &subset:1 Store)) (Name &mask:1 Load) None) (While (Name &subset:1 Load) (/seq (Assign (list (Name &person:1 Store)) (Call (Attribute (BinOp (Name &subset:1 Load) BitAnd (UnaryOp USub (Name &subset:1 Load))) s_bit_length Load) nil nil) None) (If (UnaryOp Not (BinOp (Subscript (Name &adj:1 Load) (_slice_content (Name &person:1 Load)) Load) BitAnd (Name &mask:1 Load))) (fn_20 (BinOp (Name &person:1 Load) Sub (Constant i1 None)) &mask:1 &dp:1 &MOD:0) (/seq)) (Assign (list (Name &subset:1 Store)) (BinOp (BinOp (Name &subset:1 Load) Sub (Constant i1 None)) BitAnd (Name &mask:1 Load)) None)) (/seq))) &n:1 &dp:1 &mask:1)) (Return (Subscript (Name &dp:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil None None) (/splice (fn_17 (/seq (/splice (fn_27 &bad_pairs:2 &_:3 &n:2 &p:2 &calculate_number_of_possible_drink_combinations:0))) &main:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_15 &N:1 &_:3 &cannot_be_with:1 &b:1 &a:1 &bad_pairs:1 &dp:1 &ways_to_arrange_drinks:0 (/choiceseq (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load))) None) (For (Name &i:1 Store) (fn_10 &N:1) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))) nil) (/seq (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Name &j:1 Load) (list In) (list (Subscript (Name &cannot_be_with:1 Load) (_slice_content (Name &k:4 Load)) Load))) (list (comprehension (Name &k:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &j:1 Load)) (_starred_content (Name &i:1 Load))) nil) nil i0))))) nil) (/seq Break) (/seq)) (fn_7 (Name &j:1 Load) &MOD:0 &dp:1 &i:1)) (/seq) None)) (/seq) None))) (/splice (fn_27 &bad_pairs:0 &_:2 &N:0 &P:0 &ways_to_arrange_drinks:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &num_drink_combos:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &visited:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None) (/splice (fn_11 &b:1 &a:1 &graph:1 &bad_pairs:1 &node:2 &visited:1 &component_size:2 &neighbor:2 &dfs:1 (/choiceseq))) (/splice (fn_28 (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load)) (/seq (Assign (list (Name &component_size:1 Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil) None) (Expr (Call (Attribute (Name &connected_components:1 Load) s_append Load) (list (_starred_content (Name &component_size:1 Load))) nil))) (/seq))) (/seq) None) &connected_components:1 &dp:1 &n:1 &i:1 &MOD:0 &size:1)) (Return (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &dp:1 Load))) nil) Mod (Name &MOD:0 Load)))) nil None None) (/splice (fn_27 &bad_pairs:0 &_:3 &N:0 &P:0 &num_drink_combos:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_25 &u:1 &graph:1 &v:1 &add_edge:0) (FunctionDef &topological_sort:0 (arguments nil (list (arg &graph:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (fn_12 &n:2 &indegree:2) (For (Name &u:2 Store) (Name &graph:2 Load) (/seq (For (Name &v:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &u:2 Load)) Load) (/seq (AugAssign (Subscript (Name &indegree:2 Load) (_slice_content (Name &v:2 Load)) Store) Add (Constant i1 None))) (/seq) None)) (/seq) None) (Assign (list (Name &queue:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (fn_10 &n:2) (/seq (If (Compare (Subscript (Name &indegree:2 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (While (Name &queue:2 Load) (/seq (Assign (list (Name &node:2 Store)) (Call (Attribute (Name &queue:2 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil) None) (AugAssign (Name &count:2 Store) Add (Constant i1 None)) (If (Compare (Name &node:2 Load) (list In) (list (Name &graph:2 Load))) (/seq (For (Name &v:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (AugAssign (Subscript (Name &indegree:2 Load) (_slice_content (Name &v:2 Load)) Store) Sub (Constant i1 None)) (If (Compare (Subscript (Name &indegree:2 Load) (_slice_content (Name &v:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Name &v:2 Load))) nil))) (/seq))) (/seq) None)) (/seq))) (/seq)) (Return (Compare (Name &count:2 Load) (list Eq) (list (Name &n:2 Load))))) nil None None) (FunctionDef &count_sets:0 (arguments nil (list (arg &n:3 None None) (arg &bad_pairs:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:3 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store) (Name &bad_pairs:3 Load) (/seq (Expr (Call (Name &add_edge:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &u:3 Load)) (_starred_content (Name &v:3 Load))) nil)) (Expr (Call (Name &add_edge:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &v:3 Load)) (_starred_content (Name &u:3 Load))) nil))) (/seq) None) (If (UnaryOp Not (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &n:3 Load))) nil)) (/seq (Return (Constant i0 None))) (/seq)) (/splice (fn_4 (/seq (fn_23 &MOD:0 &i:3 &dp:3) (If (Compare (Name &i:3 Load) (list NotIn) (list (Name &graph:3 Load))) (/seq Continue) (/seq)) (fn_13 &j:3 &dp:3 &i:3 &graph:3 (/choiceseq (Assign (list (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Store)) (BinOp (BinOp (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) Add (Name &MOD:0 Load)) Mod (Name &MOD:0 Load)) None)))) &n:3 &dp:3 &i:3)) (Return (Subscript (Name &dp:3 Load) (_slice_content (Name &n:3 Load)) Load))) nil None None) (/splice (fn_27 &bad_pairs:0 &_:4 &n:0 &p:0 &count_sets:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_25 &u:1 &adj:1 &v:1 &add_edge:0) (FunctionDef &find_bad_pairs:0 (arguments nil (list (arg &n:2 None None) (arg &bad_pairs:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &adj:2 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Name &bad_pairs:2 Load) (/seq (Expr (Call (Name &add_edge:0 Load) (list (_starred_content (Name &adj:2 Load)) (_starred_content (Name &u:2 Load)) (_starred_content (Name &v:2 Load))) nil)) (Expr (Call (Name &add_edge:0 Load) (list (_starred_content (Name &adj:2 Load)) (_starred_content (Name &v:2 Load)) (_starred_content (Name &u:2 Load))) nil))) (/seq) None) (Return (Name &adj:2 Load))) nil None None) (FunctionDef &dfs:0 (arguments nil (list (arg &adj:3 None None) (arg &visited:3 None None) (arg &node:3 None None)) None nil nil None nil) (/seq (If (Subscript (Name &visited:3 Load) (_slice_content (Name &node:3 Load)) Load) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Subscript (Name &visited:3 Load) (_slice_content (Name &node:3 Load)) Store)) (Constant True None) None) (Assign (list (Name &count:3 Store)) (Constant i1 None) None) (If (Compare (Name &node:3 Load) (list In) (list (Name &adj:3 Load))) (/seq (For (Name &neighbour:3 Store) (Subscript (Name &adj:3 Load) (_slice_content (Name &node:3 Load)) Load) (/seq (AugAssign (Name &count:3 Store) Add (Call (Name &dfs:0 Load) (list (_starred_content (Name &adj:3 Load)) (_starred_content (Name &visited:3 Load)) (_starred_content (Name &neighbour:3 Load))) nil))) (/seq) None)) (/seq)) (Return (Name &count:3 Load))) nil None None) (FunctionDef &count_ways:0 (arguments nil (list (arg &N:4 None None) (arg &P:4 None None) (arg &bad_pairs:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &adj:4 Store)) (Call (Name &find_bad_pairs:0 Load) (list (_starred_content (Name &N:4 Load)) (_starred_content (Name &bad_pairs:4 Load))) nil) None) (Assign (list (Name &visited:4 Store)) (fn_22 &N:4) None) (/splice (fn_28 (For (Name &node:4 Store) (fn_10 &N:4) (/seq (If (UnaryOp Not (Subscript (Name &visited:4 Load) (_slice_content (Name &node:4 Load)) Load)) (/seq (Expr (Call (Attribute (Name &factors:4 Load) s_append Load) (list (_starred_content (Call (Name &dfs:0 Load) (list (_starred_content (Name &adj:4 Load)) (_starred_content (Name &visited:4 Load)) (_starred_content (Name &node:4 Load))) nil))) nil))) (/seq))) (/seq) None) &factors:4 &dp:4 &N:4 &i:4 &MOD:0 &factor:4)) (Return (Subscript (Name &dp:4 Load) (_slice_content (Name &N:4 Load)) Load))) nil None None) (fn_18 (Name g_tuple Load) &bad_pairs:0 &_:5 &N:0 &P:0 &count_ways:0)) nil)",
            "(Module (/seq (fn_3 &MOD:0) (/splice (fn_1 (Name g_tuple Load) &P:0 &N:0 &_:1 &bad_pairs:0)) (Assign (list (Name &invalid_next:0 Store)) (fn_22 &N:0) None) (For (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store) (Name &bad_pairs:0 Load) (/seq (If (Compare (Name &a:0 Load) (list Lt) (list (Name &b:0 Load))) (/seq (Assign (list (Subscript (Name &invalid_next:0 Load) (_slice_content (Name &a:0 Load)) Store)) (Constant True None) None)) (/seq (Assign (list (Subscript (Name &invalid_next:0 Load) (_slice_content (Name &b:0 Load)) Store)) (Constant True None) None)))) (/seq) None) (/splice (fn_2 (If (UnaryOp Not (Subscript (Name &invalid_next:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (/seq (fn_7 (BinOp (Name &i:0 Load) Sub (Constant i1 None)) &MOD:0 &dp:0 &i:0)) (/seq)) &N:0 &dp:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_bad_pairs:0 (arguments nil (list (arg &N:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (fn_12 &N:1 &bad_sets:1) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (Assign (list (Subscript (Name &bad_sets:1 Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)) Store)) (Constant i1 None) None)) (/seq) None) (Return (Name &bad_sets:1 Load))) nil None None) (FunctionDef &calculate_combinations:0 (arguments nil (list (arg &N:2 None None) (arg &bad_sets:2 None None)) None nil nil None nil) (/seq (fn_3 &MOD:2) (Assign (list (Name &dp:2 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:2 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (For (Name &i:2 Store) (fn_10 &N:2) (/seq (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Store)) (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) None) (If (Compare (Subscript (Name &bad_sets:2 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (fn_7 (BinOp (Name &i:2 Load) Sub (Constant i1 None)) &MOD:2 &dp:2 &i:2)) (/seq))) (/seq) None) (Return (Subscript (Name &dp:2 Load) (_slice_content (Name &N:2 Load)) Load))) nil None None) (/splice (fn_17 (/seq (/splice (fn_1 (Name g_tuple Load) &P:3 &N:3 &_:5 &bad_pairs:3)) (Assign (list (Name &bad_sets:3 Store)) (Call (Name &find_bad_pairs:0 Load) (list (_starred_content (Name &N:3 Load)) (_starred_content (Name &bad_pairs:3 Load))) nil) None) (Assign (list (Name &combinations:3 Store)) (Call (Name &calculate_combinations:0 Load) (list (_starred_content (Name &N:3 Load)) (_starred_content (Name &bad_sets:3 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &combinations:3 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Tuple (list (_starred_content (Name &N:0 Store)) (_starred_content (Name &P:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &adj:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (/splice (fn_30 &b:0 &a:0 &adj:0))) (/seq) None) (/splice (fn_4 (/seq (fn_23 &MOD:0 &i:0 &dp:0) (fn_26 &MOD:0 &bad_neighbour:0 &dp:0 &i:0 &adj:0)) &N:0 &dp:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve_drinks:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Name &bad_pairs:1 Load)) (/seq (Return (BinOp (BinOp (Constant i2 None) Pow (Name &n:1 Load)) Mod (Name &MOD:0 Load)))) (/seq)) (Assign (list (Name &connected:1 Store)) (fn_22 &n:1) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (Assign (list (Subscript (Name &connected:1 Load) (_slice_content (Name &a:1 Load)) Store) (Subscript (Name &connected:1 Load) (_slice_content (Name &b:1 Load)) Store)) (Constant True None) None)) (/seq) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (Assign (list (Name &isolated:1 Store)) (Constant i0 None) None) (Assign (list (Name &visited:1 Store)) (fn_22 &n:1) None) (FunctionDef &dfs:1 (arguments nil (list (arg &v:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &v:2 Load)) Store)) (Constant True None) None) (For (Name &i:2 Store) (fn_10 &n:1) (/seq (If (BoolOp And (list (Subscript (Name &connected:1 Load) (_slice_content (BinOp (BinOp (Name &v:2 Load) Mult (Name &i:2 Load)) Mod (BinOp (Name &n:1 Load) Add (Constant i1 None)))) Load) (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:2 Load)) Load)))) (/seq (Expr (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:2 Load))) nil))) (/seq))) (/seq) None)) nil None None) (For (Name &i:1 Store) (fn_10 &n:1) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load)) (/seq (If (Subscript (Name &connected:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None)) (Expr (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq (AugAssign (Name &isolated:1 Store) Add (Constant i1 None))))) (/seq))) (/seq) None) (Assign (list (Name &result:1 Store)) (BinOp (BinOp (BinOp (Constant i2 None) Pow (Name &isolated:1 Load)) Mult (BinOp (Name &count:1 Load) Add (Constant i1 None))) Mod (Name &MOD:0 Load)) None) (Return (Name &result:1 Load))) nil None None) (/splice (fn_27 &bad_pairs:0 &_:3 &n:0 &p:0 &solve_drinks:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_8 &P:0 &N:0) (Assign (list (Name &bad_pairs:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Attribute (Subscript (Name &bad_pairs:0 Load) (_slice_content (Name &a:0 Load)) Load) s_append Load) (list (_starred_content (Name &b:0 Load))) nil))) (/seq) None) (/splice (fn_2 (If (Compare (Name &i:0 Load) (list In) (list (Name &bad_pairs:0 Load))) (/seq (For (Name &b:0 Store) (Subscript (Name &bad_pairs:0 Load) (_slice_content (Name &i:0 Load)) Load) (/seq (If (Compare (Name &b:0 Load) (list Lt) (list (BinOp (Name &i:0 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i2 None))) Load)) Add (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) Mod (Name &MOD:0 Load)) None)) (/seq (fn_7 (BinOp (Name &i:0 Load) Sub (Constant i1 None)) &MOD:0 &dp:0 &i:0)))) (/seq) None)) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (BinOp (Constant i2 None) Mult (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) Mod (Name &MOD:0 Load)) None))) &N:0 &dp:0 &i:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &parents:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:1 Load) Add (Constant i1 None)))) nil))) nil) None) (Assign (list (Name &size:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &N:1 Load) Add (Constant i1 None))) None) (FunctionDef &find:1 (arguments nil (list (arg &a:2 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Name &parents:1 Load) (_slice_content (Name &a:2 Load)) Load) (list Eq) (list (Name &a:2 Load))) (/seq (Return (Name &a:2 Load))) (/seq)) (Assign (list (Subscript (Name &parents:1 Load) (_slice_content (Name &a:2 Load)) Store)) (Call (Name &find:1 Load) (list (_starred_content (Subscript (Name &parents:1 Load) (_slice_content (Name &a:2 Load)) Load))) nil) None) (Return (Subscript (Name &parents:1 Load) (_slice_content (Name &a:2 Load)) Load))) nil None None) (FunctionDef &union:1 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &root_a:3 Store)) (Call (Name &find:1 Load) (list (_starred_content (Name &a:3 Load))) nil) None) (Assign (list (Name &root_b:3 Store)) (Call (Name &find:1 Load) (list (_starred_content (Name &b:3 Load))) nil) None) (If (Compare (Name &root_a:3 Load) (list NotEq) (list (Name &root_b:3 Load))) (/seq (If (Compare (Subscript (Name &size:1 Load) (_slice_content (Name &root_a:3 Load)) Load) (list Lt) (list (Subscript (Name &size:1 Load) (_slice_content (Name &root_b:3 Load)) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &root_a:3 Store)) (_starred_content (Name &root_b:3 Store))) Store)) (Tuple (list (_starred_content (Name &root_b:3 Load)) (_starred_content (Name &root_a:3 Load))) Load) None)) (/seq)) (Assign (list (Subscript (Name &parents:1 Load) (_slice_content (Name &root_b:3 Load)) Store)) (Name &root_a:3 Load) None) (AugAssign (Subscript (Name &size:1 Load) (_slice_content (Name &root_a:3 Load)) Store) Add (Subscript (Name &size:1 Load) (_slice_content (Name &root_b:3 Load)) Load))) (/seq))) nil None None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (Expr (Call (Name &union:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (/seq) None) (Assign (list (Name &disjoint_sets:1 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name &find:1 Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &N:1) nil i0))))) nil) None) (Return (Call (Name g_pow Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &disjoint_sets:1 Load))) nil) Sub (Constant i1 None))) (_starred_content (Name &MOD:0 Load))) nil))) nil None None) (fn_18 (Name g_tuple Load) &bad_pairs:0 &_:4 &N:0 &P:0 &solve:0)) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_8 &P:0 &N:0) (Assign (list (Name &bad_pairs:0 Store)) (fn_19 &N:0 &_:1) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:0 Load))) nil) (/seq (fn_8 &b:0 &a:0) (/splice (fn_21 &b:0 &a:0 &bad_pairs:0))) (/seq) None) (Assign (list (Name &dp:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:0 Load))) None) (For (Name &i:0 Store) (fn_10 &N:0) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &bad_pair_found:0 Store)) (Constant False None) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &j:0 Load)) (_starred_content (Name &i:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list In) (list (Subscript (Name &bad_pairs:0 Load) (_slice_content (BinOp (Name &k:0 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Name &bad_pair_found:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &bad_pair_found:0 Load)) (/seq (fn_7 (BinOp (Name &j:0 Load) Sub (Constant i1 None)) &MOD:0 &dp:0 &i:0)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_content (Name &N:0 Load)) Load))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &num_ways:0 (arguments nil (list (arg &N:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (fn_12 &N:1 &edges:1) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (AugAssign (Subscript (Name &edges:1 Load) (_slice_content (Name &a:1 Load)) Store) BitOr (BinOp (Constant i1 None) LShift (BinOp (Name &b:1 Load) Sub (Constant i1 None)))) (AugAssign (Subscript (Name &edges:1 Load) (_slice_content (Name &b:1 Load)) Store) BitOr (BinOp (Constant i1 None) LShift (BinOp (Name &a:1 Load) Sub (Constant i1 None))))) (/seq) None) (/splice (fn_14 (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &mask:1 Load)) Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (If (BoolOp And (list (BinOp (Name &mask:1 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &i:1 Load))) (UnaryOp Not (BinOp (Name &mask:1 Load) BitAnd (Subscript (Name &edges:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))))) (fn_20 (Name &i:1 Load) &mask:1 &dp:1 &MOD:0) (/seq))) (/seq) None)) &N:1 &dp:1 &mask:1)) (Return (Subscript (Name &dp:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil None None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_27 &bad_pairs:2 &_:3 &N:2 &P:2 &num_ways:0))) nil None None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &count_sets:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (fn_19 &n:1 &_:2) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (/splice (fn_21 &b:1 &a:1 &graph:1))) (/seq) None) (/splice (fn_4 (/seq (fn_24 &i:1 &dp:1) (fn_13 &j:1 &dp:1 &i:1 &graph:1 (/choiceseq)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Mod (Name &MOD:0 Load))) &n:1 &dp:1 &i:1)) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &n:1 Load)) Load))) nil None None) (/splice (fn_9 (Call (Name &count_sets:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil) &p:0 &n:0 &bad_pairs:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &count_sequences:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (/splice (fn_11 &b:1 &a:1 &graph:1 &bad_pairs:1 &node:3 &visited:1 &size:3 &neighbor:3 &dfs:1 (/choiceseq (Assign (list (Name &visited:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None)))) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &node:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &node:1 Load)) Load)) (/seq (Assign (list (Name &block_size:1 Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &node:1 Load))) nil) None) (Assign (list (Name &result:1 Store)) (BinOp (BinOp (Name &result:1 Load) Mult (Constant i2 None)) Mod (Name &MOD:0 Load)) None)) (/seq))) (/seq) None) (Return (Name &result:1 Load))) nil None None) (/splice (fn_17 (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &p:2 Store))) Store)) (fn_16) None) (Assign (list (Name &bad_pairs:2 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:2 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &count_sequences:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &bad_pairs:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &count_ways:0 (arguments nil (list (arg &N:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &N:1 &_:3 &adj:1 &b:1 &a:1 &bad_pairs:1 &dp:1 (/choiceseq (/splice (fn_2 (For (Name &j:1 Store) (Subscript (Name &adj:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (If (Compare (Name &j:1 Load) (list Lt) (list (Name &i:1 Load))) (/seq (fn_7 (BinOp (Name &j:1 Load) Sub (Constant i1 None)) &MOD:0 &dp:1 &i:1)) (/seq))) (/seq) None) &N:1 &dp:1 &i:1)))))) nil None None) (/splice (fn_27 &bad_pairs:0 &_:2 &N:0 &P:0 &count_ways:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (fn_15 &N:1 &_:3 &constraints:1 &b:1 &a:1 &bad_pairs:1 &dp:1 &count_sets:0 (/choiceseq (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (Name &N:1 Load) Add (Constant i1 None))) None) (For (Name &i:1 Store) (fn_10 &N:1) (/seq (fn_24 &i:1 &dp:1) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name &i:1 Load) Sub (Constant i1 None)) (list In) (list (Subscript (Name &constraints:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Load)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Mod (Name &MOD:0 Load))) (/seq))) (/seq) None)) (/seq) None))) (/splice (fn_1 (Name g_list Load) &P:0 &N:0 &_:2 &bad_pairs:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &count_sets:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (/splice (fn_17 (/seq (fn_8 &P:1 &N:1) (Assign (list (Name &bad_pairs:1 Store)) (fn_19 &N:1 &_:2) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:1 Load))) nil) (/seq (fn_8 &b:1 &a:1) (/splice (fn_21 &b:1 &a:1 &bad_pairs:1))) (/seq) None) (/splice (fn_2 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &i:1 Load))) nil) (/seq (If (Compare (Name &i:1 Load) (list NotIn) (list (Subscript (Name &bad_pairs:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (fn_7 (BinOp (Name &j:1 Load) Sub (Constant i1 None)) &MOD:0 &dp:1 &i:1)) (/seq))) (/seq) None) &N:1 &dp:1 &i:1)) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &N:1 Load)) Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &count_nights:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (fn_3 &mod:1) (/splice (fn_5 &N:1 &_:2 &bad_neighbors:1 &b:1 &a:1 &bad_pairs:1 &dp:1 (/choiceseq (Assign (list (Name &is_bad:1 Store)) (ListComp (fn_22 &N:1) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &i:1 Store) (fn_10 &N:1) (/seq (For (Name &neighbor:1 Store) (Subscript (Name &bad_neighbors:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (Assign (list (Subscript (Subscript (Name &is_bad:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &neighbor:1 Load)) Store)) (Constant True None) None)) (/seq) None)) (/seq) None) (/splice (fn_2 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Subscript (Subscript (Name &is_bad:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Name &i:1 Load)) Load) (/seq Break) (/seq)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Mod (Name &mod:1 Load))) (/seq) None) &N:1 &dp:1 &i:1)))))) nil None None) (/splice (fn_9 (Call (Name &count_nights:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &P:0 Load)) (_starred_content (Name &bad_pairs:0 Load))) nil) &P:0 &N:0 &bad_pairs:0))) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &P:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (fn_19 &N:1 &_:2) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (/splice (fn_21 &b:1 &a:1 &graph:1))) (/seq) None) (/splice (fn_2 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &has_bad_pair:1 Store)) (Constant False None) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Subscript (Name &graph:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (Assign (list (Name &has_bad_pair:1 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &has_bad_pair:1 Load)) (/seq (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load)) (AugAssign (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Mod (Name &MOD:0 Load))) (/seq Break))) (/seq) None) &N:1 &dp:1 &i:1)) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &N:1 Load)) Load))) nil None None) (fn_18 (Name g_list Load) &bad_pairs:0 &_:3 &N:0 &P:0 &solve:0)) nil)",
            "(Module (/seq (fn_3 &MOD:0) (FunctionDef &power:0 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &result:2 Store)) (Constant i1 None) None) (While (Compare (Name &y:2 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BinOp (Name &y:2 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &result:2 Store)) (BinOp (BinOp (Name &result:2 Load) Mult (Name &x:2 Load)) Mod (Name &MOD:0 Load)) None)) (/seq)) (AugAssign (Name &y:2 Store) RShift (Constant i1 None)) (Assign (list (Name &x:2 Store)) (BinOp (BinOp (Name &x:2 Load) Mult (Name &x:2 Load)) Mod (Name &MOD:0 Load)) None)) (/seq)) (Return (Name &result:2 Load))) nil None None) (/splice (fn_17 (/seq (fn_8 &P:1 &N:1) (/splice (fn_6 (/seq (While (Compare (Subscript (Name &parent:1 Load) (_slice_content (Name &x:3 Load)) Load) (list NotEq) (list (Name &x:3 Load))) (/seq (Assign (list (Subscript (Name &parent:1 Load) (_slice_content (Name &x:3 Load)) Store)) (Call (Name &find:1 Load) (list (_starred_content (Subscript (Name &parent:1 Load) (_slice_content (Name &x:3 Load)) Load))) nil) None) (Assign (list (Name &x:3 Store)) (Subscript (Name &parent:1 Load) (_slice_content (Name &x:3 Load)) Load) None)) (/seq)) (Return (Name &x:3 Load))) &N:1 &parent:1 &rank:1 &x:3 &find:1 &x:4 &rootX:4 &y:4 &rootY:4 &union:1)) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &P:1 Load))) nil) (/seq (fn_8 &b:1 &a:1) (Expr (Call (Name &union:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (/seq) None) (Assign (list (Name &roots:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &i:1 Store) (fn_10 &N:1) (/seq (Expr (Call (Attribute (Name &roots:1 Load) s_add Load) (list (_starred_content (Call (Name &find:1 Load) (list (_starred_content (Name &i:1 Load))) nil))) nil))) (/seq) None) (Assign (list (Name &result:1 Store)) (Call (Name &power:0 Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &roots:1 Load))) nil) Sub (Constant i1 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:1 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &count_ways:0 (arguments nil (list (arg &n:1 None None) (arg &bad_pairs:1 None None)) None nil nil None nil) (/seq (fn_3 &mod:1) (Assign (list (Name &good:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (BinOp (Name &n:1 Load) Add (Constant i1 None))) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &bad_pairs:1 Load) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:1 Load) Sub (Name &b:1 Load)))) nil) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Name &good:1 Load) (_slice_content (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)) Store)) (Constant False None) None)) (/seq))) (/seq) None) (/splice (fn_2 (If (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i1 None))) (Subscript (Name &good:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq (fn_7 (BinOp (Name &i:1 Load) Sub (Constant i2 None)) &mod:1 &dp:1 &i:1)) (/seq)) &n:1 &dp:1 &i:1)) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &n:1 Load)) Load))) nil None None) (/splice (fn_27 &bad_pairs:0 &_:2 &N:0 &P:0 &count_ways:0))) nil)"
        ]
    },
    "156": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %5 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i3 None) None) ?0 (Assign (list (Name %2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant s_chocolate None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant s_icecream None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant s_cookies None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant s_chocolate None))) Load))) Load) None) (Assign (list (Name %3 Store)) (Constant i3 None) None) (Assign (list (Name %4 Store)) (List (list (_starred_content (Constant s_chocolate None)) (_starred_content (Constant s_icecream None)) (_starred_content (Constant s_cookies None))) Load) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Dict nil nil) None) ?0 (For (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %4 Load) (/seq (If (Compare (Name %2 Load) (list NotIn) (list (Name %1 Load))) (/seq (Assign (list (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Store)) (List nil Load) None)) (/seq)) (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Name %3 Load))) nil))) (/seq) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list In) (list (Name %2 Load))) (/seq (Expr (Call (Attribute (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) s_append Load) (list (_starred_content #0)) nil))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (List (list (_starred_content #0)) Load) None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/choiceseq (Assign (list (Name %3 Store)) (List nil Load) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name %2 Load))) nil)) (_starred_content (Name %1 Load))) Load))) nil))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (FunctionDef %6 (arguments nil (list (arg %5 None None) (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %7 Store))) Store)) (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None))) Load) None) (Assign (list (Name %9 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant s_chocolate None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant s_icecream None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant s_cookies None))) Load))) Load) None) (/splice (fn_2 %13 %16 %15 %14 (/choiceseq (Assign (list (Name %12 Store)) (List (list (_starred_content (Constant s_chocolate None)) (_starred_content (Constant s_cookies None)) (_starred_content (Constant s_icecream None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %8 Load)) (_starred_content (Name %7 Load)) (_starred_content (Name %9 Load)) (_starred_content (Name %13 Load)) (_starred_content (Name %12 Load))) nil))) nil)) (Assign (list (Tuple (list (_starred_content (Name %11 Store)) (_starred_content (Name %10 Store))) Store)) (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i4 None))) Load) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %11 Load)) (_starred_content (Name %10 Load)) (_starred_content (Name %16 Load)) (_starred_content (Name %15 Load)) (_starred_content (Name %14 Load))) nil))) nil)))",
                "sym_arity": 16,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/choiceseq (Assign (list (Name %1 Store)) (ListComp #0 (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) None) (Assign (list (Name %1 Store)) (ListComp (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name %3 Load))) nil)) (_starred_content (Name %2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %1 Load) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Gt) (list (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i3 None) None) (/splice (fn_2 %2 %5 %4 %3 (/choiceseq (Assign (list (Name %5 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant s_chocolate None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant s_icecream None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant s_cookies None))) Load))) Load) None) (Assign (list (Name %4 Store)) (Constant i3 None) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Constant s_chocolate None)) (_starred_content (Constant s_cookies None)) (_starred_content (Constant s_icecream None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) nil))) nil)) (Assign (list (Name %1 Store)) (Constant i3 None) None) (Assign (list (Name %2 Store)) (Constant i4 None) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) nil))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (If (Compare (Name %1 Load) (list NotIn) (list (Name %2 Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name g_set Load) nil nil) None)) (/seq)) (Expr (Call (Attribute (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) s_add Load) (list (_starred_content (Name %3 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (UnaryOp Not (Name %1 Load)) (/seq (Return (Constant s_impossible None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_all Load) (list (_starred_content (GeneratorExp (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Eq) (list (Constant i1 None))) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (If (Compare (Name %1 Load) (list NotIn) (list (Name %2 Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (List nil Load) None)) (/seq)) (Expr (Call (Attribute (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) s_append Load) (list (_starred_content (Name %3 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_unique None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ambiguous None))) nil))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (UnaryOp Not (Name %1 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil)) (Return None)) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Eq) (list (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant s_chocolate None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant s_icecream None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant s_cookies None))) Load))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %9 (arguments nil (list (arg %8 None None) (arg %7 None None) (arg %4 None None) (arg %6 None None) (arg %5 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %4 Load) (/seq (fn_4 (Name %3 Load) %2 %1)) (/seq) None) ?0) nil None None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Call (Name g_set Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare #0 (list Eq) (list (Constant i1 None))) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &determine_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_stores:1 &item:1 &store:1 &store_items:1 (/choiceseq))) (Assign (list (Name &possible_paths:1 Store)) (List nil Load) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (If (Compare (Name &item:1 Load) (list NotIn) (list (Name &item_stores:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (If (UnaryOp Not (Name &possible_paths:1 Load)) (/seq (Assign (list (Name &possible_paths:1 Store)) (ListComp (List (list (_starred_content (Name &store:3 Load))) Load) (list (comprehension (Name &store:3 Store) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) nil i0))) None)) (/seq (Assign (list (Name &new_paths:1 Store)) (List nil Load) None) (For (Name &path:1 Store) (Name &possible_paths:1 Load) (/seq (For (Name &store:1 Store) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) (/seq (If (Compare (Name &store:1 Load) (list GtE) (list (fn_25 &path:1))) (/seq (Expr (Call (Attribute (Name &new_paths:1 Load) s_append Load) (list (_starred_content (BinOp (Name &path:1 Load) Add (List (list (_starred_content (Name &store:1 Load))) Load)))) nil))) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (Name &new_paths:1 Load) None) (fn_12 &possible_paths:1)))) (/seq) None) (Assign (list (Name &unique_paths_set:1 Store)) (ListComp (Call (Name g_set Load) (list (_starred_content (Name &path:2 Load))) nil) (list (comprehension (Name &path:2 Store) (Name &possible_paths:1 Load) nil i0))) None) (If (fn_18 &unique_paths_set:1) (/seq (Return (Constant s_unique None))) (/seq (Assign (list (Name &merged_set:1 Store)) (Call (Attribute (Call (Name g_set Load) nil nil) s_union Load) (list (_starred_starred (Starred (Name &unique_paths_set:1 Load) Load))) nil) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &merged_set:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Subscript (Name &unique_paths_set:1 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None))))))) nil None None) (/splice (fn_2 &N:0 &store_items:0 &M:0 &purchased_items:0 (/choiceseq (Assign (list (Name &K:0 Store)) (Constant i4 None) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &validate_purchases:0 (arguments nil (list (arg &store_count:1 None None) (arg &items_in_stores:1 None None) (arg &purchase_list:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &store_inventories:1 Store)) (fn_21 &store_count:1 &_:5) None) (Assign (list (Name &purchase_possibilities:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &store_idx:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &items_in_stores:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &store_inventories:1 Load) (_slice_content (Name &store_idx:1 Load)) Load) s_add Load) (list (_starred_content (Name &item:1 Load))) nil))) (/seq) None) (For (Name &purchased_item:1 Store) (Name &purchase_list:1 Load) (/seq (Assign (list (Name &possible_stores:1 Store)) (SetComp (Name &idx:6 Load) (list (comprehension (Tuple (list (_starred_content (Name &idx:6 Store)) (_starred_content (Name &inventory:6 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &store_inventories:1 Load))) nil) (list (Compare (Name &purchased_item:1 Load) (list In) (list (Name &inventory:6 Load)))) i0))) None) (Expr (Call (Attribute (Name &purchase_possibilities:1 Load) s_append Load) (list (_starred_content (Name &possible_stores:1 Load))) nil))) (/seq) None) (Assign (list (Name &current_possibility:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &store_count:1 Load))) nil))) nil) None) (Assign (list (Name &path_is_unique:1 Store)) (Constant True None) None) (For (Tuple (list (_starred_content (Name &purchase_idx:1 Store)) (_starred_content (Name &possibilities:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &purchase_possibilities:1 Load))) nil) (/seq (AugAssign (Name &current_possibility:1 Store) BitAnd (Name &possibilities:1 Load)) (fn_12 &current_possibility:1) (If (BoolOp And (list (Compare (BinOp (Name &purchase_idx:1 Load) Add (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &purchase_possibilities:1 Load))) nil))) (UnaryOp Not (BinOp (Name &current_possibility:1 Load) BitAnd (Subscript (Name &purchase_possibilities:1 Load) (_slice_content (BinOp (Name &purchase_idx:1 Load) Add (Constant i1 None))) Load))))) (/seq (Assign (list (Name &current_possibility:1 Store)) (Subscript (Name &purchase_possibilities:1 Load) (_slice_content (BinOp (Name &purchase_idx:1 Load) Add (Constant i1 None))) Load) None) (If (fn_8 &current_possibility:1) (/seq (Assign (list (Name &path_is_unique:1 Store)) (Constant False None) None)) (/seq))) (/seq (If (fn_8 &current_possibility:1) (/seq (Assign (list (Name &path_is_unique:1 Store)) (Constant False None) None)) (/seq))))) (/seq) None) (Return (IfExp (Name &path_is_unique:1 Load) (Constant s_unique None) (Constant s_ambiguous None)))) nil None None) (/splice (fn_1 &N:0 &K:0 &M:0 &_:4 &purchased_items:0 (fn_7 (Call (Name g_tuple Load) (list (_starred_content (fn_11))) nil) &store_items:0 &s:3 &i:3 &K:0 &_:2))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &validate_purchases:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &det_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &bought_items:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &items:1 Store)) (DictComp (Name &v:2 Load) (Name &i:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Name &store_items:1 Load) nil i0))) None) (Assign (list (Name &possible_paths:1 Store)) (List nil Load) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (If (Compare (Name &item:1 Load) (list In) (list (Name &items:1 Load))) (/seq (Expr (Call (Attribute (Name &possible_paths:1 Load) s_append Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Subscript (Name &items:1 Load) (_slice_content (Name &item:1 Load)) Load))) Load))) nil))) nil))) (/seq (Return (Constant s_impossible None))))) (/seq) None) (Assign (list (Name &path:1 Store)) (List nil Load) None) (For (Name &possible_stores:1 Store) (Name &possible_paths:1 Load) (/seq (If (fn_18 &possible_stores:1) (/seq (Assign (list (Name &store:1 Store)) (Call (Attribute (Name &possible_stores:1 Load) s_pop Load) nil nil) None) (If (BoolOp Or (list (UnaryOp Not (Name &path:1 Load)) (Compare (fn_25 &path:1) (list LtE) (list (Name &store:1 Load))))) (/seq (Expr (Call (Attribute (Name &path:1 Load) s_append Load) (list (_starred_content (Name &store:1 Load))) nil))) (/seq (Return (Constant s_impossible None))))) (/seq (Return (Constant s_ambiguous None))))) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &path:1 Load))) nil) (list Eq) (list (Name &M:1 Load))) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None))))) nil None None) (/splice (fn_1 &N:0 &K:0 &M:0 &_:3 &bought_items:0 (fn_5 &S:0 &i:0 &store_items:0 &K:0 &_:0))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &det_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &bought_items:0 Load))) nil))) nil))) nil)",
            "(Module (fn_6 (/seq (Assign (list (Name &store_to_items:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &S:1 Store))) Store) (Name &store_items:1 Load) (/seq (/splice (fn_10 &i:1 &store_to_items:1 &S:1))) (/seq) None) (Assign (list (Name &item_to_stores:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &S:1 Store))) Store) (Name &store_items:1 Load) (/seq (/splice (fn_10 &S:1 &item_to_stores:1 &i:1))) (/seq) None) (Assign (list (Name &current_possible_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil))) nil) None) (Assign (list (Name &ambiguity:1 Store)) (Constant False None) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (AugAssign (Name &current_possible_stores:1 Store) BitAnd (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load)) (fn_12 &current_possible_stores:1) (If (fn_8 &current_possible_stores:1) (/seq (Assign (list (Name &ambiguity:1 Store)) (Constant True None) None)) (/seq (Assign (list (Name &next_possible_stores:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &store:1 Store) (Name &current_possible_stores:1 Load) (/seq (Assign (list (Name &next_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (ListComp (Name &s:2 Load) (list (comprehension (Name &s:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &store:1 Load) Add (Constant i1 None))) (_starred_content (Name &N:1 Load))) nil) nil i0))))) nil) None) (Assign (list (Name &next_possible_stores:1 Store)) (Call (Attribute (Name &next_possible_stores:1 Load) s_union Load) (list (_starred_content (Name &next_stores:1 Load))) nil) None)) (/seq) None) (Assign (list (Name &current_possible_stores:1 Store)) (Name &next_possible_stores:1 Load) None)))) (/seq) None) (Return (IfExp (UnaryOp Not (Name &ambiguity:1 Load)) (Constant s_unique None) (Constant s_ambiguous None)))) &bought_items:1 &M:1 &store_items:1 &K:1 &N:1 &determine_path_possibility:0 &K1:0 &N1:0 &store_items1:0 &K2:0 &N2:0 &bought_items1:0 &M1:0 &bought_items2:0 &M2:0 &store_items2:0) nil)",
            "(Module (fn_6 (/seq (/splice (fn_3 &availability:1 &item:1 &i:1 &inventory:1 (/choiceseq))) (FunctionDef &is_valid_path:1 (arguments nil (list (arg &item:2 None None) (arg &pos:2 None None) (arg &path:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &pos:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant True None))) (/seq)) (For (Name &prev_item_store:2 Store) (Subscript (Name &availability:1 Load) (_slice_content (Subscript (Name &purchases:1 Load) (_slice_content (BinOp (Name &pos:2 Load) Sub (Constant i1 None))) Load)) Load) (/seq (If (BoolOp Or (list (Compare (Name &item:2 Load) (list Eq) (list (Name &prev_item_store:2 Load))) (Compare (Name &item:2 Load) (list Gt) (list (Name &prev_item_store:2 Load))))) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (Assign (list (Name &path:1 Store)) (List nil Load) None) (Assign (list (Name &ambiguous:1 Store)) (Constant False None) None) (For (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &purchase:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &purchases:1 Load))) nil) (/seq (If (Compare (Name &purchase:1 Load) (list NotIn) (list (Name &availability:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &valid_stores:1 Store)) (ListComp (Name &store:3 Load) (list (comprehension (Name &store:3 Store) (Subscript (Name &availability:1 Load) (_slice_content (Name &purchase:1 Load)) Load) (list (Call (Name &is_valid_path:1 Load) (list (_starred_content (Name &store:3 Load)) (_starred_content (Name &pos:1 Load)) (_starred_content (Name &path:1 Load))) nil)) i0))) None) (If (UnaryOp Not (Name &valid_stores:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (If (fn_8 &valid_stores:1) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant True None) None)) (/seq)))) (Expr (Call (Attribute (Name &path:1 Load) s_append Load) (list (_starred_content (Subscript (Name &valid_stores:1 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq) None) (Return (IfExp (Name &ambiguous:1 Load) (Constant s_ambiguous None) (Constant s_unique None)))) &purchases:1 &M:1 &inventory:1 &K:1 &N:1 &determine_path:0 &K1:0 &N1:0 &inventory1:0 &K2:0 &N2:0 &purchases1:0 &M1:0 &purchases2:0 &M2:0 &inventory2:0) nil)",
            "(Module (/seq (FunctionDef &find_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &items:1 None None) (arg &M:1 None None) (arg &purchase:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_to_store:1 &item:1 &i:1 &items:1 (/choiceseq))) (Assign (list (Name &possible_paths:1 Store)) (Constant i1 None) None) (Assign (list (Name &last_store:1 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &item:1 Store) (Name &purchase:1 Load) (/seq (If (Compare (Name &item:1 Load) (list In) (list (Name &item_to_store:1 Load))) (/seq (Assign (list (Name &stores_with_item:1 Store)) (Subscript (Name &item_to_store:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &stores_with_item:1 Store)) (ListComp (Name &store:2 Load) (list (comprehension (Name &store:2 Store) (Name &stores_with_item:1 Load) (list (Compare (Name &store:2 Load) (list Gt) (list (Name &last_store:1 Load)))) i0))) None) (If (UnaryOp Not (Name &stores_with_item:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (If (fn_8 &stores_with_item:1) (/seq (AugAssign (Name &possible_paths:1 Store) Mult (Call (Name g_len Load) (list (_starred_content (Name &stores_with_item:1 Load))) nil)) (Assign (list (Name &last_store:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &stores_with_item:1 Load))) nil) None)) (/seq (Assign (list (Name &last_store:1 Store)) (Subscript (Name &stores_with_item:1 Load) (_slice_content (Constant i0 None)) Load) None)))))) (/seq (Return (Constant s_impossible None))))) (/seq) None) (fn_22 (Name &possible_paths:1 Load))) nil None None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (fn_23))) nil) None) (Assign (list (Name &K:0 Store)) (Call (Name g_int Load) (list (_starred_content (fn_23))) nil) None) (Assign (list (Name &items:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &item:0 Store))) Store)) (fn_11) None) (Expr (Call (Attribute (Name &items:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil)) (_starred_content (Name &item:0 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &M:0 Store)) (Call (Name g_int Load) (list (_starred_content (fn_23))) nil) None) (Assign (list (Name &purchase:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &purchase:0 Load) s_append Load) (list (_starred_content (fn_23))) nil))) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &find_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchase:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &determine_path_status:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &store_map:1 &item:1 &i:1 &store_items:1 (/choiceseq))) (Assign (list (Name &current_stores:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (If (Compare (Name &item:1 Load) (list NotIn) (list (Name &store_map:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &current_stores:1 Store)) (ListComp (Name &store:2 Load) (list (comprehension (Name &store:2 Store) (Subscript (Name &store_map:1 Load) (_slice_content (Name &item:1 Load)) Load) (list (BoolOp Or (list (Compare (Name &store:2 Load) (list In) (list (Name &current_stores:1 Load))) (Compare (fn_25 &current_stores:1) (list Lt) (list (Name &store:2 Load)))))) i0))) None) (fn_12 &current_stores:1) (If (fn_8 &current_stores:1) (/seq (Assign (list (Name &current_status:1 Store)) (Constant s_ambiguous None) None)) (/seq))) (/seq) None) (If (Compare (Name &current_status:1 Load) (list Eq) (list (Constant s_ambiguous None))) (/seq (Return (Constant s_ambiguous None))) (/seq (Return (Constant s_unique None))))) nil None None) (/splice (fn_2 &N:0 &store_items:0 &M:0 &purchased_items:0 (/choiceseq (Assign (list (Name &K:0 Store)) (Constant i4 None) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_path_status:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_path_through_stores:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_15 &N:1 &K:1 &M:1 (/choiceseq (Assign (list (Name &inventory:1 Store)) (fn_21 &N:1 &_:2) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &store_index:1 Store)) (_starred_content (Name &item:1 Store))) Store)) (fn_24) None) (Assign (list (Name &store_index:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &store_index:1 Load))) nil) None) (Expr (Call (Attribute (Subscript (Name &inventory:1 Load) (_slice_content (Name &store_index:1 Load)) Load) s_add Load) (list (_starred_content (Name &item:1 Load))) nil))) (/seq) None)))) (Assign (list (Name &purchased_items:1 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:1 Load))) nil) nil i0))) None) (Assign (list (Name &possible_store_paths:1 Store)) (List (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil))) nil))) Load) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (Assign (list (Name &new_possible_path:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &store_index:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (If (Compare (Name &item:1 Load) (list In) (list (Subscript (Name &inventory:1 Load) (_slice_content (Name &store_index:1 Load)) Load))) (/seq (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Name &store_index:1 Load) (list In) (list (Name &possible_stores:5 Load))) (list (comprehension (Name &possible_stores:5 Store) (Subscript (Name &possible_store_paths:1 Load) (_slice_slice (Slice (UnaryOp USub (Constant i1 None)) None None)) Load) nil i0))))) nil) (/seq (Expr (Call (Attribute (Name &new_possible_path:1 Load) s_add Load) (list (_starred_content (Name &store_index:1 Load))) nil))) (/seq))) (/seq))) (/seq) None) (fn_17 &new_possible_path:1) (Expr (Call (Attribute (Name &possible_store_paths:1 Load) s_append Load) (list (_starred_content (Name &new_possible_path:1 Load))) nil))) (/seq) None) (fn_16 (fn_13 &possible_store_paths:1 &possible_stores:4))) nil None None) (Expr (Call (Name &find_path_through_stores:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &determine_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &items_bought:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &item_stores:1 Store)) (Call (Name g_dict Load) nil nil) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &store_items:1 Load) (/seq (fn_4 (Name &i:1 Load) &item:1 &item_stores:1)) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load))) Load) None) (For (Name &item:1 Store) (Name &items_bought:1 Load) (/seq (Assign (list (Name &stores:1 Store)) (Call (Attribute (Name &item_stores:1 Load) s_get Load) (list (_starred_content (Name &item:1 Load)) (_starred_content (List nil Load))) nil) None) (Assign (list (Name &new_paths:1 Store)) (List nil Load) None) (For (Name &store:1 Store) (Name &stores:1 Load) (/seq (For (Name &path:1 Store) (Name &possible_paths:1 Load) (/seq (If (Compare (Name &store:1 Load) (list Gt) (list (fn_25 &path:1))) (/seq (Expr (Call (Attribute (Name &new_paths:1 Load) s_append Load) (list (_starred_content (BinOp (Name &path:1 Load) Add (List (list (_starred_content (Name &store:1 Load))) Load)))) nil))) (/seq))) (/seq) None)) (/seq) None) (fn_12 &new_paths:1) (Assign (list (Name &possible_paths:1 Store)) (Name &new_paths:1 Load) None)) (/seq) None) (Return (IfExp (fn_18 &possible_paths:1) (Constant s_unique None) (Constant s_ambiguous None)))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_15 &N:0 &K:0 &M:0 (/choiceseq (Assign (list (Name &store_items:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_24))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:0 Load))) nil) nil i0))) None) (Assign (list (Name &store_items:0 Store)) (ListComp (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &i:3 Load))) nil)) (_starred_content (Name &s:3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &s:3 Store))) Store) (Name &store_items:0 Load) nil i0))) None)))) (Assign (list (Name &items_bought:0 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &items_bought:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_path_through_stores:0 (arguments nil (list (arg &n:1 None None) (arg &k_items:1 None None) (arg &m:1 None None) (arg &items_purchased:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &store_inventory:1 &item:1 &store:1 &k_items:1 (/choiceseq))) (Assign (list (Name &possible_paths:1 Store)) (Constant i1 None) None) (Assign (list (Name &prev_max_store:1 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &item:1 Store) (Name &items_purchased:1 Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &store_inventory:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &current_stores:1 Store)) (ListComp (Name &store:5 Load) (list (comprehension (Name &store:5 Store) (Name &current_stores:1 Load) (list (Compare (Name &store:5 Load) (list Gt) (list (Name &prev_max_store:1 Load)))) i0))) None) (fn_12 &current_stores:1) (If (fn_8 &current_stores:1) (/seq (Assign (list (Name &possible_paths:1 Store)) (Constant i2 None) None)) (/seq)) (Assign (list (Name &prev_max_store:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &current_stores:1 Load))) nil) None)) (/seq) None) (Return (IfExp (Compare (Name &possible_paths:1 Load) (list Eq) (list (Constant i1 None))) (Constant s_unique None) (Constant s_ambiguous None)))) nil None None) (/splice (fn_1 &n:0 &k:0 &m:0 &_:4 &items_purchased:0 (fn_7 (fn_11) &k_items:0 &item:3 &store:3 &k:0 &_:2))) (Assign (list (Name &result:0 Store)) (Call (Name &find_path_through_stores:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k_items:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &items_purchased:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_path_type:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &store_items:1 None None) (arg &m:1 None None) (arg &bought_items:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &store_to_items:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &store:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &store_items:1 Load) (/seq (/splice (fn_14 &store:1 &store_to_items:1 &item:1))) (/seq) None) (/splice (fn_3 &item_to_stores:1 &item:1 &store:1 &store_items:1 (/choiceseq))) (Assign (list (Name &path:1 Store)) (List nil Load) None) (Assign (list (Name &next_possible_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil))) nil) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (Assign (list (Name &possible_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load))) nil) None) (Assign (list (Name &possible_stores:1 Store)) (BinOp (Name &possible_stores:1 Load) BitAnd (Name &next_possible_stores:1 Load)) None) (fn_12 &possible_stores:1) (If (fn_18 &possible_stores:1) (/seq (Assign (list (Name &next_possible_stores:1 Store)) (Set (list (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) Add (Constant i1 None))))) None) (Expr (Call (Attribute (Name &path:1 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &possible_stores:1 Load))) nil))) nil))) (/seq (Expr (Call (Attribute (Name &next_possible_stores:1 Load) s_clear Load) nil nil)) (For (Name &store:1 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &next_possible_stores:1 Load) s_add Load) (list (_starred_content (BinOp (Name &store:1 Load) Add (Constant i1 None)))) nil)) (If (Compare (Name &store:1 Load) (list NotIn) (list (Name &path:1 Load))) (/seq (Expr (Call (Attribute (Name &path:1 Load) s_append Load) (list (_starred_content (Name &store:1 Load))) nil))) (/seq))) (/seq) None)))) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &path:1 Load))) nil) (list Gt) (list (Name &m:1 Load))) (/seq (Return (Constant s_ambiguous None))) (/seq)) (Return (Constant s_unique None))) nil None None) (/splice (fn_2 &n1:0 &store_items2:0 &m2:0 &bought_items2:0 (/choiceseq (Assign (list (Name &k1:0 Store)) (Constant i3 None) None) (Assign (list (Name &store_items1:0 Store)) (fn_19) None) (Assign (list (Name &m1:0 Store)) (Constant i3 None) None) (Assign (list (Name &bought_items1:0 Store)) (List (list (_starred_content (Constant s_chocolate None)) (_starred_content (Constant s_cookies None)) (_starred_content (Constant s_icecream None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_path_type:0 Load) (list (_starred_content (Name &n1:0 Load)) (_starred_content (Name &k1:0 Load)) (_starred_content (Name &store_items1:0 Load)) (_starred_content (Name &m1:0 Load)) (_starred_content (Name &bought_items1:0 Load))) nil))) nil)) (Assign (list (Name &n2:0 Store)) (Constant i3 None) None) (Assign (list (Name &k2:0 Store)) (Constant i4 None) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_path_type:0 Load) (list (_starred_content (Name &n2:0 Load)) (_starred_content (Name &k2:0 Load)) (_starred_content (Name &store_items2:0 Load)) (_starred_content (Name &m2:0 Load)) (_starred_content (Name &bought_items2:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_20 &item_stores:1 &item:1 &store:1 &store_items:1 &purchases:1 &M:1 &K:1 &N:1 &find_path_through_stores:0 (/choiceseq (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i0 None))) Load))) Load) None) (For (Name &item:1 Store) (Name &purchases:1 Load) (/seq (If (Compare (Name &item:1 Load) (list NotIn) (list (Name &item_stores:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &new_paths:1 Store)) (List nil Load) None) (For (Name &path:1 Store) (Name &possible_paths:1 Load) (/seq (For (Name &store:1 Store) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) (/seq (If (Compare (Name &store:1 Load) (list GtE) (list (fn_25 &path:1))) (/seq (Assign (list (Name &new_path:1 Store)) (BinOp (Name &path:1 Load) Add (List (list (_starred_content (Name &store:1 Load))) Load)) None) (Expr (Call (Attribute (Name &new_paths:1 Load) s_append Load) (list (_starred_content (Name &new_path:1 Load))) nil))) (/seq))) (/seq) None)) (/seq) None) (fn_12 &new_paths:1) (Assign (list (Name &filtered_paths:1 Store)) (List nil Load) None) (For (Name &path:1 Store) (Name &new_paths:1 Load) (/seq (If (Compare (Name &path:1 Load) (list NotIn) (list (Name &filtered_paths:1 Load))) (/seq (Expr (Call (Attribute (Name &filtered_paths:1 Load) s_append Load) (list (_starred_content (Name &path:1 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (Name &filtered_paths:1 Load) None) (If (fn_8 &possible_paths:1) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant True None) None)) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant False None) None)))) (/seq) None) (If (BoolOp Or (list (Name &ambiguous:1 Load) (fn_8 &possible_paths:1))) (/seq (Return (Constant s_ambiguous None))) (/seq (If (fn_18 &possible_paths:1) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_impossible None)))))))) (/splice (fn_1 &N:0 &K:0 &M:0 &_:2 &purchases:0 (/choiceseq (Assign (list (Name &store_items:0 Store)) (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Name &K:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &store:0 Store)) (_starred_content (Name &item:0 Store))) Store)) (fn_11) None) (Assign (list (Subscript (Name &store_items:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &store:0 Load))) nil)) (_starred_content (Name &item:0 Load))) Load) None)) (/seq) None)))) (Assign (list (Name &result:0 Store)) (Call (Name &find_path_through_stores:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchases:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (fn_6 (/seq (Assign (list (Name &inventory:1 Store)) (DictComp (Name &i:2 Load) (List nil Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) nil i0))) None) (For (Name &location:1 Store) (Name &item_locations:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &store:1 Store)) (_starred_content (Name &item:1 Store))) Store)) (Name &location:1 Load) None) (Expr (Call (Attribute (Subscript (Name &inventory:1 Load) (_slice_content (Name &store:1 Load)) Load) s_append Load) (list (_starred_content (Name &item:1 Load))) nil))) (/seq) None) (Assign (list (Name &item_to_stores:1 Store)) (Dict nil nil) None) (For (Name &item:1 Store) (Name &purchases:1 Load) (/seq (Assign (list (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Store)) (ListComp (Name &store:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &store:3 Store)) (_starred_content (Name &items:3 Store))) Store) (Call (Attribute (Name &inventory:1 Load) s_items Load) nil nil) (list (Compare (Name &item:1 Load) (list In) (list (Name &items:3 Load)))) i0))) None)) (/seq) None) (Assign (list (Name &possibility_count:1 Store)) (Constant i1 None) None) (Assign (list (Name &visited_stores:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &purchases:1 Load))) nil) (/seq (Assign (list (Name &possible_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load))) nil) None) (If (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &prev_item:1 Store)) (Subscript (Name &purchases:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &prev_possible_stores:1 Store)) (Call (Name g_set Load) (list (_starred_content (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &prev_item:1 Load)) Load))) nil) None) (Assign (list (Name &possible_stores:1 Store)) (Call (Attribute (Name &possible_stores:1 Load) s_intersection Load) (list (_starred_content (Call (Attribute (Name &visited_stores:1 Load) s_union Load) (list (_starred_content (Name &prev_possible_stores:1 Load))) nil))) nil) None)) (/seq)) (fn_12 &possible_stores:1) (Assign (list (Name &current_possibility_count:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) None) (Assign (list (Name &visited_stores:1 Store)) (Name &possible_stores:1 Load) None) (If (Compare (Name &current_possibility_count:1 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &possibility_count:1 Store) Mult (Name &current_possibility_count:1 Load))) (/seq))) (/seq) None) (fn_22 (Name &possibility_count:1 Load))) &purchases:1 &M:1 &item_locations:1 &K:1 &N:1 &decode_shopping:0 &K1:0 &N1:0 &item_locations1:0 &K2:0 &N2:0 &purchases1:0 &M1:0 &purchases2:0 &M2:0 &item_locations2:0) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &N:1 &K:1 &M:1 &_:3 &purchases:1 (/choiceseq (Assign (list (Name &store_items:1 Store)) (fn_21 &N:1 &_:2) None) (Assign (list (Name &item_stores:1 Store)) (Dict nil nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &S:1 Store))) Store)) (fn_11) None) (Assign (list (Name &i:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) None) (Expr (Call (Attribute (Subscript (Name &store_items:1 Load) (_slice_content (Name &i:1 Load)) Load) s_add Load) (list (_starred_content (Name &S:1 Load))) nil)) (/splice (fn_10 &S:1 &item_stores:1 &i:1))) (/seq) None)))) (Assign (list (Name &possible_stores:1 Store)) (List (list (_starred_content (Subscript (Name &item_stores:1 Load) (_slice_content (Subscript (Name &purchases:1 Load) (_slice_content (Constant i0 None)) Load)) Load))) Load) None) (For (Name &item:1 Store) (Subscript (Name &purchases:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &new_possible_stores:1 Store)) (List nil Load) None) (For (Name &store:1 Store) (Name &current_stores:1 Load) (/seq (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Name &store:1 Load) (list GtE) (list (Name &ps:4 Load))) (list (comprehension (Name &ps:4 Store) (fn_25 &possible_stores:1) nil i0))))) nil) (/seq (Expr (Call (Attribute (Name &new_possible_stores:1 Load) s_append Load) (list (_starred_content (Name &store:1 Load))) nil))) (/seq))) (/seq) None) (fn_17 &new_possible_stores:1) (Expr (Call (Attribute (Name &possible_stores:1 Load) s_append Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &new_possible_stores:1 Load))) nil))) nil))) (/seq) None) (Assign (list (Name &is_ambiguous:1 Store)) (Constant False None) None) (For (Name &stores:1 Store) (Name &possible_stores:1 Load) (/seq (If (fn_8 &stores:1) (/seq (Assign (list (Name &is_ambiguous:1 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Name &is_ambiguous:1 Load) (Constant s_ambiguous None) (Constant s_unique None)))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &determine_path_status:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &store_to_items:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &store:1 Store)) (_starred_content (Name &item:1 Store))) Store)) (Subscript (Name &store_items:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (/splice (fn_10 &store:1 &store_to_items:1 &item:1))) (/seq) None) (Assign (list (Name &item_to_stores:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &item:1 Store)) (_starred_content (Name &store:1 Store))) Store) (Name &store_items:1 Load) (/seq (/splice (fn_14 &item:1 &item_to_stores:1 &store:1))) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &purchased_items:1 Load))) nil) (/seq (If (Compare (Name &item:1 Load) (list NotIn) (list (Name &item_to_stores:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (If (Compare (Name &idx:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &possible_paths:1 Store)) (Name &current_stores:1 Load) None) Continue) (/seq)) (Assign (list (Name &new_possible_paths:1 Store)) (List nil Load) None) (For (Name &store:1 Store) (Name &current_stores:1 Load) (/seq (If (Compare (Name &store:1 Load) (list GtE) (list (fn_25 &possible_paths:1))) (/seq (Expr (Call (Attribute (Name &new_possible_paths:1 Load) s_append Load) (list (_starred_content (Name &store:1 Load))) nil))) (/seq))) (/seq) None) (fn_12 &new_possible_paths:1) (Assign (list (Name &possible_paths:1 Store)) (Name &new_possible_paths:1 Load) None) (If (fn_8 &possible_paths:1) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant True None) None)) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant False None) None)))) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &possible_paths:1 Load))) nil))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_ambiguous None))) (/seq (If (Name &ambiguous:1 Load) (/seq (Return (Constant s_ambiguous None))) (/seq (Return (Constant s_unique None))))))) nil None None) (/splice (fn_2 &N:0 &store_items:0 &M:0 &purchased_items:0 (/choiceseq (Assign (list (Name &K:0 Store)) (Constant i4 None) None)))) (Assign (list (Name &result:0 Store)) (Call (Name &determine_path_status:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &determine_path_status:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &items_in_stores:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_stores:1 &item:1 &store:1 &items_in_stores:1 (/choiceseq))) (Assign (list (Name &current_paths:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (Name &N:1 Load)) None) (Assign (list (Name &last_store:1 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &ambiguous:1 Store)) (Constant False None) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (Assign (list (Name &new_paths:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &N:1 Load)) None) (For (Name &store:1 Store) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) (/seq (If (Compare (Name &store:1 Load) (list GtE) (list (Name &last_store:1 Load))) (/seq (Assign (list (Subscript (Name &new_paths:1 Load) (_slice_content (Name &store:1 Load)) Store)) (Subscript (Name &current_paths:1 Load) (_slice_content (Name &store:1 Load)) Load) None)) (/seq))) (/seq) None) (Assign (list (Name &current_paths:1 Store)) (Name &new_paths:1 Load) None) (Assign (list (Name &possible_stores:1 Store)) (ListComp (Name &i:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &possible:3 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &current_paths:1 Load))) nil) (list (Name &possible:3 Load)) i0))) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant s_impossible None))) (/seq)) (If (fn_8 &possible_stores:1) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &last_store:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) None)) (/seq) None) (If (Name &ambiguous:1 Load) (/seq (Return (Constant s_ambiguous None))) (/seq (Return (Constant s_unique None))))) nil None None) (/splice (fn_1 &N:0 &K:0 &M:0 &_:2 &purchased_items:0 (fn_5 &S:0 &i:0 &items_in_stores:0 &K:0 &_:0))) (Assign (list (Name &result:0 Store)) (Call (Name &determine_path_status:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &items_in_stores:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &determine_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &bought_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &store_dict:1 &item:1 &i:1 &store_items:1 (/choiceseq))) (Assign (list (Name &possible_paths:1 Store)) (Constant i1 None) None) (Assign (list (Name &last_stores:1 Store)) (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &store_dict:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &last_stores_updated:1 Store)) (ListComp (Name &store:2 Load) (list (comprehension (Name &store:2 Store) (Name &current_stores:1 Load) (list (BoolOp Or (list (Compare (Name &store:2 Load) (list In) (list (ListComp (BinOp (Name &s:3 Load) Add (Constant i1 None)) (list (comprehension (Name &s:3 Store) (Name &last_stores:1 Load) nil i0))))) (Compare (Name &store:2 Load) (list In) (list (Name &last_stores:1 Load)))))) i0))) None) (If (UnaryOp Not (Name &last_stores_updated:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (Assign (list (Name &last_stores:1 Store)) (Name &last_stores_updated:1 Load) None))) (If (BoolOp And (list (fn_8 &current_stores:1) (fn_8 &last_stores_updated:1))) (/seq (AugAssign (Name &possible_paths:1 Store) Mult (Call (Name g_len Load) (list (_starred_content (Name &last_stores_updated:1 Load))) nil)) (If (Compare (Name &possible_paths:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_ambiguous None))) (/seq))) (/seq))) (/seq) None) (Return (IfExp (Compare (Name &possible_paths:1 Load) (list Eq) (list (Constant i1 None))) (Constant s_unique None) (Constant s_impossible None)))) nil None None) (/splice (fn_9 &N:0 &K:0 &bought_items:0 &M:0 &store_items:0 &determine_path:0))) nil)",
            "(Module (/seq (fn_20 &item_to_stores:1 &item:1 &store:1 &items:1 &purchases:1 &M:1 &K:1 &N:1 &determine_path:0 (/choiceseq (Assign (list (Name &is_unique:1 Store)) (Constant True None) None) (Assign (list (Name &prev_stores:1 Store)) (List nil Load) None) (For (Name &item:1 Store) (Name &purchases:1 Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (If (BoolOp And (list (UnaryOp Not (Name &prev_stores:1 Load)) (fn_8 &current_stores:1))) (/seq (Assign (list (Name &is_unique:1 Store)) (Constant False None) None) Break) (/seq)) (If (Name &prev_stores:1 Load) (/seq (Assign (list (Name &next_stores:1 Store)) (ListComp (Name &store:5 Load) (list (comprehension (Name &store:5 Store) (Name &current_stores:1 Load) (list (Compare (BinOp (Name &store:5 Load) Sub (Constant i1 None)) (list In) (list (Name &prev_stores:1 Load)))) i0))) None) (If (UnaryOp Not (Name &next_stores:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (If (fn_8 &next_stores:1) (/seq (Assign (list (Name &is_unique:1 Store)) (Constant False None) None)) (/seq)))) (Assign (list (Name &current_stores:1 Store)) (Name &next_stores:1 Load) None)) (/seq)) (Assign (list (Name &prev_stores:1 Store)) (Name &current_stores:1 Load) None)) (/seq) None) (If (Name &is_unique:1 Load) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None)))))) (/splice (fn_1 &N:0 &K:0 &M:0 &_:4 &purchases:0 (fn_7 (fn_11) &items:0 &item:3 &store:3 &K:0 &_:2))) (Assign (list (Name &result:0 Store)) (Call (Name &determine_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchases:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &trace_shopping_path:0 (arguments nil (list (arg &N:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &store_for_item:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &store_items:1 Load) (/seq (fn_4 (Name &idx:1 Load) &item:1 &store_for_item:1)) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (Assign (list (Name &next_possible_paths:1 Store)) (List nil Load) None) (For (Name &store_idx:1 Store) (Subscript (Name &store_for_item:1 Load) (_slice_content (Name &item:1 Load)) Load) (/seq (For (Name &prev_store:1 Store) (Name &possible_paths:1 Load) (/seq (If (Compare (Name &store_idx:1 Load) (list GtE) (list (Name &prev_store:1 Load))) (/seq (Expr (Call (Attribute (Name &next_possible_paths:1 Load) s_append Load) (list (_starred_content (Name &store_idx:1 Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None) (fn_12 &next_possible_paths:1) (Assign (list (Name &possible_paths:1 Store)) (Name &next_possible_paths:1 Load) None)) (/seq) None) (fn_22 (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &possible_paths:1 Load))) nil))) nil))) nil None None) (/splice (fn_2 &N1:0 &store_items2:0 &M2:0 &purchased_items2:0 (/choiceseq (Assign (list (Name &store_items1:0 Store)) (fn_19) None) (Assign (list (Name &M1:0 Store)) (Constant i3 None) None) (Assign (list (Name &purchased_items1:0 Store)) (List (list (_starred_content (Constant s_chocolate None)) (_starred_content (Constant s_cookies None)) (_starred_content (Constant s_icecream None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &trace_shopping_path:0 Load) (list (_starred_content (Name &N1:0 Load)) (_starred_content (Name &store_items1:0 Load)) (_starred_content (Name &M1:0 Load)) (_starred_content (Name &purchased_items1:0 Load))) nil))) nil)) (Assign (list (Name &N2:0 Store)) (Constant i3 None) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &trace_shopping_path:0 Load) (list (_starred_content (Name &N2:0 Load)) (_starred_content (Name &store_items2:0 Load)) (_starred_content (Name &M2:0 Load)) (_starred_content (Name &purchased_items2:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_20 &item_to_stores:1 &item:1 &store:1 &store_items:1 &purchased_items:1 &M:1 &K:1 &N:1 &evaluate_shopping_path:0 (/choiceseq (Assign (list (Name &possible_positions:1 Store)) (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (Assign (list (Name &stores_with_item:1 Store)) (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &new_positions:1 Store)) (List nil Load) None) (For (Name &pos:1 Store) (Name &possible_positions:1 Load) (/seq (Assign (list (Name &next_positions:1 Store)) (ListComp (Name &s:2 Load) (list (comprehension (Name &s:2 Store) (Name &stores_with_item:1 Load) (list (Compare (Name &s:2 Load) (list Gt) (list (Name &pos:1 Load)))) i0))) None) (Expr (Call (Attribute (Name &new_positions:1 Load) s_extend Load) (list (_starred_content (Name &next_positions:1 Load))) nil))) (/seq) None) (fn_12 &new_positions:1) (Assign (list (Name &possible_positions:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &new_positions:1 Load))) nil))) nil) None) (If (fn_8 &possible_positions:1) (/seq (If (Compare (Name &item:1 Load) (list NotEq) (list (fn_25 &purchased_items:1))) (/seq (Return (Constant s_ambiguous None))) (/seq))) (/seq))) (/seq) None) (If (fn_18 &possible_positions:1) (/seq (Return (Constant s_unique None))) (/seq (Return (IfExp (Name &possible_positions:1 Load) (Constant s_ambiguous None) (Constant s_impossible None))))))) (/splice (fn_2 &N:0 &store_items:0 &M:0 &purchased_items:0 (/choiceseq (Assign (list (Name &K:0 Store)) (Constant i4 None) None)))) (Assign (list (Name &result:0 Store)) (Call (Name &evaluate_shopping_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_path_through_stores:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_15 &n:1 &k:1 &m:1 (/choiceseq (Assign (list (Name &store_availability:1 Store)) (Dict nil nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &store_index:1 Store)) (_starred_content (Name &item:1 Store))) Store)) (fn_24) None) (Assign (list (Name &store_index:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &store_index:1 Load))) nil) None) (fn_4 (Name &store_index:1 Load) &item:1 &store_availability:1)) (/seq) None)))) (Assign (list (Name &bought_items:1 Store)) (ListComp (fn_23) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:1 Load))) nil) nil i0))) None) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (Assign (list (Name &stores:1 Store)) (Subscript (Name &store_availability:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &possible_paths:1 Store)) (ListComp (Name &store:3 Load) (list (comprehension (Name &store:3 Store) (Name &stores:1 Load) (list (BoolOp Or (list (Compare (Name &store:3 Load) (list In) (list (Name &possible_paths:1 Load))) (Compare (BinOp (Name &store:3 Load) Sub (Constant i1 None)) (list In) (list (Name &possible_paths:1 Load)))))) i0))) None) (fn_17 &possible_paths:1) (Assign (list (Name &possible_paths:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &possible_paths:1 Load))) nil))) nil) None)) (/seq) None) (fn_16 (fn_18 &possible_paths:1))) nil None None) (Expr (Call (Name &find_path_through_stores:0 Load) nil nil))) nil)",
            "(Module (/seq (/splice (fn_1 &N:0 &K:0 &M:0 &_:1 &bought_items:0 (/choiceseq (Assign (list (Name &store_items:0 Store)) (Dict nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &S:0 Store))) Store)) (fn_11) None) (fn_4 (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil) &S:0 &store_items:0)) (/seq) None)))) (Assign (list (Name &previous_stores:0 Store)) (Constant None None) None) (Assign (list (Name &ambiguous:0 Store)) (Constant False None) None) (For (Name &item:0 Store) (Name &bought_items:0 Load) (/seq (Assign (list (Name &stores:0 Store)) (Call (Attribute (Name &store_items:0 Load) s_get Load) (list (_starred_content (Name &item:0 Load)) (_starred_content (List nil Load))) nil) None) (Assign (list (Name &current_stores:0 Store)) (Call (Name g_set Load) (list (_starred_content (Name &stores:0 Load))) nil) None) (If (UnaryOp Not (Name &stores:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (Compare (Name &previous_stores:0 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &previous_stores:0 Store)) (Name &current_stores:0 Load) None)) (/seq (Assign (list (Name &possible_stores:0 Store)) (BinOp (SetComp (BinOp (Name &s:2 Load) Add (Constant i1 None)) (list (comprehension (Name &s:2 Store) (Name &previous_stores:0 Load) nil i0))) BitAnd (Name &current_stores:0 Load)) None) (If (UnaryOp Not (Name &possible_stores:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq)) (If (BoolOp Or (list (fn_8 &possible_stores:0) (fn_8 &previous_stores:0))) (/seq (Assign (list (Name &ambiguous:0 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &previous_stores:0 Store)) (Name &possible_stores:0 Load) None)))) (/seq) None) (If (Name &ambiguous:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_ambiguous None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_unique None))) nil))))) nil)",
            "(Module (/seq (FunctionDef &determine_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:1 None)) i0) (Assign (list (Name &item_store_map:1 Store)) (Call (Name &defaultdict:1 Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &store_num:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &store_items:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &item_store_map:1 Load) (_slice_content (Name &item:1 Load)) Load) s_append Load) (list (_starred_content (Name &store_num:1 Load))) nil))) (/seq) None) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil))) nil))) Load) None) (Assign (list (Name &previous_stores:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil))) nil) None) (For (Name &item:1 Store) (Name &purchased_items:1 Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &item_store_map:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &new_possible_paths:1 Store)) (ListComp (Name &store:2 Load) (list (comprehension (Name &store:2 Store) (Name &current_stores:1 Load) (list (Compare (Name &store:2 Load) (list In) (list (Name &previous_stores:1 Load)))) i0))) None) (fn_12 &new_possible_paths:1) (Expr (Call (Attribute (Name &possible_paths:1 Load) s_append Load) (list (_starred_content (Name &new_possible_paths:1 Load))) nil)) (If (fn_8 &new_possible_paths:1) (/seq (Assign (list (Name &previous_stores:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &new_possible_paths:1 Load))) nil)) (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Name &new_possible_paths:1 Load))) nil) Add (Constant i1 None)))) nil))) nil) None)) (/seq (Assign (list (Name &previous_stores:1 Store)) (Name &new_possible_paths:1 Load) None)))) (/seq) None) (Assign (list (Name &path_is_unique:1 Store)) (fn_13 &possible_paths:1 &stores:3) None) (Return (IfExp (Name &path_is_unique:1 Load) (Constant s_unique None) (Constant s_ambiguous None)))) nil None None) (/splice (fn_9 &N:0 &K:0 &purchased_items:0 &M:0 &store_items:0 &determine_path:0))) nil)",
            "(Module (/seq (/splice (fn_1 &n:0 &k:0 &m:0 &_:1 &bought_items:0 (/choiceseq (Assign (list (Name &store_items:0 Store)) (Dict nil nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &store_index:0 Store)) (_starred_content (Name &item:0 Store))) Store)) (fn_11) None) (Assign (list (Name &store_index:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &store_index:0 Load))) nil) None) (/splice (fn_14 &item:0 &store_items:0 &store_index:0))) (/seq) None)))) (Assign (list (Name &possible_paths:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &bought_items:0 Load))) nil) (/seq (Assign (list (Subscript (Name &possible_paths:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Subscript (Name &store_items:0 Load) (_slice_content (Name &item:0 Load)) Load) None)) (/seq) None) (Assign (list (Name &dp:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &store:0 Store) (Subscript (Name &possible_paths:0 Load) (_slice_content (Constant i0 None)) Load) (/seq (Assign (list (Subscript (Name &dp:0 Load) (_slice_content (Name &store:0 Load)) Store)) (Constant i1 None) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &m:0 Load))) nil) (/seq (Assign (list (Name &new_dp:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &store:0 Store) (Subscript (Name &possible_paths:0 Load) (_slice_content (Name &i:0 Load)) Load) (/seq (Assign (list (Subscript (Name &new_dp:0 Load) (_slice_content (Name &store:0 Load)) Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &dp:0 Load) (_slice_slice (Slice None (Name &store:0 Load) None)) Load))) nil) None)) (/seq) None) (Assign (list (Name &dp:0 Store)) (Name &new_dp:0 Load) None)) (/seq) None) (Assign (list (Name &total_paths:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &dp:0 Load))) nil) None) (If (Compare (Name &total_paths:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (fn_16 (Compare (Name &total_paths:0 Load) (list Eq) (list (Constant i1 None))))))) nil)",
            "(Module (/seq (FunctionDef &find_path_through_stores:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &purchased_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_to_stores:1 &item:1 &store:1 &store_items:1 (/choiceseq))) (Assign (list (Name &possible_stores:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &M:1 Load)) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &purchased_items:1 Load))) nil) (/seq (Assign (list (Subscript (Name &possible_stores:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &item_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None)) (/seq) None) (Assign (list (Name &path_uniqueness:1 Store)) (Constant s_unique None) None) (Assign (list (Name &last_stores:1 Store)) (Set (list (_starred_content (UnaryOp USub (Constant i1 None))))) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &stores:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &possible_stores:1 Load))) nil) (/seq (Assign (list (Name &next_stores:1 Store)) (BinOp (Call (Name g_set Load) (list (_starred_content (Name &stores:1 Load))) nil) BitAnd (Call (Name g_set Load) (list (_starred_content (GeneratorExp (BinOp (Name &x:5 Load) Add (Constant i1 None)) (list (comprehension (Name &x:5 Store) (Name &last_stores:1 Load) nil i0))))) nil)) None) (If (UnaryOp Not (Name &next_stores:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (If (BoolOp Or (list (fn_8 &next_stores:1) (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (fn_8 &stores:1))))) (/seq (Assign (list (Name &path_uniqueness:1 Store)) (Constant s_ambiguous None) None)) (/seq)))) (Assign (list (Name &last_stores:1 Store)) (Name &next_stores:1 Load) None)) (/seq) None) (Return (Name &path_uniqueness:1 Load))) nil None None) (/splice (fn_1 &N:0 &K:0 &M:0 &_:4 &purchased_items:0 (fn_7 (Call (Name g_tuple Load) (list (_starred_content (fn_11))) nil) &store_items:0 &item:3 &store:3 &K:0 &_:2))) (Assign (list (Name &result:0 Store)) (Call (Name &find_path_through_stores:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchased_items:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_path:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &bought_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &items_to_stores:1 &item:1 &store:1 &store_items:1 (/choiceseq))) (Assign (list (Name &possible_paths:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &item:1 Store) (Name &bought_items:1 Load) (/seq (Assign (list (Name &next_possible_paths:1 Store)) (List nil Load) None) (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &items_to_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (For (Name &store:1 Store) (Name &current_stores:1 Load) (/seq (If (BoolOp Or (list (Compare (Name &store:1 Load) (list In) (list (Name &possible_paths:1 Load))) (BoolOp And (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &possible_paths:1 Load))) nil) (list Gt) (list (Constant i0 None))) (Compare (Name &store:1 Load) (list Gt) (list (fn_25 &possible_paths:1))))))) (/seq (Expr (Call (Attribute (Name &next_possible_paths:1 Load) s_append Load) (list (_starred_content (Name &store:1 Load))) nil))) (/seq))) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &next_possible_paths:1 Load))) nil) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &possible_paths:1 Store)) (Name &next_possible_paths:1 Load) None)) (/seq) None) (If (fn_8 &possible_paths:1) (/seq (Return (Constant s_ambiguous None))) (/seq (Return (Constant s_unique None))))) nil None None) (/splice (fn_1 &N:0 &K:0 &M:0 &_:2 &bought_items:0 (fn_5 &item:0 &store:0 &store_items:0 &K:0 &_:0))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_path:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &bought_items:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &determine_path_type:0 (arguments nil (list (arg &N:1 None None) (arg &K:1 None None) (arg &store_items:1 None None) (arg &M:1 None None) (arg &bought_items:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_stores:1 &item:1 &store:1 &store_items:1 (/choiceseq))) (Assign (list (Name &paths:1 Store)) (List (list (_starred_content (Subscript (Name &item_stores:1 Load) (_slice_content (Subscript (Name &bought_items:1 Load) (_slice_content (Constant i0 None)) Load)) Load))) Load) None) (For (Name &item:1 Store) (Subscript (Name &bought_items:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &current_stores:1 Store)) (Subscript (Name &item_stores:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &last_stores:1 Store)) (fn_25 &paths:1) None) (Assign (list (Name &next_stores:1 Store)) (ListComp (Name &store:2 Load) (list (comprehension (Name &store:2 Store) (Name &current_stores:1 Load) (list (Compare (Name &store:2 Load) (list Gt) (list (fn_25 &last_stores:1)))) i0))) None) (fn_12 &next_stores:1) (Expr (Call (Attribute (Name &paths:1 Load) s_append Load) (list (_starred_content (Name &next_stores:1 Load))) nil))) (/seq) None) (If (fn_13 &paths:1 &stores:4) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &N:0 &K:0 &M:0 &_:3 &bought_items:0 (fn_5 &S:0 &i:0 &store_items:0 &K:0 &_:0))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_path_type:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &bought_items:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &determine_path_availability:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &store_items:1 None None) (arg &m:1 None None) (arg &purchase_order:1 None None)) None nil nil None nil) (/seq (/splice (fn_3 &item_map:1 &item:1 &store:1 &store_items:1 (/choiceseq (Assign (list (Name &store_sequence:1 Store)) (List nil Load) None) (Assign (list (Name &ambiguity_flag:1 Store)) (Constant False None) None)))) (Assign (list (Name &prev_store:1 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &item:1 Store) (Name &purchase_order:1 Load) (/seq (Assign (list (Name &possible_stores:1 Store)) (Subscript (Name &item_map:1 Load) (_slice_content (Name &item:1 Load)) Load) None) (Assign (list (Name &current_store:1 Store)) (UnaryOp USub (Constant i1 None)) None) (If (Compare (Name &prev_store:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (fn_8 &possible_stores:1) (/seq (Assign (list (Name &ambiguity_flag:1 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &current_store:1 Store)) (Subscript (Name &possible_stores:1 Load) (_slice_content (Constant i0 None)) Load) None)) (/seq (Assign (list (Name &filtered_stores:1 Store)) (ListComp (Name &store:3 Load) (list (comprehension (Name &store:3 Store) (Name &possible_stores:1 Load) (list (Compare (Name &store:3 Load) (list Gt) (list (Name &prev_store:1 Load)))) i0))) None) (fn_12 &filtered_stores:1) (Assign (list (Name &current_store:1 Store)) (Subscript (Name &filtered_stores:1 Load) (_slice_content (Constant i0 None)) Load) None) (If (fn_8 &filtered_stores:1) (/seq (Assign (list (Name &ambiguity_flag:1 Store)) (Constant True None) None)) (/seq)))) (Expr (Call (Attribute (Name &store_sequence:1 Load) s_append Load) (list (_starred_content (Name &current_store:1 Load))) nil)) (Assign (list (Name &prev_store:1 Store)) (Name &current_store:1 Load) None)) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &store_sequence:1 Load))) nil))) nil) (list Lt) (list (Name &m:1 Load))) (/seq (Return (Constant s_impossible None))) (/seq)) (If (Name &ambiguity_flag:1 Load) (/seq (Return (Constant s_ambiguous None))) (/seq)) (Return (Constant s_unique None))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &N:0 &K:0 &M:0 &_:2 &purchase_order:0 (/choiceseq (Assign (list (Name &store_items:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &K:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &S:0 Store))) Store)) (fn_24) None) (Expr (Call (Attribute (Name &store_items:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &i:0 Load))) nil)) (_starred_content (Name &S:0 Load))) Load))) nil))) (/seq) None)))) (Assign (list (Name &result:0 Store)) (Call (Name &determine_path_availability:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &purchase_order:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &classify_trip:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &inventory:1 None None) (arg &m:1 None None) (arg &purchases:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &store_possibilities:1 Store)) (fn_21 &m:1 &_:5) None) (For (Tuple (list (_starred_content (Name &store_id:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Name &inventory:1 Load) (/seq (If (Compare (Name &item:1 Load) (list In) (list (Name &purchases:1 Load))) (/seq (Assign (list (Name &idx:1 Store)) (Call (Attribute (Name &purchases:1 Load) s_index Load) (list (_starred_content (Name &item:1 Load))) nil) None) (Expr (Call (Attribute (Subscript (Name &store_possibilities:1 Load) (_slice_content (Name &idx:1 Load)) Load) s_add Load) (list (_starred_content (Name &store_id:1 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &max_store_visited:1 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &unique_path:1 Store)) (Constant True None) None) (For (Name &store_set:1 Store) (Name &store_possibilities:1 Load) (/seq (fn_12 &store_set:1) (Assign (list (Name &min_possible:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &store_set:1 Load))) nil) None) (If (Compare (Name &min_possible:1 Load) (list LtE) (list (Name &max_store_visited:1 Load))) (/seq (Assign (list (Name &unique_path:1 Store)) (Constant False None) None) Break) (/seq)) (Assign (list (Name &max_store_visited:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_store_visited:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &store_set:1 Load))) nil))) nil) None)) (/seq) None) (If (BoolOp And (list (Name &unique_path:1 Load) (fn_13 &store_possibilities:1 &store_set:6))) (/seq (Return (Constant s_unique None))) (/seq (Return (Constant s_ambiguous None))))) nil None None) (/splice (fn_1 &n:0 &k:0 &m:0 &_:4 &purchases:0 (fn_7 (fn_24) &inventory:0 &item:3 &store_id:3 &k:0 &_:2))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &classify_trip:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &inventory:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &purchases:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_20 &item_locations:1 &item:1 &store:1 &store_items:1 &bought_items:1 &M:1 &K:1 &N:1 &find_path_through_stores:0 (/choiceseq (Assign (list (Name &possible_paths:1 Store)) (List nil Load) None) (Assign (list (Name &ambiguity_flag:1 Store)) (Constant False None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &item:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &bought_items:1 Load))) nil) (/seq (Assign (list (Name &locations:1 Store)) (Call (Attribute (Name &item_locations:1 Load) s_get Load) (list (_starred_content (Name &item:1 Load)) (_starred_content (List nil Load))) nil) None) (If (Compare (Name &i:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &possible_paths:1 Store)) (Name &locations:1 Load) None)) (/seq (Assign (list (Name &new_possible_paths:1 Store)) (ListComp (Name &location:3 Load) (list (comprehension (Name &location:3 Store) (Name &locations:1 Load) (list (Compare (Name &location:3 Load) (list In) (list (ListComp (BinOp (Name &x:4 Load) Add (Constant i1 None)) (list (comprehension (Name &x:4 Store) (Name &possible_paths:1 Load) nil i0)))))) i0))) None) (fn_12 &new_possible_paths:1) (If (BoolOp And (list (fn_8 &new_possible_paths:1) (UnaryOp Not (Name &ambiguity_flag:1 Load)))) (/seq (Assign (list (Name &ambiguity_flag:1 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &possible_paths:1 Store)) (Name &new_possible_paths:1 Load) None)))) (/seq) None) (If (BoolOp Or (list (Name &ambiguity_flag:1 Load) (fn_8 &possible_paths:1))) (/seq (Return (Constant s_ambiguous None))) (/seq (Return (Constant s_unique None)))))) (/splice (fn_1 &N:0 &K:0 &M:0 &_:2 &bought_items:0 (fn_5 &item:0 &i:0 &store_items:0 &K:0 &_:0))) (Assign (list (Name &result:0 Store)) (Call (Name &find_path_through_stores:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &K:0 Load)) (_starred_content (Name &store_items:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &bought_items:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)"
        ]
    },
    "38": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Subscript (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (_slice_slice (Slice (Constant i1 None) None None)) Load) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (List nil Load) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) #0 (/seq) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (BinOp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Name %1 Load))) Load) Add #0))) nil) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult #0) None) (Assign (list (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) #0 (Return (IfExp (Compare (Name %1 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Name %1 Load) (Constant s_impossible None))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Name %2 Store)) (Subscript (Name %1 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name %3 Store) (Name %5 Load) (/seq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (Constant i1001 None))) nil) (/seq (If (Compare (Subscript (Name %1 Load) (_slice_content (BinOp (Name %4 Load) Sub (Name %3 Load))) Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Load)) (_starred_content (BinOp (Subscript (Name %1 Load) (_slice_content (BinOp (Name %4 Load) Sub (Name %3 Load))) Load) Add (Name %3 Load)))) nil) None)) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name %1 Store)) (Name %2 Load) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content #0) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult #0)) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp #0 (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content #0)) nil) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Return (Name %1 Load))) (/seq))) (/seq) None) (Return (Constant s_impossible None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 (Name g_int Load) None) (arg %1 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load)) Load) None)) None nil nil None nil) #0 nil (Name g_int Load) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %3 Store) #0 (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None)))) nil) (fn_3 (Name %3 Load) %3 %2 %1) (/seq) None)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare #0 (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Return #0)) (/seq))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) #0 None) (Assign (list (Name %2 Store)) (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %3 Store)) (Subscript (Name %1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (/splice (fn_2 (/seq (Assign (list (Name %5 Store)) (fn_4) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Subscript (Name %5 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) %4 %3 %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Tuple (list (_starred_content (Name %1 Store)) (_starred_content (Name %4 Store))) Store) #0 (/seq (If (Compare (Name %4 Load) (list GtE) (list (Name %3 Load))) (/seq (Assign (list (Name %2 Store)) (Call (Name g_min Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None)) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (List nil Load) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) #0 (/seq) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_min Load) (list (_starred_content #0)) (list (keyword s_default (Constant s_impossible None)))) None) (Return (Name %1 Load)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare #0 (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Subscript #0 (_slice_content (Name %2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript #0 (_slice_content (Name %2 Load)) Load)) (_starred_content (Name %1 Load))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Attribute (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) s_items Load) nil nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i1001 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &get_min_package:0 (arguments nil (list (arg &bolts_needed:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &min_bolts:1 (arguments nil (list (arg &company_idx:3 None None) (arg &bolts:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &bolts:3 Load) (list LtE) (list (Constant i0 None))) (/seq (Return (Constant i0 None))) (/seq (If (Compare (Name &company_idx:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &bolts:3 Load)) (_starred_starred (Starred (Call (Name g_filter Load) (list (_starred_content (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (Compare (Name &x:5 Load) (list GtE) (list (Name &bolts:3 Load))))) (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load))) nil) Load))) nil))) (/seq (Assign (list (Name &current_packs:3 Store)) (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &company_idx:3 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &min_combination:3 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &pack:3 Store) (Name &current_packs:3 Load) (/seq (Assign (list (Name &required_bolts:3 Store)) (BinOp (Name &bolts:3 Load) Sub (Call (Name &min_bolts:1 Load) (list (_starred_content (BinOp (Name &company_idx:3 Load) Sub (Constant i1 None))) (_starred_content (Name &pack:3 Load))) nil)) None) (If (Compare (Name &required_bolts:3 Load) (list LtE) (list (Name &pack:3 Load))) (/seq (Assign (list (Name &min_combination:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_combination:3 Load)) (_starred_content (Name &pack:3 Load))) nil) None)) (/seq))) (/seq) None) (Return (IfExp (fn_23 (Name &min_combination:3 Load)) (Name &min_combination:3 Load) (Name &bolts:3 Load)))))))) (list (Call (Name g_lru_cache Load) nil (list (keyword s_maxsize (Constant None None))))) None None) (/splice (fn_6 (For (Name &company_idx:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:1 Load))) nil))) nil) (/seq (For (Name &pack:1 Store) (Subscript (Name &companies:1 Load) (_slice_content (Name &company_idx:1 Load)) Load) (/seq (Assign (list (Name &real_amount:1 Store)) (Call (Name &min_bolts:1 Load) (list (_starred_content (Name &company_idx:1 Load)) (_starred_content (Name &pack:1 Load))) nil) None) (If (Compare (Name &real_amount:1 Load) (list GtE) (list (Name &bolts_needed:1 Load))) (/seq (Assign (list (Name &min_pack:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_pack:1 Load)) (_starred_content (Name &pack:1 Load))) nil) None)) (/seq))) (/seq) None)) (/seq) None) &min_pack:1))) nil None None) (/splice (fn_7 (/seq (/splice (fn_1 &B:2 &k:2 &_:4 &companies:2)) (Assign (list (Name &min_package:2 Store)) (Call (Name &get_min_package:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &companies:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &min_package:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &knapsack:0 (arguments nil (list (arg &packs:1 (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None) (arg &B:1 (Name g_int Load) None)) None nil nil None nil) (/seq (fn_11 (Name &B:1 Load) &dp:1) (For (Name &pack:1 Store) (Name &packs:1 Load) (/seq (For (Name &size:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &B:1 Load)) (_starred_content (BinOp (Name &pack:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (fn_3 (Name &pack:1 Load) &pack:1 &size:1 &dp:1) (/seq) None)) (/seq) None) (Return (IfExp (fn_23 (Subscript (Name &dp:1 Load) (_slice_content (Name &B:1 Load)) Load)) (Subscript (Name &dp:1 Load) (_slice_content (Name &B:1 Load)) Load) (UnaryOp USub (Constant i1 None))))) nil (Name g_int Load) None) (fn_14 (/seq (Assign (list (Name &packs_per_company:2 Store)) (ListComp (fn_28) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:2 Load))) nil))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &packs:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &companies:2 Load))) nil) (/seq (Assign (list (Name &preprocess_packs:2 Store)) (ListComp (Name &p:5 Load) (list (comprehension (Name &p:5 Store) (Subscript (Name &packs:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))) None) (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq (For (Name &p:2 Store) (Name &preprocess_packs:2 Load) (/seq (Assign (list (Subscript (Subscript (Name &packs_per_company:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &p:2 Load)) Store)) (Name &p:2 Load) None)) (/seq) None)) (/seq (For (Name &target_pack:2 Store) (Name &preprocess_packs:2 Load) (/seq (Assign (list (Name &min_real_amount:2 Store)) (Call (Name &knapsack:0 Load) (list (_starred_content (Subscript (Subscript (Name &packs_per_company:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) (_slice_slice (Slice None (BinOp (Name &target_pack:2 Load) Add (Constant i1 None)) None)) Load)) (_starred_content (Name &target_pack:2 Load))) nil) None) (Assign (list (Subscript (Subscript (Name &packs_per_company:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &target_pack:2 Load)) Store)) (IfExp (Compare (Name &min_real_amount:2 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (Name &min_real_amount:2 Load) (Constant i0 None)) None)) (/seq) None)))) (/seq) None) (/splice (fn_6 (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:2 Load))) nil))) nil) (/seq (fn_19 (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Name &packs_per_company:2 Load) (_slice_content (Name &i:2 Load)) Load))) nil) &pack_size:2 &result:2 &B:2 &real_size:2)) (/seq) None) &result:2))) &companies:2 &B:2 &solve_bolts:0) (/splice (fn_12 (fn_4) &B:0 &k:0 &_:3 &companies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve_bolts:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_package_needed:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &find_min_possible:1 (arguments nil (list (arg &packages:2 None None) (arg &bolts_needed:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDcwLCAxMDUsIDExMCwgMTAwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA5LCAxMDUsIDExMCwgMTA1LCAxMDksIDk3LCAxMDgsIDMyLCAxMTIsIDExMSwgMTE1LCAxMTUsIDEwNSwgOTgsIDEwOCwgMTAxLCAzMiwgOTcsIDEwMCwgMTE4LCAxMDEsIDExNCwgMTE2LCAxMDUsIDExNSwgMTAxLCAxMDAsIDMyLCA5NywgMTA5LCAxMTEsIDExNywgMTEwLCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDk4LCAxMTEsIDEwOCwgMTE2LCAxMTUsIDMyLCAxMTYsIDEwNCwgOTcsIDExNiwgMzIsIDk5LCA5NywgMTEwLCAzMiwgOTksIDExMSwgMTEwLCAxMTYsIDk3LCAxMDUsIDExMCwgMzIsIDk3LCAxMTYsIDMyLCAxMDgsIDEwMSwgOTcsIDExNSwgMTE2LCAzMiwgOTgsIDExMSwgMTA4LCAxMTYsIDExNSwgOTUsIDExMCwgMTAxLCAxMDEsIDEwMCwgMTAxLCAxMDAsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyXQ== None)) (/splice (fn_5 (BinOp (BinOp (Name &bolts_needed:2 Load) Add (Call (Name g_max Load) (list (_starred_content (Name &packages:2 Load))) (list (keyword s_default (Constant i0 None))))) Add (Constant i1 None)) &dp:2)) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:2 Load))) nil))) nil) (/seq (For (Name &pack_size:2 Store) (Name &packages:2 Load) (/seq (If (Compare (BinOp (Name &i:2 Load) Sub (Name &pack_size:2 Load)) (list GtE) (list (Constant i0 None))) (fn_3 (Name &pack_size:2 Load) &pack_size:2 &i:2 &dp:2) (/seq))) (/seq) None)) (/seq) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &bolts_needed:2 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:2 Load))) nil))) nil) (/seq (fn_16 (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq) None) (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:1 Load))) nil))) nil) (/seq (Assign (list (Name &prev_company_packs:1 Store)) (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &new_packs:1 Store)) (List nil Load) None) (For (Name &size_needed:1 Store) (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (Assign (list (Name &min_possible_pack:1 Store)) (Call (Name &find_min_possible:1 Load) (list (_starred_content (Name &prev_company_packs:1 Load)) (_starred_content (Name &size_needed:1 Load))) nil) None) (Expr (Call (Attribute (Name &new_packs:1 Load) s_append Load) (list (_starred_content (Name &min_possible_pack:1 Load))) nil))) (/seq) None) (Assign (list (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &new_packs:1 Load) None)) (/seq) None) (Assign (list (Name &possible_packs:1 Store)) (ListComp (Name &pack:3 Load) (list (comprehension (Name &pack:3 Store) (fn_27 &companies:1) (list (Compare (Name &pack:3 Load) (list GtE) (list (Name &bolts:1 Load)))) i0))) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &possible_packs:1 Load))) (list (keyword s_default (Constant s_impossible None)))))) nil None None) (/splice (fn_1 &B:0 &k:0 &_:4 &companies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package_needed:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_package_size:0 (arguments nil (list (arg &B:1 (Name g_int Load) None) (arg &companies:1 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load))) Load)) Load)) Load) None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (ListComp (DictComp (Name &pack:3 Load) (Name &pack:3 Load) (list (comprehension (Name &pack:3 Store) (Name &packs:4 Load) nil i0))) (list (comprehension (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &packs:4 Store))) Store) (Name &companies:1 Load) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:1 Load))) nil))) nil) (/seq (For (Name &pack:1 Store) (Subscript (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load) (/seq (Assign (list (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &pack:1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Tuple (list (_starred_content (Name &prev_pack:1 Store)) (_starred_content (Name &real_amount:1 Store))) Store) (fn_25 &i:1 &dp:1) (/seq (If (Compare (Name &prev_pack:1 Load) (list LtE) (list (Name &pack:1 Load))) (/seq (fn_24 (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) &real_amount:1 &pack:1)) (/seq))) (/seq) None) (Assign (list (Name &combinations:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &j:1 Store) (fn_20 (Call (Name g_len Load) (list (_starred_content (Subscript (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load))) nil)) (/seq (For (Tuple (list (_starred_content (Name &prev_pack:1 Store)) (_starred_content (Name &real_amount:1 Store))) Store) (fn_25 &i:1 &dp:1) (/seq (Assign (list (Name &new_combinations:1 Store)) (List nil Load) None) (For (Name &old_sum:1 Store) (Name &combinations:1 Load) (/seq (Assign (list (Name &new_sum:1 Store)) (BinOp (Name &old_sum:1 Load) Add (Name &real_amount:1 Load)) None) (If (Compare (Name &new_sum:1 Load) (list GtE) (list (Name &pack:1 Load))) (/seq (fn_24 (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) &new_sum:1 &pack:1)) (/seq (Expr (Call (Attribute (Name &new_combinations:1 Load) s_append Load) (list (_starred_content (Name &new_sum:1 Load))) nil))))) (/seq) None) (AugAssign (Name &combinations:1 Store) Add (Name &new_combinations:1 Load))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &possible_sizes:1 Store)) (ListComp (Name &pack:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &pack:2 Store)) (_starred_content (Name &real_amount:2 Store))) Store) (Call (Attribute (fn_27 &dp:1) s_items Load) nil nil) (list (Compare (Name &real_amount:2 Load) (list GtE) (list (Name &B:1 Load)))) i0))) None) (If (UnaryOp Not (Name &possible_sizes:1 Load)) (/seq (Return (Constant s_impossible None))) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &possible_sizes:1 Load))) nil))))) nil (Name g_int Load) None) (If (fn_26) (/seq (/splice (fn_2 (/seq (/splice (fn_17 (fn_4) &line:0 &l_i:0 &n_i:0)) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &l_i:0 Load)) (_starred_content (Name &n_i:0 Load))) Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package_size:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_14 (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjgsIDEyMSwgMTEwLCA5NywgMTA5LCAxMDUsIDk5LCAzMiwgMTEyLCAxMTQsIDExMSwgMTAzLCAxMTQsIDk3LCAxMDksIDEwOSwgMTA1LCAxMTAsIDEwMywgMzIsIDk3LCAxMTIsIDExMiwgMTE0LCAxMTEsIDk3LCA5OSwgMTA0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMDIsIDEwNSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMDksIDk3LCAxMDgsIDEwOCwgMTAxLCAxMTUsIDExNiwgMzIsIDExMiwgOTcsIDk5LCAxMDcsIDk3LCAxMDMsIDEwMSwgMzIsIDExNSwgMTA1LCAxMjIsIDEwMSwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgOTksIDk3LCAxMTAsIDMyLCA5OCwgMTAxLCAzMiwgOTgsIDExMSwgMTE3LCAxMDMsIDEwNCwgMTE2LCAzMiwgMTE5LCAxMDQsIDEwNSwgOTksIDEwNCwgMTAsIDMyLCAzMiwgMzIsIDMyLCA5OSwgMTExLCAxMTAsIDExNiwgOTcsIDEwNSwgMTEwLCAxMTUsIDMyLCA5NywgMTE2LCAzMiwgMTA4LCAxMDEsIDk3LCAxMTUsIDExNiwgMzIsIDM5LCA5OCwgMzksIDMyLCA5OCwgMTExLCAxMDgsIDExNiwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (FunctionDef &min_package:1 (arguments nil (list (arg &dp:2 (Subscript (Name g_Dict Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load) None) (arg &packages:2 (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDcwLCAxMTEsIDExNCwgMzIsIDEwMSwgOTcsIDk5LCAxMDQsIDMyLCA5OSwgMTExLCAxMDksIDExMiwgOTcsIDExMCwgMTIxLCA0NCwgMzIsIDExNywgMTE1LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCA5NywgOTksIDEwNywgOTcsIDEwMywgMTAxLCAxMTUsIDMyLCA5NywgMTAwLCAxMTgsIDEwMSwgMTE0LCAxMTYsIDEwNSwgMTE1LCAxMDEsIDEwMCwgMzIsIDk4LCAxMjEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCAxMTQsIDEwMSwgMTE4LCAxMDUsIDExMSwgMTE3LCAxMTUsIDMyLCA5OSwgMTExLCAxMDksIDExMiwgOTcsIDExMCwgMTIxLCAzMiwgMTE2LCAxMTEsIDMyLCA5OSwgOTcsIDEwOCwgOTksIDExNywgMTA4LCA5NywgMTE2LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTQsIDEwMSwgOTcsIDEwOCwgMzIsIDk3LCAxMDksIDExMSwgMTE3LCAxMTAsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgOTgsIDExMSwgMTA4LCAxMTYsIDExNSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTA5LCA5NywgMTA4LCAxMDgsIDEwMSwgMTE1LCAxMTYsIDMyLCAxMTIsIDExMSwgMTE1LCAxMTUsIDEwNSwgOTgsIDEwOCwgMTAxLCAzMiwgMTEyLCA5NywgOTksIDEwNywgOTcsIDEwMywgMTAxLCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCAxMDksIDk3LCAxMTYsIDk5LCAxMDQsIDEwMSwgMTE1LCAzMiwgMTExLCAxMTQsIDMyLCAxMDEsIDEyMCwgOTksIDEwMSwgMTAxLCAxMDAsIDExNSwgMzIsIDEwNSwgMTE2LCAxMTUsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDk3LCAxMDAsIDExOCwgMTAxLCAxMTQsIDExNiwgMTA1LCAxMTUsIDEwMSwgMTAwLCAzMiwgMTE1LCAxMDUsIDEyMiwgMTAxLCAxMTUsIDQ2LCAzMiwgODUsIDExMiwgMTAwLCA5NywgMTE2LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCAxMTIsIDMyLCAxMDAsIDEwNSwgOTksIDExNiwgMTA1LCAxMTEsIDExMCwgOTcsIDExNCwgMTIxLCAzMiwgOTcsIDk5LCA5OSwgMTExLCAxMTQsIDEwMCwgMTA1LCAxMTAsIDEwMywgMTA4LCAxMjEsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &new_dp:2 Store)) (Dict (list (Constant i0 None)) (list (Constant i0 None))) None) (For (Name &pack:2 Store) (Name &packages:2 Load) (/seq (Assign (list (Name &min_possible:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Tuple (list (_starred_content (Name &prev_pack:2 Store)) (_starred_content (Name &real_amount:2 Store))) Store) (Call (Attribute (Name &dp:2 Load) s_items Load) nil nil) (/seq (If (Compare (Name &prev_pack:2 Load) (list LtE) (list (Name &pack:2 Load))) (/seq (Assign (list (Name &min_possible:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_possible:2 Load)) (_starred_content (Name &real_amount:2 Load))) nil) None)) (/seq))) (/seq) None) (If (fn_23 (Name &min_possible:2 Load)) (/seq (Assign (list (Subscript (Name &new_dp:2 Load) (_slice_content (Name &pack:2 Load)) Store)) (BinOp (Name &min_possible:2 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (Return (Name &new_dp:2 Load))) nil (Subscript (Name g_Dict Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load) None) (Assign (list (Name &dp:1 Store)) (DictComp (Name &size:3 Load) (Name &size:3 Load) (list (comprehension (Name &size:3 Store) (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load) nil i0))) None) (For (Name &packages:1 Store) (Subscript (Name &companies:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &dp:1 Store)) (Call (Name &min_package:1 Load) (list (_starred_content (Name &dp:1 Load)) (_starred_content (Name &packages:1 Load))) nil) None)) (/seq) None) (/splice (fn_22 (ListComp (Name &size:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &size:4 Store)) (_starred_content (Name &real_amount:4 Store))) Store) (Call (Attribute (Name &dp:1 Load) s_items Load) nil nil) (list (Compare (Name &real_amount:4 Load) (list GtE) (list (Name &b:1 Load)))) i0))) &min_advertised:1))) &companies:1 &b:1 &dp_minimal_packages:0) (If (fn_26) (/seq (/splice (fn_21 (/seq (Assign (list (Name &line:0 Store)) (Subscript (fn_10) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Name &line:0 Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &dp_minimal_packages:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &min_pack_package:0 (arguments nil (list (arg &B:1 None None) (arg &pack_sizes:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &B:1 Load) Add (Call (Name g_max Load) (list (_starred_content (Name &pack_sizes:1 Load))) nil)) &dp:1)) (For (Name &size:1 Store) (Name &pack_sizes:1 Load) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &size:1 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil))) nil) (fn_3 (Constant i1 None) &size:1 &j:1 &dp:1) (/seq) None)) (/seq) None) (/splice (fn_13 (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil) &i:1 &dp:1 &B:1))) nil None None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_12 (List nil Load) &B:2 &k:2 &_:3 &companies_pack_sizes:2)) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:2 Load))) nil) (/seq (/splice (fn_17 (fn_4) &company_info:2 &l_i:2 &n_s:2)) (Assert (Compare (Name &l_i:2 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &n_s:2 Load))) nil))) None) (Assign (list (Subscript (Name &companies_pack_sizes:2 Load) (_slice_content (Name &i:2 Load)) Store)) (Name &n_s:2 Load) None)) (/seq) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:2 Load))) nil) (/seq (Assign (list (Name &real_sizes:2 Store)) (List nil Load) None) (For (Name &size:2 Store) (Subscript (Name &companies_pack_sizes:2 Load) (_slice_content (Name &i:2 Load)) Load) (/seq (Assign (list (Name &real_size:2 Store)) (Call (Name &min_pack_package:0 Load) (list (_starred_content (Name &size:2 Load)) (_starred_content (IfExp (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (Subscript (Name &companies_pack_sizes:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) (List (list (_starred_content (Constant i1 None))) Load)))) nil) None) (If (Compare (Name &real_size:2 Load) (list NotEq) (list (Constant s_impossible None))) (/seq (Expr (Call (Attribute (Name &real_sizes:2 Load) s_append Load) (list (_starred_content (Name &real_size:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Subscript (Name &companies_pack_sizes:2 Load) (_slice_content (Name &i:2 Load)) Store)) (IfExp (Name &real_sizes:2 Load) (Name &real_sizes:2 Load) (Subscript (Name &companies_pack_sizes:2 Load) (_slice_content (Name &i:2 Load)) Load)) None)) (/seq) None) (Assign (list (Name &answer:2 Store)) (Call (Name &min_pack_package:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (fn_27 &companies_pack_sizes:2))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:2 Load))) nil))) nil None None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &real_amount:0 (arguments nil (list (arg &packs:1 (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None) (arg &previous:1 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load)) Load) None)) None nil nil None nil) (/seq (If (UnaryOp Not (Name &previous:1 Load)) (/seq (Return (Name &packs:1 Load))) (/seq)) (/splice (fn_5 (BinOp (Call (Name g_max Load) (list (_starred_content (Name &packs:1 Load))) nil) Add (Constant i1 None)) &dp:1)) (For (Name &pack:1 Store) (Name &packs:1 Load) (/seq (For (Name &prev_pack:1 Store) (Name &previous:1 Load) (/seq (For (Name &amount:1 Store) (fn_9 (Name &pack:1 Load)) (/seq (If (Compare (Name &amount:1 Load) (list GtE) (list (Name &prev_pack:1 Load))) (fn_3 (Name &prev_pack:1 Load) &prev_pack:1 &amount:1 &dp:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &real_packs:1 Store)) (List nil Load) None) (For (Name &pack:1 Store) (Name &packs:1 Load) (/seq (Expr (Call (Attribute (Name &real_packs:1 Load) s_append Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &pack:1 Load)) Load))) nil))) (/seq) None) (Return (Name &real_packs:1 Load))) nil (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None) (fn_14 (/seq (/splice (fn_5 (BinOp (Name &b:2 Load) Add (Constant i1 None)) &dp:2)) (Assign (list (Name &all_packs:2 Store)) (List nil Load) None) (For (Name &company_packs:2 Store) (Name &companies:2 Load) (/seq (Assign (list (Name &real_packs:2 Store)) (Call (Name &real_amount:0 Load) (list (_starred_content (Name &company_packs:2 Load)) (_starred_content (Name &all_packs:2 Load))) nil) None) (Expr (Call (Attribute (Name &all_packs:2 Load) s_append Load) (list (_starred_content (Name &real_packs:2 Load))) nil)) (fn_15 (Name &real_packs:2 Load) &dp:2 &i:2 &pack:2 &b:2)) (/seq) None) (Assign (list (Name &result:2 Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &dp:2 Load) (_slice_slice (Slice (Name &b:2 Load) None None)) Load))) nil) None) (Return (IfExp (fn_23 (Name &result:2 Load)) (Name &result:2 Load) (Constant s_impossible None)))) &companies:2 &b:2 &smallest_packet:0) (/splice (fn_1 &B:0 &k:0 &_:3 &companies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &smallest_packet:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_minimum_package:0 (arguments nil (list (arg &B:1 None None) (arg &packages:1 None None)) None nil nil None nil) (/seq (fn_11 (Name &B:1 Load) &dp:1) (fn_15 (Name &packages:1 Load) &dp:1 &i:1 &package:1 &B:1) (For (Name &i:1 Store) (fn_9 (Name &B:1 Load)) (/seq (fn_16 (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_7 (/seq (/splice (fn_2 (/seq (Assign (list (Name &line:2 Store)) (fn_4) None) (Expr (Call (Attribute (Name &companies:2 Load) s_append Load) (list (_starred_content (Subscript (Name &line:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) &B:2 &k:2 &companies:2 &_:2)) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:2 Load))) nil) (/seq (Assign (list (Name &updated_packages:2 Store)) (List nil Load) None) (For (Name &package_size:2 Store) (Subscript (Name &companies:2 Load) (_slice_content (Name &i:2 Load)) Load) (/seq (Assign (list (Name &min_package:2 Store)) (Call (Name &find_minimum_package:0 Load) (list (_starred_content (Name &package_size:2 Load)) (_starred_content (Subscript (Name &companies:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load))) nil) None) (If (Compare (Name &min_package:2 Load) (list NotEq) (list (Constant s_impossible None))) (/seq (Expr (Call (Attribute (Name &updated_packages:2 Load) s_append Load) (list (_starred_content (Name &min_package:2 Load))) nil))) (/seq (Expr (Call (Attribute (Name &updated_packages:2 Load) s_append Load) (list (_starred_content (Name &package_size:2 Load))) nil))))) (/seq) None) (Assign (list (Subscript (Name &companies:2 Load) (_slice_content (Name &i:2 Load)) Store)) (Name &updated_packages:2 Load) None)) (/seq) None) (Assign (list (Name &answer:2 Store)) (Call (Name &find_minimum_package:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (fn_27 &companies:2))) nil) None) (If (Compare (Name &answer:2 Load) (list Eq) (list (Name &B:2 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:2 Load))) nil))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &min_package_size:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (Import (list (alias &sys:1 None))) (Assign (list (Name &INF:1 Store)) (Attribute (Name &sys:1 Load) s_maxsize Load) None) (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Name &INF:1 Load))) Load) Mult (BinOp (Name &bolts:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (fn_15 (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load) &dp:1 &i:1 &size:1 &bolts:1) (For (Name &company:1 Store) (Subscript (Name &companies:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &new_dp:1 Store)) (BinOp (List (list (_starred_content (Name &INF:1 Load))) Load) Mult (BinOp (Name &bolts:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &new_dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (For (Name &size:1 Store) (Name &company:1 Load) (/seq (For (Name &i:1 Store) (fn_20 (Name &bolts:1 Load)) (/seq (Assign (list (Name &min_amount:1 Store)) (Name &INF:1 Load) None) (For (Name &j:1 Store) (fn_20 (Name &i:1 Load)) (/seq (If (Compare (BinOp (Name &i:1 Load) Sub (Name &j:1 Load)) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &min_amount:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_amount:1 Load)) (_starred_content (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &j:1 Load))) Load) Add (Name &size:1 Load)))) nil) None)) (/seq))) (/seq) None) (fn_24 (Name &new_dp:1 Load) &min_amount:1 &i:1)) (/seq) None)) (/seq) None) (Assign (list (Name &dp:1 Store)) (Name &new_dp:1 Load) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &real_amount:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dp:1 Load))) nil) (/seq (If (Compare (Name &real_amount:1 Load) (list GtE) (list (Name &bolts:1 Load))) (/seq (Return (Name &i:1 Load))) (/seq))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_2 (/seq (Assign (list (Name &line:0 Store)) (fn_10) None) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package_size:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (ListComp (Call (Name g_defaultdict Load) (list (_starred_content (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (For (Name &i:1 Store) (fn_20 (Name &k:1 Load)) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) nil))) nil) (/seq (Assign (list (Name &pack_size:1 Store)) (Subscript (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &j:1 Load)) Load) None) (For (Tuple (list (_starred_content (Name &prev_pack:1 Store)) (_starred_content (Name &prev_real:1 Store))) Store) (fn_25 &i:1 &dp:1) (/seq (Assign (list (Name &new_advertised:1 Store)) (BinOp (Name &prev_pack:1 Load) Add (Name &pack_size:1 Load)) None) (Assign (list (Name &new_real:1 Store)) (BinOp (Name &prev_real:1 Load) Add (Name &pack_size:1 Load)) None) (fn_24 (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) &new_real:1 &new_advertised:1)) (/seq) None) (For (Name &new_advertised:1 Store) (Call (Name g_list Load) (list (_starred_content (Call (Attribute (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) s_keys Load) nil nil))) nil) (/seq (For (Tuple (list (_starred_content (Name &size:1 Store)) (_starred_content (Name &real:1 Store))) Store) (fn_25 &i:1 &dp:1) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &new_advertised:1 Load) Add (Name &size:1 Load)) (list NotIn) (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Compare (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &new_advertised:1 Load) Add (Name &size:1 Load))) Load) (list Gt) (list (BinOp (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &new_advertised:1 Load)) Load) Add (Name &real:1 Load)))))) (/seq (Assign (list (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &new_advertised:1 Load) Add (Name &size:1 Load))) Store)) (BinOp (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &new_advertised:1 Load)) Load) Add (Name &real:1 Load)) None)) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (/splice (fn_22 (GeneratorExp (Name &advertised:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &advertised:3 Store)) (_starred_content (Name &real:3 Store))) Store) (Call (Attribute (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Load) s_items Load) nil nil) (list (Compare (Name &real:3 Load) (list GtE) (list (Name &B:1 Load)))) i0))) &result:1))) nil None None) (/splice (fn_2 (/seq (/splice (fn_17 (fn_4) &line:0 &l_i:0 &n_i:0)) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Name &n_i:0 Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Assign (list (Name &result:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &knapsack:0 (arguments nil (list (arg &packs:1 None None) (arg &target:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (BinOp (Name &target:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (For (Name &pack:1 Store) (Name &packs:1 Load) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &pack:1 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &pack:1 Load))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &pack:1 Load))) Load) Add (Name &pack:1 Load)) None)) (fn_3 (Name &pack:1 Load) &pack:1 &i:1 &dp:1))) (/seq))) (/seq) None)) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &target:1 Load)) Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &bolts:2 None None) (arg &k:2 None None) (arg &companies:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &cur_packs:2 Store)) (fn_28) None) (For (Name &sizes:2 Store) (Name &companies:2 Load) (/seq (Assign (list (Name &next_packs:2 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (Constant i1001 None)) None) (For (Name &size:2 Store) (Name &sizes:2 Load) (/seq (Assign (list (Name &min_pack:2 Store)) (Call (Name &knapsack:0 Load) (list (_starred_content (Name &cur_packs:2 Load)) (_starred_content (Name &size:2 Load))) nil) None) (If (Compare (Name &min_pack:2 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &next_packs:2 Load) (_slice_content (Name &size:2 Load)) Store)) (Name &min_pack:2 Load) None)) (/seq (Assign (list (Subscript (Name &next_packs:2 Load) (_slice_content (Name &size:2 Load)) Store)) (Name &size:2 Load) None)))) (/seq) None) (Assign (list (Name &cur_packs:2 Store)) (Subscript (Name &next_packs:2 Load) (_slice_slice (Slice None None None)) Load) None)) (/seq) None) (Assign (list (Name &min_size:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &bolts:2 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cur_packs:2 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &cur_packs:2 Load) (_slice_content (Name &i:2 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &min_size:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_size:2 Load)) (_starred_content (Name &i:2 Load))) nil) None)) (/seq))) (/seq) None) (If (Compare (Name &min_size:2 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Return (Constant s_impossible None))) (/seq (Return (Name &min_size:2 Load))))) nil None None) (/splice (fn_18 &_:0 &companies:0 &K:0 &B:0 &line:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &find_min_packet:0 (arguments nil (list (arg &bolts:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &calc_real_amounts:1 (arguments nil (list (arg &company_idx:2 None None) (arg &advertised_amounts:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &company_idx:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &advertised_amounts:2 Load))) (/seq)) (Assign (list (Name &real_amounts:2 Store)) (List nil Load) None) (Assign (list (Name &previous_pack_sizes:2 Store)) (Call (Name &calc_real_amounts:1 Load) (list (_starred_content (BinOp (Name &company_idx:2 Load) Sub (Constant i1 None))) (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &company_idx:2 Load) Sub (Constant i1 None))) Load))) nil) None) (For (Name &amount:2 Store) (Name &advertised_amounts:2 Load) (/seq (Assign (list (Name &real_amount:2 Store)) (Constant i0 None) None) (/splice (fn_5 (BinOp (Name &amount:2 Load) Add (Constant i1 None)) &dp:2)) (fn_15 (Name &previous_pack_sizes:2 Load) &dp:2 &x:2 &pack_size:2 &amount:2) (For (Name &x:2 Store) (fn_9 (Name &amount:2 Load)) (/seq (If (fn_23 (Subscript (Name &dp:2 Load) (_slice_content (Name &x:2 Load)) Load)) (/seq (Assign (list (Name &real_amount:2 Store)) (Subscript (Name &dp:2 Load) (_slice_content (Name &x:2 Load)) Load) None) Break) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &real_amounts:2 Load) s_append Load) (list (_starred_content (Name &real_amount:2 Load))) nil))) (/seq) None) (Return (Name &real_amounts:2 Load))) nil None None) (For (Name &company_idx:1 Store) (fn_9 (BinOp (Name &k:1 Load) Sub (Constant i1 None))) (/seq (Assign (list (Name &advertised_amounts:1 Store)) (Subscript (Name &companies:1 Load) (_slice_content (Name &company_idx:1 Load)) Load) None) (Assign (list (Name &real_amounts:1 Store)) (Call (Name &calc_real_amounts:1 Load) (list (_starred_content (Name &company_idx:1 Load)) (_starred_content (Name &advertised_amounts:1 Load))) nil) None) (For (Tuple (list (_starred_content (Name &ad_amount:1 Store)) (_starred_content (Name &real_amount:1 Store))) Store) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &advertised_amounts:1 Load)) (_starred_content (Name &real_amounts:1 Load))) nil))) nil) (/seq (If (Compare (Name &real_amount:1 Load) (list GtE) (list (Name &bolts:1 Load))) (/seq (Return (Name &ad_amount:1 Load))) (/seq))) (/seq) None)) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_21 (/seq (Assign (list (Name &line:0 Store)) (fn_10) None) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Subscript (Name &line:0 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Assign (list (Name &min_packet:0 Store)) (Call (Name &find_min_packet:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &min_packet:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_package:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_28))) Load))) Load))) nil) None) (For (Name &packs:1 Store) (Name &companies:1 Load) (/seq (Assign (list (Name &prev_min_packs:1 Store)) (Subscript (Call (Attribute (Name &queue:1 Load) s_popleft Load) nil nil) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &min_packs:1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (Constant i1001 None)) None) (For (Name &pack_size:1 Store) (Name &packs:1 Load) (/seq (For (Name &size:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &pack_size:1 Load)) (_starred_content (Constant i1001 None))) nil) (/seq (Assign (list (Subscript (Name &min_packs:1 Load) (_slice_content (Name &size:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &min_packs:1 Load) (_slice_content (Name &size:1 Load)) Load)) (_starred_content (BinOp (Subscript (Name &prev_min_packs:1 Load) (_slice_content (BinOp (Name &size:1 Load) Sub (Name &pack_size:1 Load))) Load) Add (Constant i1 None)))) nil) None)) (/seq) None)) (/seq) None) (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Subscript (fn_27 &queue:1) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) (_starred_content (Name &min_packs:1 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &last_min_packs:1 Store)) (Subscript (fn_27 &queue:1) (_slice_content (Constant i1 None)) Load) None) (/splice (fn_13 (Constant i1001 None) &size:1 &last_min_packs:1 &bolts:1))) nil None None) (Assign (list (Name &B:0 Store)) (Constant i310 None) None) (Assign (list (Name &companies:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i40 None)) (_starred_content (Constant i65 None))) Load)) (_starred_content (List (list (_starred_content (Constant i100 None)) (_starred_content (Constant i150 None))) Load)) (_starred_content (List (list (_starred_content (Constant i300 None)) (_starred_content (Constant i320 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_min_package:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &min_bolts:1 (arguments nil (list (arg &packages:2 None None) (arg &bolts_needed:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &bolts_needed:2 Load) Add (Constant i1 None)) &dp:2)) (For (Name &i:2 Store) (fn_20 (Name &bolts_needed:2 Load)) (/seq (For (Name &package:2 Store) (Name &packages:2 Load) (/seq (If (Compare (Name &package:2 Load) (list LtE) (list (Name &i:2 Load))) (fn_3 (Name &package:2 Load) &package:2 &i:2 &dp:2) (/seq))) (/seq) None)) (/seq) None) (Return (IfExp (fn_23 (Subscript (Name &dp:2 Load) (_slice_content (Name &bolts_needed:2 Load)) Load)) (Subscript (Name &dp:2 Load) (_slice_content (Name &bolts_needed:2 Load)) Load) (Constant None None)))) nil None None) (Assign (list (Name &real_packs:1 Store)) (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &new_real_packs:1 Store)) (List nil Load) None) (For (Name &pack:1 Store) (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (Assign (list (Name &min_pack:1 Store)) (Call (Name &min_bolts:1 Load) (list (_starred_content (Name &real_packs:1 Load)) (_starred_content (Name &pack:1 Load))) nil) None) (If (Compare (Name &min_pack:1 Load) (list IsNot) (list (Constant None None))) (/seq (Expr (Call (Attribute (Name &new_real_packs:1 Load) s_append Load) (list (_starred_content (Name &min_pack:1 Load))) nil))) (/seq (Return (Constant s_impossible None))))) (/seq) None) (Assign (list (Name &real_packs:1 Store)) (Name &new_real_packs:1 Load) None)) (/seq) None) (/splice (fn_22 (GeneratorExp (Name &pack:3 Load) (list (comprehension (Name &pack:3 Store) (Name &real_packs:1 Load) (list (Compare (Name &pack:3 Load) (list GtE) (list (Name &B:1 Load)))) i0))) &answer:1))) nil None None) (If (fn_26) (/seq (/splice (fn_18 &_:0 &companies:0 &k:0 &B:0 &line:0 &find_min_package:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &min_package_size:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &min_combinations:1 (arguments nil (list (arg &pack_sizes:2 None None) (arg &target:2 None None) (arg &cache:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &target:2 Load) (list In) (list (Name &cache:2 Load))) (/seq (Return (Subscript (Name &cache:2 Load) (_slice_content (Name &target:2 Load)) Load))) (/seq)) (If (Compare (Name &target:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (List nil Load))) (/seq)) (For (Name &size:2 Store) (Name &pack_sizes:2 Load) (/seq (If (Compare (Name &size:2 Load) (list LtE) (list (Name &target:2 Load))) (/seq (Assign (list (Name &combination:2 Store)) (Call (Name &min_combinations:1 Load) (list (_starred_content (Name &pack_sizes:2 Load)) (_starred_content (BinOp (Name &target:2 Load) Sub (Name &size:2 Load))) (_starred_content (Name &cache:2 Load))) nil) None) (If (Compare (Name &combination:2 Load) (list IsNot) (list (Constant None None))) (/seq (Assign (list (Subscript (Name &cache:2 Load) (_slice_content (Name &target:2 Load)) Store)) (BinOp (Name &combination:2 Load) Add (List (list (_starred_content (Name &size:2 Load))) Load)) None) (Return (Subscript (Name &cache:2 Load) (_slice_content (Name &target:2 Load)) Load))) (/seq))) (/seq))) (/seq) None) (Assign (list (Subscript (Name &cache:2 Load) (_slice_content (Name &target:2 Load)) Store)) (Constant None None) None) (Return (Constant None None))) nil None None) (Assign (list (Name &real_sizes:1 Store)) (List (list (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &current_company_packs:1 Store)) (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &all_combinations:1 Store)) (List nil Load) None) (For (Name &pack_size:1 Store) (Name &current_company_packs:1 Load) (/seq (Assign (list (Name &cache:1 Store)) (Dict nil nil) None) (Assign (list (Name &min_comb:1 Store)) (Call (Name &min_combinations:1 Load) (list (_starred_content (Subscript (Name &real_sizes:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (_starred_content (Name &pack_size:1 Load)) (_starred_content (Name &cache:1 Load))) nil) None) (If (Compare (Name &min_comb:1 Load) (list IsNot) (list (Constant None None))) (/seq (Expr (Call (Attribute (Name &all_combinations:1 Load) s_append Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &min_comb:1 Load))) nil))) nil))) (/seq (Expr (Call (Attribute (Name &all_combinations:1 Load) s_append Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) nil))))) (/seq) None) (Expr (Call (Attribute (Name &real_sizes:1 Load) s_append Load) (list (_starred_content (Name &all_combinations:1 Load))) nil))) (/seq) None) (For (Name &i:1 Store) (fn_9 (BinOp (Name &k:1 Load) Sub (Constant i1 None))) (/seq (Assign (list (Name &min_pack:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_19 (Call (Name g_zip Load) (list (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &real_sizes:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) &pack_size:1 &min_pack:1 &B:1 &real_size:1) (fn_16 (Name &min_pack:1 Load))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_18 &_:0 &companies:0 &k:0 &B:0 &line:0 &min_package_size:0))) nil)",
            "(Module (/seq (FunctionDef &min_pack_size:0 (arguments nil (list (arg &B:1 None None) (arg &packages:1 None None)) None nil nil None nil) (/seq (ImportFrom s_itertools (list (alias &combinations:1 None)) i0) (FunctionDef &find_min_advertised:1 (arguments nil (list (arg &bolts:3 None None) (arg &packs:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &possible_packs:3 Store)) (ListComp (Name &pack:4 Load) (list (comprehension (Name &pack:4 Store) (Name &packs:3 Load) (list (Compare (Name &pack:4 Load) (list GtE) (list (Name &bolts:3 Load)))) i0))) None) (If (Name &possible_packs:3 Load) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &possible_packs:3 Load))) nil))) (/seq (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &packs:3 Load))) nil) Add (Constant i1 None)))) nil) (/seq (For (Name &combination:3 Store) (Call (Name &combinations:1 Load) (list (_starred_content (Name &packs:3 Load)) (_starred_content (Name &i:3 Load))) nil) (/seq (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &combination:3 Load))) nil) (list GtE) (list (Name &bolts:3 Load))) (/seq (Return (Call (Name g_sum Load) (list (_starred_content (Name &combination:3 Load))) nil))) (/seq))) (/seq) None)) (/seq) None))) (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) nil None None) (Assign (list (Name &min_advertised_sizes:1 Store)) (fn_27 &packages:1) None) (For (Name &i:1 Store) (fn_9 (BinOp (Call (Name g_len Load) (list (_starred_content (Name &packages:1 Load))) nil) Sub (Constant i2 None))) (/seq (Assign (list (Name &new_min_advertised_sizes:1 Store)) (List nil Load) None) (For (Name &pack_size:1 Store) (Subscript (Name &packages:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (Assign (list (Name &min_advertised_size:1 Store)) (Call (Name &find_min_advertised:1 Load) (list (_starred_content (Name &pack_size:1 Load)) (_starred_content (Name &min_advertised_sizes:1 Load))) nil) None) (Expr (Call (Attribute (Name &new_min_advertised_sizes:1 Load) s_append Load) (list (_starred_content (Name &min_advertised_size:1 Load))) nil))) (/seq) None) (Assign (list (Name &min_advertised_sizes:1 Store)) (Name &new_min_advertised_sizes:1 Load) None)) (/seq) None) (Assign (list (Name &result:1 Store)) (Call (Name &find_min_advertised:1 Load) (list (_starred_content (Name &B:1 Load)) (_starred_content (Name &min_advertised_sizes:1 Load))) nil) None) (Return (IfExp (Compare (Name &result:1 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Constant s_impossible None) (Name &result:1 Load)))) nil None None) (/splice (fn_7 (/seq (/splice (fn_1 &B:2 &k:2 &_:5 &packages:2)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_pack_size:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &packages:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_combinations:0 (arguments nil (list (arg &pack_sizes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &comb_sums:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &r:1 Store) (fn_20 (Call (Name g_len Load) (list (_starred_content (Name &pack_sizes:1 Load))) nil)) (/seq (For (Name &comb:1 Store) (Call (Name g_combinations Load) (list (_starred_content (Name &pack_sizes:1 Load)) (_starred_content (Name &r:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &comb_sums:1 Load) s_add Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (Name &comb:1 Load))) nil))) nil))) (/seq) None)) (/seq) None) (Return (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &comb_sums:1 Load))) nil))) nil))) nil None None) (FunctionDef &find_smallest_package:0 (arguments nil (list (arg &B:2 None None) (arg &companies:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &current_packs:2 Store)) (Subscript (Name &companies:2 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &company:2 Store) (Subscript (Name &companies:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &current_comb_sums:2 Store)) (Call (Name &calculate_combinations:0 Load) (list (_starred_content (Name &current_packs:2 Load))) nil) None) (Assign (list (Name &new_packs:2 Store)) (List nil Load) None) (For (Name &size:2 Store) (Name &company:2 Load) (/seq (Assign (list (Name &real_size:2 Store)) (Call (Name g_min Load) (list (_starred_content (GeneratorExp (Name &s:5 Load) (list (comprehension (Name &s:5 Store) (Name &current_comb_sums:2 Load) (list (Compare (Name &s:5 Load) (list GtE) (list (Name &size:2 Load)))) i0))))) (list (keyword s_default (Constant None None)))) None) (If (Compare (Name &real_size:2 Load) (list IsNot) (list (Constant None None))) (/seq (Expr (Call (Attribute (Name &new_packs:2 Load) s_append Load) (list (_starred_content (Name &real_size:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &current_packs:2 Store)) (Name &new_packs:2 Load) None)) (/seq) None) (/splice (fn_22 (GeneratorExp (Name &size:4 Load) (list (comprehension (Name &size:4 Store) (Name &current_packs:2 Load) (list (Compare (Name &size:4 Load) (list GtE) (list (Name &B:2 Load)))) i0))) &result:2))) nil None None) (/splice (fn_1 &B:0 &k:0 &_:3 &companies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_smallest_package:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_pack_size:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (FunctionDef &find_min_actual_amount:1 (arguments nil (list (arg &advertised:2 None None) (arg &prev_packs:2 None None)) None nil nil None nil) (/seq (fn_11 (Call (Name g_max Load) (list (_starred_content (Name &advertised:2 Load))) nil) &dp:2) (For (Name &pack:2 Store) (Name &prev_packs:2 Load) (/seq (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &pack:2 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:2 Load))) nil))) nil) (fn_3 (Constant i1 None) &pack:2 &i:2 &dp:2) (/seq) None)) (/seq) None) (Assign (list (Name &min_actual:2 Store)) (ListComp (Call (Name g_min Load) (list (_starred_content (ListComp (Name &j:5 Load) (list (comprehension (Name &j:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &adv:4 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:2 Load))) nil))) nil) (list (fn_23 (Subscript (Name &dp:2 Load) (_slice_content (Name &j:5 Load)) Load))) i0))))) nil) (list (comprehension (Name &adv:4 Store) (Name &advertised:2 Load) nil i0))) None) (Return (Name &min_actual:2 Load))) nil None None) (Assign (list (Name &real_packs:1 Store)) (Subscript (Name &companies:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &real_packs:1 Store)) (Call (Name &find_min_actual_amount:1 Load) (list (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Name &real_packs:1 Load))) nil) None)) (/seq) None) (/splice (fn_22 (ListComp (Name &size:3 Load) (list (comprehension (Name &size:3 Store) (Name &real_packs:1 Load) (list (Compare (Name &size:3 Load) (list GtE) (list (Name &B:1 Load)))) i0))) &min_size:1))) nil None None) (/splice (fn_2 (/seq (/splice (fn_17 (fn_10) &line:0 &l_i:0 &n_i:0)) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Name &n_i:0 Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_pack_size:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_min_package:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &B:1 Load) Add (Constant i1 None)) &dp:1)) (For (Name &c:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &new_dp:1 Store)) (Subscript (Name &dp:1 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &B:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &size:1 Store) (Subscript (Name &companies:1 Load) (_slice_content (Name &c:1 Load)) Load) (/seq (If (Compare (BinOp (Name &i:1 Load) Sub (Name &size:1 Load)) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &new_dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &new_dp:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &size:1 Load))) Load) Add (Name &size:1 Load))) (_starred_content (Name &i:1 Load))) nil))) nil) None)) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &dp:1 Store)) (Name &new_dp:1 Load) None)) (/seq) None) (/splice (fn_13 (BinOp (Name &B:1 Load) Add (Constant i101 None)) &i:1 &dp:1 &B:1))) nil None None) (/splice (fn_2 (/seq (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Subscript (fn_4) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_min_package:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_pack_size:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (fn_11 (Constant i1000 None) &dp:1) (For (Name &company:1 Store) (Name &companies:1 Load) (fn_8 &dp:1 &new_dp:1 &pack_size:1 &i:1 &company:1) (/seq) None) (/splice (fn_6 (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &B:1 Load)) (_starred_content (Constant i1001 None))) nil) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Lt) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Assign (list (Name &result:1 Store)) (Name &i:1 Load) None) Break) (/seq))) (/seq) None) &result:1))) nil None None) (If (fn_26) (/seq (/splice (fn_1 &B:0 &k:0 &_:2 &companies:0)) (Assign (list (Name &res:0 Store)) (Call (Name &min_pack_size:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_14 (/seq (FunctionDef &calculate_real_amounts:1 (arguments nil (list (arg &pack_sizes:2 None None) (arg &previous_real_amounts:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1001 None) &dp:2)) (Assign (list (Name &choices:2 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &pack:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &pack_sizes:2 Load))) nil) (/seq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &pack:2 Load)) (_starred_content (Constant i1001 None))) nil) (/seq (Assign (list (Name &possible_real_amount:2 Store)) (BinOp (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Name &pack:2 Load))) Load) Add (Subscript (Name &previous_real_amounts:2 Load) (_slice_content (Name &i:2 Load)) Load)) None) (If (Compare (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Load) (list Gt) (list (Name &possible_real_amount:2 Load))) (/seq (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &j:2 Load)) Store)) (Name &possible_real_amount:2 Load) None) (Assign (list (Subscript (Name &choices:2 Load) (_slice_content (Name &j:2 Load)) Store)) (Tuple (list (_starred_content (BinOp (Name &j:2 Load) Sub (Name &pack:2 Load))) (_starred_content (Name &i:2 Load))) Load) None)) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &real_amounts:2 Store)) (Dict nil nil) None) (For (Name &amount:2 Store) (Name &pack_sizes:2 Load) (/seq (Assign (list (Name &current:2 Store)) (Name &amount:2 Load) None) (Assign (list (Name &real_amount:2 Store)) (Constant i0 None) None) (While (Compare (Name &current:2 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &prev:2 Store)) (_starred_content (Name &pack_index:2 Store))) Store)) (Subscript (Name &choices:2 Load) (_slice_content (Name &current:2 Load)) Load) None) (AugAssign (Name &real_amount:2 Store) Add (Subscript (Name &previous_real_amounts:2 Load) (_slice_content (Name &pack_index:2 Load)) Load)) (Assign (list (Name &current:2 Store)) (Name &prev:2 Load) None)) (/seq)) (Assign (list (Subscript (Name &real_amounts:2 Load) (_slice_content (Name &amount:2 Load)) Store)) (Name &real_amount:2 Load) None)) (/seq) None) (Return (ListComp (BinOp (Subscript (Name &real_amounts:2 Load) (_slice_content (Name &size:5 Load)) Load) Add (Name &size:5 Load)) (list (comprehension (Name &size:5 Store) (Name &pack_sizes:2 Load) nil i0))))) nil None None) (Assign (list (Name &k:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &companies:1 Load))) nil) None) (Assign (list (Name &real_amounts:1 Store)) (ListComp (ListComp (Name &size:3 Load) (list (comprehension (Name &size:3 Store) (Name &company:4 Load) nil i0))) (list (comprehension (Name &company:4 Store) (Name &companies:1 Load) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Subscript (Name &real_amounts:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name &calculate_real_amounts:1 Load) (list (_starred_content (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &real_amounts:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) nil) None)) (/seq) None) (For (Name &size:1 Store) (Call (Name g_sorted Load) (list (_starred_content (fn_27 &companies:1))) nil) (/seq (If (Compare (Subscript (fn_27 &real_amounts:1) (_slice_content (Call (Attribute (fn_27 &companies:1) s_index Load) (list (_starred_content (Name &size:1 Load))) nil)) Load) (list GtE) (list (Name &bolts:1 Load))) (/seq (Return (Name &size:1 Load))) (/seq))) (/seq) None) (Return (Constant s_impossible None))) &companies:1 &bolts:1 &min_package_required:0) (/splice (fn_2 (/seq (/splice (fn_17 (fn_4) &line:0 &l_i:0 &n:0)) (Expr (Call (Attribute (Name &companies:0 Load) s_append Load) (list (_starred_content (Name &n:0 Load))) nil))) &B:0 &k:0 &companies:0 &_:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package_required:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_package:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1001 None) &dp:1)) (For (Name &sizes:1 Store) (Name &companies:1 Load) (/seq (For (Name &b:1 Store) (fn_9 (Constant i1000 None)) (/seq (For (Name &size:1 Store) (Name &sizes:1 Load) (/seq (If (BoolOp And (list (Compare (Name &b:1 Load) (list GtE) (list (Name &size:1 Load))) (fn_23 (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &b:1 Load) Sub (Name &size:1 Load))) Load)))) (fn_3 (Name &size:1 Load) &size:1 &b:1 &dp:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (/splice (fn_13 (Constant i1001 None) &i:1 &dp:1 &bolts:1))) nil None None) (If (fn_26) (/seq (/splice (fn_1 &B:0 &k:0 &_:2 &companies_info:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_package:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &companies_info:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &B:1 &k:1 &_:4 &companies:1)) (Return (Tuple (list (_starred_content (Name &B:1 Load)) (_starred_content (Name &companies:1 Load))) Load))) nil None None) (FunctionDef &min_package:0 (arguments nil (list (arg &B:2 None None) (arg &companies:2 None None)) None nil nil None nil) (/seq (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &companies:2 Load))) nil))) nil) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (Assign (list (Name &prev_packages:2 Store)) (Subscript (Name &companies:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &companies:2 Load) (_slice_content (Name &i:2 Load)) Load))) nil))) nil) (/seq (Assign (list (Name &p:2 Store)) (Subscript (Subscript (Name &companies:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &j:2 Load)) Load) None) (/splice (fn_5 (BinOp (Name &p:2 Load) Add (Constant i1 None)) &dp:2)) (For (Name &pack_size:2 Store) (Name &prev_packages:2 Load) (/seq (For (Name &x:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &pack_size:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Add (Constant i1 None)))) nil) (fn_3 (Constant i1 None) &pack_size:2 &x:2 &dp:2) (/seq) None)) (/seq) None) (Assign (list (Subscript (Subscript (Name &companies:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &j:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (ListComp (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Subscript (Name &prev_packages:2 Load) (_slice_content (Name &k:6 Load)) Load) (list (comprehension (Name &k:6 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &prev_packages:2 Load))) nil))) nil) (list (BoolOp And (list (fn_23 (Subscript (Name &dp:2 Load) (_slice_content (Subscript (Name &prev_packages:2 Load) (_slice_content (Name &k:6 Load)) Load)) Load)) (Compare (BinOp (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &p:2 Load) Sub (Subscript (Name &prev_packages:2 Load) (_slice_content (Name &k:6 Load)) Load))) Load) Add (Constant i1 None)) (list Eq) (list (Subscript (Name &dp:2 Load) (_slice_content (Name &p:2 Load)) Load)))))) i0))))) nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil) (list (fn_23 (Subscript (Name &dp:2 Load) (_slice_content (Name &p:2 Load)) Load))) i0))))) (list (keyword s_default (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))) None)) (/seq) None)) (/seq) None) (Assign (list (Name &best_package:2 Store)) (Constant s_impossible None) None) (For (Name &package_sizes:2 Store) (Name &companies:2 Load) (/seq (For (Name &size:2 Store) (Name &package_sizes:2 Load) (/seq (If (Compare (Name &size:2 Load) (list GtE) (list (Name &B:2 Load))) (/seq (If (BoolOp Or (list (Compare (Name &best_package:2 Load) (list Eq) (list (Constant s_impossible None))) (Compare (Name &size:2 Load) (list Lt) (list (Name &best_package:2 Load))))) (/seq (Assign (list (Name &best_package:2 Store)) (Name &size:2 Load) None)) (/seq))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &best_package:2 Load))) nil None None) (/splice (fn_7 (/seq (Assign (list (Tuple (list (_starred_content (Name &B:3 Store)) (_starred_content (Name &companies:3 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Name &result:3 Store)) (Call (Name &min_package:0 Load) (list (_starred_content (Name &B:3 Load)) (_starred_content (Name &companies:3 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:3 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_min_package:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (fn_11 (Name &bolts:1 Load) &dp:1) (For (Name &sizes:1 Store) (Name &companies:1 Load) (/seq (Assign (list (Name &new_dp:1 Store)) (Subscript (Name &dp:1 Load) (_slice_slice (Slice None None None)) Load) None) (fn_15 (Name &sizes:1 Load) &new_dp:1 &i:1 &size:1 &bolts:1) (Assign (list (Name &dp:1 Store)) (Name &new_dp:1 Load) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &bolts:1 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil))) nil) (/seq (fn_16 (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_7 (/seq (/splice (fn_21 (/seq (/splice (fn_17 (fn_10) &pack_info:2 &l_i:2 &pack_sizes:2)) (Assign (list (Name &real_pack_sizes:2 Store)) (List nil Load) None) (If (Name &companies:2 Load) (/seq (For (Name &size:2 Store) (Name &pack_sizes:2 Load) (/seq (Assign (list (Name &min_excess:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &prev_company_sizes:2 Store) (fn_27 &companies:2) (/seq (For (Name &qty:2 Store) (fn_20 (BinOp (Name &size:2 Load) FloorDiv (Subscript (Name &prev_company_sizes:2 Load) (_slice_content (Constant i0 None)) Load))) (/seq (If (Compare (BinOp (Name &qty:2 Load) Mult (Subscript (Name &prev_company_sizes:2 Load) (_slice_content (Constant i1 None)) Load)) (list GtE) (list (Name &size:2 Load))) (/seq (Assign (list (Name &min_excess:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_excess:2 Load)) (_starred_content (BinOp (Name &qty:2 Load) Mult (Subscript (Name &prev_company_sizes:2 Load) (_slice_content (Constant i1 None)) Load)))) nil) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Attribute (Name &real_pack_sizes:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &size:2 Load)) (_starred_content (Name &min_excess:2 Load))) Load))) nil))) (/seq) None)) (/seq (For (Name &size:2 Store) (Name &pack_sizes:2 Load) (/seq (Expr (Call (Attribute (Name &real_pack_sizes:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &size:2 Load)) (_starred_content (Name &size:2 Load))) Load))) nil))) (/seq) None))) (Expr (Call (Attribute (Name &companies:2 Load) s_append Load) (list (_starred_content (Name &real_pack_sizes:2 Load))) nil))) &B:2 &k:2 &companies:2 &_:2)) (Assign (list (Name &real_sizes_for_dp:2 Store)) (ListComp (ListComp (Name &real_size:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &real_size:3 Store))) Store) (Name &sizes:4 Load) nil i0))) (list (comprehension (Name &sizes:4 Store) (Name &companies:2 Load) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_min_package:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &real_sizes_for_dp:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_min_package:0 (arguments nil (list (arg &b:1 (Name g_int Load) None) (arg &companies:1 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Constant Ellipsis None))) Load)) Load)) Load) None)) None nil nil None nil) (/seq (Assign (list (Name &dp_list:1 Store)) (ListComp (Dict nil nil) (list (comprehension (Name &_:2 Store) (Name &companies:1 Load) nil i0))) None) (Expr (Call (Attribute (Name &dp_list:1 Load) s_insert Load) (list (_starred_content (Constant i0 None)) (_starred_content (Dict (list (Constant i0 None)) (list (Constant i0 None))))) nil)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp_list:1 Load))) nil))) nil) (/seq (For (Name &pack_size:1 Store) (Subscript (Subscript (Name &companies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &dp:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &size:1 Store)) (_starred_content (Name &real_size:1 Store))) Store) (fn_25 &i:1 &dp_list:1) (/seq (Assign (list (Name &new_size:1 Store)) (BinOp (Name &size:1 Load) Add (Name &pack_size:1 Load)) None) (Assign (list (Name &new_real_size:1 Store)) (BinOp (Name &real_size:1 Load) Add (Name &pack_size:1 Load)) None) (If (BoolOp Or (list (Compare (Name &new_size:1 Load) (list NotIn) (list (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Compare (Name &new_real_size:1 Load) (list Lt) (list (Subscript (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &new_size:1 Load)) Load))))) (/seq (Assign (list (Subscript (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &new_size:1 Load)) Store)) (Name &new_real_size:1 Load) None) (Expr (Call (Attribute (Name &dp:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &new_size:1 Load)) (_starred_content (Name &new_real_size:1 Load))) Load))) nil))) (/seq))) (/seq) None) (For (Tuple (list (_starred_content (Name &ns:1 Store)) (_starred_content (Name &nrs:1 Store))) Store) (Name &dp:1 Load) (/seq (For (Tuple (list (_starred_content (Name &ps:1 Store)) (_starred_content (Name &prs:1 Store))) Store) (fn_25 &i:1 &dp_list:1) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &ns:1 Load) Add (Name &ps:1 Load)) (list NotIn) (list (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Compare (BinOp (Name &nrs:1 Load) Add (Name &prs:1 Load)) (list Lt) (list (Subscript (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &ns:1 Load) Add (Name &ps:1 Load))) Load))))) (/seq (Assign (list (Subscript (Subscript (Name &dp_list:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &ns:1 Load) Add (Name &ps:1 Load))) Store)) (BinOp (Name &nrs:1 Load) Add (Name &prs:1 Load)) None)) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (/splice (fn_6 (For (Name &company:1 Store) (Subscript (Name &dp_list:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (fn_19 (Call (Attribute (Name &company:1 Load) s_items Load) nil nil) &advertised:1 &min_package_size:1 &b:1 &real:1)) (/seq) None) &min_package_size:1))) nil (Name g_int Load) None) (If (fn_26) (/seq (/splice (fn_12 (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) &b:0 &k:0 &_:3 &companies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_min_package:0 Load) (list (_starred_content (Name &b:0 Load)) (_starred_content (Name &companies:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_14 (/seq (Assign (list (Name &dp_prev:1 Store)) (Dict (list (Constant i0 None)) (list (Constant i0 None))) None) (For (Name &company:1 Store) (Name &companies:1 Load) (/seq (Assign (list (Name &dp_curr:1 Store)) (Dict nil nil) None) (Assign (list (Name &pack_sizes:1 Store)) (Subscript (Name &company:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Tuple (list (_starred_content (Name &pack_advertised:1 Store)) (_starred_content (Name &pack_real:1 Store))) Store) (Call (Attribute (Name &dp_prev:1 Load) s_items Load) nil nil) (/seq (For (Name &size:1 Store) (Name &pack_sizes:1 Load) (/seq (Assign (list (Name &new_advertised:1 Store)) (BinOp (Name &pack_advertised:1 Load) Add (Name &size:1 Load)) None) (Assign (list (Name &new_real:1 Store)) (BinOp (Name &pack_real:1 Load) Add (Name &size:1 Load)) None) (If (BoolOp Or (list (Compare (Name &new_advertised:1 Load) (list NotIn) (list (Name &dp_curr:1 Load))) (Compare (Subscript (Name &dp_curr:1 Load) (_slice_content (Name &new_advertised:1 Load)) Load) (list Gt) (list (Name &new_real:1 Load))))) (/seq (Assign (list (Subscript (Name &dp_curr:1 Load) (_slice_content (Name &new_advertised:1 Load)) Store)) (Name &new_real:1 Load) None)) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &dp_prev:1 Store)) (Call (Attribute (Name &dp_curr:1 Load) s_copy Load) nil nil) None)) (/seq) None) (/splice (fn_6 (fn_19 (Call (Attribute (Name &dp_prev:1 Load) s_items Load) nil nil) &pack_advertised:1 &best_option:1 &B:1 &pack_real:1) &best_option:1))) &companies:1 &B:1 &solve:0) (/splice (fn_7 (/seq (/splice (fn_2 (/seq (Expr (Call (Attribute (Name &companies:2 Load) s_append Load) (list (_starred_content (fn_4))) nil))) &B:2 &k:2 &companies:2 &_:2)) (Assign (list (Name &result:2 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &companies:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_min_packs:0 (arguments nil (list (arg &bolts:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (List (list (_starred_content (Dict (list (Constant i0 None)) (list (Constant i0 None))))) Load) None) (For (Name &sizes:1 Store) (Name &companies:1 Load) (/seq (Assign (list (Name &current:1 Store)) (Dict nil nil) None) (For (Name &size:1 Store) (Name &sizes:1 Load) (/seq (Assign (list (Subscript (Name &current:1 Load) (_slice_content (Name &size:1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Tuple (list (_starred_content (Name &prev_size:1 Store)) (_starred_content (Name &prev_bolts:1 Store))) Store) (Call (Attribute (fn_27 &dp:1) s_items Load) nil nil) (/seq (Assign (list (Name &current_size:1 Store)) (BinOp (Name &prev_size:1 Load) Add (Name &size:1 Load)) None) (Assign (list (Name &current_bolts:1 Store)) (BinOp (Name &prev_bolts:1 Load) Add (Name &size:1 Load)) None) (If (BoolOp Or (list (Compare (Name &current_size:1 Load) (list NotIn) (list (Name &current:1 Load))) (Compare (Name &current_bolts:1 Load) (list Lt) (list (Subscript (Name &current:1 Load) (_slice_content (Name &current_size:1 Load)) Load))))) (/seq (Assign (list (Subscript (Name &current:1 Load) (_slice_content (Name &current_size:1 Load)) Store)) (Name &current_bolts:1 Load) None)) (/seq))) (/seq) None)) (/seq) None) (Expr (Call (Attribute (Name &dp:1 Load) s_append Load) (list (_starred_content (Name &current:1 Load))) nil))) (/seq) None) (/splice (fn_6 (fn_19 (Call (Attribute (fn_27 &dp:1) s_items Load) nil nil) &size:1 &answer:1 &bolts:1 &real_size:1) &answer:1))) nil None None) (/splice (fn_7 (/seq (Assign (list (Name &input_lines:2 Store)) (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readlines Load) nil nil) None) (Assign (list (Name &bolts:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Subscript (Name &input_lines:2 Load) (_slice_content (Constant i0 None)) Load) s_strip Load) nil nil))) nil) None) (Assign (list (Name &k:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Subscript (Name &input_lines:2 Load) (_slice_content (Constant i1 None)) Load) s_strip Load) nil nil))) nil) None) (Assign (list (Name &companies:2 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:4 Load))) nil) (list (comprehension (Name &x:4 Store) (Subscript (Call (Attribute (Call (Attribute (Name &line:3 Load) s_strip Load) nil nil) s_split Load) nil nil) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))) (list (comprehension (Name &line:3 Store) (Subscript (Name &input_lines:2 Load) (_slice_slice (Slice (Constant i2 None) (BinOp (Constant i2 None) Add (Name &k:2 Load)) None)) Load) nil i0))) None) (Assign (list (Name &result:2 Store)) (Call (Name &find_min_packs:0 Load) (list (_starred_content (Name &bolts:2 Load)) (_starred_content (Name &companies:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &min_package_size:0 (arguments nil (list (arg &B:1 None None) (arg &k:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (ListComp (DictComp (Name &pack:3 Load) (Name &pack:3 Load) (list (comprehension (Name &pack:3 Store) (Name &packs:4 Load) nil i0))) (list (comprehension (Name &packs:4 Store) (Name &companies:1 Load) nil i0))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &k:1 Load))) nil) (/seq (For (Name &pack:1 Store) (Subscript (Name &companies:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (Assign (list (Name &min_sum:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &prev_pack:1 Store) (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (/seq (For (Name &j:1 Store) (fn_20 (BinOp (Name &pack:1 Load) FloorDiv (Name &prev_pack:1 Load))) (/seq (Assign (list (Name &remaining:1 Store)) (BinOp (Name &pack:1 Load) Sub (BinOp (Name &prev_pack:1 Load) Mult (Name &j:1 Load))) None) (If (Compare (Name &remaining:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &min_sum:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_sum:1 Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &prev_pack:1 Load)) Load) Mult (Name &j:1 Load)))) nil) None)) (/seq (If (Compare (Name &remaining:1 Load) (list In) (list (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq (Assign (list (Name &min_sum:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_sum:1 Load)) (_starred_content (BinOp (BinOp (Subscript (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &prev_pack:1 Load)) Load) Mult (Name &j:1 Load)) Add (Subscript (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &remaining:1 Load)) Load)))) nil) None)) (/seq))))) (/seq) None)) (/seq) None) (Assign (list (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &pack:1 Load)) Store)) (IfExp (fn_23 (Name &min_sum:1 Load)) (Name &min_sum:1 Load) (Name &pack:1 Load)) None)) (/seq) None)) (/seq) None) (For (Name &i:1 Store) (fn_9 (BinOp (Name &k:1 Load) Sub (Constant i1 None))) (/seq (Assign (list (Name &possible_packs:1 Store)) (ListComp (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &pack:5 Load)) Load) (list (comprehension (Name &pack:5 Store) (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (list (Compare (Subscript (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &pack:5 Load)) Load) (list GtE) (list (Name &B:1 Load)))) i0))) None) (If (Name &possible_packs:1 Load) (/seq (Return (Call (Name g_min Load) (list (_starred_content (BinOp (Name &possible_packs:1 Load) Add (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load)))) nil))) (/seq))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_1 &B:0 &k:0 &_:2 &companies:0)) (Assign (list (Name &result:0 Store)) (Call (Name &min_package_size:0 Load) (list (_starred_content (Name &B:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &companies:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &can_achieve:0 (arguments nil (list (arg &total:1 (Name g_int Load) None) (arg &packs:1 (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name &total:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant True None) None) (For (Name &pack:1 Store) (Name &packs:1 Load) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &total:1 Load)) (_starred_content (BinOp (Name &pack:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Name &pack:1 Load))) Load) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &j:1 Load)) Store)) (Constant True None) None)) (/seq))) (/seq) None)) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &total:1 Load)) Load))) nil (Name g_bool Load) None) (FunctionDef &get_min_pack:0 (arguments nil (list (arg &B:2 (Name g_int Load) None) (arg &packs:2 (Subscript (Name g_List Load) (_slice_content (Name g_int Load)) Load) None)) None nil nil None nil) (/seq (Assign (list (Name &min_pack:2 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &packs:2 Load))) nil) Add (Constant i1 None)) None) (For (Name &pack:2 Store) (Name &packs:2 Load) (/seq (If (BoolOp And (list (Call (Name &can_achieve:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &packs:2 Load))) nil) (Compare (Name &pack:2 Load) (list Lt) (list (Name &min_pack:2 Load))))) (/seq (Assign (list (Name &min_pack:2 Store)) (Name &pack:2 Load) None)) (/seq))) (/seq) None) (Return (IfExp (Compare (Name &min_pack:2 Load) (list LtE) (list (Call (Name g_max Load) (list (_starred_content (Name &packs:2 Load))) nil))) (Name &min_pack:2 Load) (UnaryOp USub (Constant i1 None))))) nil (Name g_int Load) None) (fn_14 (/seq (Assign (list (Name &cur_packs:3 Store)) (List nil Load) None) (For (Name &company:3 Store) (Name &companies:3 Load) (/seq (Assign (list (Name &new_packs:3 Store)) (Subscript (Name &company:3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Assign (list (Name &prev_min_packs:3 Store)) (Name &cur_packs:3 Load) None) (Assign (list (Name &cur_packs:3 Store)) (List nil Load) None) (For (Name &pack:3 Store) (Name &new_packs:3 Load) (/seq (Assign (list (Name &min_pack:3 Store)) (Call (Name &get_min_pack:0 Load) (list (_starred_content (Name &pack:3 Load)) (_starred_content (Name &prev_min_packs:3 Load))) nil) None) (If (Compare (Name &min_pack:3 Load) (list GtE) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &cur_packs:3 Load) s_append Load) (list (_starred_content (Name &min_pack:3 Load))) nil))) (/seq (Expr (Call (Attribute (Name &cur_packs:3 Load) s_append Load) (list (_starred_content (Name &pack:3 Load))) nil))))) (/seq) None)) (/seq) None) (For (Name &pack:3 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &cur_packs:3 Load))) nil) (/seq (If (Compare (Name &pack:3 Load) (list GtE) (list (Name &B:3 Load))) (/seq (Return (Name &pack:3 Load))) (/seq))) (/seq) None) (Return (Constant s_impossible None))) &companies:3 &B:3 &solve:0) (FunctionDef &read_input_and_solve:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_2 (/seq (Assign (list (Name &input_line:4 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Name &companies:4 Load) s_append Load) (list (_starred_content (Name &input_line:4 Load))) nil))) &B:4 &k:4 &companies:4 &_:4)) (Return (Call (Name &solve:0 Load) (list (_starred_content (Name &B:4 Load)) (_starred_content (Name &companies:4 Load))) nil))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &read_input_and_solve:0 Load) nil nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_min_pack_size:0 (arguments nil (list (arg &B:1 None None) (arg &companies:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1001 None) &dp:1)) (For (Name &sizes:1 Store) (Name &companies:1 Load) (fn_8 &dp:1 &new_dp:1 &size:1 &i:1 &sizes:1) (/seq) None) (For (Tuple (list (_starred_content (Name &advertised:1 Store)) (_starred_content (Name &real:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dp:1 Load))) nil) (/seq (If (Compare (Name &real:1 Load) (list GtE) (list (Name &B:1 Load))) (/seq (Return (Name &advertised:1 Load))) (/seq))) (/seq) None) (Return (Constant s_impossible None))) nil None None) (/splice (fn_7 (/seq (/splice (fn_1 &B:2 &k:2 &_:3 &companies:2)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_min_pack_size:0 Load) (list (_starred_content (Name &B:2 Load)) (_starred_content (Name &companies:2 Load))) nil))) nil))) &main:0))) nil)"
        ]
    },
    "821": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) ?0) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue #0 i-1 (JoinedStr (list (Constant s_.12f None)))))))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (/splice (fn_1 #0 %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNTAsIDEwMiwgMTI1XQ== None) s_format Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %2 Load) Mult (BinOp (Constant i1 None) Sub #0)) Add (BinOp (Name %1 Load) Mult #0))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %5 Load) Add (Constant i1 None))) (_starred_content (Name %4 Load))) nil) (/seq (AugAssign (Name %3 Store) Mult (BinOp (Constant i1 None) Sub (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)))) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (AugAssign (Name %1 Store) Add (BinOp #0 Div (BinOp (Constant i1 None) Sub #0))) (AugAssign (Name %2 Store) Mult (BinOp (Constant i1 None) Sub #0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %2 %1)) ?0) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (Assign (list (Name %4 Store)) (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) None) (Assign (list (Name %5 Store)) (Constant i1 None) None) (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (If (Compare (Name %6 Load) (list NotEq) (list (Name %2 Load))) (/seq (AugAssign (Name %5 Store) Mult (BinOp (Constant i1 None) Sub (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load)))) (/seq))) (/seq) None) (AugAssign (Name %1 Store) Add (BinOp (Name %4 Load) Mult (Name %5 Load)))) (/seq) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load))) nil) (/seq (Assign (list (Name %1 Store)) (Constant i1 None) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name %1 Store) Mult (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) (/seq) None) ?0) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Gt) (list (Name %2 Load))) (/seq (Assign (list (Name %2 Store)) (Name %1 Load) None)) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Gt) (list (Name %2 Load))) (/seq (Assign (list (Name %2 Store)) (Name %1 Load) None) ?0) (/seq Break))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %2 %1)) (fn_3 (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %1 Load) Mult (BinOp (Constant i1 None) Sub #0)) Add (BinOp (BinOp (Constant i1 None) Sub (Name %1 Load)) Mult #0))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(AugAssign (Name %2 Store) Mult (BinOp (Constant i1 None) Sub (Name %1 Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp #0 Add (BinOp (Name %2 Load) Mult (BinOp (Constant i1 None) Sub (Name %1 Load))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(AugAssign (Name %3 Store) Mult (BinOp (Constant i1 None) Sub (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNTAsIDEwMiwgMTI1XQ== None) s_format Load) (list (_starred_content #0)) nil))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) ?0) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &calc_prob:0 (arguments nil (list (arg &probabilities:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &probabilities:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &probabilities:1 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (BinOp (UnaryOp USub (Name &x:2 Load)) Div (BinOp (Constant i1 None) Sub (Name &x:2 Load))))))) None) (Assign (list (Name &result:1 Store)) (Constant i0 None) None) (Assign (list (Name &product:1 Store)) (Constant i1 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &result:1 Store)) (fn_5 (Name &p:1 Load) &product:1 &result:1) None) (fn_15 &p:1 &product:1)) (/seq) None) (Return (Name &result:1 Load))) nil None None) (fn_8 &probabilities:0 &n:0 (/choiceseq (fn_18 (Call (Name &calc_prob:0 Load) (list (_starred_content (Name &probabilities:0 Load))) nil))))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &max_probability:0 (/choiceseq (Assign (list (Name &best_probability:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (fn_20 &n:1) (/seq (Assign (list (Name &prod:1 Store)) (Constant f1.0 None) None) (Assign (list (Name &sum_prob:1 Store)) (Constant f0.0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil) (/seq (/splice (fn_7 (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load) &sum_prob:1 &prod:1))) (/seq) None) (Assign (list (Name &prob:1 Store)) (BinOp (Name &prod:1 Load) Mult (Name &sum_prob:1 Load)) None) (fn_11 &prob:1 &best_probability:1)) (/seq) None) (Return (Name &best_probability:1 Load)))) (/splice (fn_4 (Name g_input Load) &probabilities:0 &n:0 &max_probability:0))) nil)",
            "(Module (/seq (fn_2 &p:1 &n:1 &max_satisfaction_probability:0 (/choiceseq (Assign (list (Name &best_prob:1 Store)) (Constant i0 None) None) (fn_10 &prob:1 &j:1 &p:1 &i:1 &n:1 (/choiceseq (fn_6 &j:1 &p:1 &prob:1 &n:1 &i:1) (Assign (list (Name &best_prob:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &prob:1 Load)) (_starred_content (Name &best_prob:1 Load))) nil) None))) (Return (Name &best_prob:1 Load)))) (/splice (fn_13 &p:0 &n:0 &max_satisfaction_probability:0))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &optimal_choice:0 (/choiceseq (Assign (list (Name &result:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &product:1 Store)) (Constant f1.0 None) None) (Assign (list (Name &sum_p:1 Store)) (Constant f0.0 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (/splice (fn_7 (Name &p:1 Load) &sum_p:1 &product:1)) (Assign (list (Name &result:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &result:1 Load)) (_starred_content (BinOp (Name &product:1 Load) Mult (Name &sum_p:1 Load)))) nil) None)) (/seq) None) (Return (Name &result:1 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_4 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &probabilities:0 &n:0 &optimal_choice:0))) (/seq))) nil)",
            "(Module (/seq (fn_21 &probabilities:1 &n:1 &calculate_probability:0 (/choiceseq (Assign (list (Name &best_prob:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &prob_product:1 Store)) (Constant f1.0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil) (/seq (fn_17 &j:1 &probabilities:1 &prob_product:1)) (/seq) None) (AugAssign (Name &prob_product:1 Store) Mult (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load)) (fn_6 &j:1 &probabilities:1 &prob_product:1 &n:1 &i:1) (Assign (list (Name &best_prob:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_prob:1 Load)) (_starred_content (Name &prob_product:1 Load))) nil) None)) (/seq) None) (fn_3 (Name &best_prob:1 Load)))) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &probabilities:0)) (Expr (Call (Name &calculate_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil))) nil)",
            "(Module (/seq (fn_2 &p:1 &n:1 &calculate_optimal_probability:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant i0 None) None) (Assign (list (Name &current_probability:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &fail_probability:1 Store)) (BinOp (Constant i1 None) Sub (Subscript (Name &p:1 Load) (_slice_content (Name &i:1 Load)) Load)) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil) (/seq (fn_17 &j:1 &p:1 &fail_probability:1)) (/seq) None) (Assign (list (Name &current_probability:1 Store)) (fn_5 (Subscript (Name &p:1 Load) (_slice_content (Name &i:1 Load)) Load) &fail_probability:1 &current_probability:1) None) (fn_11 &current_probability:1 &max_probability:1)) (/seq) None) (Return (Name &max_probability:1 Load)))) (fn_8 &p:0 &n:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NywgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Call (Name &calculate_optimal_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &p:0 Load))) nil))) nil))) nil))))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &solve:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &prob_getting_problem:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &prob_not_getting_from_chosen:1 Store)) (Constant f1.0 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (fn_15 &p:1 &prob_not_getting_from_chosen:1) (Assign (list (Name &temp_prob_getting_problem:1 Store)) (fn_5 (Name &p:1 Load) &prob_not_getting_from_chosen:1 &prob_getting_problem:1) None) (fn_12 &temp_prob_getting_problem:1 &max_probability:1 (/choiceseq (Assign (list (Name &prob_getting_problem:1 Store)) (Name &temp_prob_getting_problem:1 Load) None)))) (/seq) None) (fn_3 (Name &max_probability:1 Load)))) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &probabilities:0)) (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil))) nil)",
            "(Module (/seq (fn_21 &probabilities:1 &n:1 &max_chance:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &p_one:1 Store)) (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &p_none:1 Store)) (BinOp (Constant i1 None) Sub (Name &p_one:1 Load)) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Name &i:1 Load) (list NotEq) (list (Name &j:1 Load))) (/seq (AugAssign (Name &p_none:1 Store) Mult (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load)) (AugAssign (Name &p_one:1 Store) Add (BinOp (BinOp (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load) Mult (BinOp (Constant i1 None) Sub (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load))) Div (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load)))) (/seq))) (/seq) None) (Assign (list (Name &max_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_probability:1 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &p_none:1 Load)))) nil) None)) (/seq) None) (Return (Name &max_probability:1 Load)))) (/splice (fn_4 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &probabilities:0 &n:0 &max_chance:0))) nil)",
            "(Module (/seq (fn_2 &probs:1 &n:1 &calculate_optimal_probability:0 (/choiceseq (Assign (list (Name &optimal_probability:1 Store)) (Constant i0 None) None) (Assign (list (Name &current_probability:1 Store)) (Constant i0 None) None) (For (Name &p:1 Store) (Name &probs:1 Load) (/seq (Assign (list (Name &new_probability:1 Store)) (fn_16 (Name &current_probability:1 Load) &current_probability:1 &p:1) None) (fn_12 &new_probability:1 &optimal_probability:1 (/choiceseq (AugAssign (Name &current_probability:1 Store) Add (BinOp (Name &p:1 Load) Mult (BinOp (Constant i1 None) Sub (Name &current_probability:1 Load))))))) (/seq) None) (fn_3 (Name &optimal_probability:1 Load)))) (fn_8 &probs:0 &n:0 (/choiceseq (Expr (Call (Name &calculate_optimal_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probs:0 Load))) nil))))) nil)",
            "(Module (/seq (FunctionDef &optimal_choice:0 (arguments nil (list (arg &n:1 None None) (arg &probabilities:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &sorted_probabilities:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &probabilities:1 Load))) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &best_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &current_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &product_of_failures:1 Store)) (Constant f1.0 None) None) (For (Name &p:1 Store) (Name &sorted_probabilities:1 Load) (/seq (Assign (list (Name &new_probability:1 Store)) (fn_16 (BinOp (Name &product_of_failures:1 Load) Mult (Name &p:1 Load)) &p:1 &current_probability:1) None) (fn_12 &new_probability:1 &best_probability:1 (/choiceseq (Assign (list (Name &current_probability:1 Store)) (Name &new_probability:1 Load) None) (fn_15 &p:1 &product_of_failures:1)))) (/seq) None) (fn_3 (Name &best_probability:1 Load))) nil None None) (Assign (list (Name &n1:0 Store)) (Constant i4 None) None) (Assign (list (Name &probabilities1:0 Store)) (List (list (_starred_content (Constant f0.1 None)) (_starred_content (Constant f0.2 None)) (_starred_content (Constant f0.3 None)) (_starred_content (Constant f0.8 None))) Load) None) (Expr (Call (Name &optimal_choice:0 Load) (list (_starred_content (Name &n1:0 Load)) (_starred_content (Name &probabilities1:0 Load))) nil)) (Assign (list (Name &n2:0 Store)) (Constant i2 None) None) (Assign (list (Name &probabilities2:0 Store)) (List (list (_starred_content (Constant f0.1 None)) (_starred_content (Constant f0.2 None))) Load) None) (Expr (Call (Name &optimal_choice:0 Load) (list (_starred_content (Name &n2:0 Load)) (_starred_content (Name &probabilities2:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &probabilities:0)) (Expr (Call (Attribute (Name &probabilities:0 Load) s_sort Load) nil nil)) (FunctionDef &calculate_probability:0 (arguments nil (list (arg &probabilities:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &best_probability:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &success_prob:1 Store)) (Constant f1.0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil) (/seq (fn_17 &j:1 &probabilities:1 &success_prob:1)) (/seq) None) (fn_6 &j:1 &probabilities:1 &success_prob:1 &n:0 &i:1) (AugAssign (Name &success_prob:1 Store) Mult (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load)) (fn_11 &success_prob:1 &best_probability:1)) (/seq) None) (Return (Name &best_probability:1 Load))) nil None None) (FunctionDef &find_optimal_choice:0 (arguments nil (list (arg &probabilities:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Constant i0 None)) Store)) (Constant f1.0 None) None) (For (Name &prob:2 Store) (Name &probabilities:2 Load) (/seq (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (BinOp (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) Mult (BinOp (Constant i1 None) Sub (Name &prob:2 Load))) Add (BinOp (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) Mult (Name &prob:2 Load))) None)) (/seq) None)) (/seq) None) (Assign (list (Name &result:2 Store)) (Constant f0.0 None) None) (For (Name &i:2 Store) (fn_20 &n:0) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &result:2 Store) Add (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq (AugAssign (Name &result:2 Store) Mult (BinOp (Constant i1 None) Sub (Subscript (Name &probabilities:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)))))) (/seq) None) (Return (Name &result:2 Load))) nil None None) (Assign (list (Name &result:0 Store)) (Call (Name &find_optimal_choice:0 Load) (list (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_18 (Name &result:0 Load))) nil)",
            "(Module (/seq (fn_2 &p:1 &n:1 &max_probability:0 (/choiceseq (Assign (list (Name &best_prob:1 Store)) (Constant i0 None) None) (fn_10 &prod:1 &j:1 &p:1 &i:1 &n:1 (/choiceseq (fn_6 &k:1 &p:1 &prod:1 &n:1 &i:1) (Assign (list (Name &best_prob:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_prob:1 Load)) (_starred_content (Name &prod:1 Load))) nil) None))) (Return (Name &best_prob:1 Load)))) (/splice (fn_4 (Name g_input Load) &p:0 &n:0 &max_probability:0))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &maximize_probability:0 (/choiceseq (Assign (list (Name &best_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &current_probability:1 Store)) (Constant f0.0 None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &p:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &probabilities:1 Load))) nil) (/seq (Assign (list (Name &current_probability:1 Store)) (fn_16 (BinOp (BinOp (Constant i1 None) Sub (Name &current_probability:1 Load)) Mult (Name &p:1 Load)) &p:1 &current_probability:1) None) (Assign (list (Name &best_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_probability:1 Load)) (_starred_content (Name &current_probability:1 Load))) nil) None)) (/seq) None) (Return (Name &best_probability:1 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_4 (Name g_input Load) &probabilities:0 &n:0 &maximize_probability:0))) (/seq))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &calculate_probability:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &prod:1 Store)) (Constant f1.0 None) None) (Assign (list (Name &sum_prob:1 Store)) (Constant f0.0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Name &j:1 Load) (list LtE) (list (Name &i:1 Load))) (/seq (/splice (fn_7 (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load) &sum_prob:1 &prod:1))) (/seq (AugAssign (Name &prod:1 Store) Mult (Constant i1 None))))) (/seq) None) (Assign (list (Name &current_probability:1 Store)) (BinOp (Name &sum_prob:1 Load) Mult (Name &prod:1 Load)) None) (fn_11 &current_probability:1 &max_probability:1)) (/seq) None) (Return (Name &max_probability:1 Load)))) (/splice (fn_1 (Name g_input Load) &n:0 &probabilities:0)) (fn_3 (Call (Name &calculate_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &p:0)) (fn_19 &p:0) (Assign (list (Name &max_prob:0 Store)) (Constant i0 None) None) (Assign (list (Name &prob_one:0 Store)) (Constant i0 None) None) (Assign (list (Name &prob_zero:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &new_prob_one:0 Store)) (fn_5 (Subscript (Name &p:0 Load) (_slice_content (Name &i:0 Load)) Load) &prob_zero:0 &prob_one:0) None) (fn_17 &i:0 &p:0 &prob_zero:0) (Assign (list (Name &prob_one:0 Store)) (Name &new_prob_one:0 Load) None) (fn_11 &prob_one:0 &max_prob:0)) (/seq) None) (fn_3 (Name &max_prob:0 Load))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &maximize_probability:0 (/choiceseq (Assign (list (Name &best_value:1 Store)) (Constant i0 None) None) (Assign (list (Name &p_no_problem:1 Store)) (Constant i1 None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &p:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &probabilities:1 Load))) nil) (/seq (Assign (list (Name &p_one_problem:1 Store)) (BinOp (BinOp (Name &p_no_problem:1 Load) Mult (Name &p:1 Load)) Add (BinOp (BinOp (Constant i1 None) Sub (Name &p:1 Load)) Mult (Name &best_value:1 Load))) None) (fn_12 &p_one_problem:1 &best_value:1 (/choiceseq (fn_15 &p:1 &p_no_problem:1)))) (/seq) None) (Return (Name &best_value:1 Load)))) (fn_8 &probabilities:0 &n:0 (/choiceseq (Assign (list (Name &result:0 Store)) (Call (Name &maximize_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_18 (Name &result:0 Load))))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &calculate_optimal_probability:0 (/choiceseq (Assign (list (Name &optimal_probability:1 Store)) (Constant i0 None) None) (Assign (list (Name &prob_one_problem:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &new_prob_one_problem:1 Store)) (fn_14 (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load) &prob_one_problem:1) None) (fn_12 &new_prob_one_problem:1 &optimal_probability:1 (/choiceseq (Assign (list (Name &prob_one_problem:1 Store)) (Name &new_prob_one_problem:1 Load) None)))) (/seq) None) (Return (Name &optimal_probability:1 Load)))) (fn_8 &probabilities:0 &n:0 (/choiceseq (Assign (list (Name &optimal_probability:0 Store)) (Call (Name &calculate_optimal_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_18 (Name &optimal_probability:0 Load))))) nil)",
            "(Module (/seq (fn_21 &probabilities:1 &n:1 &optimal_choice_probability:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &prob_no_problem:1 Store)) (Constant f1.0 None) None) (For (Name &prob:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &prob_more_than_one:1 Store)) (BinOp (Constant i1 None) Sub (BinOp (Name &prob_no_problem:1 Load) Mult (BinOp (Constant i1 None) Sub (Name &prob:1 Load)))) None) (Assign (list (Name &max_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_probability:1 Load)) (_starred_content (Name &prob_more_than_one:1 Load))) nil) None) (fn_15 &prob:1 &prob_no_problem:1)) (/seq) None) (Return (Name &max_probability:1 Load)))) (/splice (fn_13 &probabilities:0 &n:0 &optimal_choice_probability:0))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &maximize_probability:0 (/choiceseq (Assign (list (Name &best_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &prob_no_one:1 Store)) (Constant f1.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &p_i:1 Store)) (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &prob_exact_one:1 Store)) (BinOp (BinOp (Name &p_i:1 Load) Mult (Name &prob_no_one:1 Load)) Add (BinOp (BinOp (Constant i1 None) Sub (Name &p_i:1 Load)) Mult (Name &best_probability:1 Load))) None) (If (Compare (Name &prob_exact_one:1 Load) (list Gt) (list (Name &best_probability:1 Load))) (/seq (Assign (list (Name &best_probability:1 Store)) (Name &prob_exact_one:1 Load) None) (fn_15 &p_i:1 &prob_no_one:1)) (/seq))) (/seq) None) (Return (Name &best_probability:1 Load)))) (/splice (fn_13 &probabilities:0 &n:0 &maximize_probability:0))) nil)",
            "(Module (/seq (fn_21 &probabilities:1 &n:1 &calculate_probability:0 (/choiceseq (Assign (list (Name &best_probability:1 Store)) (Constant i0 None) None) (Assign (list (Name &product:1 Store)) (Constant i1 None) None) (Assign (list (Name &sum_prob:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (fn_17 &i:1 &probabilities:1 &product:1) (AugAssign (Name &sum_prob:1 Store) Add (BinOp (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load) Div (BinOp (Constant i1 None) Sub (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load)))) (Assign (list (Name &current_probability:1 Store)) (BinOp (Name &product:1 Load) Mult (Name &sum_prob:1 Load)) None) (fn_11 &current_probability:1 &best_probability:1)) (/seq) None) (fn_3 (Name &best_probability:1 Load)))) (Assign (list (Name &n:0 Store)) (Constant i4 None) None) (Assign (list (Name &probabilities:0 Store)) (List (list (_starred_content (Constant f0.1 None)) (_starred_content (Constant f0.2 None)) (_starred_content (Constant f0.3 None)) (_starred_content (Constant f0.8 None))) Load) None) (Expr (Call (Name &calculate_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &max_probability:0 (/choiceseq (Assign (list (Name &optimal_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &current_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &current_failure_probability:1 Store)) (Constant f1.0 None) None) (For (Name &prob:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &next_probability:1 Store)) (fn_16 (BinOp (Name &current_failure_probability:1 Load) Mult (Name &prob:1 Load)) &prob:1 &current_probability:1) None) (Assign (list (Name &current_probability:1 Store)) (Name &next_probability:1 Load) None) (fn_15 &prob:1 &current_failure_probability:1) (Assign (list (Name &optimal_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &optimal_probability:1 Load)) (_starred_content (Name &next_probability:1 Load))) nil) None)) (/seq) None) (Return (Name &optimal_probability:1 Load)))) (/splice (fn_4 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &probabilities:0 &n:0 &max_probability:0))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &best_choice:0 (/choiceseq (Assign (list (Name &best_chance:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (fn_20 &n:1) (/seq (/splice (fn_9 &chance_of_one_problem:1 &j:1 &probabilities:1 &chance_of_getting_problem_from_j:1 &chance_of_not_getting_problem_from_others:1 &k:1 &i:1)) (Assign (list (Name &best_chance:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_chance:1 Load)) (_starred_content (Name &chance_of_one_problem:1 Load))) nil) None)) (/seq) None) (Return (Name &best_chance:1 Load)))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 (Name g_input Load) &probabilities:2 &n:2 &best_choice:0))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &maximize_probability_of_single_success:0 (arguments nil (list (arg &probabilities:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODQsIDEwNCwgMTA1LCAxMTUsIDMyLCAxMDIsIDExNywgMTEwLCA5OSwgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTE0LCAxMDEsIDk5LCAxMDEsIDEwNSwgMTE4LCAxMDEsIDExNSwgMzIsIDk3LCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTIsIDExNCwgMTExLCA5OCwgOTcsIDk4LCAxMDUsIDEwOCwgMTA1LCAxMTYsIDEwNSwgMTAxLCAxMTUsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCAxMTQsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwOSwgOTcsIDEyMCwgMTA1LCAxMDksIDExNywgMTA5LCAzMiwgMTEyLCAxMTQsIDExMSwgOTgsIDk3LCA5OCwgMTA1LCAxMDgsIDEwNSwgMTE2LCAxMjEsIDMyLCAxMTEsIDEwMiwgMzIsIDEwMywgMTAxLCAxMTYsIDExNiwgMTA1LCAxMTAsIDEwMywgMzIsIDEwMSwgMTIwLCA5NywgOTksIDExNiwgMTA4LCAxMjEsIDMyLCAxMTEsIDExMCwgMTAxLCAzMiwgMTE1LCAxMTcsIDk5LCA5OSwgMTAxLCAxMTUsIDExNSwgNDQsIDMyLCAxMDEsIDExMCwgMTE1LCAxMTcsIDExNCwgMTA1LCAxMTAsIDEwMywgMzIsIDY1LCAxMTAsIDEwMCwgMTE0LCAxMDEsIDEyMSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTksIDExMSwgMTEwLCAzOSwgMTE2LCAzMiwgMTAzLCAxMDEsIDExNiwgMzIsIDExNywgMTEyLCAxMTUsIDEwMSwgMTE2LCA0NiwgMzIsIDg0LCAxMDQsIDEwMSwgMzIsIDExMiwgMTE0LCAxMTEsIDk4LCA5NywgOTgsIDEwNSwgMTA4LCAxMDUsIDExNiwgMTA1LCAxMDEsIDExNSwgMzIsIDk3LCAxMTQsIDEwMSwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMTAxLCAxMDAsIDMyLCAxMDUsIDExMCwgMzIsIDEwMCwgMTAxLCAxMTUsIDk5LCAxMDEsIDExMCwgMTAwLCAxMDUsIDExMCwgMTAzLCAzMiwgMTExLCAxMTQsIDEwMCwgMTAxLCAxMTQsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDksIDk3LCAxMjAsIDEwNSwgMTA5LCAxMDUsIDEyMiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk5LCAxMDQsIDk3LCAxMTAsIDk5LCAxMDEsIDExNSwgMzIsIDk4LCAxMjEsIDMyLCAxMDUsIDExMCwgOTksIDEwOCwgMTE3LCAxMDAsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA5LCAxMTEsIDExNSwgMTE2LCAzMiwgMTEyLCAxMTQsIDExMSwgMTA5LCAxMDUsIDExNSwgMTA1LCAxMTAsIDEwMywgMzIsIDExMSwgMTEyLCAxMTYsIDEwNSwgMTExLCAxMTAsIDExNSwgMzIsIDEwMiwgMTA1LCAxMTQsIDExNSwgMTE2LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (fn_19 &probabilities:1) (Assign (list (Name &max_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &total_probability:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &not_happening_probability:1 Store)) (Constant f1.0 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &new_total_probability:1 Store)) (fn_5 (Name &p:1 Load) &not_happening_probability:1 &total_probability:1) None) (fn_15 &p:1 &not_happening_probability:1) (Assign (list (Name &total_probability:1 Store)) (Name &new_total_probability:1 Load) None) (Assign (list (Name &max_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_probability:1 Load)) (_starred_content (Name &total_probability:1 Load))) nil) None)) (/seq) None) (Return (Name &max_probability:1 Load))) nil None None) (fn_8 &probabilities:0 &n:0 (/choiceseq (Assign (list (Name &result:0 Store)) (Call (Name &maximize_probability_of_single_success:0 Load) (list (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_3 (Name &result:0 Load))))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &probabilities:0)) (fn_19 &probabilities:0) (Assign (list (Name &optimal_prob:0 Store)) (Constant i0 None) None) (Assign (list (Name &product_prob:0 Store)) (Constant i1 None) None) (For (Name &p:0 Store) (Name &probabilities:0 Load) (/seq (Assign (list (Name &new_prob:0 Store)) (fn_5 (Name &p:0 Load) &product_prob:0 &optimal_prob:0) None) (fn_12 &new_prob:0 &optimal_prob:0 (/choiceseq (fn_15 &p:0 &product_prob:0)))) (/seq) None) (fn_3 (Name &optimal_prob:0 Load))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &maximize_probability:0 (/choiceseq (Assign (list (Name &max_probability:1 Store)) (Constant f0.0 None) None) (fn_10 &prob_success:1 &j:1 &probabilities:1 &i:1 &n:1 (/choiceseq (fn_6 &k:1 &probabilities:1 &prob_success:1 &n:1 &i:1) (fn_11 &prob_success:1 &max_probability:1))) (Return (Name &max_probability:1 Load)))) (/splice (fn_13 &probabilities:0 &n:0 &maximize_probability:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_probability:0 (arguments nil (list (arg &n:1 None None) (arg &probabilities:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &probabilities:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &probabilities:1 Load))) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &best_probability:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &p:1 Store)) (Subscript (Name &probabilities:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &prob_get_one:1 Store)) (Name &p:1 Load) None) (Assign (list (Name &prob_get_none:1 Store)) (BinOp (Constant i1 None) Sub (Name &p:1 Load)) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Name &j:1 Load) (list Eq) (list (Name &i:1 Load))) (/seq Continue) (/seq)) (Assign (list (Name &p_others:1 Store)) (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load) None) (fn_15 &p_others:1 &prob_get_one:1) (AugAssign (Name &prob_get_none:1 Store) Mult (Name &p_others:1 Load))) (/seq) None) (Assign (list (Name &best_probability:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_probability:1 Load)) (_starred_content (Name &prob_get_one:1 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &prob_get_none:1 Load)))) nil) None)) (/seq) None) (Return (Name &best_probability:1 Load))) nil None None) (/splice (fn_13 &probabilities:0 &n:0 &calculate_probability:0))) nil)",
            "(Module (/seq (fn_21 &probabilities:1 &n:1 &maximize_probability:0 (/choiceseq (Assign (list (Name &max_prob:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &prob:1 Store)) (Constant i1 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Name &j:1 Load) (list Eq) (list (Name &i:1 Load))) (/seq (AugAssign (Name &prob:1 Store) Mult (Subscript (Name &probabilities:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (fn_17 &j:1 &probabilities:1 &prob:1)))) (/seq) None) (Assign (list (Name &max_prob:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_prob:1 Load)) (_starred_content (Name &prob:1 Load))) nil) None)) (/seq) None) (/splice (fn_9 &all_prob:1 &i:1 &probabilities:1 &prob_single:1 &prob_other:1 &j:1 &n:1)) (Return (Call (Name g_max Load) (list (_starred_content (Name &max_prob:1 Load)) (_starred_content (Name &all_prob:1 Load))) nil)))) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &probabilities:0)) (Assign (list (Name &max_prob:0 Store)) (Call (Name &maximize_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_3 (Name &max_prob:0 Load))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &calculate_optimal_probability:0 (/choiceseq (Assign (list (Name &result_prob:1 Store)) (Constant i0 None) None) (Assign (list (Name &curr_prob:1 Store)) (Constant i0 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &next_prob:1 Store)) (fn_14 (Name &p:1 Load) &curr_prob:1) None) (fn_12 &next_prob:1 &result_prob:1 (/choiceseq (Assign (list (Name &curr_prob:1 Store)) (BinOp (Name &curr_prob:1 Load) Add (BinOp (BinOp (Constant i1 None) Sub (Name &curr_prob:1 Load)) Mult (Name &p:1 Load))) None)))) (/seq) None) (Return (Name &result_prob:1 Load)))) (fn_8 &probabilities:0 &n:0 (/choiceseq (Assign (list (Name &optimal_probability:0 Store)) (Call (Name &calculate_optimal_probability:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probabilities:0 Load))) nil) None) (fn_3 (Name &optimal_probability:0 Load))))) nil)",
            "(Module (/seq (fn_2 &probs:1 &n:1 &solve:0 (/choiceseq (Assign (list (Name &max_prob:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &prob_exactly_one:1 Store)) (Constant f0.0 None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &prob_this_one:1 Store)) (Subscript (Name &probs:1 Load) (_slice_content (Name &j:1 Load)) Load) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:1 Load) (list NotEq) (list (Name &j:1 Load))) (/seq (fn_17 &k:1 &probs:1 &prob_this_one:1)) (/seq))) (/seq) None) (AugAssign (Name &prob_exactly_one:1 Store) Add (Name &prob_this_one:1 Load))) (/seq) None) (fn_11 &prob_exactly_one:1 &max_prob:1)) (/seq) None) (Return (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA0OSwgNTAsIDEwMiwgMTI1XQ== None) s_format Load) (list (_starred_content (Name &max_prob:1 Load))) nil)))) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &probs:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &probs:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_2 &probabilities:1 &n:1 &maximize_chance_of_one_problem:0 (/choiceseq (Assign (list (Name &max_chance:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &chance_not_upset:1 Store)) (Constant f0.0 None) None) (For (Name &p:1 Store) (Name &probabilities:1 Load) (/seq (Assign (list (Name &new_chance:1 Store)) (fn_16 (Name &chance_not_upset:1 Load) &chance_not_upset:1 &p:1) None) (fn_12 &new_chance:1 &max_chance:1 (/choiceseq (Assign (list (Name &chance_not_upset:1 Store)) (BinOp (fn_16 (Name &chance_not_upset:1 Load) &chance_not_upset:1 &p:1) Sub (BinOp (Name &p:1 Load) Mult (Name &chance_not_upset:1 Load))) None)))) (/seq) None) (Return (Name &max_chance:1 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_4 (Name g_input Load) &probabilities:0 &n:0 &maximize_chance_of_one_problem:0))) (/seq))) nil)"
        ]
    },
    "521": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Return (Call (Name g_min Load) (list (_starred_content #0) (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Attribute (Name g_math Load) s_pi Load)) Sub #0))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (Assign (list (Name %3 Store)) (BinOp (Name %1 Load) Add (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Div (Constant i3 None))) None) (Assign (list (Name %4 Store)) (BinOp (Name %2 Load) Sub (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Div (Constant i3 None))) None) (If (Compare (Call (Name %5 Load) (list (_starred_content (Name %3 Load))) nil) (list Lt) (list (Call (Name %5 Load) (list (_starred_content (Name %4 Load))) nil))) (/seq (Assign (list (Name %1 Store)) (Name %3 Load) None)) (/seq (Assign (list (Name %2 Store)) (Name %4 Load) None))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name %4 Load) Sub (BinOp (Name %3 Load) Mult (Call (Name %6 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %5 Load))) nil))))) nil) (list (comprehension (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %1 Load) nil i0))))) nil)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %3 Store))) Store) (Name %7 Load) (/seq (AugAssign (Name %1 Store) Add (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name %6 Load) Sub (BinOp (Name %5 Load) Mult (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil))))) nil))) (/seq) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %3 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil) Mod (BinOp (Constant i2 None) Mult (Attribute (Name g_math Load) s_pi Load))) None) (fn_2 (Name %3 Load))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) nil))) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (BinOp (Name %1 Load) Add (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Div (Constant i3 None))) None) (Assign (list (Name %4 Store)) (BinOp (Name %2 Load) Sub (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Div (Constant i3 None))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue #0 i-1 (JoinedStr (list (Constant s_.6f None)))))))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (fn_2 (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil))) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Constant i2 None) Mult (Attribute (Name g_math Load) s_pi Load))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (BinOp (Call #0 (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil) Mod (BinOp (Constant i2 None) Mult (Name g_pi Load))) None) (Return (Call (Name g_min Load) (list (_starred_content (Name %3 Load)) (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name g_pi Load)) Sub (Name %3 Load)))) nil))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content #0)) nil))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %3 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil) None) (fn_2 (Name %3 Load))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (Assign (list (Name %3 Store)) (List nil Load) None) (Assign (list (Name %4 Store)) (List nil Load) None) (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_float Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %7 Load))) nil)) (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Name %6 Load))) nil)) (Expr (Call (Attribute (Name %4 Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content #0)) Load) None) (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (fn_3 %2 %1 %5 %4 %3) (/seq) None) (Return (Call (Name %3 Load) (list (_starred_content (BinOp (BinOp (Name %2 Load) Add (Name %1 Load)) Div (Constant i2 None)))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name %2 Load) Sub (BinOp (Name %1 Load) Mult #0)))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (For (Name %5 Store) (ListComp (Subscript (Name %4 Load) (_slice_content (Constant i2 None)) Load) (list (comprehension (Name %4 Store) (Name %3 Load) nil i0))) (/seq ?0 (Assign (list (Name %2 Store)) (Call (Name g_max Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None)) (/seq) None) (Return (Name %2 Load)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_minimize_scalar Load) (list (_starred_content (Name %2 Load))) (list (keyword s_bounds (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Constant i2 None) Mult #0))) Load)) (keyword s_args (Tuple (list (_starred_content (Name %1 Load))) Load)) (keyword s_method (Constant s_bounded None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Subscript (Name %6 Load) (_slice_content (Name %2 Load)) Load) Sub (BinOp (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load) Mult (Call (Name %4 Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (Name %1 Load))) nil))))) nil)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (Attribute (Name g_math Load) s_pi Load) Div (Constant i2 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_min Load) (list (_starred_content (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil)) (_starred_content (BinOp #0 Sub (Call (Name g_abs Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil)))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_6 &b:1 &a:1 &d:1 &dist:0 (/choiceseq)) (FunctionDef &calc_distance:0 (arguments nil (list (arg &stars:2 None None) (arg &angle:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 &total_distance:2 &angle:2 &ai:2 &dist:0 &si:2 &Ti:2 &stars:2)) (Return (Name &total_distance:2 Load))) nil None None) (FunctionDef &search_max_distance:0 (arguments nil (list (arg &stars:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &best_distance:3 Store)) (Constant i0 None) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i36000 None))) nil) (/seq (Assign (list (Name &angle:3 Store)) (BinOp (BinOp (Name &i:3 Load) Mult (Attribute (Name g_math Load) s_pi Load)) Div (Constant i18000 None)) None) (Assign (list (Name &distance:3 Store)) (Call (Name &calc_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (Name &angle:3 Load))) nil) None) (If (Compare (Name &distance:3 Load) (list Gt) (list (Name &best_distance:3 Load))) (/seq (Assign (list (Name &best_distance:3 Store)) (Name &distance:3 Load) None)) (/seq))) (/seq) None) (Return (Name &best_distance:3 Load))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:4 &stars:0)) (fn_14 (Call (Name &search_max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &calculate_distance:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_6 &b:2 &a:2 &d:2 &dist:1 (/choiceseq)) (FunctionDef &total_distance:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:1 &a:5 &s:5 &T:5 &angle:3 &dist:1))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &low:1 Store)) (_starred_content (Name &high:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (While (Compare (BinOp (Name &high:1 Load) Sub (Name &low:1 Load)) (list Gt) (list (Constant f1e-07 None))) (fn_3 &low:1 &high:1 &mid1:1 &mid2:1 &total_distance:1) (/seq)) (Return (Call (Name &total_distance:1 Load) (list (_starred_content (Name &low:1 Load))) nil))) nil None None) (/splice (fn_8 (Name g_input Load) &N:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &calculate_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &min_angle_dist:0 (/choiceseq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOSwgMTA1LCAxMTAsIDEwNSwgMTA5LCA5NywgMTA4LCAzMiwgMTE0LCA5NywgMTAwLCAxMDUsIDk3LCAxMTAsIDExNSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDk4LCAxMDEsIDExNiwgMTE5LCAxMDEsIDEwMSwgMTEwLCAzMiwgOTcsIDExMCwgMTAzLCAxMDgsIDEwMSwgMTE1LCAzMiwgOTcsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCA5OCwgNDZd None)))) (FunctionDef &total_distance:0 (arguments nil (list (arg &T:2 None None) (arg &s:2 None None) (arg &angles:2 None None) (arg &launch_angle:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDExNCwgOTcsIDExOCwgMTAxLCAxMDgsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDk3LCAzMiwgMTA4LCA5NywgMTE3LCAxMTAsIDk5LCAxMDQsIDMyLCA5NywgMTEwLCAxMDMsIDEwOCwgMTAxLCA0Nl0= None)) (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (fn_23 &launch_angle:2 &i:6 &angles:2 &min_angle_dist:0 &s:2 &T:2) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &T:2 Load))) nil))) nil) nil i0))))) nil))) nil None None) (FunctionDef &find_max_distance:0 (arguments nil (list (arg &N:3 None None) (arg &stars_info:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOSwgOTcsIDEyMCwgMTA1LCAxMDksIDExNywgMTA5LCAzMiwgMTAwLCAxMDUsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTEyLCA5NywgOTksIDEwMSwgOTksIDExNCwgOTcsIDEwMiwgMTE2LCAzMiwgOTksIDk3LCAxMTAsIDMyLCAxMTYsIDExNCwgOTcsIDExOCwgMTAxLCAxMDgsIDQ2XQ== None)) (Assign (list (Tuple (list (_starred_content (Name &T:3 Store)) (_starred_content (Name &s:3 Store)) (_starred_content (Name &angles:3 Store))) Store)) (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &stars_info:3 Load) Load))) nil) None) (Assign (list (Name &best_distance:3 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_angles:3 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &angles:3 Load))) nil) None) (AugAssign (Name &candidate_angles:3 Store) Add (ListComp (BinOp (BinOp (Subscript (Name &candidate_angles:3 Load) (_slice_content (Name &i:5 Load)) Load) Add (Subscript (Name &candidate_angles:3 Load) (_slice_content (BinOp (Name &i:5 Load) Add (Constant i1 None))) Load)) Div (Constant i2 None)) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:3 Load) Sub (Constant i1 None)))) nil) nil i0)))) (Expr (Call (Attribute (Name &candidate_angles:3 Load) s_append Load) (list (_starred_content (BinOp (BinOp (BinOp (Subscript (Name &candidate_angles:3 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &candidate_angles:3 Load) (_slice_content (Constant i0 None)) Load)) Add (fn_12)) Div (Constant i2 None)))) nil)) (For (Name &angle:3 Store) (Name &candidate_angles:3 Load) (/seq (Assign (list (Name &distance:3 Store)) (Call (Name &total_distance:0 Load) (list (_starred_content (Name &T:3 Load)) (_starred_content (Name &s:3 Load)) (_starred_content (Name &angles:3 Load)) (_starred_content (Name &angle:3 Load))) nil) None) (Assign (list (Name &best_distance:3 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_distance:3 Load)) (_starred_content (Name &distance:3 Load))) nil) None)) (/seq) None) (Return (Name &best_distance:3 Load))) nil None None) (/splice (fn_1 (Name g_tuple Load) &N:0 &_:4 &stars_info:0)) (fn_10 (Call (Name &find_max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars_info:0 Load))) nil))) nil)",
            "(Module (/seq (fn_13 (Name g_fabs Load) &b:1 &a:1 &diff:1 &angle_distance:0) (FunctionDef &total_distance:0 (arguments nil (list (arg &angle:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 &total_dist:2 &angle:2 &a:2 &angle_distance:0 &s:2 &T:2 &stars:2)) (Return (UnaryOp USub (Name &total_dist:2 Load)))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_7 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:3 &stars:3 &a:3 &s:3 &T:3 &_:3)) (Assign (list (Name &result:3 Store)) (fn_22 (Name g_pi Load) &stars:3 &total_distance:0) None) (fn_10 (UnaryOp USub (Attribute (Name &result:3 Load) s_fun Load)))) nil None None) (If (fn_21) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_16 &b:1 &a:1 &diff:1 &dist:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA5LCAxMDUsIDExMCwgMTA1LCAxMDksIDExNywgMTA5LCAzMiwgMTE0LCA5NywgMTAwLCAxMDUsIDk3LCAxMTAsIDExNSwgMzIsIDExMCwgMTAxLCAxMDEsIDEwMCwgMTAxLCAxMDAsIDMyLCAxMTYsIDExMSwgMzIsIDEwMywgMTExLCAzMiwgMTAyLCAxMTQsIDExMSwgMTA5LCAzMiwgOTcsIDExMCwgMTAzLCAxMDgsIDEwMSwgMzIsIDk3LCAzMiwgMTE2LCAxMTEsIDMyLCA5OCwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)))) (FunctionDef &max_distance:0 (arguments nil (list (arg &N:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDEwNSwgMTEwLCAxMDAsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDk3LCAxMjAsIDEwNSwgMTA5LCAxMTcsIDEwOSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMiwgOTcsIDk5LCAxMDEsIDk5LCAxMTQsIDk3LCAxMDIsIDExNiwgMzIsIDk5LCA5NywgMTEwLCAzMiwgMTE2LCAxMTQsIDk3LCAxMTgsIDEwMSwgMTA4LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &max_dist:2 Store)) (Constant f0.0 None) None) (/splice (fn_20 &temp_dist:2 &max_dist:2 &stars:2 &star:4 &angle:2 (/choiceseq (Assign (list (Name &temp_dist:2 Store)) (Constant f0.0 None) None) (For (Tuple (list (_starred_content (Name &Ti:2 Store)) (_starred_content (Name &si:2 Store)) (_starred_content (Name &ai:2 Store))) Store) (Name &stars:2 Load) (/seq (AugAssign (Name &temp_dist:2 Store) Add (fn_19 (Call (Name &dist:0 Load) (list (_starred_content (Name &ai:2 Load)) (_starred_content (Name &angle:2 Load))) nil) &si:2 &Ti:2))) (/seq) None))))) nil None None) (/splice (fn_1 (Name g_list Load) &N:0 &_:3 &stars:0)) (fn_14 (Call (Name &max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &dist:0 (/choiceseq)) (FunctionDef &find_max_distance:0 (arguments nil (list (arg &stars:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_distance:2 Store)) (Constant i0 None) None) (/splice (fn_20 &distance:2 &max_distance:2 &stars:2 &star:4 &angle:2 (/choiceseq (/splice (fn_5 &distance:2 &angle:2 &a:2 &dist:0 &s:2 &T:2 &stars:2)))))) nil None None) (/splice (fn_8 (Name g_input Load) &N:0 &_:3 &stars:0)) (fn_14 (Call (Name &find_max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &angle_dist:0 (/choiceseq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOSwgMTA1LCAxMTAsIDEwNSwgMTA5LCA5NywgMTA4LCAzMiwgMTE0LCA5NywgMTAwLCAxMDUsIDk3LCAxMTAsIDExNSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDk4LCAxMDEsIDExNiwgMTE5LCAxMDEsIDEwMSwgMTEwLCAzMiwgMTE2LCAxMTksIDExMSwgMzIsIDk3LCAxMTAsIDEwMywgMTA4LCAxMDEsIDExNSwgNDZd None)))) (FunctionDef &calculate_max_distance:0 (arguments nil (list (arg &n:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDk3LCAxMjAsIDEwNSwgMTA5LCAxMTcsIDEwOSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMiwgOTcsIDk5LCAxMDEsIDExNSwgMTA0LCAxMDUsIDExMiwgMzIsIDk5LCA5NywgMTEwLCAzMiwgMTE2LCAxMTQsIDk3LCAxMTgsIDEwMSwgMTA4LCA0Nl0= None)) (Assign (list (Name &max_distance:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i2 None) Mult (Name &n:2 Load)))) nil) (/seq (If (Compare (Name &i:2 Load) (list Lt) (list (Name &n:2 Load))) (/seq (Assign (list (Name &angle:2 Store)) (Subscript (Subscript (Name &stars:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Constant i2 None)) Load) None)) (/seq (Assign (list (Name &angle:2 Store)) (BinOp (BinOp (Subscript (Subscript (Name &stars:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Name &n:2 Load))) Load) (_slice_content (Constant i2 None)) Load) Add (Subscript (Subscript (Name &stars:2 Load) (_slice_content (BinOp (BinOp (BinOp (Name &i:2 Load) Sub (Name &n:2 Load)) Add (Constant i1 None)) Mod (Name &n:2 Load))) Load) (_slice_content (Constant i2 None)) Load)) Div (Constant i2 None)) None) (If (Compare (Name &angle:2 Load) (list GtE) (list (fn_12))) (/seq (AugAssign (Name &angle:2 Store) Sub (fn_12))) (/seq)))) (/splice (fn_5 &distance:2 &angle:2 &a:2 &angle_dist:0 &s:2 &t:2 &stars:2)) (Assign (list (Name &max_distance:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:2 Load)) (_starred_content (Name &distance:2 Load))) nil) None)) (/seq) None) (Return (Name &max_distance:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Name g_tuple Load) &N:3 &_:4 &stars:3)) (fn_14 (Call (Name &calculate_max_distance:0 Load) (list (_starred_content (Name &N:3 Load)) (_starred_content (Name &stars:3 Load))) nil))) nil None None) (If (fn_21) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &dist:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &d:1 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &a:1 Load) Sub (Name &b:1 Load)))) nil) None) (If (Compare (Name &d:1 Load) (list Gt) (list (Attribute (Name g_math Load) s_pi Load))) (/seq (Return (BinOp (fn_12) Sub (Name &d:1 Load)))) (/seq (Return (Name &d:1 Load))))) nil None None) (FunctionDef &find_maximum_distance:0 (arguments nil (list (arg &N:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &left:2 Store)) (_starred_content (Name &right:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i200 None))) nil) (/seq (/splice (fn_9 &left:2 &right:2 &m1:2 &m2:2)) (Assign (list (Name &total_distance_m1:2 Store)) (fn_4 &stars:2 &a:5 &s:5 &T:5 &m1:2 &dist:0) None) (Assign (list (Name &total_distance_m2:2 Store)) (fn_4 &stars:2 &a:6 &s:6 &T:6 &m2:2 &dist:0) None) (If (Compare (Name &total_distance_m1:2 Load) (list Lt) (list (Name &total_distance_m2:2 Load))) (/seq (Assign (list (Name &left:2 Store)) (Name &m1:2 Load) None)) (/seq (Assign (list (Name &right:2 Store)) (Name &m2:2 Load) None)))) (/seq) None) (Return (fn_4 &stars:2 &a:4 &s:4 &T:4 &left:2 &dist:0))) nil None None) (/splice (fn_1 (Name g_tuple Load) &N:0 &_:3 &stars:0)) (fn_14 (Call (Name &find_maximum_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_16 &ang2:2 &ang1:2 &diff:2 &distance:1 (/choiceseq)) (FunctionDef &total_distance:1 (arguments nil (list (arg &a:3 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:1 &ai:6 &si:6 &Ti:6 &a:3 &distance:1))) nil None None) (FunctionDef &search:1 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &left:4 Store)) (_starred_content (Name &right:4 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (fn_3 &left:4 &right:4 &mid1:4 &mid2:4 &total_distance:1) (/seq) None) (Return (Call (Name &total_distance:1 Load) (list (_starred_content (Name &left:4 Load))) nil))) nil None None) (Return (Call (Name &search:1 Load) nil nil))) nil None None) (/splice (fn_1 (Name g_tuple Load) &N:0 &_:5 &stars:0)) (fn_14 (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_13 (Name g_abs Load) &b:2 &a:2 &d:2 &dist:1) (FunctionDef &total_distance:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (/splice (fn_5 &total:3 &angle:3 &a:3 &dist:1 &s:3 &T:3 &stars:1)) (Return (Name &total:3 Load))) nil None None) (/splice (fn_18 (BinOp (Constant i2 None) Mult (Name g_pi Load)) &right:1 &left:1 &total_distance:1 &m2:1 &m1:1 &_:1))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:4 &stars:0)) (fn_10 (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_6 &b:1 &a:1 &d:1 &dist:0 (/choiceseq)) (FunctionDef &check:0 (arguments nil (list (arg &a:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:2 &ai:5 &s:5 &T:5 &a:2 &dist:0))) nil None None) (FunctionDef &ternary_search:0 (arguments nil (list (arg &stars:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &lo:3 Store)) (_starred_content (Name &hi:3 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i200 None))) nil) (/seq (/splice (fn_9 &lo:3 &hi:3 &m1:3 &m2:3)) (If (Compare (Call (Name &check:0 Load) (list (_starred_content (Name &m1:3 Load)) (_starred_content (Name &stars:3 Load))) nil) (list Lt) (list (Call (Name &check:0 Load) (list (_starred_content (Name &m2:3 Load)) (_starred_content (Name &stars:3 Load))) nil))) (/seq (Assign (list (Name &lo:3 Store)) (Name &m1:3 Load) None)) (/seq (Assign (list (Name &hi:3 Store)) (Name &m2:3 Load) None)))) (/seq) None) (Return (Call (Name &check:0 Load) (list (_starred_content (Name &lo:3 Load)) (_starred_content (Name &stars:3 Load))) nil))) nil None None) (/splice (fn_15 (Name g_input Load) &n:0 &_:4 &stars:0)) (fn_10 (Call (Name &ternary_search:0 Load) (list (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_16 &b:1 &a:1 &diff:1 &dist:0 (/choiceseq)) (FunctionDef &solve:0 (arguments nil (list (arg &stars:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_distance:2 Store)) (Constant i0 None) None) (For (Name &primary_angle:2 Store) (BinOp (ListComp (Name &a:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &_:3 Store)) (_starred_content (Name &a:3 Store))) Store) (Name &stars:2 Load) nil i0))) Add (ListComp (BinOp (BinOp (Name &a:5 Load) Add (fn_24)) Mod (fn_12)) (list (comprehension (Tuple (list (_starred_content (Name &_:5 Store)) (_starred_content (Name &_:5 Store)) (_starred_content (Name &a:5 Store))) Store) (Name &stars:2 Load) nil i0)))) (/seq (Assign (list (Name &distance:2 Store)) (fn_4 &stars:2 &a:6 &s:6 &T:6 &primary_angle:2 &dist:0) None) (Assign (list (Name &max_distance:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:2 Load)) (_starred_content (Name &distance:2 Load))) nil) None)) (/seq) None) (Return (Name &max_distance:2 Load))) nil None None) (If (fn_21) (/seq (/splice (fn_1 (Name g_tuple Load) &N:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_max_distance:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_6 &b:2 &a:2 &d:2 &dist:1 (/choiceseq)) (FunctionDef &energy:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:1 &a:6 &s:6 &T:6 &angle:3 &dist:1))) nil None None) (Assign (list (Name &angles:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &_:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Name &stars:1 Load) (/seq (Expr (Call (Attribute (Name &angles:1 Load) s_extend Load) (list (_starred_content (List (list (_starred_content (BinOp (Name &a:1 Load) Sub (fn_24))) (_starred_content (BinOp (Name &a:1 Load) Add (fn_24)))) Load))) nil))) (/seq) None) (Assign (list (Name &angles:1 Store)) (ListComp (BinOp (Name &a:4 Load) Mod (fn_12)) (list (comprehension (Name &a:4 Store) (Name &angles:1 Load) nil i0))) None) (Assign (list (Name &best_distance:1 Store)) (Constant i0 None) None) (For (Name &angle:1 Store) (Name &angles:1 Load) (/seq (Assign (list (Name &best_distance:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_distance:1 Load)) (_starred_content (Call (Name &energy:1 Load) (list (_starred_content (Name &angle:1 Load))) nil))) nil) None)) (/seq) None) (Return (Name &best_distance:1 Load))) nil None None) (If (fn_21) (/seq (/splice (fn_1 (Name g_tuple Load) &N:0 &_:5 &stars:0)) (fn_10 (Call (Name &find_max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_6 &b:2 &a:2 &d:2 &dist:0 (/choiceseq)) (FunctionDef &calculate_max_distance:0 (arguments nil (list (arg &n:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (FunctionDef &contribution:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (/splice (fn_5 &total:3 &angle:3 &a:3 &dist:0 &s:3 &T:3 &stars:1)) (Return (Name &total:3 Load))) nil None None) (Assign (list (Name &search_angles:1 Store)) (BinOp (ListComp (Name &a:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &_:4 Store)) (_starred_content (Name &a:4 Store))) Store) (Name &stars:1 Load) nil i0))) Add (List (list (_starred_content (Constant i0 None))) Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &search_angles:1 Load))) nil))) nil) (/seq (Expr (Call (Attribute (Name &search_angles:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &search_angles:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Attribute (Name g_math Load) s_pi Load)) Mod (fn_12)))) nil))) (/seq) None) (Assign (list (Name &search_angles:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &search_angles:1 Load))) nil))) nil) None) (Assign (list (Name &max_distance:1 Store)) (Constant i0 None) None) (For (Name &angle:1 Store) (Name &search_angles:1 Load) (/seq (Assign (list (Name &max_distance:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:1 Load)) (_starred_content (Call (Name &contribution:1 Load) (list (_starred_content (Name &angle:1 Load))) nil))) nil) None)) (/seq) None) (Return (Name &max_distance:1 Load))) nil None None) (If (fn_21) (/seq (/splice (fn_1 (Name g_list Load) &n:0 &_:5 &stars:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTQsIDEwMl0= None) Mod (Call (Name &calculate_max_distance:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &stars:0 Load))) nil)))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_6 &b:1 &a:1 &d:1 &dist:0 (/choiceseq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDEwOSwgMTA1LCAxMTAsIDEwNSwgMTA5LCAxMTcsIDEwOSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDk4LCAxMDEsIDExNiwgMTE5LCAxMDEsIDEwMSwgMTEwLCAzMiwgMTE2LCAxMTksIDExMSwgMzIsIDk3LCAxMTAsIDEwMywgMTA4LCAxMDEsIDExNSwgNDZd None)))) (FunctionDef &energy:0 (arguments nil (list (arg &distance:2 None None) (arg &absorption:2 None None) (arg &launch_angle:2 None None) (arg &star_angle:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDEsIDExNCwgMTAzLCAxMjEsIDMyLCAxMTQsIDEwMSwgOTksIDEwMSwgMTA1LCAxMTgsIDEwMSwgMTAwLCAzMiwgMTAyLCAxMTQsIDExMSwgMTA5LCAzMiwgOTcsIDMyLCAxMTUsIDExNiwgOTcsIDExNCwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgOTcsIDExNywgMTEwLCA5OSwgMTA0LCAzMiwgOTcsIDExMCwgMTAzLCAxMDgsIDEwMSwgNDZd None)) (Return (fn_19 (Call (Name &dist:0 Load) (list (_starred_content (Name &star_angle:2 Load)) (_starred_content (Name &launch_angle:2 Load))) nil) &absorption:2 &distance:2))) nil None None) (FunctionDef &search_max_distance:0 (arguments nil (list (arg &stars:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzg1LCAxMTUsIDEwMSwgMzIsIDk3LCAzMiwgOTgsIDEwNSwgMTEwLCA5NywgMTE0LCAxMjEsIDMyLCAxMTUsIDEwMSwgOTcsIDExNCwgOTksIDEwNCwgMzIsIDk3LCAxMTIsIDExMiwgMTE0LCAxMTEsIDk3LCA5OSwgMTA0LCAzMiwgMTE2LCAxMTEsIDMyLCAxMDIsIDEwNSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCA5NywgMTE3LCAxMTAsIDk5LCAxMDQsIDMyLCA5NywgMTEwLCAxMDMsIDEwOCwgMTAxLCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCAxMDksIDk3LCAxMjAsIDEwNSwgMTA5LCAxMDUsIDEyMiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE2LCAxMTEsIDExNiwgOTcsIDEwOCwgMzIsIDEwMSwgMTEwLCAxMDEsIDExNCwgMTAzLCAxMjEsIDQ2XQ== None)) (Assign (list (Tuple (list (_starred_content (Name &low:3 Store)) (_starred_content (Name &high:3 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i200 None))) nil) (/seq (/splice (fn_9 &low:3 &high:3 &mid1:3 &mid2:3)) (Assign (list (Name &dist1:3 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &energy:0 Load) (list (_starred_content (Name &dist:6 Load)) (_starred_content (Name &speed:6 Load)) (_starred_content (Name &mid1:3 Load)) (_starred_content (Name &angle:6 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &dist:6 Store)) (_starred_content (Name &speed:6 Store)) (_starred_content (Name &angle:6 Store))) Store) (Name &stars:3 Load) nil i0))))) nil) None) (Assign (list (Name &dist2:3 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &energy:0 Load) (list (_starred_content (Name &dist:7 Load)) (_starred_content (Name &speed:7 Load)) (_starred_content (Name &mid2:3 Load)) (_starred_content (Name &angle:7 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &dist:7 Store)) (_starred_content (Name &speed:7 Store)) (_starred_content (Name &angle:7 Store))) Store) (Name &stars:3 Load) nil i0))))) nil) None) (If (Compare (Name &dist1:3 Load) (list Gt) (list (Name &dist2:3 Load))) (/seq (Assign (list (Name &high:3 Store)) (Name &mid2:3 Load) None)) (/seq (Assign (list (Name &low:3 Store)) (Name &mid1:3 Load) None)))) (/seq) None) (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &energy:0 Load) (list (_starred_content (Name &dist:5 Load)) (_starred_content (Name &speed:5 Load)) (_starred_content (Name &low:3 Load)) (_starred_content (Name &angle:5 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &dist:5 Store)) (_starred_content (Name &speed:5 Store)) (_starred_content (Name &angle:5 Store))) Store) (Name &stars:3 Load) nil i0))))) nil))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &search_max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &angles:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &ti:1 Store)) (_starred_content (Name &si:1 Store)) (_starred_content (Name &ai:1 Store))) Store) (Name &stars:1 Load) (/seq (Expr (Call (Attribute (Name &angles:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &ai:1 Load)) (_starred_content (Name &ti:1 Load)) (_starred_content (Name &si:1 Load))) Load))) nil)) (Expr (Call (Attribute (Name &angles:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &ai:1 Load) Add (fn_12))) (_starred_content (Name &ti:1 Load)) (_starred_content (Name &si:1 Load))) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &angles:1 Load) s_sort Load) nil nil)) (Assign (list (Name &max_dist:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &angles:1 Load))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &angle:1 Store)) (_starred_content (Name &ti:1 Store)) (_starred_content (Name &si:1 Store))) Store)) (Subscript (Name &angles:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &d:1 Store)) (Name &ti:1 Load) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &angles:1 Load))) nil))) nil) (/seq (If (Compare (Name &i:1 Load) (list Eq) (list (Name &j:1 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &aj:1 Store)) (_starred_content (Name &tj:1 Store)) (_starred_content (Name &sj:1 Store))) Store)) (Subscript (Name &angles:1 Load) (_slice_content (Name &j:1 Load)) Load) None) (Assign (list (Name &cur_d:1 Store)) (fn_19 (fn_25 (fn_12) &aj:1 &angle:1) &sj:1 &tj:1) None) (AugAssign (Name &d:1 Store) Add (Name &cur_d:1 Load))) (/seq) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:1 Load)) (_starred_content (Name &d:1 Load))) nil) None)) (/seq) None) (Return (Name &max_dist:1 Load))) nil None None) (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Name g_tuple Load) &n:2 &_:3 &stars:2)) (fn_10 (Call (Name &solve:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &stars:2 Load))) nil))) nil None None) (Expr (Call (Name &read_input:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &angle_dist:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDEwNSwgMTEwLCAxMDUsIDEwOSwgMTE3LCAxMDksIDMyLCAxMTQsIDk3LCAxMDAsIDEwNSwgOTcsIDExMCwgMTE1LCAzMiwgMTEwLCAxMDEsIDEwMSwgMTAwLCAxMDEsIDEwMCwgMzIsIDExNiwgMTExLCAzMiwgMTAzLCAxMTEsIDMyLCAxMDIsIDExNCwgMTExLCAxMDksIDMyLCA5NywgMTEwLCAxMDMsIDEwOCwgMTAxLCAzMiwgOTcsIDMyLCAxMTYsIDExMSwgMzIsIDk4LCA0Nl0= None)) (Return (Call (Name g_min Load) (list (_starred_content (Call (Name g_fabs Load) (list (_starred_content (BinOp (Name &a:1 Load) Sub (Name &b:1 Load)))) nil)) (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name g_pi Load)) Sub (Call (Name g_fabs Load) (list (_starred_content (BinOp (Name &a:1 Load) Sub (Name &b:1 Load)))) nil)))) nil))) nil None None) (FunctionDef &max_distance:0 (arguments nil (list (arg &stars:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDk3LCAxMjAsIDEwNSwgMTA5LCAxMTcsIDEwOSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMiwgOTcsIDk5LCAxMDEsIDk5LCAxMTQsIDk3LCAxMDIsIDExNiwgMzIsIDk5LCA5NywgMTEwLCAzMiwgMTE2LCAxMTQsIDk3LCAxMTgsIDEwMSwgMTA4LCA0Nl0= None)) (Assign (list (Name &best_distance:2 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_angles:2 Store)) (BinOp (ListComp (Name &a:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &_:4 Store)) (_starred_content (Name &a:4 Store))) Store) (Name &stars:2 Load) nil i0))) Add (List (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Constant i2 None) Mult (Name g_pi Load)))) Load)) None) (For (Name &launch_angle:2 Store) (Name &candidate_angles:2 Load) (/seq (/splice (fn_5 &distance:2 &launch_angle:2 &a:2 &angle_dist:0 &s:2 &T:2 &stars:2)) (Assign (list (Name &best_distance:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &best_distance:2 Load)) (_starred_content (Name &distance:2 Load))) nil) None)) (/seq) None) (Return (Name &best_distance:2 Load))) nil None None) (/splice (fn_1 (Name g_list Load) &N:0 &_:3 &stars:0)) (Assign (list (Name &max_dist:0 Store)) (Call (Name &max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_dist:0 Load))) nil)",
            "(Module (/seq (FunctionDef &maximize_distance:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_6 &b:2 &a:2 &d:2 &dist:1 (/choiceseq)) (FunctionDef &total_distance:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:1 &a:4 &s:4 &T:4 &angle:3 &dist:1))) nil None None) (/splice (fn_18 (fn_12) &right:1 &left:1 &total_distance:1 &mid2:1 &mid1:1 &_:1))) nil None None) (Assign (list (Name &N:0 Store)) (Constant i2 None) None) (Assign (list (Name &stars:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i100 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i100 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant f1.5 None))) Load))) Load) None) (fn_14 (Call (Name &maximize_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &min_angle_dist:0 (/choiceseq)) (FunctionDef &max_travel_distance:0 (arguments nil (list (arg &stars:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_distance:2 Store)) (Constant i0 None) None) (For (Name &angle:2 Store) (BinOp (ListComp (Name &a:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &_:3 Store)) (_starred_content (Name &a:3 Store))) Store) (Name &stars:2 Load) nil i0))) Add (List (list (_starred_content (Constant i0 None)) (_starred_content (Attribute (Name g_math Load) s_pi Load))) Load)) (/seq (Assign (list (Name &distance:2 Store)) (fn_4 &stars:2 &a:5 &s:5 &T:5 &angle:2 &min_angle_dist:0) None) (Assign (list (Name &max_distance:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:2 Load)) (_starred_content (Name &distance:2 Load))) nil) None)) (/seq) None) (Return (Name &max_distance:2 Load))) nil None None) (If (fn_21) (/seq (/splice (fn_1 (Name g_tuple Load) &N:0 &_:4 &stars:0)) (fn_14 (Call (Name &max_travel_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &min_angle_dist:0 (/choiceseq)) (FunctionDef &calculate_distance:0 (arguments nil (list (arg &stars:2 None None) (arg &angle:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_distance:2 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &Ti:2 Store)) (_starred_content (Name &si:2 Store)) (_starred_content (Name &ai:2 Store))) Store) (Name &stars:2 Load) (/seq (Assign (list (Name &distance:2 Store)) (fn_19 (Call (Name &min_angle_dist:0 Load) (list (_starred_content (Name &ai:2 Load)) (_starred_content (Name &angle:2 Load))) nil) &si:2 &Ti:2) None) (AugAssign (Name &total_distance:2 Store) Add (Name &distance:2 Load))) (/seq) None) (Return (Name &total_distance:2 Load))) nil None None) (FunctionDef &find_max_distance:0 (arguments nil (list (arg &n:3 None None) (arg &stars:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &left:3 Store)) (_starred_content (Name &right:3 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (/seq (/splice (fn_9 &left:3 &right:3 &m1:3 &m2:3)) (If (Compare (Call (Name &calculate_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (Name &m1:3 Load))) nil) (list Lt) (list (Call (Name &calculate_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (Name &m2:3 Load))) nil))) (/seq (Assign (list (Name &left:3 Store)) (Name &m1:3 Load) None)) (/seq (Assign (list (Name &right:3 Store)) (Name &m2:3 Load) None)))) (/seq) None) (Assign (list (Name &max_distance:3 Store)) (Call (Name &calculate_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (BinOp (BinOp (Name &left:3 Load) Add (Name &right:3 Load)) Div (Constant i2 None)))) nil) None) (Return (Name &max_distance:3 Load))) nil None None) (/splice (fn_15 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &find_max_distance:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (fn_11 &b:2 &a:2 &radian_dist:0 (/choiceseq)) (FunctionDef &max_distance:0 (arguments nil (list (arg &N:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (FunctionDef &distance:1 (arguments nil (list (arg &a:3 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (fn_19 (Call (Name &radian_dist:0 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &a_i:4 Load))) nil) &s:4 &T:4) (list (comprehension (Tuple (list (_starred_content (Name &T:4 Store)) (_starred_content (Name &s:4 Store)) (_starred_content (Name &a_i:4 Store))) Store) (Name &stars:1 Load) nil i0))))) nil))) nil None None) (Assign (list (Name &best_angle:1 Store)) (Subscript (Subscript (Name &stars:1 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i2 None)) Load) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &best_angle:1 Load))) nil) None) (Assign (list (Name &increment:1 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Div (Constant i180 None)) None) (While (Compare (Name &increment:1 Load) (list Gt) (list (Constant f1e-06 None))) (/seq (Assign (list (Name &better_found:1 Store)) (Constant False None) None) (For (Name &sign:1 Store) (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i1 None))) Load) (/seq (Assign (list (Name &test_angle:1 Store)) (BinOp (Name &best_angle:1 Load) Add (BinOp (Name &sign:1 Load) Mult (Name &increment:1 Load))) None) (Assign (list (Name &test_dist:1 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &test_angle:1 Load))) nil) None) (If (Compare (Name &test_dist:1 Load) (list Gt) (list (Name &max_dist:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &max_dist:1 Store)) (_starred_content (Name &best_angle:1 Store)) (_starred_content (Name &better_found:1 Store))) Store)) (Tuple (list (_starred_content (Name &test_dist:1 Load)) (_starred_content (Name &test_angle:1 Load)) (_starred_content (Constant True None))) Load) None) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &better_found:1 Load)) (/seq (AugAssign (Name &increment:1 Store) Div (Constant i2 None))) (/seq))) (/seq)) (Return (Name &max_dist:1 Load))) nil None None) (/splice (fn_7 (Name g_input Load) &N:0 &stars:0 &a:0 &s:0 &T:0 &_:0)) (fn_14 (Call (Name &max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &dist:0 (/choiceseq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDEwNSwgMTEwLCAxMDUsIDEwOSwgMTE3LCAxMDksIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDk3LCAxMTAsIDEwMywgMTA4LCAxMDEsIDExNSwgMzIsIDk3LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTgsIDQ2XQ== None)))) (FunctionDef &max_distance:0 (arguments nil (list (arg &N:2 None None) (arg &stars:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDk3LCAxMjAsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTIsIDk3LCA5OSwgMTAxLCAxMTUsIDEwNCwgMTA1LCAxMTIsIDMyLCA5OSwgOTcsIDExMCwgMzIsIDExNiwgMTE0LCA5NywgMTE4LCAxMDEsIDEwOCwgNDZd None)) (Assign (list (Name &max_dist:2 Store)) (Constant i0 None) None) (/splice (fn_20 &current_dist:2 &max_dist:2 &stars:2 &star:3 &a:2 (/choiceseq (Assign (list (Name &current_dist:2 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (fn_19 (Call (Name &dist:0 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &angle:5 Load))) nil) &s:5 &T:5) (list (comprehension (Tuple (list (_starred_content (Name &T:5 Store)) (_starred_content (Name &s:5 Store)) (_starred_content (Name &angle:5 Store))) Store) (Name &stars:2 Load) nil i0))))) nil) None))))) nil None None) (If (fn_21) (/seq (/splice (fn_1 (Name g_tuple Load) &N:0 &_:4 &stars:0)) (fn_14 (Call (Name &max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &dist:0 (/choiceseq)) (/splice (fn_17 &n:0 &T:0 &s:0 &a:0 &a_i:0 &s_i:0 &t_i:0 &_:0)) (FunctionDef &total_distance:0 (arguments nil (list (arg &angle:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &total:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Name &total:2 Store) Add (fn_23 &angle:2 &i:2 &a:0 &dist:0 &s:0 &T:0))) (/seq) None) (Return (Name &total:2 Load))) nil None None) (Assign (list (Name &left:0 Store)) (Constant i0 None) None) (Assign (list (Name &right:0 Store)) (fn_12) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (fn_3 &left:0 &right:0 &mid1:0 &mid2:0 &total_distance:0) (/seq) None) (fn_14 (Call (Name &total_distance:0 Load) (list (_starred_content (BinOp (BinOp (Name &left:0 Load) Add (Name &right:0 Load)) Div (Constant i2 None)))) nil))) nil)",
            "(Module (/seq (FunctionDef &compute_max_distance:0 (arguments nil (list (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_6 &b:2 &a:2 &d:2 &distance:1 (/choiceseq)) (FunctionDef &total_distance:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (Return (fn_4 &stars:1 &a:5 &s:5 &T:5 &angle:3 &distance:1))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &left:1 Store)) (_starred_content (Name &right:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (fn_3 &left:1 &right:1 &mid1:1 &mid2:1 &total_distance:1) (/seq) None) (Return (Call (Name &total_distance:1 Load) (list (_starred_content (Name &left:1 Load))) nil))) nil None None) (/splice (fn_15 (Name g_input Load) &N:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &compute_max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_14 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (FunctionDef &calculate_max_distance:0 (arguments nil (list (arg &N:1 None None) (arg &star_data:1 None None)) None nil nil None nil) (/seq (FunctionDef &adjust_angle:1 (arguments nil (list (arg &angle:2 None None)) None nil nil None nil) (/seq (Return (BinOp (Name &angle:2 Load) Mod (fn_12)))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &star_data:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i2 None)) Store)) (Call (Name &adjust_angle:1 Load) (list (_starred_content (Subscript (Subscript (Name &star_data:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i2 None)) Load))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &star_data:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:6 None None)) None nil nil None nil) (Subscript (Name &x:6 Load) (_slice_content (Constant i2 None)) Load)))))) (fn_16 &b:3 &a:3 &diff:3 &dist:1 (/choiceseq)) (Assign (list (Name &max_distance:1 Store)) (Constant i0 None) None) (/splice (fn_20 &distance:1 &max_distance:1 &star_data:1 &data:5 &angle:1 (/choiceseq (/splice (fn_5 &distance:1 &angle:1 &ai:1 &dist:1 &si:1 &Ti:1 &star_data:1)))))) nil None None) (/splice (fn_1 (Name g_list Load) &N:0 &_:4 &star_data:0)) (fn_14 (Call (Name &calculate_max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &star_data:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &travel_distance:0 (arguments nil (list (arg &angle:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_dist:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &T:1 Store)) (_starred_content (Name &s:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Name &stars:1 Load) (/seq (Assign (list (Name &dist_angle:1 Store)) (fn_25 (BinOp (Constant i2 None) Mult (Attribute (Name g_np Load) s_pi Load)) &a:1 &angle:1) None) (AugAssign (Name &total_dist:1 Store) Add (fn_19 (Name &dist_angle:1 Load) &s:1 &T:1))) (/seq) None) (Return (UnaryOp USub (Name &total_dist:1 Load)))) nil None None) (FunctionDef &max_travel_distance:0 (arguments nil (list (arg &stars:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &res:2 Store)) (fn_22 (Attribute (Name g_np Load) s_pi Load) &stars:2 &travel_distance:0) None) (Return (UnaryOp USub (Attribute (Name &res:2 Load) s_fun Load)))) nil None None) (If (fn_21) (/seq (/splice (fn_7 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &stars:0 &a:0 &s:0 &T:0 &_:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &max_travel_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) (/seq))) nil)",
            "(Module (/seq (fn_13 (Name g_abs Load) &b:1 &a:1 &d:1 &angle_distance:0) (FunctionDef &compute_distance:0 (arguments nil (list (arg &stars:2 None None) (arg &angle:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 &total_distance:2 &angle:2 &a:2 &angle_distance:0 &s:2 &T:2 &stars:2)) (Return (Name &total_distance:2 Load))) nil None None) (FunctionDef &search_max_distance:0 (arguments nil (list (arg &stars:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &high:3 Store)) (BinOp (Constant i2 None) Mult (Name g_pi Load)) None) (Assign (list (Name &low:3 Store)) (Constant i0 None) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100 None))) nil) (/seq (/splice (fn_9 &low:3 &high:3 &mid1:3 &mid2:3)) (If (Compare (Call (Name &compute_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (Name &mid1:3 Load))) nil) (list Gt) (list (Call (Name &compute_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (Name &mid2:3 Load))) nil))) (/seq (Assign (list (Name &high:3 Store)) (Name &mid2:3 Load) None)) (/seq (Assign (list (Name &low:3 Store)) (Name &mid1:3 Load) None)))) (/seq) None) (Return (Call (Name &compute_distance:0 Load) (list (_starred_content (Name &stars:3 Load)) (_starred_content (BinOp (BinOp (Name &high:3 Load) Add (Name &low:3 Load)) Div (Constant i2 None)))) nil))) nil None None) (/splice (fn_7 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &stars:0 &a:0 &s:0 &T:0 &_:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &search_max_distance:0 Load) (list (_starred_content (Name &stars:0 Load))) nil) None) (fn_10 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (FunctionDef &calculate_max_distance:0 (arguments nil (list (arg &n:1 None None) (arg &stars:1 None None)) None nil nil None nil) (/seq (fn_16 &b:2 &a:2 &diff:2 &angle_distance:1 (/choiceseq)) (FunctionDef &total_distance:1 (arguments nil (list (arg &angle:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_dist:3 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &T:3 Store)) (_starred_content (Name &s:3 Store)) (_starred_content (Name &a:3 Store))) Store) (Name &stars:1 Load) (/seq (Assign (list (Name &dist:3 Store)) (fn_19 (Call (Name &angle_distance:1 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &angle:3 Load))) nil) &s:3 &T:3) None) (AugAssign (Name &total_dist:3 Store) Add (Name &dist:3 Load))) (/seq) None) (Return (Name &total_dist:3 Load))) nil None None) (/splice (fn_18 (fn_12) &right:1 &left:1 &total_distance:1 &r_third:1 &l_third:1 &_:1))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:4 &stars:0)) (Assign (list (Name &max_distance:0 Store)) (Call (Name &calculate_max_distance:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &stars:0 Load))) nil) None) (fn_14 (Name &max_distance:0 Load))) nil)",
            "(Module (/seq (fn_11 &b:1 &a:1 &dist:0 (/choiceseq)) (FunctionDef &max_distance:0 (arguments nil (list (arg &stars:2 None None) (arg &N:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_distance:2 Store)) (Constant i0 None) None) (For (Name &angle:2 Store) (ListComp (BinOp (BinOp (Name &i:3 Load) Mult (Attribute (Name g_math Load) s_pi Load)) Div (Constant i180 None)) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i360 None))) nil) nil i0))) (/seq (/splice (fn_5 &distance:2 &angle:2 &a:2 &dist:0 &s:2 &T:2 &stars:2)) (Assign (list (Name &max_distance:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:2 Load)) (_starred_content (Name &distance:2 Load))) nil) None)) (/seq) None) (Return (Name &max_distance:2 Load))) nil None None) (/splice (fn_7 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &stars:0 &a:0 &s:0 &T:0 &_:0)) (Assign (list (Name &max_dist:0 Store)) (Call (Name &max_distance:0 Load) (list (_starred_content (Name &stars:0 Load)) (_starred_content (Name &N:0 Load))) nil) None) (fn_10 (Name &max_dist:0 Load))) nil)",
            "(Module (/seq (/splice (fn_17 &N:0 &T:0 &s:0 &a:0 &ai:0 &si:0 &t:0 &_:0)) (fn_11 &a2:1 &a1:1 &dist:0 (/choiceseq)) (FunctionDef &energy:0 (arguments nil (list (arg &a0:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &e:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (AugAssign (Name &e:2 Store) Add (fn_23 &a0:2 &i:2 &a:0 &dist:0 &s:0 &T:0))) (/seq) None) (Return (UnaryOp USub (Name &e:2 Load)))) nil None None) (Assign (list (Name &opt_angle:0 Store)) (Call (Name g_minimize_scalar Load) (list (_starred_content (Name &energy:0 Load))) (list (keyword s_bounds (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_12))) Load)) (keyword s_method (Constant s_bounded None)))) None) (fn_14 (UnaryOp USub (Call (Name &energy:0 Load) (list (_starred_content (Attribute (Name &opt_angle:0 Load) s_x Load))) nil)))) nil)"
        ]
    },
    "798": {
        "abstractions": [
            {
                "body": "(/subseq (If (Compare (Name %1 Load) (list Eq) (list (Name %2 Load))) (/seq (Return (BinOp (Name %1 Load) Add (Constant i1 None)))) (/seq)) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name %1 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None)))) nil) #0 (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (If (Compare (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name %4 Store)) (BinOp (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) FloorDiv (Name %1 Load)) Add (Constant i1 None)) None) (If #0 (/seq (Return (Name %4 Load))) (/seq))) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (Return (UnaryOp USub (Constant i1 None)))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %1 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Lt) (list (Name %1 Load))) (/seq (Return (Name %2 Load))) (/seq (Return (BinOp (Call (Name %3 Load) (list (_starred_content (Name %1 Load)) (_starred_content (BinOp (Name %2 Load) FloorDiv (Name %1 Load)))) nil) Add (BinOp (Name %2 Load) Mod (Name %1 Load))))))) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (While (Name %2 Load) (/seq (AugAssign (Name %3 Store) Add (BinOp (Name %2 Load) Mod (Name %1 Load))) (AugAssign (Name %2 Store) FloorDiv (Name %1 Load)) ?0) (/seq)) (If (Compare (Name %3 Load) (list Eq) (list (Name %4 Load))) (/seq (Return (Name %1 Load))) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name %1 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (Return (UnaryOp USub (Constant i1 None)))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (/splice (fn_1 (/seq (If (Compare (Call (Name %4 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %3 Load))) nil) (list Eq) (list (Name %2 Load))) (/seq (Return (Name %1 Load))) (/seq))) %3 %2 %1)) (For (Name %5 Store) #0 (/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) FloorDiv (Name %5 Load)) Add (Constant i1 None)) None) (If (BoolOp And (list (Compare (Name %1 Load) (list Gt) (list (Constant i1 None))) (Compare (Call (Name %4 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %3 Load))) nil) (list Eq) (list (Name %2 Load))))) (/seq (Return (Name %1 Load))) (/seq))) (/seq) None) (Return (UnaryOp USub (Constant i1 None))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %1 Store)) (Constant i0 None) None) (While (Name %3 Load) (/seq (AugAssign (Name %1 Store) Add (BinOp (Name %3 Load) Mod (Name %2 Load))) (AugAssign (Name %3 Store) FloorDiv (Name %2 Load))) (/seq)) (Return (Name %1 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Name %6 Load)) (_starred_content (Name %5 Load))) nil))) nil)))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (BinOp (Name %1 Load) Pow (Constant f0.5 None)))) nil)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Subscript (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 %1))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) FloorDiv (Name %1 Load)) Add (Constant i1 None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Name %2 Store)) (Name %1 Load) None) (Assign (list (Name %3 Store)) (Constant i0 None) None) (While (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name %3 Store) Add (BinOp (Name %2 Load) Mod (Name %4 Load))) (AugAssign (Name %2 Store) FloorDiv (Name %4 Load)) (If (Compare (Name %3 Load) (list Gt) (list (Name %5 Load))) (/seq Break) (/seq))) (/seq)) (If (Compare (Name %3 Load) (list Eq) (list (Name %5 Load))) (/seq (Return (Name %4 Load))) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(fn_1 (/seq (Assign (list (Name %4 Store)) (Name %3 Load) None) (Assign (list (Name %5 Store)) (Constant i0 None) None) (/splice (fn_5 %1 %4 %5 %2 (/choiceseq)))) %3 %2 %1)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Return (UnaryOp USub (Constant i1 None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (fn_6 %2)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (fn_2 (Compare (Name %1 Load) (list GtE) (list (Constant i2 None))) %4 %3 %2 %1) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq (Return (BinOp (Name %1 Load) Add (Constant i1 None)))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 %3))) nil) (/seq (If (Compare (Call (Name %4 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %3 Load))) nil) (list Eq) (list (Name %2 Load))) (/seq (Return (Name %1 Load))) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/splice (fn_1 (/seq (Assign (list (Name %4 Store)) (Name %3 Load) None) (Assign (list (Name %5 Store)) (Constant i0 None) None) (/splice (fn_5 %1 %4 %5 %2 (/choiceseq (If (Compare (Name %5 Load) (list Gt) (list (Name %2 Load))) (/seq Break) (/seq)))))) %3 %2 %1))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_base:0 &s:0 &n:0 (/choiceseq (fn_24 &b:1 &s:1 &n:1 &m:1 &sum_digits:1) (For (Name &q:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:1))) nil) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &q:1 &s:1 &n:1) None) (If (Compare (BinOp (BinOp (Name &b:1 Load) Mult (Name &q:1 Load)) Add (Name &s:1 Load)) (list Eq) (list (Name &n:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (If (Compare (Name &n:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq Break) (/seq)) (Assign (list (Name &temp_n:1 Store)) (Name &n:1 Load) None) (Assign (list (Name &sum_digits:1 Store)) (Constant i0 None) None) (/splice (fn_5 &b:1 &temp_n:1 &sum_digits:1 &s:1 (/choiceseq)))) &n:1 &s:1 &b:1)) (For (Name &d:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:1))) nil) (fn_2 (BoolOp And (list (Compare (BinOp (BinOp (Name &n:1 Load) Sub (Name &s:1 Load)) FloorDiv (Name &b:1 Load)) (list Eq) (list (Name &d:1 Load))) (Compare (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) (list Eq) (list (Name &s:1 Load))))) &d:1 &s:1 &n:1 &b:1) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &find_smallest_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 (/seq (If (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) &n:1 &s:1 &b:1)) (Assign (list (Name &diff:1 Store)) (BinOp (Name &n:1 Load) Sub (Name &s:1 Load)) None) (Assign (list (Name &ans:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &diff:1))) nil) (/seq (If (Compare (BinOp (Name &diff:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i1 None))) (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &i:1 Load))) nil) (list Eq) (list (Name &s:1 Load))))) (/seq (Return (Name &i:1 Load))) (/seq)) (If (BoolOp And (list (Compare (BinOp (Name &diff:1 Load) FloorDiv (Name &i:1 Load)) (list Gt) (list (Constant i1 None))) (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (BinOp (Name &diff:1 Load) FloorDiv (Name &i:1 Load)))) nil) (list Eq) (list (Name &s:1 Load))))) (/seq (Assign (list (Name &ans:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ans:1 Load)) (_starred_content (BinOp (Name &diff:1 Load) FloorDiv (Name &i:1 Load)))) nil) None)) (/seq))) (/seq))) (/seq) None) (Return (IfExp (Compare (Name &ans:1 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Name &ans:1 Load) (UnaryOp USub (Constant i1 None))))) nil None None) (/splice (fn_9 &total:2 &b:2 &n:2 &sum_digits:0 &s:0 &n:0 &find_smallest_base:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq (fn_18 &n:1 &s:1))) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:1))) nil) (/seq (If (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None) (Assign (list (Name &b_minus_k_solutions:1 Store)) (List nil Load) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:1))) nil) (/seq (If (fn_19 &k:1 &s:1 &n:1) (/seq (Expr (Call (Attribute (Name &b_minus_k_solutions:1 Load) s_append Load) (list (_starred_content (fn_12 &k:1 &s:1 &n:1))) nil))) (/seq))) (/seq) None) (If (Name &b_minus_k_solutions:1 Load) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &b_minus_k_solutions:1 Load))) nil))) (/seq)) (fn_16)) nil None None) (/splice (fn_9 &total:2 &b:2 &n:2 &sum_digits:0 &s:0 &n:0 &find_base:0 (/choiceseq)))) nil)",
            "(Module (fn_7 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &sum_digits:1 Store))) Store)) (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None))) Load) None) (/splice (fn_5 &b:1 &m:1 &sum_digits:1 &s:1 (/choiceseq)))) &n:1 &s:1 &b:1)) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (fn_6 &n:1)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (fn_19 &b:1 &s:1 &n:1) (Compare (fn_12 &b:1 &s:1 &n:1) (list LtE) (list (Call (Name g_int Load) (list (_starred_content (BinOp (Name &n:1 Load) Pow (Constant f0.5 None)))) nil))))) (/seq (Return (fn_12 &b:1 &s:1 &n:1))) (/seq))) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &find_smallest_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_15 &b:1 &s:1 &n:1 &m:1 &sum_digits:1)) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (fn_6 &n:1)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (fn_19 &b:1 &s:1 &n:1) (/seq (Return (fn_12 &b:1 &s:1 &n:1))) (/seq))) (/seq) None) (fn_16)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_13 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &s:0 &find_smallest_base:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &b:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq (Return (Name &n:1 Load))) (/seq (Return (BinOp (Call (Name &f:0 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Call (Attribute (Name g_math Load) s_floor Load) (list (_starred_content (BinOp (Name &n:1 Load) Div (Name &b:1 Load)))) nil))) nil) Add (BinOp (Name &n:1 Load) Mod (Name &b:1 Load))))))) nil None None) (FunctionDef &find_b:0 (arguments nil (list (arg &n:2 None None) (arg &s:2 None None)) None nil nil None nil) (/seq (/splice (fn_8 (fn_10 &n:2) &b:2 &s:2 &n:2 &f:0 &p:2))) nil None None) (/splice (fn_13 (Name g_input Load) &n:0 &s:0 &find_b:0))) nil)",
            "(Module (/seq (FunctionDef &find_smallest_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 (fn_14 &n:1 &temp_n:1 &sum_digits:1 &b:1 &s:1) &n:1 &s:1 &b:1)) (For (Name &p:1 Store) (fn_10 &n:1) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &p:1 &s:1 &n:1) None) (If (BoolOp And (list (Compare (Name &b:1 Load) (list Gt) (list (Constant i1 None))) (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &n:1 Load))) nil) (list Eq) (list (Name &s:1 Load))))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None) (fn_16)) nil None None) (fn_4 &b:2 &n:2 &f:0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (fn_22) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_smallest_base:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_4 &b:1 &n:1 &f:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &s:2 Store))) Store)) (fn_23) None) (If (Compare (Name &s:2 Load) (list Gt) (list (Name &n:2 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Return None)) (/seq)) (If (Compare (Name &s:2 Load) (list Eq) (list (Name &n:2 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil)) (Return None)) (/seq)) (For (Name &b:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:2))) nil) (/seq (If (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b:2 Load)) (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Name &s:2 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b:2 Load))) nil)) (Return None)) (/seq))) (/seq) None) (For (Name &d:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_21 &s:2 &n:2))) nil) (/seq (If (fn_19 &d:2 &s:2 &n:2) (/seq (Assign (list (Tuple (list (_starred_content (Name &b1:2 Store)) (_starred_content (Name &b2:2 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &d:2 Load) Add (Constant i1 None))) (_starred_content (fn_12 &d:2 &s:2 &n:2))) Load) None) (If (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b1:2 Load)) (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Name &s:2 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b1:2 Load))) nil)) (Return None)) (/seq)) (If (BoolOp And (list (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b2:2 Load)) (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Name &s:2 Load))) (Compare (Name &b1:2 Load) (list NotEq) (list (Name &b2:2 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &b2:2 Load))) nil)) (Return None)) (/seq))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq)) (fn_18 &n:1 &s:1) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:1))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &t:1 Store))) Store)) (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None))) Load) None) (/splice (fn_5 &b:1 &m:1 &t:1 &s:1 (/choiceseq)))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (BinOp (Name &n:1 Load) Sub (Name &s:1 Load))))) Load) None) (Assign (list (Name &delt:1 Store)) (BinOp (BinOp (Name &b:1 Load) Pow (Constant i2 None)) Sub (BinOp (BinOp (Constant i4 None) Mult (Name &a:1 Load)) Mult (Name &c:1 Load))) None) (If (Compare (Name &delt:1 Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &x1:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Add (BinOp (Name &delt:1 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &x2:1 Store)) (BinOp (BinOp (UnaryOp USub (Name &b:1 Load)) Sub (BinOp (Name &delt:1 Load) Pow (Constant f0.5 None))) Div (BinOp (Constant i2 None) Mult (Name &a:1 Load))) None) (Assign (list (Name &ans:1 Store)) (List nil Load) None) (If (BoolOp And (list (Compare (Name &x1:1 Load) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name &x1:1 Load) s_is_integer Load) nil nil))) (/seq (Expr (Call (Attribute (Name &ans:1 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &x1:1 Load))) nil))) nil))) (/seq)) (If (BoolOp And (list (Compare (Name &x2:1 Load) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name &x2:1 Load) s_is_integer Load) nil nil))) (/seq (Expr (Call (Attribute (Name &ans:1 Load) s_append Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &x2:1 Load))) nil))) nil))) (/seq)) (If (Name &ans:1 Load) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &ans:1 Load))) nil))) (/seq))) (/seq)))))) nil)",
            "(Module (/seq (FunctionDef &find_smallest_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant i2 None))) (/seq)) (fn_20 &b:1 &s:1 &n:1 &f:0) (For (Name &k:1 Store) (fn_10 &n:1) (fn_2 (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) &k:1 &s:1 &n:1 &b:1) (/seq) None) (fn_16)) nil None None) (fn_4 &b:2 &n:2 &f:0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (fn_23) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_smallest_base:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_4 &b:1 &n:1 &f:0) (/splice (fn_3 &s:2 &n:2 &solve:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (If (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b:2 Load)) (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Name &s:2 Load))) (/seq (Return (Name &b:2 Load))) (/seq))) &n:2 &s:2 &b:2)) (For (Name &p:2 Store) (fn_11 &n:2) (/seq (Assign (list (Name &b:2 Store)) (fn_12 &p:2 &s:2 &n:2) None) (If (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b:2 Load)) (_starred_content (Name &n:2 Load))) nil) (list Eq) (list (Name &s:2 Load))) (/seq (Return (Name &b:2 Load))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &find_smallest_b:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq)) (fn_18 &n:1 &s:1) (fn_20 &b:1 &s:1 &n:1 &f:0) (For (Name &d:1 Store) (Call (Name g_range Load) (list (_starred_content (fn_21 &s:1 &n:1)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (fn_2 (Compare (Call (Name &f:0 Load) (list (_starred_content (Name &b1:1 Load)) (_starred_content (Name &n:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) &d:1 &s:1 &n:1 &b1:1) (/seq) None) (fn_16)) nil None None) (fn_4 &b:2 &n:2 &f:0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_smallest_b:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_b:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &sum_digits:1 Store))) Store)) (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None))) Load) None) (While (Compare (Name &m:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &sum_digits:1 Store) Add (BinOp (Name &m:1 Load) Mod (Name &b:1 Load))) (AugAssign (Name &m:1 Store) FloorDiv (Name &b:1 Load))) (/seq)) (If (Compare (Name &sum_digits:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) &n:1 &s:1 &b:1)) (fn_17 &x:1 &n:1 &s:1 &b:1))))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (fn_4 &b:2 &n:2 &f:1) (/splice (fn_8 (fn_11 &n:1) &b:1 &s:1 &n:1 &f:1 &p:1))) nil None None) (/splice (fn_13 (Name g_input Load) &n:0 &s:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &find_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_15 &b:1 &s:1 &n:1 &temp_n:1 &sum_digits:1)) (For (Name &p:1 Store) (Call (Name g_range Load) (list (_starred_content (fn_6 &n:1)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Name &p:1 Load) (fn_19 &p:1 &s:1 &n:1))) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &p:1 &s:1 &n:1) None) (If (Compare (Constant i2 None) (list LtE Lt) (list (Name &b:1 Load) (Name &n:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq))) (/seq) None) (fn_16)) nil None None) (/splice (fn_13 (Name g_input Load) &n:0 &s:0 &find_base:0))) nil)",
            "(Module (fn_7 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (/splice (fn_15 &b:1 &s:1 &n:1 &temp:1 &sum_digits:1)) (fn_17 &b:1 &n:1 &s:1 &p:1))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &solve:0 &s:0 &n:0 (/choiceseq (fn_4 &b:2 &n:2 &f:1) (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq (fn_18 &n:1 &s:1))) (fn_20 &b:1 &s:1 &n:1 &f:1) (For (Name &p:1 Store) (fn_11 &n:1) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &p:1 &s:1 &n:1) None) (If (Compare (Call (Name &f:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &n:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &solve:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (If (Compare (Name &n:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq Break) (/seq)) (Assign (list (Name &sum_digits:1 Store)) (Constant i0 None) None) (Assign (list (Name &temp:1 Store)) (Name &n:1 Load) None) (/splice (fn_5 &b:1 &temp:1 &sum_digits:1 &s:1 (/choiceseq)))) &n:1 &s:1 &b:1)) (For (Name &p:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_21 &s:1 &n:1))) nil) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &p:1 &s:1 &n:1) None) (Assign (list (Name &sum_digits:1 Store)) (Constant i0 None) None) (Assign (list (Name &temp:1 Store)) (Name &n:1 Load) None) (While (Name &temp:1 Load) (/seq (AugAssign (Name &sum_digits:1 Store) Add (BinOp (Name &temp:1 Load) Mod (Name &b:1 Load))) (AugAssign (Name &temp:1 Store) FloorDiv (Name &b:1 Load))) (/seq)) (If (BoolOp And (list (Compare (Name &sum_digits:1 Load) (list Eq) (list (Name &s:1 Load))) (Compare (BinOp (Name &n:1 Load) Mod (Name &p:1 Load)) (list Eq) (list (BinOp (Name &s:1 Load) Mod (Name &p:1 Load)))))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &find_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_8 (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:1))) nil) &b:1 &s:1 &n:1 &f:0 &p:1))) nil None None) (fn_4 &b:2 &n:2 &f:0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (fn_22) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_base:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &solve:0 &s:0 &n:0 (/choiceseq (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq)) (/splice (fn_15 &b:1 &s:1 &n:1 &m:1 &sum_digits:1)) (fn_17 &b:1 &n:1 &s:1 &p:1))))) nil)",
            "(Module (fn_7 &s:1 &n:1 &find_smallest_b:0 &s:0 &n:0 (/choiceseq (fn_24 &b:1 &s:1 &n:1 &m:1 &digit_sum:1) (For (Name &p:1 Store) (fn_11 &n:1) (fn_2 (BoolOp And (list (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) (Compare (Name &b:1 Load) (list Lt) (list (Name &n:1 Load))) (Compare (BinOp (BinOp (Name &n:1 Load) Mod (Name &b:1 Load)) Add (BinOp (BinOp (Name &n:1 Load) FloorDiv (Name &b:1 Load)) Mod (Name &b:1 Load))) (list Eq) (list (Name &s:1 Load))))) &p:1 &s:1 &n:1 &b:1) (/seq) None))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (fn_22) None) (If (Compare (Name &s:0 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil))) (/seq (Assign (list (Name &result:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &b:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:0))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &m:0 Store)) (_starred_content (Name &sum_digits:0 Store))) Store)) (Tuple (list (_starred_content (Name &n:0 Load)) (_starred_content (Constant i0 None))) Load) None) (While (Name &m:0 Load) (/seq (AugAssign (Name &sum_digits:0 Store) Add (BinOp (Name &m:0 Load) Mod (Name &b:0 Load))) (AugAssign (Name &m:0 Store) FloorDiv (Name &b:0 Load))) (/seq)) (If (Compare (Name &sum_digits:0 Load) (list Eq) (list (Name &s:0 Load))) (/seq (Assign (list (Name &result:0 Store)) (Name &b:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &result:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &b_candidates:0 Store)) (List nil Load) None) (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:0))) nil) (/seq (If (fn_19 &k:0 &s:0 &n:0) (/seq (Assign (list (Name &b:0 Store)) (fn_12 &k:0 &s:0 &n:0) None) (If (Compare (Name &b:0 Load) (list GtE) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &b_candidates:0 Load) s_append Load) (list (_starred_content (Name &b:0 Load))) nil))) (/seq))) (/seq))) (/seq) None) (If (Name &b_candidates:0 Load) (/seq (Assign (list (Name &result:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &b_candidates:0 Load))) nil) None)) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))))) nil)",
            "(Module (/seq (FunctionDef &smallest_base:0 (arguments nil (list (arg &n:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjgsIDEwMSwgMTE2LCAxMDEsIDExNCwgMTA5LCAxMDUsIDExMCwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTA5LCA5NywgMTA4LCAxMDgsIDEwMSwgMTE1LCAxMTYsIDMyLCA5OCwgOTcsIDExNSwgMTAxLCAzMiwgOTgsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgMTE5LCAxMDQsIDEwNSwgOTksIDEwNCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExNywgMTA5LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCAxMDUsIDEwMywgMTA1LCAxMTYsIDExNSwgMzIsIDExMSwgMTAyLCAzMiwgMTEwLCAzMiwgMTA1LCAxMTAsIDMyLCA5OCwgOTcsIDExNSwgMTAxLCAzMiwgOTgsIDMyLCAxMDEsIDExMywgMTE3LCA5NywgMTA4LCAxMTUsIDMyLCAxMTUsIDQ2LCAxMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCA1OCwgMTEyLCA5NywgMTE0LCA5NywgMTA5LCAzMiwgMTEwLCA1OCwgMzIsIDg0LCAxMDQsIDEwMSwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExNiwgMTExLCAzMiwgOTgsIDEwMSwgMzIsIDk5LCAxMTEsIDExMCwgMTE4LCAxMDEsIDExNCwgMTE2LCAxMDEsIDEwMCwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNTgsIDExMiwgOTcsIDExNCwgOTcsIDEwOSwgMzIsIDExNSwgNTgsIDMyLCA4NCwgMTA0LCAxMDEsIDMyLCAxMTYsIDk3LCAxMTQsIDEwMywgMTAxLCAxMTYsIDMyLCAxMTUsIDExNywgMTA5LCAzMiwgMTExLCAxMDIsIDMyLCAxMDAsIDEwNSwgMTAzLCAxMDUsIDExNiwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCA1OCwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgNTgsIDMyLCA4NCwgMTA0LCAxMDEsIDMyLCAxMTUsIDEwOSwgOTcsIDEwOCwgMTA4LCAxMDEsIDExNSwgMTE2LCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMzIsIDk4LCAzMiwgMTA1LCAxMDIsIDMyLCAxMDUsIDExNiwgMzIsIDEwMSwgMTIwLCAxMDUsIDExNSwgMTE2LCAxMTUsIDQ0LCAzMiwgMTExLCAxMTYsIDEwNCwgMTAxLCAxMTQsIDExOSwgMTA1LCAxMTUsIDEwMSwgMzIsIDQ1LCA0OSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &n:1 Load) (list Lt) (list (Name &s:1 Load))) (/seq (fn_16)) (/seq)) (/splice (fn_1 (/seq (If (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &b:1 Load))) (/seq))) &n:1 &s:1 &b:1)) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (fn_6 &n:1))) nil) (fn_2 (Compare (Call (Name &sum_digits:0 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load))) nil) (list Eq) (list (Name &s:1 Load))) &k:1 &s:1 &n:1 &b:1) (/seq) None) (fn_16)) nil None None) (/splice (fn_9 &sum_d:2 &b:2 &n:2 &sum_digits:0 &s:0 &n:0 &smallest_base:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTE3LCAxMDksIDMyLCAxMTEsIDEwMiwgMzIsIDEwMCwgMTA1LCAxMDMsIDEwNSwgMTE2LCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMCwgMzIsIDEwNSwgMTEwLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMzIsIDk4LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDU4LCAxMTIsIDk3LCAxMTQsIDk3LCAxMDksIDMyLCAxMTAsIDU4LCAzMiwgODQsIDEwNCwgMTAxLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTE2LCAxMTEsIDMyLCA5OCwgMTAxLCAzMiwgOTksIDExMSwgMTEwLCAxMTgsIDEwMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCA1OCwgMTEyLCA5NywgMTE0LCA5NywgMTA5LCAzMiwgOTgsIDU4LCAzMiwgODQsIDEwNCwgMTAxLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA5OSwgMTExLCAxMTAsIDExOCwgMTAxLCAxMTQsIDExNSwgMTA1LCAxMTEsIDExMCwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNTgsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDU4LCAzMiwgODQsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTcsIDEwOSwgMzIsIDExMSwgMTAyLCAzMiwgMTAwLCAxMDUsIDEwMywgMTA1LCAxMTYsIDExNSwgMzIsIDEwNSwgMTEwLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMzIsIDk4LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)))))) nil)",
            "(Module (fn_7 &s:1 &n:1 &find_smallest_b:0 &s:0 &n:0 (/choiceseq (If (Compare (Name &n:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant i2 None))) (/seq)) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:1))) nil) (/seq (Assign (list (Name &sum_n:1 Store)) (Constant i0 None) None) (Assign (list (Name &tmp_n:1 Store)) (Name &n:1 Load) None) (/splice (fn_5 &b:1 &tmp_n:1 &sum_n:1 &s:1 (/choiceseq (If (Compare (Name &sum_n:1 Load) (list Gt) (list (Name &s:1 Load))) (/seq Break) (/seq)))))) (/seq) None) (For (Name &q:1 Store) (fn_10 &n:1) (/seq (Assign (list (Name &b:1 Store)) (fn_12 &q:1 &s:1 &n:1) None) (If (BoolOp And (list (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) (fn_19 &q:1 &s:1 &n:1))) (/seq (Return (Name &b:1 Load))) (/seq))) (/seq) None) (If (Compare (BinOp (Name &n:1 Load) Sub (Constant i1 None)) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Name &n:1 Load))) (/seq)))) nil)",
            "(Module (fn_7 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (Assign (list (Tuple (list (_starred_content (Name &m:1 Store)) (_starred_content (Name &sum_digits:1 Store))) Store)) (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None))) Load) None) (/splice (fn_5 &b:1 &m:1 &sum_digits:1 &s:1 (/choiceseq)))) &n:1 &s:1 &b:1)) (Assign (list (Name &residual:1 Store)) (BinOp (Name &n:1 Load) Sub (Name &s:1 Load)) None) (If (BoolOp And (list (Compare (Name &residual:1 Load) (list GtE) (list (Constant i0 None))) (Compare (BinOp (BinOp (Name &n:1 Load) Sub (Name &s:1 Load)) Mod (Name &s:1 Load)) (list Eq) (list (Constant i0 None))))) (/seq (Return (BinOp (BinOp (BinOp (Name &n:1 Load) Sub (Name &s:1 Load)) FloorDiv (Name &s:1 Load)) Add (Constant i1 None)))) (/seq)))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (/splice (fn_1 (/seq (Assign (list (Name &sum_:1 Store)) (Constant i0 None) None) (Assign (list (Name &temp:1 Store)) (Name &n:1 Load) None) (/splice (fn_5 &b:1 &temp:1 &sum_:1 &s:1 (/choiceseq)))) &n:1 &s:1 &b:1)) (For (Name &p:1 Store) (fn_11 &n:1) (fn_2 (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) &p:1 &s:1 &n:1 &b:1) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (If (Compare (Name &n:1 Load) (list Lt) (list (Name &s:1 Load))) (/seq (fn_16)) (/seq)) (If (Compare (Name &n:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (BinOp (Name &n:1 Load) Add (Constant i1 None)))) (/seq)) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name &n:1 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i2 None)))) nil) (/seq (Assign (list (Name &sum_digs:1 Store)) (Constant i0 None) None) (Assign (list (Name &m:1 Store)) (Name &n:1 Load) None) (/splice (fn_5 &b:1 &m:1 &sum_digs:1 &s:1 (/choiceseq)))) (/seq) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name &n:1 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i2 None)))) nil) (fn_2 (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) &k:1 &s:1 &n:1 &b:1) (/seq) None))))) nil)",
            "(Module (fn_7 &s:1 &n:1 &solve:0 &s:0 &n:0 (/choiceseq (/splice (fn_15 &b:1 &s:1 &n:1 &x:1 &sum:1)) (For (Name &b:1 Store) (fn_10 &n:1) (fn_2 (Compare (Name &x:1 Load) (list Gt) (list (Name &b:1 Load))) &b:1 &s:1 &n:1 &x:1) (/seq) None))) nil)",
            "(Module (/seq (/splice (fn_3 &s:1 &n:1 &find_smallest_base:0 &s:0 &n:0 (/choiceseq (If (Compare (Name &s:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_16)) (/seq)) (fn_18 &n:1 &s:1) (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (fn_6 &n:1))) nil) (fn_14 &n:1 &m:1 &sum_dig:1 &b:1 &s:1) (/seq) None) (For (Name &k:1 Store) (fn_11 &n:1) (fn_2 (Compare (Name &b:1 Load) (list GtE) (list (Constant i2 None))) &k:1 &s:1 &n:1 &b:1) (/seq) None))))) nil)"
        ]
    },
    "769": {
        "abstractions": [
            {
                "body": "(/subseq (FunctionDef %6 (arguments nil (list (arg %4 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call #0 (list (_starred_content (Name %4 Load)) (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None))) (_starred_content (Name %5 Load))) nil))) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call #0 (list (_starred_content (Name %4 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %5 Load))) nil))) (/seq (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (Name %2 Load) None) (While (Compare (Name %3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %2 Load)) Mod (Name %4 Load)) None) (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (Return (Call #0 (list (_starred_content (Name %4 Load)) (_starred_content (BinOp (BinOp (Name %4 Load) Sub (Constant i1 None)) FloorDiv (Name %1 Load))) (_starred_content (Name %5 Load))) nil))))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %7 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %8 Load)) (_starred_content (Name %7 Load))) nil))) nil)))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (FunctionDef %6 (arguments nil (list (arg %4 None None) (arg %5 None None) (arg %3 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Constant i1 None) None) (Assign (list (Name %4 Store)) (BinOp (Name %4 Load) Mod (Name %3 Load)) None) (While (Compare (Name %5 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BinOp (Name %5 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) Mult (Name %4 Load)) Mod (Name %3 Load)) None)) (/seq)) (Assign (list (Name %5 Store)) (BinOp (Name %5 Load) RShift (Constant i1 None)) None) (Assign (list (Name %4 Store)) (BinOp (BinOp (Name %4 Load) Mult (Name %4 Load)) Mod (Name %3 Load)) None)) (/seq)) (Return (Name %2 Load))) nil None None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (Name %2 Load) None) (While (Compare (Name %3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %2 Load)) Mod (Name %4 Load)) None) (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (If (Compare (BinOp (Name %4 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %2 Load)) Mod (Name %1 Load)) None)) (/seq)) ?0 (Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) Mult (Name %2 Load)) Mod (Name %1 Load)) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call #0 (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None))) (_starred_content (Name %1 Load))) nil))) (/seq)) (If (Compare (Name %3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call #0 (list (_starred_content (Name %2 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) (/seq)) (/splice (fn_3 %5 %3 %4 %2)) (Return (Call #0 (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (BinOp (Name %2 Load) Sub (Constant i1 None)) FloorDiv (Name %5 Load))) (_starred_content (Name %1 Load))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (While (Name %4 Load) (/seq (If (BinOp (Name %4 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (Name %1 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None) (AugAssign (Name %4 Store) RShift (Constant i1 None))) (/seq)) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %3 None None) (arg %2 None None) (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i1 None) None) (While (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_4 %4 %3 %1 %2 (/choiceseq))) #0) (/seq)) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None))) (_starred_content (Name %5 Load))) nil))) (/seq (If (Compare (Name %3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %5 Load))) nil))) (/seq (/splice (fn_3 %4 %3 %2 %1)) ?0))))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (fn_6 %1) (If (Compare (Name %4 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name g_pow Load) (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None))) (_starred_content (Name %1 Load))) nil))) (/seq (If (Compare (Name %4 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name g_pow Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) (/seq (/splice (fn_3 %5 %4 %3 %2)) (Return (Call (Name g_pow Load) (list (_starred_content (Name %2 Load)) (_starred_content #0) (_starred_content (Name %1 Load))) nil)))))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Assign (list (Name %1 Store)) (Constant i1 None) None) (While (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_4 %4 %3 %1 %2 (/choiceseq (Assign (list (Name %2 Store)) (BinOp (Name %2 Load) FloorDiv (Constant i2 None)) None))))) (/seq)) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %2 Load) Sub (Constant i1 None)) FloorDiv (Name %1 Load))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (While (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_4 %4 %3 %1 %2 (/choiceseq))) (AugAssign (Name %2 Store) FloorDiv (Constant i2 None))) (/seq)) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &power:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None)) None nil nil None nil) (fn_13 &result:1 &y:1 &x:1 &MOD:0) nil None None) (/splice (fn_5 (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name &power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Sub (Constant i1 None)))) nil))) (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name &power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &p:2 Load))) nil))) (/seq (Assign (list (Name &order:2 Store)) (Constant i1 None) None) (Assign (list (Name &current:2 Store)) (Name &k:2 Load) None) (While (Compare (Name &current:2 Load) (list NotEq) (list (Constant i1 None))) (/seq (AugAssign (Name &order:2 Store) Add (Constant i1 None)) (Assign (list (Name &current:2 Store)) (BinOp (BinOp (Name &current:2 Load) Mult (Name &k:2 Load)) Mod (Name &p:2 Load)) None)) (/seq)) (Return (Call (Name &power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (fn_14 &order:2 &p:2))) nil))))))) &k:2 &p:2 &solve:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_9 (AugAssign (Name &exponent:1 Store) FloorDiv (Constant i2 None)) &result:1 &exponent:1 &base:1 &modulus:1 &mod_pow:0) (/splice (fn_5 (/seq (fn_6 &MOD:2) (fn_10 &p:2 &next_val:2 &k:2 &cycle_size:2 &MOD:2 &mod_pow:0 (/choiceseq (Return (Call (Name &mod_pow:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (fn_14 &cycle_size:2 &p:2)) (_starred_content (Name &MOD:2 Load))) nil))))) &k:2 &p:2 &count_distinct_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_5 (fn_7 (Name g_pow Load) &MOD:0 &p:1 &k:1 &cur:1 &cycle_len:1) &k:1 &p:1 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_2 &MOD:0 &res:1 &p:1 &x:1 &y:1 &power:0)) (/splice (fn_1 (Name &power:0 Load) &cycle_len:2 &k:2 &cur:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &fast_power:0 (arguments nil (list (arg &base:1 None None) (arg &power:1 None None)) None nil nil None nil) (/seq (/splice (fn_15 &result:1 &power:1 &base:1 &MOD:0))) nil None None) (/splice (fn_5 (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name &fast_power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Sub (Constant i1 None)))) nil))) (/seq)) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name &fast_power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &p:2 Load))) nil))) (/seq)) (/splice (fn_3 &cycle_len:2 &k:2 &value:2 &p:2)) (Return (Call (Name &fast_power:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (fn_14 &cycle_len:2 &p:2))) nil))) &k:2 &p:2 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_length:1 &k:1 &x:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &pow_mod:0 (arguments nil (list (arg &a:1 None None) (arg &n:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (/splice (fn_8 &result:1 &mod:1 &a:1 &n:1))) nil None None) (/splice (fn_5 (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &p:2 Load))) (/seq)) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name &pow_mod:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Sub (Constant i1 None))) (_starred_content (Name &MOD:0 Load))) nil))) (/seq)) (/splice (fn_3 &cycle_len:2 &k:2 &cur:2 &p:2)) (Return (Call (Name &pow_mod:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (fn_14 &cycle_len:2 &p:2)) (_starred_content (Name &MOD:0 Load))) nil))) &k:2 &p:2 &find_cycles_count:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &pow_mod:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTIwLCA5NCwgMTIxLCAzMiwgMTA5LCAxMTEsIDEwMCwgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDEsIDEwMiwgMTAyLCAxMDUsIDk5LCAxMDUsIDEwMSwgMTEwLCAxMTYsIDEwOCwgMTIxLCA0Nl0= None)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (While (Compare (Name &y:1 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_4 &mod:1 &x:1 &result:1 &y:1 (/choiceseq (AugAssign (Name &y:1 Store) FloorDiv (Constant i2 None)))))) (/seq)) (Return (Name &result:1 Load))) nil None None) (/splice (fn_1 (Name &pow_mod:0 Load) &count:2 &k:2 &current:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_5 (/seq (If (Compare (Name &k:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name g_pow Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (BinOp (Name &p:1 Load) Sub (Constant i1 None))) (_starred_content (Name &MOD:0 Load))) nil))) (/seq (If (Compare (Name &k:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name g_pow Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (BinOp (Name &p:1 Load) Sub (Constant i2 None))) (_starred_content (Name &MOD:0 Load))) nil))) (/seq (/splice (fn_3 &cycle_len:1 &k:1 &cur:1 &p:1)) (Return (Call (Name g_pow Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (fn_14 &cycle_len:1 &p:1)) (_starred_content (Name &MOD:0 Load))) nil))))))) &k:1 &p:1 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_length:1 &k:1 &value:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_len:1 &k:1 &val:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &power:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (Assign (list (Name &a:1 Store)) (BinOp (Name &a:1 Load) Mod (Name &mod:1 Load)) None) (While (Compare (Name &b:1 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BinOp (Name &b:1 Load) Mod (Constant i2 None)) (/seq (Assign (list (Name &result:1 Store)) (BinOp (BinOp (Name &result:1 Load) Mult (Name &a:1 Load)) Mod (Name &mod:1 Load)) None)) (/seq)) (Assign (list (Name &b:1 Store)) (BinOp (Name &b:1 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name &a:1 Store)) (BinOp (BinOp (Name &a:1 Load) Mult (Name &a:1 Load)) Mod (Name &mod:1 Load)) None)) (/seq)) (Return (Name &result:1 Load))) nil None None) (/splice (fn_1 (Name &power:0 Load) &cycle_len:2 &k:2 &temp:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &pow_mod:0 (arguments nil (list (arg &x:1 None None) (arg &n:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTIwLCAzMiwgNDIsIDQyLCAzMiwgMTEwLCAzMiwgMzcsIDMyLCAxMDksIDExMSwgMTAwLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTA1LCA5OSwgMTA1LCAxMDEsIDExMCwgMTE2LCAxMDgsIDEyMSwgNDZd None)) (/splice (fn_15 &result:1 &n:1 &x:1 &mod:1))) nil None None) (/splice (fn_5 (fn_7 (Name &pow_mod:0 Load) &MOD:0 &p:2 &k:2 &next_k:2 &cycle_length:2) &k:2 &p:2 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_2 &MOD:0 &res:1 &p:1 &x:1 &y:1 &power:0)) (/splice (fn_1 (Name &power:0 Load) &cycle_size:2 &k:2 &current:2 &p:2 &MOD:0 &solve:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_2 &MOD:0 &res:1 &p:1 &x:1 &y:1 &power:0)) (/splice (fn_5 (fn_7 (Name &power:0 Load) &MOD:0 &p:2 &k:2 &curr:2 &cycle_length:2) &k:2 &p:2 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_2 &MOD:0 &res:1 &p:1 &x:1 &y:1 &power:0)) (/splice (fn_1 (Name &power:0 Load) &cycle_len:2 &k:2 &next_k:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (fn_9 (Assign (list (Name &exponent:1 Store)) (BinOp (Name &exponent:1 Load) FloorDiv (Constant i2 None)) None) &result:1 &exponent:1 &base:1 &modulus:1 &mod_pow:0) (/splice (fn_1 (Name &mod_pow:0 Load) &cycle_size:2 &k:2 &cur:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_length:1 &k:1 &val:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_5 (fn_11 (fn_14 &cycle_length:1 &p:1) &MOD:1 &p:1 &temp_k:1 &k:1 &cycle_length:1) &k:1 &p:1 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (/splice (fn_2 &MOD:0 &res:1 &p:1 &x:1 &y:1 &power:0)) (/splice (fn_1 (Name &power:0 Load) &cycle_len:2 &k:2 &cur_k:2 &p:2 &MOD:0 &countFunctions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &mod_pow:0 (arguments nil (list (arg &base:1 None None) (arg &exponent:1 None None) (arg &modulus:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCA5OCwgOTcsIDExNSwgMTAxLCA5NCwgMTAxLCAxMjAsIDExMiwgMTExLCAxMTAsIDEwMSwgMTEwLCAxMTYsIDMyLCAzNywgMzIsIDEwOSwgMTExLCAxMDAsIDExNywgMTA4LCAxMTcsIDExNSwgMzIsIDEwMSwgMTAyLCAxMDIsIDEwNSwgOTksIDEwNSwgMTAxLCAxMTAsIDExNiwgMTA4LCAxMjEsIDQ2XQ== None)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (Assign (list (Name &base:1 Store)) (BinOp (Name &base:1 Load) Mod (Name &modulus:1 Load)) None) (While (Compare (Name &exponent:1 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_4 &modulus:1 &base:1 &result:1 &exponent:1 (/choiceseq (Assign (list (Name &exponent:1 Store)) (BinOp (Name &exponent:1 Load) RShift (Constant i1 None)) None))))) (/seq)) (Return (Name &result:1 Load))) nil None None) (/splice (fn_5 (/seq (Expr (Constant s-WzY3LCAxMTEsIDExNywgMTEwLCAxMTYsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCAxMDIsIDExNywgMTEwLCA5OSwgMTE2LCAxMDUsIDExMSwgMTEwLCAxMTUsIDMyLCAxMDIsIDMyLCA5NywgOTksIDk5LCAxMTEsIDExNCwgMTAwLCAxMDUsIDExMCwgMTAzLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDExMiwgMTE0LCAxMTEsIDk4LCAxMDgsIDEwMSwgMTA5LCA0Nl0= None)) (fn_10 &p:2 &current_k:2 &k:2 &cycle_length:2 &MOD:0 &mod_pow:0 (/choiceseq (Assign (list (Name &number_of_cycles:2 Store)) (fn_14 &cycle_length:2 &p:2) None) (Return (Call (Name &mod_pow:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &number_of_cycles:2 Load)) (_starred_content (Name &MOD:0 Load))) nil))))) &k:2 &p:2 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &order_k:1 &k:1 &x:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &pow_mod:0 (arguments nil (list (arg &x:1 None None) (arg &y:1 None None) (arg &mod:1 None None)) None nil nil None (list (Name &MOD:0 Load))) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMjAsIDMyLCA0MiwgNDIsIDMyLCAxMjEsIDMyLCAzNywgMzIsIDEwOSwgMTExLCAxMDBd None)) (/splice (fn_8 &res:1 &mod:1 &x:1 &y:1))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:2 Store)) (_starred_content (Name &k:2 Store))) Store)) (fn_12) None) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &pow_mod:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Sub (Constant i1 None)))) nil))) nil))) (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &pow_mod:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &p:2 Load))) nil))) nil))) (/seq (/splice (fn_3 &cycle_length:2 &k:2 &cur:2 &p:2)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &pow_mod:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (fn_14 &cycle_length:2 &p:2))) nil))) nil))))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &mod_pow:0 (arguments nil (list (arg &x:1 None None) (arg &n:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMjAsIDMyLCA0MiwgNDIsIDMyLCAxMTAsIDMyLCAzNywgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDEsIDEwMiwgMTAyLCAxMDUsIDk5LCAxMDUsIDEwMSwgMTEwLCAxMTYsIDEwOCwgMTIxLCA0Nl0= None)) (/splice (fn_8 &result:1 &mod:1 &x:1 &n:1))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &p:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name &mod_pow:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (BinOp (Name &p:2 Load) Sub (Constant i1 None))) (_starred_content (Name &MOD:0 Load))) nil))) (/seq)) (If (Compare (Name &k:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Call (Name &mod_pow:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &p:2 Load)) (_starred_content (Name &MOD:0 Load))) nil))) (/seq)) (/splice (fn_3 &cycle_length:2 &k:2 &x:2 &p:2)) (Assign (list (Name &num_cycles:2 Store)) (fn_14 &cycle_length:2 &p:2) None) (Return (Call (Name &mod_pow:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &num_cycles:2 Load)) (_starred_content (Name &MOD:0 Load))) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:3 Store)) (_starred_content (Name &k:3 Store))) Store)) (fn_12) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &p:3 Load)) (_starred_content (Name &k:3 Load))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &count_functions:0 (arguments nil (list (arg &p:1 None None) (arg &k:1 None None)) None nil nil None nil) (fn_11 (BinOp (BinOp (Name &p:1 Load) FloorDiv (Name &cycle_size:1 Load)) Sub (Constant i1 None)) &MOD:1 &p:1 &value:1 &k:1 &cycle_size:1) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &p:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_12) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &count_functions:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_len:1 &k:1 &val:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (fn_9 (AugAssign (Name &n:1 Store) FloorDiv (Constant i2 None)) &result:1 &n:1 &x:1 &mod:1 &mod_pow:0) (/splice (fn_1 (Name &mod_pow:0 Load) &cycle_len:2 &k:2 &x:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (/splice (fn_1 (Name g_pow Load) &cycle_size:1 &k:1 &curr:1 &p:1 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (FunctionDef &mod_exp:0 (arguments nil (list (arg &base:1 None None) (arg &exp:1 None None) (arg &mod:1 None None)) None nil nil None nil) (fn_13 &result:1 &exp:1 &base:1 &mod:1) nil None None) (/splice (fn_5 (/seq (fn_10 &p:2 &next:2 &k:2 &cycle_len:2 &MOD:0 &mod_exp:0 (/choiceseq (Assign (list (Name &num_cycles:2 Store)) (fn_14 &cycle_len:2 &p:2) None) (Return (Call (Name &mod_exp:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &num_cycles:2 Load)) (_starred_content (Name &MOD:0 Load))) nil))))) &k:2 &p:2 &count_functions:0 &k:0 &p:0))) nil)",
            "(Module (/seq (fn_6 &MOD:0) (fn_9 (Assign (list (Name &exp:1 Store)) (BinOp (Name &exp:1 Load) FloorDiv (Constant i2 None)) None) &result:1 &exp:1 &base:1 &mod:1 &powmod:0) (/splice (fn_1 (Name &powmod:0 Load) &order:2 &k:2 &k_pow:2 &p:2 &MOD:0 &count_functions:0 &k:0 &p:0))) nil)"
        ]
    },
    "403": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %6 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %1 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name %1 Load) (list Lt) (list (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil))) (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %3 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) nil) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Load) (list NotEq) (list (Subscript (Name %1 Load) (_slice_content (Name %4 Load)) Load))) (/seq (Return (Name %4 Load))) (/seq))) (/seq) None) (Return (Name %3 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name %1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil))) (Compare (Name %1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) (Return #0)) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Return (Name %1 Load))) nil None None) (FunctionDef %12 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %10 %9 %8 %7 %6 %5)) (For (Name %11 Store) (Name %5 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %4 Load) (list (_starred_content (Name %8 Load)) (_starred_content (Name %11 Load))) nil))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %12 Load) nil nil))) (/seq)))",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %3 Store) (Name %6 Load) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (Assign (list (Name %5 Store)) (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil) None) (AugAssign (Name %1 Store) Add (Name %5 Load)) (If (BoolOp And (list (Compare (Name %5 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (Compare #0 (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil))))) (/seq Break) (/seq))) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (Assign (list (Name %5 Store)) (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil) None) (AugAssign (Name %1 Store) Add (Name %5 Load)) (If (Compare (Name %3 Load) (list Eq) (list (Name %2 Load))) (/seq Break) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %7 (arguments nil (list (arg %3 None None) (arg %5 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (List nil Load) None) (For (Name %6 Store) (Name %5 Load) (/seq (Assign (list (Name %2 Store)) (Constant i0 None) None) (For (Name %4 Store) (Name %3 Load) #0 (/seq) None) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %2 Load))) nil))) (/seq) None) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_input Load) nil nil) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %6 (arguments nil (list (arg %2 None None) (arg %4 None None)) None nil nil None nil) (/seq (For (Name %5 Store) (Name %4 Load) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %3 Store) (Name %2 Load) #0 (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %12 %11 %10 %9 %8 %7)) (Expr (Call (Name %6 Load) (list (_starred_content (Name %10 Load)) (_starred_content (Name %7 Load))) nil))) (/seq)))",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %3 Store) (Name %5 Load) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (AugAssign (Name %1 Store) Add (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil)) (If (Compare (Name %3 Load) (list Eq) (list (Name %2 Load))) (/seq Break) (/seq))) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (Assign (list (Name %5 Store)) (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil) None) (AugAssign (Name %1 Store) Add (Name %5 Load)) (If (BoolOp And (list (Compare (Name %5 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content #0)) nil))) (Compare (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))))) (/seq Break) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (AugAssign (Name %1 Store) Add (BinOp #0 Add (Constant i1 None))) (If (Compare (Name %3 Load) (list Eq) (list (Name %2 Load))) (/seq Break) (/seq)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %4 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None) (For (Name %5 Store) (Name %4 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %5 Load))) nil))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &s2:1 &s1:1 &longest_common_prefix:0) (/splice (fn_11 (/seq (/splice (fn_14 (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &word:2 Load)) (_starred_content (Name &query:2 Load))) nil) &steps:2 &query:2 &word:2))) &steps:2 &words:2 &word:2 &queries:2 &query:2 &count_steps:0 &queries:0 &_:4 &Q:0 &words:0 &_:3 &N:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &str2:1 &str1:1 &longest_common_prefix:0 (/choiceseq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTExLCAxMTAsIDEwMywgMTAxLCAxMTUsIDExNiwgMzIsIDk5LCAxMTEsIDEwOSwgMTA5LCAxMTEsIDExMCwgMzIsIDExMiwgMTE0LCAxMDEsIDEwMiwgMTA1LCAxMjAsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExNiwgMTE5LCAxMTEsIDMyLCAxMTUsIDExNiwgMTE0LCAxMDUsIDExMCwgMTAzLCAxMTUsIDQ2XQ== None)))) (FunctionDef &steps_to_find_word:0 (arguments nil (list (arg &database:2 None None) (arg &word:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExNiwgMTAxLCAxMTIsIDExNSwgMzIsIDExMCwgMTAxLCAxMDEsIDEwMCwgMTAxLCAxMDAsIDMyLCAxMTYsIDExMSwgMzIsIDEwMiwgMTA1LCAxMTAsIDEwMCwgMzIsIDk3LCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCA5NywgMTE2LCA5NywgOTgsIDk3LCAxMTUsIDEwMSwgNDZd None)) (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (/seq (AugAssign (Name &steps:2 Store) Add (Constant i1 None)) (Assign (list (Name &lcp_length:2 Store)) (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &word:2 Load)) (_starred_content (Name &db_word:2 Load))) nil) None) (AugAssign (Name &steps:2 Store) Add (Name &lcp_length:2 Load)) (If (Compare (Name &db_word:2 Load) (list Eq) (list (Name &word:2 Load))) (/seq Break) (/seq))) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_9 &N:0 &_:3 &database:0 &Q:0 &_:4 &query_words:0)) (For (Name &word:0 Store) (Name &query_words:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &steps_to_find_word:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &word:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_8 (/seq (AugAssign (Name &step:1 Store) Add (Constant i1 None)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &db_word:1 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &query:1 Load))) nil))) nil))) nil) (/seq (If (Compare (Subscript (Name &db_word:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Subscript (Name &query:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq Break) (/seq)) (AugAssign (Name &step:1 Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Name &db_word:1 Load) (list Eq) (list (Name &query:1 Load))) (/seq Break) (/seq))) &steps:1 &step:1 &database:1 &db_word:1 &queries:1 &query:1 &find_steps:0) (/splice (fn_10 (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:2 &_:3 &database:2 &Q:2 &_:4 &queries:2)) (/splice (fn_15 &queries:2 &database:2 &find_steps:0 &results:2 &res:2))) &main:0))) nil)",
            "(Module (/seq (fn_3 &word2:1 &word1:1 &min_length:1 &i:1 &longest_common_prefix_length:0 (/choiceseq)) (FunctionDef &steps_to_find_word:0 (arguments nil (list (arg &database:2 None None) (arg &query:2 None None)) None nil nil None nil) (/seq (/splice (fn_6 (Name &prefix_length:2 Load) &steps:2 &query:2 &db_word:2 &longest_common_prefix_length:0 &prefix_length:2 &database:2)) (Return (Name &steps:2 Load))) nil None None) (fn_16 &N:0) (Assign (list (Name &database:0 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (fn_16 &Q:0) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &Q:0 Load))) nil) (/seq (Assign (list (Name &query:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &steps_to_find_word:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &query:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_3 &s2:1 &s1:1 &min_length:1 &i:1 &longest_common_prefix:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCAxMDEsIDExMCwgMTAzLCAxMTYsIDEwNCwgMzIsIDExMSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTExLCAxMTAsIDEwMywgMTAxLCAxMTUsIDExNiwgMzIsIDk5LCAxMTEsIDEwOSwgMTA5LCAxMTEsIDExMCwgMzIsIDExMiwgMTE0LCAxMDEsIDEwMiwgMTA1LCAxMjAsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExNiwgMTE5LCAxMTEsIDMyLCAxMTUsIDExNiwgMTE0LCAxMDUsIDExMCwgMTAzLCAxMTUsIDMyLCAxMTUsIDQ5LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE1LCA1MCwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)))) (/splice (fn_5 &steps:2 &word:2 &database:2 &steps_to_find_word:0 &query_words:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &word:3 &main:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExNiwgMTAxLCAxMTIsIDExNSwgMzIsIDExNiwgMTExLCAzMiwgMTAyLCAxMDUsIDExMCwgMTAwLCAzMiwgOTcsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDMyLCAxMDUsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDAsIDk3LCAxMTYsIDk3LCA5OCwgOTcsIDExNSwgMTAxLCAzMiwgOTcsIDk5LCA5OSwgMTExLCAxMTQsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDExNiwgMTExLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTEyLCAxMDEsIDk5LCAxMDUsIDEwMiwgMTA1LCAxMDEsIDEwMCwgMzIsIDk3LCAxMDgsIDEwMywgMTExLCAxMTQsIDEwNSwgMTE2LCAxMDQsIDEwOSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &word:2 &db_word:2 &longest_common_prefix:0 &lcp_len:2) (/seq) None))))) nil)",
            "(Module (/seq (fn_2 &i:1 &word2:1 &word1:1 &longest_common_prefix:0 (/choiceseq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTAxLCAxMTAsIDEwMywgMTE2LCAxMDQsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDExMSwgMTEwLCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5OSwgMTExLCAxMDksIDEwOSwgMTExLCAxMTAsIDMyLCAxMTIsIDExNCwgMTAxLCAxMDIsIDEwNSwgMTIwLCAzMiwgOTgsIDEwMSwgMTE2LCAxMTksIDEwMSwgMTAxLCAxMTAsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDQ5LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCA1MCwgNDZd None)))) (/splice (fn_5 &steps:2 &query:2 &database:2 &steps_to_find_word:0 &queries:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &query:3 &main:0 (/choiceseq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTE1LCAxMTYsIDEwMSwgMTEyLCAxMTUsIDMyLCAxMTAsIDEwMSwgMTAxLCAxMDAsIDEwMSwgMTAwLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDIsIDEwNSwgMTEwLCAxMDAsIDMyLCA5NywgMzIsIDExMywgMTE3LCAxMDEsIDExNCwgMTIxLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAwLCA5NywgMTE2LCA5NywgOTgsIDk3LCAxMTUsIDEwMSwgNDZd None)) (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (fn_12 &steps:2 &query:2 &word:2 &longest_common_prefix:0 &database:2))))) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &s2:1 &s1:1 &longest_common_prefix:0) (FunctionDef &find_steps:0 (arguments nil (list (arg &database:2 None None) (arg &query_word:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &word:2 &query_word:2 &longest_common_prefix:0 &prefix_length:2) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_9 &N:0 &_:3 &database:0 &Q:0 &_:4 &query_words:0)) (For (Name &query_word:0 Store) (Name &query_words:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_steps:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &query_word:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_3 &word2:1 &word1:1 &length:1 &i:1 &longest_common_prefix_len:0 (/choiceseq)) (/splice (fn_9 &n:0 &_:2 &database:0 &q:0 &_:3 &queries:0)) (For (Name &query:0 Store) (Name &queries:0 Load) (/seq (/splice (fn_6 (Name &lcp_length:0 Load) &steps:0 &query:0 &word:0 &longest_common_prefix_len:0 &lcp_length:0 &database:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &steps:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &word2:1 &word1:1 &longest_common_prefix:0) (fn_8 (/seq (Assign (list (Name &prefix_length:2 Store)) (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &word:2 Load)) (_starred_content (Name &query_word:2 Load))) nil) None) (/splice (fn_14 (Name &prefix_length:2 Load) &current_steps:2 &query_word:2 &word:2))) &steps:2 &current_steps:2 &database:2 &word:2 &query_words:2 &query_word:2 &search_steps:0) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &query_words:0)) (/splice (fn_15 &query_words:0 &database:0 &search_steps:0 &steps:0 &step:0))) nil)",
            "(Module (/seq (fn_3 &str2:1 &str1:1 &min_length:1 &i:1 &longest_common_prefix:0 (/choiceseq)) (/splice (fn_5 &steps:2 &word:2 &database:2 &num_of_steps_to_find_word:0 &query_words:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &word:3 &main:0 (/choiceseq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (/seq (/splice (fn_14 (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &word:2 Load)) (_starred_content (Name &db_word:2 Load))) nil) &steps:2 &db_word:2 &word:2))) (/seq) None))))) nil)",
            "(Module (/seq (fn_3 &s2:1 &s1:1 &min_len:1 &i:1 &longest_common_prefix:0 (/choiceseq)) (fn_8 (fn_13 (Name &db_word:2 Load) &total_steps:2 &db_word:2 &query:2 &longest_common_prefix:0 &lcp:2) &steps:2 &total_steps:2 &database:2 &db_word:2 &queries:2 &query:2 &search_steps:0) (/splice (fn_1 (Name g_input Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (/splice (fn_15 &queries:0 &database:0 &search_steps:0 &results:0 &res:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &s2:1 &s1:1 &longest_common_prefix:0 (/choiceseq)) (/splice (fn_5 &steps:2 &query:2 &database:2 &search_steps:0 &queries:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &query:3 &main:0 (/choiceseq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (/seq (Assign (list (Name &lcp:2 Store)) (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &word:2 Load)) (_starred_content (Name &query:2 Load))) nil) None) (/splice (fn_14 (Name &lcp:2 Load) &steps:2 &query:2 &word:2))) (/seq) None))))) nil)",
            "(Module (/seq (fn_2 &i:1 &str2:1 &str1:1 &longest_common_prefix:0 (/choiceseq)) (fn_8 (/seq (/splice (fn_14 (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &query:2 Load)) (_starred_content (Name &db_word:2 Load))) nil) &step:2 &query:2 &db_word:2))) &steps:2 &step:2 &database:2 &db_word:2 &queries:2 &query:2 &search_steps:0) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (/splice (fn_15 &queries:0 &database:0 &search_steps:0 &result:0 &res:0))) (/seq))) nil)",
            "(Module (/seq (fn_3 &b:1 &a:1 &min_len:1 &i:1 &longest_common_prefix:0 (/choiceseq)) (FunctionDef &steps_to_find_word:0 (arguments nil (list (arg &database:2 None None) (arg &word:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (fn_12 &steps:2 &word:2 &db_word:2 &longest_common_prefix:0 &database:2) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_10 (/seq (/splice (fn_1 (Name g_input Load) &N:3 &_:4 &database:3 &Q:3 &_:5 &query_words:3)) (For (Name &word:3 Store) (Name &query_words:3 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &steps_to_find_word:0 Load) (list (_starred_content (Name &database:3 Load)) (_starred_content (Name &word:3 Load))) nil))) nil))) (/seq) None)) &main:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &s2:1 &s1:1 &lcp:0 (/choiceseq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTAxLCAxMTAsIDEwMywgMTE2LCAxMDQsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDExMSwgMTEwLCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5OSwgMTExLCAxMDksIDEwOSwgMTExLCAxMTAsIDMyLCAxMTIsIDExNCwgMTAxLCAxMDIsIDEwNSwgMTIwLCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDQ5LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE1LCA1MCwgNDZd None)))) (/splice (fn_10 (/seq (/splice (fn_1 (Name g_input Load) &N:2 &_:3 &database:2 &Q:2 &_:4 &queries:2)) (For (Name &query:2 Store) (Name &queries:2 Load) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &word:2 &query:2 &lcp:0 &lcp_len:2) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &steps:2 Load))) nil))) (/seq) None)) &main:0))) nil)",
            "(Module (/seq (fn_3 &s2:1 &s1:1 &min_len:1 &i:1 &longest_common_prefix:0 (/choiceseq)) (/splice (fn_5 &steps:2 &word:2 &database:2 &steps_to_find_word:0 &query_words:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &word:3 &main:0 (/choiceseq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &word:2 &db_word:2 &longest_common_prefix:0 &lcp:2) (/seq) None))))) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &s2:1 &s1:1 &longest_common_prefix:0) (fn_8 (/seq (AugAssign (Name &steps:2 Store) Add (Constant i1 None)) (Assign (list (Name &lcp:2 Store)) (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &query:2 Load)) (_starred_content (Name &word:2 Load))) nil) None) (AugAssign (Name &steps:2 Store) Add (Name &lcp:2 Load)) (If (BoolOp And (list (Compare (Name &lcp:2 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &query:2 Load))) nil))) (Compare (Name &lcp:2 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &word:2 Load))) nil))))) (/seq Break) (/seq))) &results:2 &steps:2 &words:2 &word:2 &queries:2 &query:2 &calculate_steps:0) (/splice (fn_10 (/seq (/splice (fn_1 (Name g_input Load) &N:3 &_:4 &words:3 &Q:3 &_:5 &queries:3)) (/splice (fn_15 &queries:3 &words:3 &calculate_steps:0 &results:3 &result:3))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &longest_common_prefix:0 (arguments nil (list (arg &str1:1 None None) (arg &str2:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &i:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &str1:1 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &str2:1 Load))) nil))) nil))) (/seq (If (Compare (Subscript (Name &str1:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Subscript (Name &str2:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq Break) (/seq)) (AugAssign (Name &i:1 Store) Add (Constant i1 None))) (/seq)) (Return (Name &i:1 Load))) nil None None) (/splice (fn_5 &steps:2 &query:2 &database:2 &search_steps:0 &queries:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &query:3 &main:0 (/choiceseq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (/seq (AugAssign (Name &steps:2 Store) Add (BinOp (Constant i1 None) Add (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &db_word:2 Load)) (_starred_content (Name &query:2 Load))) nil))) (If (Compare (Name &db_word:2 Load) (list Eq) (list (Name &query:2 Load))) (/seq Break) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &s2:1 &s1:1 &longest_common_prefix:0) (/splice (fn_11 (fn_7 &steps:2 &query:2 &word:2 &longest_common_prefix:0 &lcp:2) &steps:2 &words:2 &word:2 &queries:2 &query:2 &calculate_steps:0 &queries:0 &_:4 &Q:0 &words:0 &_:3 &N:0))) nil)",
            "(Module (/seq (fn_3 &word2:1 &word1:1 &min_length:1 &i:1 &find_longest_common_prefix:0 (/choiceseq)) (FunctionDef &calculate_steps:0 (arguments nil (list (arg &database:2 None None) (arg &queries:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &result:2 Store)) (List nil Load) None) (For (Name &query:2 Store) (Name &queries:2 Load) (/seq (/splice (fn_6 (Name &lcp_length:2 Load) &steps:2 &query:2 &word:2 &find_longest_common_prefix:0 &lcp_length:2 &database:2)) (Expr (Call (Attribute (Name &result:2 Load) s_append Load) (list (_starred_content (Name &steps:2 Load))) nil))) (/seq) None) (Return (Name &result:2 Load))) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (/splice (fn_15 &queries:0 &database:0 &calculate_steps:0 &result:0 &steps:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &s2:1 &s1:1 &lcp_length:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTAxLCAxMTAsIDEwMywgMTE2LCAxMDQsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDExMSwgMTEwLCAxMDMsIDEwMSwgMTE1LCAxMTYsIDMyLCA5OSwgMTExLCAxMDksIDEwOSwgMTExLCAxMTAsIDMyLCAxMTIsIDExNCwgMTAxLCAxMDIsIDEwNSwgMTIwLCAzMiwgNDAsIDc2LCA2NywgODAsIDQxLCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDExOSwgMTExLCAzMiwgMTE1LCAxMTYsIDExNCwgMTA1LCAxMTAsIDEwMywgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)))) (FunctionDef &search_steps:0 (arguments nil (list (arg &database:2 None None) (arg &queries:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDExMSwgMTE0LCAzMiwgMTAxLCA5NywgOTksIDEwNCwgMzIsIDExMywgMTE3LCAxMDEsIDExNCwgMTIxLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCA0NCwgMzIsIDk5LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMTEsIDEwMiwgMzIsIDExNSwgMTE2LCAxMDEsIDExMiwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMDgsIDEwMywgMTExLCAxMTQsIDEwNSwgMTE2LCAxMDQsIDEwOSwgMzIsIDExNywgMTE1LCAxMDEsIDExNSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &steps:2 Store)) (List nil Load) None) (For (Name &query:2 Store) (Name &queries:2 Load) (/seq (Assign (list (Name &step:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (fn_7 &step:2 &word:2 &query:2 &lcp_length:0 &lcp:2) (/seq) None) (Expr (Call (Attribute (Name &steps:2 Load) s_append Load) (list (_starred_content (Name &step:2 Load))) nil))) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (For (Name &steps:0 Store) (Call (Name &search_steps:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &queries:0 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &steps:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &w2:1 &w1:1 &longest_common_prefix:0) (FunctionDef &search_steps:0 (arguments nil (list (arg &database:2 None None) (arg &query:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &db_word:2 Store) (Name &database:2 Load) (fn_13 (Name &query:2 Load) &steps:2 &db_word:2 &query:2 &longest_common_prefix:0 &lcp_length:2) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_10 (/seq (fn_16 &n:3) (Assign (list (Name &database:3 Store)) (List nil Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) (/seq (Expr (Call (Attribute (Name &database:3 Load) s_append Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil))) (/seq) None) (fn_16 &q:3) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:3 Load))) nil) (/seq (Assign (list (Name &query:3 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &search_steps:0 Load) (list (_starred_content (Name &database:3 Load)) (_starred_content (Name &query:3 Load))) nil))) nil))) (/seq) None)) &main:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &w2:1 &w1:1 &longest_common_prefix:0 (/choiceseq)) (FunctionDef &steps_to_find_word:0 (arguments nil (list (arg &database:2 None None) (arg &query:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &query:2 &word:2 &longest_common_prefix:0 &prefix_length:2) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (For (Name &query:0 Store) (Name &queries:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &steps_to_find_word:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &query:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_4 (Subscript (Name &str1:1 Load) (_slice_slice (Slice None (Name &index:1 Load) None)) Load) &index:1 &str2:1 &str1:1 &longest_common_prefix:0) (fn_8 (/seq (Assign (list (Name &prefix:2 Store)) (Call (Name &longest_common_prefix:0 Load) (list (_starred_content (Name &query:2 Load)) (_starred_content (Name &word:2 Load))) nil) None) (/splice (fn_14 (Call (Name g_len Load) (list (_starred_content (Name &prefix:2 Load))) nil) &total_steps:2 &query:2 &word:2))) &steps:2 &total_steps:2 &database:2 &word:2 &queries:2 &query:2 &search_steps:0) (/splice (fn_9 &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (/splice (fn_15 &queries:0 &database:0 &search_steps:0 &results:0 &result:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &word2:1 &word1:1 &longest_common_prefix:0 (/choiceseq)) (/splice (fn_5 &steps:2 &query:2 &database:2 &count_steps:0 &queries:3 &_:5 &Q:3 &database:3 &_:4 &N:3 &query:3 &main:0 (/choiceseq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (fn_12 &steps:2 &query:2 &db_word:2 &longest_common_prefix:0 &database:2))))) nil)",
            "(Module (/seq (fn_3 &word2:1 &word1:1 &min_length:1 &i:1 &find_longest_common_prefix:0 (/choiceseq)) (/splice (fn_11 (/seq (AugAssign (Name &steps:2 Store) Add (Constant i1 None)) (Assign (list (Name &lcp_length:2 Store)) (Call (Name &find_longest_common_prefix:0 Load) (list (_starred_content (Name &query:2 Load)) (_starred_content (Name &word:2 Load))) nil) None) (AugAssign (Name &steps:2 Store) Add (Name &lcp_length:2 Load)) (If (Compare (Name &lcp_length:2 Load) (list Eq Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &word:2 Load))) nil) (Call (Name g_len Load) (list (_starred_content (Name &query:2 Load))) nil))) (/seq Break) (/seq))) &steps:2 &words:2 &word:2 &queries:2 &query:2 &calculate_steps:0 &queries:0 &_:4 &Q:0 &words:0 &_:3 &N:0))) nil)",
            "(Module (/seq (fn_4 (Name &i:1 Load) &i:1 &str2:1 &str1:1 &longest_common_prefix:0) (fn_8 (fn_7 &step_count:2 &word:2 &query:2 &longest_common_prefix:0 &lcp:2) &steps:2 &step_count:2 &database:2 &word:2 &queries:2 &query:2 &search_steps:0) (/splice (fn_1 (Name g_input Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (/splice (fn_15 &queries:0 &database:0 &search_steps:0 &steps:0 &step:0))) nil)",
            "(Module (/seq (fn_2 &i:1 &word2:1 &word1:1 &longest_common_prefix:0 (/choiceseq)) (FunctionDef &search_steps:0 (arguments nil (list (arg &database:2 None None) (arg &query:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &steps:2 Store)) (Constant i0 None) None) (For (Name &word:2 Store) (Name &database:2 Load) (fn_7 &steps:2 &query:2 &word:2 &longest_common_prefix:0 &common_length:2) (/seq) None) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &query_words:0)) (For (Name &query_word:0 Store) (Name &query_words:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &search_steps:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &query_word:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (fn_2 &i:1 &word2:1 &word1:1 &longest_common_prefix:0 (/choiceseq (Expr (Constant s-WzcwLCAxMTcsIDExMCwgOTksIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExNiwgMTExLCAzMiwgMTAyLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTExLCAxMTAsIDEwMywgMTAxLCAxMTUsIDExNiwgMzIsIDk5LCAxMTEsIDEwOSwgMTA5LCAxMTEsIDExMCwgMzIsIDExMiwgMTE0LCAxMDEsIDEwMiwgMTA1LCAxMjAsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExNiwgMTE5LCAxMTEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDExNSwgNDZd None)))) (FunctionDef &steps_to_find_words:0 (arguments nil (list (arg &database:2 None None) (arg &queries:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExNiwgMTAxLCAxMTIsIDExNSwgMzIsIDExMCwgMTAxLCAxMDEsIDEwMCwgMTAxLCAxMDAsIDMyLCAxMTYsIDExMSwgMzIsIDEwMiwgMTA1LCAxMTAsIDEwMCwgMzIsIDEwMSwgOTcsIDk5LCAxMDQsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDMyLCAxMDUsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTMsIDExNywgMTAxLCAxMTQsIDEwNSwgMTAxLCAxMTUsIDQ2XQ== None)) (For (Name &query:2 Store) (Name &queries:2 Load) (/seq (/splice (fn_6 (Name &prefix_length:2 Load) &steps:2 &query:2 &word:2 &longest_common_prefix:0 &prefix_length:2 &database:2)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &steps:2 Load))) nil))) (/seq) None)) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &queries:0)) (Expr (Call (Name &steps_to_find_words:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil)",
            "(Module (/seq (fn_3 &word2:1 &word1:1 &min_length:1 &i:1 &longest_common_prefix:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODQsIDEwNCwgMTA1LCAxMTUsIDMyLCAxMDIsIDExNywgMTEwLCA5OSwgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTAyLCAxMDUsIDExMCwgMTAwLCAxMTUsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCAxMTQsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCAxMTEsIDExMCwgMTAzLCAxMDEsIDExNSwgMTE2LCAzMiwgOTksIDExMSwgMTA5LCAxMDksIDExMSwgMTEwLCAzMiwgMTEyLCAxMTQsIDEwMSwgMTAyLCAxMDUsIDEyMCwgMzIsIDExMSwgMTAyLCAzMiwgMTE2LCAxMTksIDExMSwgMzIsIDExOSwgMTExLCAxMTQsIDEwMCwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)))) (FunctionDef &steps_to_find_word:0 (arguments nil (list (arg &database:2 None None) (arg &word:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODQsIDEwNCwgMTA1LCAxMTUsIDMyLCAxMDIsIDExNywgMTEwLCA5OSwgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgOTksIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTExLCAxMDIsIDMyLCAxMTUsIDExNiwgMTAxLCAxMTIsIDExNSwgMzIsIDExNiwgMTExLCAzMiwgMTAyLCAxMDUsIDExMCwgMTAwLCAzMiwgOTcsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDMyLCAxMDUsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDAsIDk3LCAxMTYsIDk3LCA5OCwgOTcsIDExNSwgMTAxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDk4LCA5NywgMTE1LCAxMDEsIDEwMCwgMzIsIDExMSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTEyLCAxMDEsIDk5LCAxMDUsIDEwMiwgMTA1LCAxMDEsIDEwMCwgMzIsIDk3LCAxMDgsIDEwMywgMTExLCAxMTQsIDEwNSwgMTE2LCAxMDQsIDEwOSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (/splice (fn_6 (Call (Name g_len Load) (list (_starred_content (Name &word:2 Load))) nil) &steps:2 &word:2 &db_word:2 &longest_common_prefix:0 &lcp_length:2 &database:2)) (Return (Name &steps:2 Load))) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &_:3 &database:0 &Q:0 &_:4 &query_words:0)) (For (Name &word:0 Store) (Name &query_words:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &steps_to_find_word:0 Load) (list (_starred_content (Name &database:0 Load)) (_starred_content (Name &word:0 Load))) nil))) nil))) (/seq) None)) nil)"
        ]
    },
    "311": {
        "abstractions": [
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (BinOp #0 Mod (Name %2 Load)) None) (While (Compare (Name %4 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name %4 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (Name %1 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Assign (list (Name %4 Store)) (BinOp (Name %4 Load) FloorDiv (Constant i2 None)) None) (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %3 None None) (arg %4 None None) (arg %2 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (BinOp (Name %3 Load) Mod (Name %2 Load)) None) (While (Compare (Name %4 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BinOp (Name %4 Load) BitAnd (Constant i1 None)) (/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (Name %1 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Assign (list (Name %4 Store)) (BinOp (Name %4 Load) RShift (Constant i1 None)) None) (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (BinOp (Constant i1 None) Mod (Name %1 Load)))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name %1 Store)) (Call #0 (list (_starred_content (Name %3 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil) None)) (/seq) None) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %1 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq)) (Return (Call #0 (list (_starred_content (Name %1 Load)) (_starred_content (Call (Name %3 Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None))) (_starred_content (Name %2 Load))) nil)) (_starred_content (Name %2 Load))) nil))) nil None None) (Return (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (BinOp (Name %3 Load) Mod (Name %2 Load)) None) (While (Compare (Name %4 Load) (list Gt) (list (Constant i0 None))) (/seq (If (BinOp (Name %4 Load) Mod (Constant i2 None)) (/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (Name %1 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) #0 (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %3 Load)) Mod (Name %2 Load)) None)) (/seq)) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i2 None)) (_starred_content (Constant i42 None))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i5 None)) (_starred_content (Constant i123456789 None))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (/splice (fn_1 (/seq (fn_4 %5 %4) (Return (Call (Name g_pow Load) (list (_starred_content (Name %4 Load)) (_starred_content (Call (Name %3 Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None))) (_starred_content (Name %5 Load))) nil)) (_starred_content (Name %5 Load))) nil))) %5 %4 %3 %2 %1)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (If (Compare (BinOp (Name %4 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name %3 Store)) (BinOp (BinOp (Name %3 Load) Mult (Name %2 Load)) Mod (Name %1 Load)) None)) (/seq)) ?0 (Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) Mult (Name %2 Load)) Mod (Name %1 Load)) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name %1 Store)) (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil) None) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %2 None None) (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq ?0 (/splice (fn_2 (Name %2 Load) %4 %3 %2 %1))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %1 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq)) ?0) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &mod_exp:0 (arguments nil (list (arg &base:1 None None) (arg &exponent:1 None None) (arg &mod:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgOTQsIDEwMSwgMTIwLCAxMTIsIDExMSwgMTEwLCAxMDEsIDExMCwgMTE2LCAzMiwgMTA5LCAxMTEsIDEwMCwgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDEsIDEwMiwgMTAyLCAxMDUsIDk5LCAxMDUsIDEwMSwgMTEwLCAxMTYsIDEwOCwgMTIxLCA0Nl0= None)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (While (Compare (Name &exponent:1 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_13 &mod:1 &base:1 &result:1 &exponent:1 (/choiceseq (AugAssign (Name &exponent:1 Store) RShift (Constant i1 None)))))) (/seq)) (Return (Name &result:1 Load))) nil None None) (/splice (fn_1 (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTIwLCAxMTIsIDExMSwgMTEwLCAxMDUsIDk3LCAxMDgsIDMyLCAxMTEsIDEwMiwgMzIsIDExMCwgMzIsIDEwOSwgMTExLCAxMDAsIDExNywgMTA4LCAxMTEsIDMyLCAxMDksIDQ2XQ== None)) (Assign (list (Name &result:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (fn_12 &n:2) (/seq (If (Compare (Name &m:2 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq)) (Assign (list (Name &result:2 Store)) (Call (Name &mod_exp:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &result:2 Load)) (_starred_content (Name &m:2 Load))) nil) None)) (/seq) None) (Return (Name &result:2 Load))) &m:2 &n:2 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTIwLCAxMTIsIDExMSwgMTEwLCAxMDUsIDk3LCAxMDgsIDMyLCAxMTEsIDEwMiwgMzIsIDExMCwgMzIsIDEwOSwgMTExLCAxMDAsIDExNywgMTA4LCAxMTEsIDMyLCAxMDksIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzJd None)) (FunctionDef &mod_exp:1 (arguments nil (list (arg &base:2 None None) (arg &exp:2 None None) (arg &mod:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &result:2 Store)) (Constant i1 None) None) (Assign (list (Name &base:2 Store)) (BinOp (Name &base:2 Load) Mod (Name &mod:2 Load)) None) (While (Compare (Name &exp:2 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_13 &mod:2 &base:2 &result:2 &exp:2 (/choiceseq))) (AugAssign (Name &exp:2 Store) FloorDiv (Constant i2 None))) (/seq)) (Return (Name &result:2 Load))) nil None None) (/splice (fn_5 (Name &mod_exp:1 Load) &exp:1 &m:1 &i:1 &n:1))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_15 &exp:2 &base:2 &mod:2 &result:2 &mod_exp:1 (/choiceseq)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &result:1 Store)) (Call (Name &mod_exp:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (IfExp (Compare (Name &result:1 Load) (list Lt) (list (Name &m:1 Load))) (Name &result:1 Load) (BinOp (BinOp (Name &result:1 Load) Mod (Name &m:1 Load)) Add (Name &m:1 Load)))) (_starred_content (Name &m:1 Load))) nil) None)) (/seq) None) (Return (Name &result:1 Load))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_18 &n:1) (/splice (fn_5 (Name g_pow Load) &result:1 &m:1 &i:1 &n:1))) &m:1 &n:1 &modular_exponial:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (BinOp (Constant i1 None) Mod (Name &m:1 Load)))) (/seq (Return (Call (Name g_pow Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name &exponial_mod:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &m:1 Load))) nil)) (_starred_content (Name &m:1 Load))) nil))))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (fn_3 &res:1 &p:1 &x:1 &y:1 &power:0) (/splice (fn_1 (/seq (fn_4 &m:2 &n:2) (Return (Call (Name &power:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Call (Name &exponial_mod:0 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &m:2 Load) Sub (Constant i1 None)))) nil)) (_starred_content (Name &m:2 Load))) nil))) &m:2 &n:2 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (FunctionDef &exponial_mod:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None)) None nil nil None nil) (/seq (fn_15 &y:2 &x:2 &p:2 &res:2 &power:1 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDcwLCAxMTcsIDExMCwgOTksIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExNiwgMTExLCAzMiwgOTksIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgNDAsIDEyMCwgOTQsIDEyMSwgNDEsIDMyLCAzNywgMzIsIDExMiwgMzIsIDEwNSwgMTEwLCAzMiwgMTA4LCAxMTEsIDEwMywgOTcsIDExNCwgMTA1LCAxMTYsIDEwNCwgMTA5LCAxMDUsIDk5LCAzMiwgMTE2LCAxMDUsIDEwOSwgMTAxLCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)))) (FunctionDef &exponial:1 (arguments nil (list (arg &n:3 None None) (arg &m:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDcwLCAxMTcsIDExMCwgOTksIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExNiwgMTExLCAzMiwgOTksIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTAxLCAxMjAsIDExMiwgMTExLCAxMTAsIDEwNSwgOTcsIDEwOCwgNDAsIDExMCwgNDEsIDMyLCAzNywgMzIsIDEwOSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzJd None)) (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq (Return (Call (Name &power:1 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Call (Name &exponial:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None))) (_starred_content (Name &m:3 Load))) nil)) (_starred_content (Name &m:3 Load))) nil))))) nil None None) (Return (Call (Name &exponial:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_16) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &exponial_mod:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDExMSwgMTA5LCAxMTIsIDExNywgMTE2LCAxMDEsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDEsIDEyMCwgMTEyLCAxMTEsIDExMCwgMTA1LCA5NywgMTA4LCAzMiwgMTExLCAxMDIsIDMyLCAxMTAsIDMyLCAxMDksIDExMSwgMTAwLCAxMTcsIDEwOCwgMTExLCAzMiwgMTA5LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (fn_4 &m:1 &n:1) (Assign (list (Name &exp:1 Store)) (Call (Name &exponial_mod:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &m:1 Load))) nil) None) (Assign (list (Name &result:1 Store)) (Call (Name g_pow Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &exp:1 Load)) (_starred_content (Name &m:1 Load))) nil) None) (Return (Name &result:1 Load))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_6 (/seq (fn_3 &result:2 &p:2 &x:2 &y:2 &power:1) (fn_18 &n:1) (If (Compare (Name &m:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i0 None))) (/seq)) (/splice (fn_5 (Name &power:1 Load) &result:1 &m:1 &i:1 &n:1))) &m:1 &n:1 &mod_exponial:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_4 &m:1 &n:1) (FunctionDef &helper:1 (arguments nil (list (arg &base:2 None None) (arg &exponent:2 None None) (arg &mod:2 None None)) None nil nil None nil) (/seq (fn_18 &base:2) (If (Compare (Name &exponent:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq (If (Compare (Name &exponent:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (BinOp (Name &base:2 Load) Mod (Name &mod:2 Load)))) (/seq (Assign (list (Name &reduced_exponent:2 Store)) (Call (Name &helper:1 Load) (list (_starred_content (Name &exponent:2 Load)) (_starred_content (Name &mod:2 Load)) (_starred_content (Name &mod:2 Load))) nil) None) (Return (Call (Name g_pow Load) (list (_starred_content (Name &base:2 Load)) (_starred_content (Name &reduced_exponent:2 Load)) (_starred_content (Name &mod:2 Load))) nil))))))) nil None None) (Return (Call (Name &helper:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &m:1 Load))) nil))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (FunctionDef &exponial_mod:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &m:1 Load) (list Eq) (list (Constant i1 None))) (BoolOp And (list (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &m:1 Load) (list NotEq) (list (Constant i1 None))))))) (/seq (Return (Constant i0 None))) (/seq)) (If (BoolOp And (list (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &m:1 Load) (list Eq) (list (Constant i1 None))))) (/seq (Return (Constant i1 None))) (/seq)) (/splice (fn_7 (Name g_pow Load) &n:2 &m:2 &mod_expo:1 &m:1 &n:1))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n_1:0 Store)) (_starred_content (Name &m_1:0 Store))) Store)) (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i42 None))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &n_2:0 Store)) (_starred_content (Name &m_2:0 Store))) Store)) (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i123456789 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &exponial_mod:0 Load) (list (_starred_content (Name &n_1:0 Load)) (_starred_content (Name &m_1:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &exponial_mod:0 Load) (list (_starred_content (Name &n_2:0 Load)) (_starred_content (Name &m_2:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_15 &exponent:1 &base:1 &mod:1 &result:1 &exp_mod:0 (/choiceseq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCA5OCwgOTcsIDExNSwgMTAxLCA5NCwgMTAxLCAxMjAsIDExMiwgMTExLCAxMTAsIDEwMSwgMTEwLCAxMTYsIDMyLCAzNywgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDEsIDEwMiwgMTAyLCAxMDUsIDk5LCAxMDUsIDEwMSwgMTEwLCAxMTYsIDEwOCwgMTIxLCA0Nl0= None)))) (/splice (fn_1 (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMDEsIDEyMCwgMTEyLCAxMTEsIDExMCwgMTA1LCA5NywgMTA4LCA0MCwgMTEwLCA0MSwgMzIsIDM3LCAzMiwgMTA5LCA0Nl0= None)) (fn_4 &m:2 &n:2) (Assign (list (Name &exp:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (fn_12 &n:2) (/seq (Assign (list (Name &exp:2 Store)) (Call (Name &exp_mod:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &exp:2 Load)) (_starred_content (BinOp (Name &m:2 Load) Sub (Constant i1 None)))) nil) None)) (/seq) None) (Return (Call (Name &exp_mod:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &exp:2 Load)) (_starred_content (Name &m:2 Load))) nil))) &m:2 &n:2 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (fn_17 &y:1 &m:1 &x:1 &power:0 (/choiceseq (Assign (list (Name &p:1 Store)) (BinOp (Call (Name &power:0 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (BinOp (Name &y:1 Load) FloorDiv (Constant i2 None))) (_starred_content (Name &m:1 Load))) nil) Mod (Name &m:1 Load)) None) (Assign (list (Name &p:1 Store)) (BinOp (BinOp (Name &p:1 Load) Mult (Name &p:1 Load)) Mod (Name &m:1 Load)) None) (If (fn_11 &y:1) (/seq (Return (Name &p:1 Load))) (/seq (Return (BinOp (BinOp (BinOp (Name &x:1 Load) Mod (Name &m:1 Load)) Mult (Name &p:1 Load)) Mod (Name &m:1 Load))))))) (/splice (fn_6 (/seq (Assign (list (Name &result:2 Store)) (Constant i1 None) None) (For (Name &i:2 Store) (Subscript (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) (/seq (Assign (list (Name &result:2 Store)) (Call (Name &power:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &result:2 Load)) (_starred_content (Name &m:2 Load))) nil) None)) (/seq) None) (Return (Name &result:2 Load))) &m:2 &n:2 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (FunctionDef &exp_mod:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &m:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgOTcsIDk0LCA5OCwgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDksIDMyLCAxMDEsIDEwMiwgMTAyLCAxMDUsIDk5LCAxMDUsIDEwMSwgMTEwLCAxMTYsIDEwOCwgMTIxLCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (/splice (fn_2 (Name &a:2 Load) &result:2 &m:2 &base:2 &b:2))) nil None None) (FunctionDef &compute_exponial_mod:1 (arguments nil (list (arg &n:3 None None) (arg &m:3 None None)) None nil nil None nil) (/seq (fn_4 &m:3 &n:3) (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i2 None))) (/seq (Return (BinOp (Constant i2 None) Mod (Name &m:3 Load)))) (/seq)) (Assign (list (Name &phi_m:3 Store)) (Name &m:3 Load) None) (If (fn_11 &m:3) (/seq (While (fn_11 &m:3) (/seq (AugAssign (Name &m:3 Store) FloorDiv (Constant i2 None))) (/seq)) (AugAssign (Name &phi_m:3 Store) FloorDiv (Constant i2 None))) (/seq)) (Assign (list (Name &p:3 Store)) (Constant i3 None) None) (While (Compare (BinOp (Name &p:3 Load) Mult (Name &p:3 Load)) (list LtE) (list (Name &m:3 Load))) (/seq (If (Compare (BinOp (Name &m:3 Load) Mod (Name &p:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (While (Compare (BinOp (Name &m:3 Load) Mod (Name &p:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &m:3 Store) FloorDiv (Name &p:3 Load))) (/seq)) (Assign (list (Name &phi_m:3 Store)) (BinOp (BinOp (Name &phi_m:3 Load) FloorDiv (Name &p:3 Load)) Mult (BinOp (Name &p:3 Load) Sub (Constant i1 None))) None)) (/seq)) (AugAssign (Name &p:3 Store) Add (Constant i2 None))) (/seq)) (If (Compare (Name &m:3 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &phi_m:3 Store)) (BinOp (BinOp (Name &phi_m:3 Load) FloorDiv (Name &m:3 Load)) Mult (BinOp (Name &m:3 Load) Sub (Constant i1 None))) None)) (/seq)) (Assign (list (Name &inner_mod:3 Store)) (Call (Name &compute_exponial_mod:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None))) (_starred_content (Name &phi_m:3 Load))) nil) None) (Return (Call (Name &exp_mod:1 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &inner_mod:3 Load)) (_starred_content (Name &m:3 Load))) nil))) nil None None) (Return (Call (Name &compute_exponial_mod:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) nil))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (fn_9 (/seq (fn_15 &y:2 &x:2 &p:2 &res:2 &power:1 (/choiceseq)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &result:1 Store)) (Call (Name &power:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &result:1 Load)) (_starred_content (Name &m:1 Load))) nil) None)) (/seq) None) (Return (BinOp (Name &result:1 Load) Mod (Name &m:1 Load)))) &m:1 &n:1 &exponial_mod:0) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (FunctionDef &expmod:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &m:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &b:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant i1 None))) (/seq (If (fn_11 &b:2) (/seq (Return (Call (Name &expmod:1 Load) (list (_starred_content (BinOp (BinOp (Name &a:2 Load) Mult (Name &a:2 Load)) Mod (Name &m:2 Load))) (_starred_content (BinOp (Name &b:2 Load) FloorDiv (Constant i2 None))) (_starred_content (Name &m:2 Load))) nil))) (/seq (Return (BinOp (BinOp (Name &a:2 Load) Mult (Call (Name &expmod:1 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (BinOp (Name &b:2 Load) Sub (Constant i1 None))) (_starred_content (Name &m:2 Load))) nil)) Mod (Name &m:2 Load)))))))) nil None None) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (fn_12 &n:1) (/seq (Assign (list (Name &result:1 Store)) (Call (Name &expmod:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &result:1 Load)) (_starred_content (Name &m:1 Load))) nil) None) (If (Compare (Name &result:1 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq))) (/seq) None) (Return (Name &result:1 Load))) &m:1 &n:1 &mod_exponial:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_17 &exponent:2 &mod:2 &base:2 &mod_exp:1 (/choiceseq (If (fn_11 &exponent:2) (/seq (Return (BinOp (BinOp (Call (Name &mod_exp:1 Load) (list (_starred_content (Name &base:2 Load)) (_starred_content (BinOp (Name &exponent:2 Load) FloorDiv (Constant i2 None))) (_starred_content (Name &mod:2 Load))) nil) Pow (Constant i2 None)) Mod (Name &mod:2 Load)))) (/seq)) (Return (BinOp (BinOp (Name &base:2 Load) Mult (Call (Name &mod_exp:1 Load) (list (_starred_content (Name &base:2 Load)) (_starred_content (BinOp (Name &exponent:2 Load) Sub (Constant i1 None))) (_starred_content (Name &mod:2 Load))) nil)) Mod (Name &mod:2 Load))))) (/splice (fn_7 (Name &mod_exp:1 Load) &n:3 &m:3 &compute_exponial:1 &m:1 &n:1))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (fn_10 &n:0 &m:0 &exponial_mod:0 &n:1 &m:1) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_17 &b:2 &m:2 &a:2 &exp_mod:1 (/choiceseq (If (fn_11 &b:2) (/seq (Return (BinOp (Call (Name &exp_mod:1 Load) (list (_starred_content (BinOp (BinOp (Name &a:2 Load) Mult (Name &a:2 Load)) Mod (Name &m:2 Load))) (_starred_content (BinOp (Name &b:2 Load) FloorDiv (Constant i2 None))) (_starred_content (Name &m:2 Load))) nil) Mod (Name &m:2 Load)))) (/seq (Return (BinOp (BinOp (Name &a:2 Load) Mult (Call (Name &exp_mod:1 Load) (list (_starred_content (BinOp (BinOp (Name &a:2 Load) Mult (Name &a:2 Load)) Mod (Name &m:2 Load))) (_starred_content (BinOp (BinOp (Name &b:2 Load) Sub (Constant i1 None)) FloorDiv (Constant i2 None))) (_starred_content (Name &m:2 Load))) nil)) Mod (Name &m:2 Load))))))) (/splice (fn_14 &result:1 &m:1 &i:1 &exp_mod:1 &n:1)) (Return (Name &result:1 Load))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_3 &res:2 &p:2 &x:2 &y:2 &power:1) (If (Compare (Name &m:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (fn_12 &n:1) (/seq (Assign (list (Name &result:1 Store)) (Call (Name &power:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &result:1 Load)) (_starred_content (BinOp (Name &m:1 Load) Add (Constant i1 None)))) nil) None)) (/seq) None) (Return (BinOp (Name &result:1 Load) Mod (Name &m:1 Load)))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (fn_9 (/seq (fn_4 &m:1 &n:1) (/splice (fn_5 (Name g_pow Load) &result:1 &m:1 &i:1 &n:1))) &m:1 &n:1 &exponial_mod:0) nil)",
            "(Module (fn_10 &n:0 &m:0 &exponial_mod:0 &n:1 &m:1) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_4 &m:1 &n:1) (Assign (list (Name &power:1 Store)) (Call (Name &exponial_mod:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &m:1 Load))) nil) None) (Assign (list (Name &result:1 Store)) (Call (Name g_pow Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &power:1 Load)) (_starred_content (Name &m:1 Load))) nil) None) (Return (Name &result:1 Load))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (fn_10 &n:0 &m:0 &exponial_mod:0 &n:1 &m:1) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_15 &b:2 &a:2 &mod:2 &result:2 &expmod:1 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgOTcsIDk0LCA5OCwgMzIsIDEwOSwgMTExLCAxMDAsIDMyLCAxMDksIDExMSwgMTAwLCAzMiwgMTAxLCAxMDIsIDEwMiwgMTA1LCA5OSwgMTA1LCAxMDEsIDExMCwgMTE2LCAxMDgsIDEyMSwgMzIsIDExNywgMTE1LCAxMDUsIDExMCwgMTAzLCAzMiwgOTgsIDEwNSwgMTEwLCA5NywgMTE0LCAxMjEsIDMyLCAxMDEsIDEyMCwgMTEyLCAxMTEsIDExMCwgMTAxLCAxMTAsIDExNiwgMTA1LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)))) (/splice (fn_7 (Name &expmod:1 Load) &n:3 &m:3 &compute_exponial:1 &m:1 &n:1))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (/splice (fn_6 (/seq (FunctionDef &expmod:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &m:2 None None)) None nil nil None nil) (/seq (/splice (fn_8 (AugAssign (Name &b:2 Store) FloorDiv (Constant i2 None)) &res:2 &m:2 &a:2 &b:2))) nil None None) (/splice (fn_14 &result:1 &m:1 &i:1 &expmod:1 &n:1)) (Return (BinOp (Name &result:1 Load) Mod (Name &m:1 Load)))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (fn_3 &res:1 &p:1 &x:1 &y:1 &power:0) (/splice (fn_6 (/seq (fn_4 &m:2 &n:2) (/splice (fn_5 (Name &power:0 Load) &result:2 &m:2 &i:2 &n:2))) &m:2 &n:2 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (/seq (FunctionDef &exponial_mod:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None)) None nil nil None nil) (/seq (fn_4 &m:1 &n:1) (Assign (list (Name &power:1 Store)) (Call (Name &exponial_mod:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &m:1 Load))) nil) None) (Return (Call (Name g_pow Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &power:1 Load)) (_starred_content (Name &m:1 Load))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_16) None) (Assign (list (Name &result:0 Store)) (Call (Name &exponial_mod:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (FunctionDef &power:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None) (arg &p:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgNDAsIDEyMCwgOTQsIDEyMSwgNDEsIDMyLCAzNywgMzIsIDExMiwgMzIsIDEwMSwgMTAyLCAxMDIsIDEwNSwgOTksIDEwNSwgMTAxLCAxMTAsIDExNiwgMTA4LCAxMjEsIDQ2XQ== None)) (/splice (fn_8 (Assign (list (Name &y:2 Store)) (BinOp (Name &y:2 Load) FloorDiv (Constant i2 None)) None) &res:2 &p:2 &x:2 &y:2))) nil None None) (/splice (fn_5 (Name &power:1 Load) &result:1 &m:1 &i:1 &n:1))) &m:1 &n:1 &exponial_mod:0 &m:0 &n:0))) nil)",
            "(Module (fn_9 (/seq (fn_4 &m:1 &n:1) (Assign (list (Name &result:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (fn_12 &n:1) (/seq (If (Compare (Name &result:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &result:1 Store)) (Call (Name g_pow Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &result:1 Load)) (_starred_content (BinOp (Name &m:1 Load) Sub (Constant i1 None)))) nil) None)) (/seq) None) (Return (BinOp (Name &result:1 Load) Mod (Name &m:1 Load)))) &m:1 &n:1 &exponial_mod:0) nil)"
        ]
    },
    "304": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_sorted Load) (list (_starred_content (ListComp (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %1 Load))) nil) nil i0))))) (list (keyword s_reverse (Constant True None))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (FunctionDef %6 (arguments nil (list (arg %5 None None) (arg %4 None None) (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Return (Name %1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %10 %9 %8 %7 %6))) (/seq)))",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) Add (Constant i1 None)) Mod (Name %1 Load)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content #0)) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute #0 s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute #0 s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute #0 s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %6 Store)) (Call (Name %5 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %6 Load))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(ListComp (Tuple (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_sorted Load) (list (_starred_content #0)) (list (keyword s_reverse (Constant True None)))) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name %1 Load)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (Name %1 Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) Mod (Name %1 Load)) Add (Constant i1 None)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (UnaryOp Not (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Constant True None) None) #0 Break) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (While (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (fn_4 %2 %1)) (/seq)) ?0 (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store)) (Name %4 Load) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %4 Load) (list Gt) (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (UnaryOp USub (Subscript (Name %1 Load) (_slice_content #0) Load)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (FunctionDef %6 (arguments nil (list (arg %5 None None) (arg %4 None None) (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Return (Name %1 Load))) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %10 %9 %8 %7 %6)))",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(ListComp (Tuple (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content #0)) Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(GeneratorExp (Tuple (list (_starred_content (Name %2 Load)) (_starred_content #0)) Load) (list (comprehension (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (fn_3 &victories:1 &elf_strengths:1 &dwarf_strengths:1 &adversaries:1 &n:1 &max_victories:0 &elf_strengths:0 &dwarf_strengths:0 &adversaries:0 &n:0 (/choiceseq (Assign (list (Name &elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_19 (Name &i:2 Load) &elf_strengths:1 &strength:2 &i:2))) nil) None) (Assign (list (Name &dwarves:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (fn_19 (Name &i:3 Load) &dwarf_strengths:1 &strength:3 &i:3))) nil))) nil) None) (fn_8 &n:1 &is_taken:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &elves:1 Load) (/seq (Assign (list (Name &position:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) Sub (Constant i1 None)) None) (While (Constant True None) (/seq (If (BoolOp And (list (UnaryOp Not (Subscript (Name &is_taken:1 Load) (_slice_content (Name &position:1 Load)) Load)) (Compare (Name &elf_strength:1 Load) (list Gt) (list (Subscript (Name &dwarf_strengths:1 Load) (_slice_content (Name &position:1 Load)) Load))))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &is_taken:1 Load) (_slice_content (Name &position:1 Load)) Store)) (Constant True None) None) Break) (/seq)) (fn_4 &n:1 &position:1) (If (Compare (Name &position:1 Load) (list Eq) (list (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) Sub (Constant i1 None)))) (/seq Break) (/seq))) (/seq))) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &n:1 None None) (arg &adversaries:1 None None) (arg &dwarf_strengths:1 None None) (arg &elf_strengths:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dwarfs:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &n:1 &i:2 &dwarf_strengths:1 &adversaries:1))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load))) Load))))) None) (fn_10 &elf_strengths:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf_strength:1 Store) (Name &elf_strengths:1 Load) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &adversary:1 Store)) (_starred_content (Name &dwarf_strength:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarfs:1 Load))) nil) (/seq (If (Compare (Name &dwarf_strength:1 Load) (list Lt) (list (Name &elf_strength:1 Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &dwarfs:1 Load) s_pop Load) (list (_starred_content (Name &i:1 Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &A:0 &P:0 &V:0 &max_victories:0))) nil)",
            "(Module (fn_17 &victories:1 &elves_str:1 &dwarves_str:1 &adversaries:1 &n:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &elf_to_dwarf:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:1 Load)) Load) (list In) (list (Name &elf_to_dwarf:1 Load))) (/seq (Expr (Call (Attribute (Subscript (Name &elf_to_dwarf:1 Load) (_slice_content (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:1 Load)) Load)) Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq (Assign (list (Subscript (Name &elf_to_dwarf:1 Load) (_slice_content (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:1 Load)) Load)) Store)) (List (list (_starred_content (Name &i:1 Load))) Load) None)))) (/seq) None) (fn_8 &n:1 &dwarf_taken:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &sorted_elves:1 Store)) (fn_2 &elves_str:1 &str_:2 &i:2) None) (For (Tuple (list (_starred_content (Name &elf_str:1 Store)) (_starred_content (Name &elf:1 Store))) Store) (Name &sorted_elves:1 Load) (/seq (Assign (list (Name &target_dwarfs:1 Store)) (Subscript (Name &elf_to_dwarf:1 Load) (_slice_content (BinOp (BinOp (Name &elf:1 Load) Add (Constant i1 None)) Mod (Name &n:1 Load))) Load) None) (For (Name &target_dwarf:1 Store) (Name &target_dwarfs:1 Load) (/seq (fn_13 (fn_15 &victories:1 &target_dwarf:1 &dwarves_str:1 &elf_str:1) &target_dwarf:1 &dwarf_taken:1) (fn_4 &n:1 &target_dwarf:1) (While (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &target_dwarf:1 Load)) Load) (/seq (fn_4 &n:1 &target_dwarf:1)) (/seq)) (Assign (list (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &target_dwarf:1 Load)) Store)) (Constant True None) None) (fn_15 &victories:1 &target_dwarf:1 &dwarves_str:1 &elf_str:1) Break) (/seq) None)) (/seq) None))) nil)",
            "(Module (fn_17 &victories:1 &elf_strengths:1 &dwarf_strengths:1 &adversaries:1 &n:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &dwarves_sorted:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_9 &dwarf_strengths:1 &strength:2 &i:2))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load))))) None) (fn_7 (Name &elf_strengths:1 Load) &elves_sorted:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &seats_taken:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &elf_strength:1 Store) (Name &elves_sorted:1 Load) (/seq (For (Tuple (list (_starred_content (Name &j:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &dwarf_ind:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves_sorted:1 Load))) nil) (/seq (Assign (list (Name &target_seat:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &dwarf_ind:1 Load)) Load) Sub (Constant i1 None)) None) (If (Compare (Name &dwarf_strength:1 Load) (list Lt) (list (Name &elf_strength:1 Load))) (/seq (While (Compare (Name &target_seat:1 Load) (list In) (list (Name &seats_taken:1 Load))) (/seq (fn_4 &n:1 &target_seat:1)) (/seq)) (Expr (Call (Attribute (Name &seats_taken:1 Load) s_add Load) (list (_starred_content (Name &target_seat:1 Load))) nil)) (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &dwarves_sorted:1 Load) (_slice_content (Name &j:1 Load)) Store)) (Tuple (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) (_starred_content (Name &dwarf_ind:1 Load))) Load) None) Break) (/seq))) (/seq) None)) (/seq) None))) nil)",
            "(Module (fn_17 &max_victories:1 &elves_strength:1 &dwarves_strength:1 &adversaries:1 &N:1 &max_victories:0 &elves_strength:0 &dwarves_strength:0 &adversaries:0 &N:0 (/choiceseq (fn_10 &elves_strength:1) (Assign (list (Name &dwarves_pos_strength:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &N:1 &i:2 &dwarves_strength:1 &adversaries:1))) (list (keyword s_key (fn_16 (Constant i1 None) &x:3)))) None) (Assign (list (Name &max_victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &dwarves_positions:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (Name &N:1 Load)) None) (For (Name &elf_strength:1 Store) (Name &elves_strength:1 Load) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &dwarf_strength:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves_pos_strength:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))) (Subscript (Name &dwarves_positions:1 Load) (_slice_content (BinOp (Name &pos:1 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name &max_victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &dwarves_positions:1 Load) (_slice_content (BinOp (Name &pos:1 Load) Sub (Constant i1 None))) Store)) (Constant False None) None) Break) (/seq))) (/seq) None)) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_elf_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &elf_possibilities:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:1 Load))) nil) (/seq (Expr (Call (Attribute (Subscript (Name &elf_possibilities:1 Load) (_slice_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Subscript (Name &V:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil))) (/seq) None) (For (Name &poss:1 Store) (Name &elf_possibilities:1 Load) (/seq (fn_10 &poss:1)) (/seq) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &dwarf_strength:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &P:1 Load))) nil) (/seq (For (Name &elf_strength:1 Store) (Subscript (Name &elf_possibilities:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (If (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) Break) (/seq))) (/seq) None)) (/seq) None))) nil)",
            "(Module (fn_17 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (fn_8 &N:1 &challenged:1) (fn_7 (fn_18 (BinOp (Subscript (Name &A:1 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Constant i1 None)) &N:1 &i:2 &V:1) &elves:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &strength:1 Store)) (_starred_content (Name &adversary:1 Store))) Store) (Name &elves:1 Load) (/seq (While (Subscript (Name &challenged:1 Load) (_slice_content (Name &adversary:1 Load)) Load) (/seq (fn_4 &N:1 &adversary:1)) (/seq)) (If (Compare (Subscript (Name &P:1 Load) (_slice_content (Name &adversary:1 Load)) Load) (list Lt) (list (Name &strength:1 Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &challenged:1 Load) (_slice_content (Name &adversary:1 Load)) Store)) (Constant True None) None)) (/seq))) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_wins:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &dwarves_mapping:1 Store)) (DictComp (Name &strength:2 Load) (Name &i:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &strength:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &P:1 Load))) nil) nil i0))) None) (fn_7 (Name &P:1 Load) &dwarves_strength:1) (Assign (list (Name &seats:1 Store)) (fn_11 &N:1) None) (Assign (list (Name &elves:1 Store)) (fn_2 &V:1 &strength:3 &idx:3) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &elf_idx:1 Store))) Store) (Name &elves:1 Load) (/seq (Assign (list (Name &dwarf_idx:1 Store)) (Subscript (Name &dwarves_mapping:1 Load) (_slice_content (Subscript (Name &dwarves_strength:1 Load) (_slice_content (Name &elf_idx:1 Load)) Load)) Load) None) (Assign (list (Name &seat_idx:1 Store)) (BinOp (Subscript (Name &A:1 Load) (_slice_content (Name &dwarf_idx:1 Load)) Load) Sub (Constant i1 None)) None) (/splice (fn_14 &seat_idx:1 &N:1 &seats:1 &elf_idx:1 (/choiceseq (fn_15 &victories:1 &seat_idx:1 &dwarves_strength:1 &elf_strength:1))))) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &calculate_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &seats:1 Store)) (fn_11 &N:1) None) (Assign (list (Name &matchups:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load)) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &target:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:1 Load))) nil) (/seq (Assign (list (Subscript (Name &matchups:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &target:1 Load) Sub (Constant i1 None)) None)) (/seq) None) (Assign (list (Name &sorted_elves:1 Store)) (fn_2 &V:1 &strength:2 &index:2) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &sorted_elves:1 Load) (/seq (Assign (list (Name &seat_index:1 Store)) (Subscript (Name &matchups:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) None) (/splice (fn_14 &seat_index:1 &N:1 &seats:1 &elf_index:1 (/choiceseq (fn_15 &victories:1 &seat_index:1 &P:1 &strength:1))))) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &A:1 None None) (arg &P:1 None None) (arg &V:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &dwarf_strengths:1 Store)) (DictComp (BinOp (Name &i:2 Load) Add (Constant i1 None)) (Name &strength:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &strength:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &P:1 Load))) nil) nil i0))) None) (Assign (list (Name &adversaries:1 Store)) (Dict nil nil) None) (For (Name &a:1 Store) (Name &A:1 Load) (/seq (If (Compare (Name &a:1 Load) (list NotIn) (list (Name &adversaries:1 Load))) (/seq (Assign (list (Subscript (Name &adversaries:1 Load) (_slice_content (Name &a:1 Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &adversaries:1 Load) (_slice_content (Name &a:1 Load)) Store) Add (Constant i1 None))))) (/seq) None) (fn_7 (Name &V:1 Load) &elves:1) (For (Name &elf:1 Store) (Name &elves:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &strongest_dwarf:1 Store)) (_starred_content (Name &strength:1 Store))) Store)) (Call (Name g_max Load) (list (_starred_content (Call (Attribute (Name &dwarf_strengths:1 Load) s_items Load) nil nil))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:3 None None)) None nil nil None nil) (IfExp (BoolOp And (list (Compare (Call (Attribute (Name &adversaries:1 Load) s_get Load) (list (_starred_content (Subscript (Name &x:3 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Constant i0 None))) nil) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load) (list Lt) (list (Name &elf:1 Load))))) (Subscript (Name &x:3 Load) (_slice_content (Constant i1 None)) Load) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil)))) (keyword s_default (Tuple (list (_starred_content (Constant None None)) (_starred_content (Constant None None))) Load)))) None) (If (Compare (Name &strongest_dwarf:1 Load) (list Is) (list (Constant None None))) (/seq Continue) (/seq)) (AugAssign (Subscript (Name &adversaries:1 Load) (_slice_content (Name &strongest_dwarf:1 Load)) Store) Sub (Constant i1 None)) (If (Compare (Subscript (Name &adversaries:1 Load) (_slice_content (Name &strongest_dwarf:1 Load)) Load) (list LtE) (list (Constant i0 None))) (/seq (Delete (list (Subscript (Name &dwarf_strengths:1 Load) (_slice_content (Name &strongest_dwarf:1 Load)) Del)))) (/seq)) (AugAssign (Name &victories:1 Store) Add (Constant i1 None))) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_5 (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) &N:0 &A:0 &P:0 &V:0 &max_victories:0 &result:0))) nil)",
            "(Module (/seq (FunctionDef &find_victories:0 (arguments nil (list (arg &n:1 None None) (arg &elves_to_dwarves:1 None None) (arg &dwarf_strengths:1 None None) (arg &elf_strengths:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &sorted_dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_9 &dwarf_strengths:1 &strength:2 &i:2))) nil) None) (fn_7 (Name &elf_strengths:1 Load) &sorted_elves:1) (Assign (list (Name &claimed_dwarves:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf_strength:1 Store) (Name &sorted_elves:1 Load) (/seq (For (Tuple (list (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &original_position:1 Store))) Store) (Name &sorted_dwarves:1 Load) (/seq (If (Compare (Name &dwarf_strength:1 Load) (list GtE) (list (Name &elf_strength:1 Load))) (/seq Break) (/seq)) (If (Compare (Name &original_position:1 Load) (list In) (list (Name &claimed_dwarves:1 Load))) (/seq Continue) (/seq)) (If (BoolOp And (list (Compare (Name &original_position:1 Load) (list NotIn) (list (Name &claimed_dwarves:1 Load))) (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &claimed_dwarves:1 Load) s_add Load) (list (_starred_content (Name &original_position:1 Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &n:0 &elves_to_dwarves:0 &dwarf_strengths:0 &elf_strengths:0 &find_victories:0))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &adversaries:1 None None) (arg &strengths_dwarves:1 None None) (arg &strengths_elves:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &seats:1 Store)) (fn_11 &N:1) None) (Assign (list (Name &elf_order:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil))) (list (keyword s_key (Lambda (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (Subscript (Name &strengths_elves:1 Load) (_slice_content (Name &i:2 Load)) Load))) (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf_idx:1 Store) (Name &elf_order:1 Load) (/seq (Assign (list (Name &seat:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &elf_idx:1 Load)) Load) Sub (Constant i1 None)) None) (/splice (fn_14 &seat:1 &N:1 &seats:1 &elf_idx:1 (/choiceseq))) (If (Compare (Subscript (Name &strengths_elves:1 Load) (_slice_content (Name &elf_idx:1 Load)) Load) (list Gt) (list (Subscript (Name &strengths_dwarves:1 Load) (_slice_content (Name &seat:1 Load)) Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &adversaries:0 &strengths_dwarves:0 &strengths_elves:0 &max_victories:0))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None) (arg &p:1 None None) (arg &v:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dwarves:1 Store)) (DictComp (BinOp (Name &i:2 Load) Add (Constant i1 None)) (Subscript (Name &p:1 Load) (_slice_content (Name &i:2 Load)) Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &n:1 &i:3 &a:1 &v:1))) (list (keyword s_key (fn_16 (Constant i0 None) &x:4)))) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &occupied:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &elf:1 Store) (Name &elves:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &strength:1 Store)) (_starred_content (Name &target:1 Store))) Store)) (Name &elf:1 Load) None) (While (Compare (Name &target:1 Load) (list In) (list (Name &occupied:1 Load))) (/seq (Assign (list (Name &target:1 Store)) (IfExp (Compare (Name &target:1 Load) (list Lt) (list (Name &n:1 Load))) (BinOp (Name &target:1 Load) Add (Constant i1 None)) (Constant i1 None)) None)) (/seq)) (If (Compare (Subscript (Name &dwarves:1 Load) (_slice_content (Name &target:1 Load)) Load) (list Lt) (list (Name &strength:1 Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Attribute (Name &occupied:1 Load) s_add Load) (list (_starred_content (Name &target:1 Load))) nil))) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &n:0 &a:0 &p:0 &v:0 &max_victories:0))) nil)",
            "(Module (fn_17 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &available:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (Name &N:1 Load)) None) (Assign (list (Name &dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &N:1 &i:2 &A:1 &P:1))) nil) None) (Assign (list (Name &elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &V:1 Load))) nil) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf:1 Store) (Name &elves:1 Load) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &adversary:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves:1 Load))) nil) (/seq (If (BoolOp And (list (Subscript (Name &available:1 Load) (_slice_content (BinOp (Name &adversary:1 Load) Sub (Constant i1 None))) Load) (Compare (Name &elf:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))))) (/seq (Assign (list (Subscript (Name &available:1 Load) (_slice_content (BinOp (Name &adversary:1 Load) Sub (Constant i1 None))) Store)) (Constant False None) None) (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) Break) (/seq)) (fn_12 &N:1 &adversary:1)) (/seq) None)) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &dwarf_strength:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &N:1 &i:2 &A:1 &P:1))) nil) None) (fn_8 &N:1 &dwarf_taken:1) (fn_7 (Name &V:1 Load) &elf_strength:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf:1 Store) (Name &elf_strength:1 Load) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (If (BoolOp And (list (UnaryOp Not (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Compare (Name &elf:1 Load) (list Gt) (list (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load))))) (/seq (Assign (list (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Constant True None) None) (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) Break) (/seq (If (BoolOp And (list (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &i:1 Load)) Load) (Compare (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Constant i1 None)) Mod (Name &N:1 Load))) Load) (_slice_content (Constant i1 None)) Load))))) (/seq (While (BoolOp And (list (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Name &N:1 Load) Sub (Constant i1 None)))) (Compare (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load))))) (/seq (AugAssign (Name &i:1 Store) Add (Constant i1 None))) (/seq))) (/seq (If (UnaryOp Not (Subscript (Name &dwarf_taken:1 Load) (_slice_content (Name &i:1 Load)) Load)) (/seq Break) (/seq))))))) (/seq) None)) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &n:1 None None) (arg &adversaries:1 None None) (arg &dwarf_strengths:1 None None) (arg &elf_strengths:1 None None)) None nil nil None nil) (/seq (fn_8 &n:1 &occupied:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &elf_strengths_sorted:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_enumerate Load) (list (_starred_content (Name &elf_strengths:1 Load)) (_starred_content (Constant i1 None))) nil))) (list (keyword s_key (fn_16 (Constant i1 None) &x:2)))) None) (For (Tuple (list (_starred_content (Name &elf_id:1 Store)) (_starred_content (Name &_:1 Store))) Store) (Name &elf_strengths_sorted:1 Load) (/seq (Assign (list (Name &start_pos:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (BinOp (Name &elf_id:1 Load) Sub (Constant i1 None))) Load) Sub (Constant i1 None)) None) (Assign (list (Name &pos:1 Store)) (Name &start_pos:1 Load) None) (While (Subscript (Name &occupied:1 Load) (_slice_content (Name &pos:1 Load)) Load) (/seq (fn_4 &n:1 &pos:1) (If (Compare (Name &pos:1 Load) (list Eq) (list (Name &start_pos:1 Load))) (/seq Break) (/seq))) (/seq)) (If (BoolOp And (list (UnaryOp Not (Subscript (Name &occupied:1 Load) (_slice_content (Name &pos:1 Load)) Load)) (Compare (Subscript (Name &elf_strengths:1 Load) (_slice_content (BinOp (Name &elf_id:1 Load) Sub (Constant i1 None))) Load) (list Gt) (list (Subscript (Name &dwarf_strengths:1 Load) (_slice_content (Name &pos:1 Load)) Load))))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &occupied:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant True None) None)) (/seq))) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &A:0 &P:0 &V:0 &max_victories:0))) nil)",
            "(Module (fn_17 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &A:1 Store)) (ListComp (BinOp (Name &a:2 Load) Sub (Constant i1 None)) (list (comprehension (Name &a:2 Store) (Name &A:1 Load) nil i0))) None) (Assign (list (Name &P:1 Store)) (fn_9 &P:1 &strength:3 &i:3) None) (Assign (list (Name &V:1 Store)) (fn_2 &V:1 &strength:4 &i:4) None) (fn_8 &N:1 &seat_taken:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &V:1 Load) (/seq (Assign (list (Name &index:1 Store)) (Subscript (Name &A:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) None) (While (Subscript (Name &seat_taken:1 Load) (_slice_content (Name &index:1 Load)) Load) (/seq (fn_4 &N:1 &index:1)) (/seq)) (Assign (list (Subscript (Name &seat_taken:1 Load) (_slice_content (Name &index:1 Load)) Store)) (Constant True None) None) (If (Compare (Name &elf_strength:1 Load) (list Gt) (list (Subscript (Subscript (Name &P:1 Load) (_slice_content (Name &index:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &adversaries:1 None None) (arg &dwarves_strength:1 None None) (arg &elves_strength:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dwarves:1 Store)) (fn_2 &dwarves_strength:1 &strength:2 &pos:2) None) (fn_7 (Name &elves_strength:1 Load) &elves:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (fn_8 &N:1 &seats:1) (For (Name &elf:1 Store) (Name &elves:1 Load) (/seq (For (Tuple (list (_starred_content (Name &dwarf:1 Store)) (_starred_content (Name &pos:1 Store))) Store) (Name &dwarves:1 Load) (/seq (If (Compare (Name &elf:1 Load) (list LtE) (list (Name &dwarf:1 Load))) (/seq Break) (/seq)) (Assign (list (Name &offset_pos:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &pos:1 Load)) Load) Sub (Constant i1 None)) None) (While (Subscript (Name &seats:1 Load) (_slice_content (Name &offset_pos:1 Load)) Load) (/seq (fn_4 &N:1 &offset_pos:1)) (/seq)) (fn_13 (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) &offset_pos:1 &seats:1)) (/seq) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_5 (Call (Name g_input Load) nil nil) &N:0 &adversaries:0 &dwarves_strength:0 &elves_strength:0 &max_victories:0 &max_victories_result:0))) nil)",
            "(Module (fn_17 &victories:1 &elf_strengths:1 &dwarf_strengths:1 &adversaries:1 &n:1 &max_elf_victories:0 &elf_strengths:0 &dwarf_strengths:0 &adversaries:0 &n:0 (/choiceseq (Assign (list (Name &sorted_dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarf_strengths:1 Load))) (list (keyword s_start (Constant i1 None)))))) (list (keyword s_key (fn_20 &x:2)))) None) (Assign (list (Name &sorted_elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_enumerate Load) (list (_starred_content (Name &elf_strengths:1 Load))) (list (keyword s_start (Constant i1 None)))))) (list (keyword s_key (fn_20 &x:3)) (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &available:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &elf_idx:1 Store)) (_starred_content (Name &elf_str:1 Store))) Store) (Name &sorted_elves:1 Load) (/seq (Assign (list (Name &start_pos:1 Store)) (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (BinOp (Name &elf_idx:1 Load) Sub (Constant i1 None))) Load) Sub (Constant i1 None)) None) (Assign (list (Name &pos:1 Store)) (Name &start_pos:1 Load) None) (While (Constant True None) (/seq (If (BoolOp And (list (Subscript (Name &available:1 Load) (_slice_content (Name &pos:1 Load)) Load) (Compare (Name &elf_str:1 Load) (list Gt) (list (Subscript (Subscript (Name &sorted_dwarves:1 Load) (_slice_content (Name &pos:1 Load)) Load) (_slice_content (Constant i1 None)) Load))))) (/seq (Assign (list (Subscript (Name &available:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant False None) None) (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) Break) (/seq)) (fn_4 &n:1 &pos:1) (If (Compare (Name &pos:1 Load) (list Eq) (list (Name &start_pos:1 Load))) (/seq Break) (/seq))) (/seq))) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &elves_strength:1 &dwarves_strength:1 &adversaries:1 &n:1 &max_victories:0 &elves_strength:0 &dwarves_strength:0 &adversaries:0 &n:0 (/choiceseq (fn_10 &elves_strength:1) (fn_8 &n:1 &claimed:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (fn_7 (fn_19 (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:2 Load)) Load) &dwarves_strength:1 &strength:2 &i:2) &dwarves:1) (For (Name &elf_strength:1 Store) (Name &elves_strength:1 Load) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &adversary:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves:1 Load))) nil) (/seq (If (BoolOp And (list (UnaryOp Not (Subscript (Name &claimed:1 Load) (_slice_content (BinOp (Name &adversary:1 Load) Sub (Constant i1 None))) Load)) (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))))) (/seq (Assign (list (Subscript (Name &claimed:1 Load) (_slice_content (BinOp (Name &adversary:1 Load) Sub (Constant i1 None))) Store)) (Constant True None) None) (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) Break) (/seq))) (/seq) None)) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &adversaries:1 None None) (arg &dwarves_strength:1 None None) (arg &elves_strength:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &elves_strength:1 Load) s_sort Load) nil nil)) (Assign (list (Name &dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_19 (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:2 Load)) Load) &dwarves_strength:1 &strength:2 &i:2))) nil) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &occupied:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name &N:1 Load) Add (Constant i1 None))) None) (For (Name &elf:1 Store) (Name &elves_strength:1 Load) (/seq (For (Tuple (list (_starred_content (Name &dwarf:1 Store)) (_starred_content (Name &adversary:1 Store))) Store) (Name &dwarves:1 Load) (/seq (If (Compare (Name &dwarf:1 Load) (list GtE) (list (Name &elf:1 Load))) (/seq Break) (/seq)) (If (UnaryOp Not (Subscript (Name &occupied:1 Load) (_slice_content (Name &adversary:1 Load)) Load)) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (While (Subscript (Name &occupied:1 Load) (_slice_content (Name &adversary:1 Load)) Load) (/seq (fn_12 &N:1 &adversary:1)) (/seq)) (Assign (list (Subscript (Name &occupied:1 Load) (_slice_content (Name &adversary:1 Load)) Store)) (Constant True None) None) Break) (/seq))) (/seq) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &adversaries:0 &dwarves_strength:0 &elves_strength:0 &max_victories:0))) nil)",
            "(Module (fn_3 &victories:1 &elf_strengths:1 &dwarf_strengths:1 &adversaries:1 &N:1 &max_victories:0 &elf_strengths:0 &dwarf_strengths:0 &adversaries:0 &N:0 (/choiceseq (Assign (list (Name &dwarf_map:1 Store)) (DictComp (BinOp (Name &i:2 Load) Add (Constant i1 None)) (Name &strength:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &strength:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarf_strengths:1 Load))) nil) nil i0))) None) (fn_7 (fn_19 (BinOp (Name &i:3 Load) Add (Constant i1 None)) &elf_strengths:1 &strength:3 &i:3) &elves_sorted:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &seats_taken:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Tuple (list (_starred_content (Name &strength:1 Store)) (_starred_content (Name &elf:1 Store))) Store) (Name &elves_sorted:1 Load) (/seq (Assign (list (Name &index:1 Store)) (Subscript (Name &adversaries:1 Load) (_slice_content (BinOp (Name &elf:1 Load) Sub (Constant i1 None))) Load) None) (Assign (list (Name &moved:1 Store)) (Constant True None) None) (While (Name &moved:1 Load) (/seq (If (Compare (Name &index:1 Load) (list NotIn) (list (Name &seats_taken:1 Load))) (/seq (Expr (Call (Attribute (Name &seats_taken:1 Load) s_add Load) (list (_starred_content (Name &index:1 Load))) nil)) (fn_15 &victories:1 &index:1 &dwarf_map:1 &strength:1) Break) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &seats_taken:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &adversaries:1 Load))) nil))) (/seq (Assign (list (Name &moved:1 Store)) (Constant False None) None)) (/seq)) (fn_12 &N:1 &index:1)) (/seq))) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &A:1 None None) (arg &P:1 None None) (arg &V:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &sit:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load)) None) (fn_7 (fn_18 (BinOp (Subscript (Name &A:1 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Constant i1 None)) &N:1 &i:2 &P:1) &dwarf_strength:1) (fn_7 (Name &V:1 Load) &elf_strength:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf:1 Store) (Name &elf_strength:1 Load) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Name &pos:1 Store)) (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load) None) (If (Compare (Subscript (Name &sit:1 Load) (_slice_content (Name &pos:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &victories:1 Store) Add (Compare (Name &elf:1 Load) (list Gt) (list (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)))) (Assign (list (Subscript (Name &sit:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant i1 None) None) Break) (/seq (While (Compare (Subscript (Name &sit:1 Load) (_slice_content (Name &pos:1 Load)) Load) (list NotEq) (list (Constant i0 None))) (/seq (fn_4 &N:1 &pos:1)) (/seq)) (AugAssign (Name &victories:1 Store) Add (Compare (Name &elf:1 Load) (list Gt) (list (Subscript (Subscript (Name &dwarf_strength:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)))) (Assign (list (Subscript (Name &sit:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant i1 None) None) Break))) (/seq) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &A:0 &P:0 &V:0 &max_victories:0))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &adversaries:1 None None) (arg &dwarves_strength:1 None None) (arg &elves_strength:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (fn_8 &N:1 &seated:1) (Assign (list (Name &dwarves:1 Store)) (ListComp (Tuple (list (_starred_content (BinOp (Subscript (Name &adversaries:1 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Constant i1 None))) (_starred_content (Subscript (Name &dwarves_strength:1 Load) (_slice_content (Name &i:2 Load)) Load))) Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) nil i0))) None) (fn_7 (fn_18 (Name &i:3 Load) &N:1 &i:3 &elves_strength:1) &elves:1) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &_:1 Store))) Store) (Name &elves:1 Load) (/seq (Assign (list (Name &index:1 Store)) (Constant None None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &dwarf_pos:1 Store)) (_starred_content (Name &dwarf_strength:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))) (UnaryOp Not (Subscript (Name &seated:1 Load) (_slice_content (Name &dwarf_pos:1 Load)) Load)))) (/seq (Assign (list (Name &index:1 Store)) (Name &i:1 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &index:1 Load) (list IsNot) (list (Constant None None))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &seated:1 Load) (_slice_content (Subscript (Subscript (Name &dwarves:1 Load) (_slice_content (Name &index:1 Load)) Load) (_slice_content (Constant i0 None)) Load)) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &dwarves:1 Load) s_pop Load) (list (_starred_content (Name &index:1 Load))) nil))) (/seq))) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (Assign (list (Name &N:0 Store)) (Constant i3 None) None) (Assign (list (Name &adversaries:0 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None))) Load) None) (Assign (list (Name &dwarves_strength:0 Store)) (List (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) Load) None) (Assign (list (Name &elves_strength:0 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i3 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &max_victories:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &adversaries:0 Load)) (_starred_content (Name &dwarves_strength:0 Load)) (_starred_content (Name &elves_strength:0 Load))) nil))) nil)) (Assign (list (Name &N:0 Store)) (Constant i4 None) None) (Assign (list (Name &adversaries:0 Store)) (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None))) Load) None) (Assign (list (Name &dwarves_strength:0 Store)) (List (list (_starred_content (Constant i5 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i10 None))) Load) None) (Assign (list (Name &elves_strength:0 Store)) (List (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &max_victories:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &adversaries:0 Load)) (_starred_content (Name &dwarves_strength:0 Load)) (_starred_content (Name &elves_strength:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_victories:0 (arguments nil (list (arg &N:1 None None) (arg &A:1 None None) (arg &P:1 None None) (arg &V:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dwarf_positions:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Subscript (Name &dwarf_positions:1 Load) (_slice_content (Subscript (Name &A:1 Load) (_slice_content (Name &i:1 Load)) Load)) Store)) (Name &i:1 Load) None)) (/seq) None) (Assign (list (Name &elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_18 (Name &i:2 Load) &N:1 &i:2 &V:1))) (list (keyword s_key (fn_16 (Constant i0 None) &x:3)))) None) (Assign (list (Name &wins:1 Store)) (Constant i0 None) None) (fn_8 &N:1 &claimed_seats:1) (For (Tuple (list (_starred_content (Name &strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &elves:1 Load) (/seq (Assign (list (Name &start_position:1 Store)) (Subscript (Name &dwarf_positions:1 Load) (_slice_content (Subscript (Name &A:1 Load) (_slice_content (Name &elf_index:1 Load)) Load)) Load) None) (Assign (list (Name &position:1 Store)) (Name &start_position:1 Load) None) (While (Constant True None) (/seq (fn_13 (If (Compare (Subscript (Name &P:1 Load) (_slice_content (Name &position:1 Load)) Load) (list Lt) (list (Name &strength:1 Load))) (/seq (AugAssign (Name &wins:1 Store) Add (Constant i1 None))) (/seq)) &position:1 &claimed_seats:1) (fn_4 &N:1 &position:1) (If (Compare (Name &position:1 Load) (list Eq) (list (Name &start_position:1 Load))) (/seq Break) (/seq))) (/seq))) (/seq) None) (Return (Name &wins:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &A:0 &P:0 &V:0 &max_victories:0))) nil)",
            "(Module (fn_17 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_6 &N:1 &i:2 &A:1 &P:1))) nil) None) (Assign (list (Name &elves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &V:1 Load))) nil) None) (fn_8 &N:1 &dwarves_taken:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf_strength:1 Store) (Name &elves:1 Load) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &label:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &elf_strength:1 Load) (list Gt) (list (Name &dwarf_strength:1 Load))) (UnaryOp Not (Subscript (Name &dwarves_taken:1 Load) (_slice_content (BinOp (Name &label:1 Load) Sub (Constant i1 None))) Load)))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &dwarves_taken:1 Load) (_slice_content (BinOp (Name &label:1 Load) Sub (Constant i1 None))) Store)) (Constant True None) None) Break) (/seq)) (fn_12 &N:1 &label:1)) (/seq) None)) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &max_elf_victories:0 (arguments nil (list (arg &N:1 None None) (arg &A:1 None None) (arg &P:1 None None) (arg &V:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dwarves:1 Store)) (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Name &N:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Subscript (Name &dwarves:1 Load) (_slice_content (BinOp (Subscript (Name &A:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Constant i1 None))) Store)) (Subscript (Name &P:1 Load) (_slice_content (Name &i:1 Load)) Load) None)) (/seq) None) (Assign (list (Name &elves:1 Store)) (fn_2 &V:1 &strength:2 &i:2) None) (Assign (list (Name &quarrels:1 Store)) (BinOp (List (list (_starred_content (Constant True None))) Load) Mult (Name &N:1 Load)) None) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &elves:1 Load) (/seq (Assign (list (Name &pos:1 Store)) (BinOp (Subscript (Name &A:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) Sub (Constant i1 None)) None) (While (Compare (Subscript (Name &quarrels:1 Load) (_slice_content (Name &pos:1 Load)) Load) (list Is) (list (Constant False None))) (/seq (fn_4 &N:1 &pos:1)) (/seq)) (fn_15 &victories:1 &pos:1 &dwarves:1 &elf_strength:1) (Assign (list (Subscript (Name &quarrels:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant False None) None)) (/seq) None) (Return (Name &victories:1 Load))) nil None None) (/splice (fn_1 (Name g_input Load) &N:0 &A:0 &P:0 &V:0 &max_elf_victories:0))) nil)",
            "(Module (/seq (FunctionDef &max_elf_victories:0 (arguments nil (list (arg &n:1 None None) (arg &adversaries:1 None None) (arg &dwarf_strengths:1 None None) (arg &elf_strengths:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &sorted_dwarves:1 Store)) (fn_9 &dwarf_strengths:1 &strength:2 &i:2) None) (fn_10 &sorted_dwarves:1) (Assign (list (Name &sorted_elves:1 Store)) (fn_2 &elf_strengths:1 &strength:3 &i:3) None) (Assign (list (Name &elf_victories:1 Store)) (Constant i0 None) None) (fn_8 &n:1 &taken_dwarves:1) (Assign (list (Name &dwarf_positions:1 Store)) (fn_11 &n:1) None) (For (Tuple (list (_starred_content (Name &index:1 Store)) (_starred_content (Name &adversary:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &adversaries:1 Load))) nil) (/seq (Assign (list (Subscript (Name &dwarf_positions:1 Load) (_slice_content (Name &index:1 Load)) Store)) (BinOp (Name &adversary:1 Load) Sub (Constant i1 None)) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &elf_index:1 Store))) Store) (Name &sorted_elves:1 Load) (/seq (Assign (list (Name &pos:1 Store)) (Subscript (Name &dwarf_positions:1 Load) (_slice_content (Name &elf_index:1 Load)) Load) None) (While (Subscript (Name &taken_dwarves:1 Load) (_slice_content (Name &pos:1 Load)) Load) (/seq (fn_4 &n:1 &pos:1)) (/seq)) (If (Compare (Name &elf_strength:1 Load) (list Gt) (list (Subscript (Name &dwarf_strengths:1 Load) (_slice_content (Name &pos:1 Load)) Load))) (/seq (AugAssign (Name &elf_victories:1 Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &taken_dwarves:1 Load) (_slice_content (Name &pos:1 Load)) Store)) (Constant True None) None)) (/seq))) (/seq) None) (Return (Name &elf_victories:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Name g_input Load) &N:0 &adversaries:0 &dwarf_strengths:0 &elf_strengths:0 &max_elf_victories:0))) (/seq))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (Assign (list (Name &matches:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:1 Load)) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &A:1 Load))) nil) (/seq (Assign (list (Subscript (Name &matches:1 Load) (_slice_content (Name &idx:1 Load)) Store)) (Tuple (list (_starred_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) (_starred_content (Subscript (Name &P:1 Load) (_slice_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &V:1 Load) (_slice_content (Name &idx:1 Load)) Load))) Load) None)) (/seq) None) (Expr (Call (Attribute (Name &matches:1 Load) s_sort Load) nil (list (keyword s_key (fn_20 &x:2))))) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (Assign (list (Name &seats_taken:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &dwarf_strength:1 Store)) (_starred_content (Name &elf_strength:1 Store))) Store) (Name &matches:1 Load) (/seq (If (Compare (Name &dwarf_strength:1 Load) (list Lt) (list (Name &elf_strength:1 Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &seats_taken:1 Load) s_add Load) (list (_starred_content (Name &elf_strength:1 Load))) nil))) (/seq))) (/seq) None))) nil)",
            "(Module (fn_3 &victories:1 &V:1 &P:1 &A:1 &N:1 &find_max_victories:0 &V:0 &P:0 &A:0 &N:0 (/choiceseq (fn_7 (fn_6 &N:1 &i:3 &A:1 &V:1) &elves:1) (Assign (list (Name &dwarves:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (fn_18 (BinOp (Name &i:4 Load) Add (Constant i1 None)) &N:1 &i:4 &P:1))) nil) None) (Assign (list (Name &dwarves_positions:1 Store)) (DictComp (Subscript (Name &dwarf:2 Load) (_slice_content (Constant i1 None)) Load) (Name &i:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &dwarf:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dwarves:1 Load))) nil) nil i0))) None) (fn_8 &N:1 &occupied:1) (Assign (list (Name &victories:1 Store)) (Constant i0 None) None) (For (Name &elf:1 Store) (Name &elves:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &elf_strength:1 Store)) (_starred_content (Name &dwarf_target:1 Store))) Store)) (Name &elf:1 Load) None) (Assign (list (Name &position:1 Store)) (Subscript (Name &dwarves_positions:1 Load) (_slice_content (Name &dwarf_target:1 Load)) Load) None) (Assign (list (Name &found:1 Store)) (Constant False None) None) (For (Name &offset:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (Assign (list (Name &next_position:1 Store)) (BinOp (BinOp (Name &position:1 Load) Add (Name &offset:1 Load)) Mod (Name &N:1 Load)) None) (If (UnaryOp Not (Subscript (Name &occupied:1 Load) (_slice_content (Name &next_position:1 Load)) Load)) (/seq (If (Compare (Name &elf_strength:1 Load) (list Gt) (list (Subscript (Subscript (Name &dwarves:1 Load) (_slice_content (Name &next_position:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (AugAssign (Name &victories:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Subscript (Name &occupied:1 Load) (_slice_content (Name &next_position:1 Load)) Store)) (Constant True None) None) (Assign (list (Name &found:1 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (Name &found:1 Load) (/seq Continue) (/seq Break))) (/seq) None))) nil)"
        ]
    },
    "694": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (Call (Name g_sum Load) (list (_starred_content (Name %1 Load))) nil) Sub (BinOp (BinOp #0 Mult (BinOp #0 Sub (Constant i1 None))) FloorDiv (Constant i2 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp And (list (Compare (Name %2 Load) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i2 None))) Load) (list Eq) (list (BinOp (Subscript (Name %1 Load) (_slice_content #0) Load) Sub (Constant i1 None))))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) ?0) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %5 %4)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (FunctionDef %3 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Name g_input Load) %2 %1)) (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) ?0) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %3 Load) nil nil))) (/seq)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (BinOp #0 Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp And (list (Compare (Name %1 Load) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name %2 Load) (_slice_content #0) Load) (list Eq) (list (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i2 None))) Load) Add (Constant i1 None))))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If (BoolOp And (list (Compare (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None))) #0)) (/seq (Return (Constant s_cslnb None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_cslnb None))) nil)) (Return None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Return (IfExp (Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Constant s_sjfnb None) (Constant s_cslnb None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil nil)) ?0) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name %4 Load))) nil) (/seq (If (fn_2 %3 %2) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) ?0) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_cslnb None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_sjfnb None))) nil))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(GeneratorExp (fn_2 %2 %3) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(fn_7 (BinOp (Name %2 Load) Sub (BinOp (BinOp (Name %1 Load) Mult (BinOp (Name %1 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i3 None) None) (Assign (list (Name %2 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_cslnb None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (BinOp #0 Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_sjfnb None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_cslnb None))) nil))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_cslnb None))) nil)) (Expr (Call (Name g_exit Load) nil nil)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list Eq) (list (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None)) (If #0 (fn_10) (/seq))) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i2 None))) Load) Add (Constant i1 None)) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (If (BoolOp Or (list (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name %2 Load) Sub (Constant i1 None)) (list In) (list (Name %1 Load))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (AugAssign (Name %3 Store) Add (Constant i1 None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (BoolOp Or (list (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Constant i0 None))) (fn_4 (Name %1 Load) %2 %1))) (/seq (Return (Constant s_cslnb None))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (fn_7 #0) (/seq (Return (Constant s_cslnb None))) (/seq (Return (Constant s_sjfnb None))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Call (Attribute (Name %1 Load) s_count Load) (list (_starred_content (Constant i0 None))) nil) (list Gt) (list (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (/splice (fn_1 (Name g_input Load) %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) nil) (/seq (If (fn_2 %2 %1) #0 (/seq))) (/seq) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_12 &piles:1 &n:1 &determine_winner:0 (/choiceseq (Assign (list (Name &special_case:1 Store)) (Constant i0 None) None) (fn_13 &special_case:1 &piles:1 &i:1 &n:1 (/choiceseq)) (If (BoolOp Or (list (Compare (Name &special_case:1 Load) (list Gt) (list (Constant i1 None))) (BoolOp And (list (fn_26 &piles:1) (Compare (Name &special_case:1 Load) (list Eq) (list (Constant i1 None))))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (BinOp (Subscript (Name &piles:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Add (Constant i1 None)))) (/seq (AugAssign (Name &special_case:1 Store) Add (Constant i1 None)) Break) (/seq))) (/seq) None) (Assign (list (Name &moves:1 Store)) (BinOp (fn_3 (Name &n:1 Load) &piles:1) Add (Name &special_case:1 Load)) None) (Return (IfExp (BinOp (Name &moves:1 Load) Mod (Constant i2 None)) (Constant s_sjfnb None) (Constant s_cslnb None))))) (/splice (fn_28 &piles:0 &n:0 &determine_winner:0))) nil)",
            "(Module (/seq (fn_12 &a:1 &n:1 &find_winner:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &ai:2 Load) Sub (Name &i:2 Load)) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &ai:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &a:1 Load))) nil) nil i0))))) nil) None) (fn_9 (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) &a:1) (If (BoolOp And (list (Call (Name g_any Load) (list (_starred_content (fn_15 &n:1 &i:3 &a:1))) nil) (BoolOp Or (list (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:5 Load)) Load) (list Eq) (list (BinOp (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:5 Load) Sub (Constant i1 None))) Load) Sub (Constant i1 None)))) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil) (fn_27 &a:1))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (BoolOp And (list (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Call (Attribute (Name &a:1 Load) s_count Load) (list (_starred_content (Name &ai:4 Load))) nil) (list Gt) (list (Constant i1 None))) (list (comprehension (Name &ai:4 Store) (Call (Name g_set Load) (list (_starred_content (Name &a:1 Load))) nil) nil i0))))) nil) (UnaryOp Not (Call (Name g_all Load) (list (_starred_content (GeneratorExp (Compare (Name &ai:6 Load) (list Gt) (list (Constant i0 None))) (list (comprehension (Name &ai:6 Store) (Name &a:1 Load) nil i0))))) nil)))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Return (IfExp (fn_7 (Name &moves:1 Load)) (Constant s_sjfnb None) (Constant s_cslnb None))))) (/splice (fn_28 &a:0 &n:0 &find_winner:0))) nil)",
            "(Module (fn_5 &piles:1 &n:1 &who_wins:0 &piles:0 &n:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Subscript (Name &piles:1 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Name &i:2 Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil) None) (Assign (list (Name &doubles:1 Store)) (Call (Name g_sum Load) (list (_starred_content (fn_15 &n:1 &i:3 &piles:1))) nil) None) (If (BoolOp Or (list (BoolOp And (list (fn_26 &piles:1) (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))))) (fn_7 (Name &moves:1 Load)) (Compare (Name &doubles:1 Load) (list Gt) (list (Constant i1 None))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (BoolOp And (list (fn_2 &i:4 &piles:1) (BoolOp Or (list (Compare (Subscript (Name &piles:1 Load) (_slice_content (Name &i:4 Load)) Load) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &piles:1 Load) (_slice_content (Name &i:4 Load)) Load) Sub (Constant i1 None)) (list Eq) (list (Subscript (Name &piles:1 Load) (_slice_content (BinOp (Name &i:4 Load) Sub (Constant i2 None))) Load))))))) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil))) (/seq (Return (Constant s_cslnb None))) (/seq (Return (Constant s_sjfnb None)))))) nil)",
            "(Module (/seq (FunctionDef &determine_winner:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil nil)) (Assign (list (Name &moves:1 Store)) (fn_3 (Call (Name g_len Load) (list (_starred_content (Name &a:1 Load))) nil) &a:1) None) (Assign (list (Name &special_losing_cases:1 Store)) (Constant i0 None) None) (fn_29 (/seq (AugAssign (Name &special_losing_cases:1 Store) Add (Constant i1 None)) (If (BoolOp Or (list (Compare (Name &special_losing_cases:1 Load) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (fn_8 (Name &i:1 Load) &i:1 &a:1))) (/seq (Return (Constant s_cslnb None))) (/seq)) (AugAssign (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Constant i1 None)) (AugAssign (Name &moves:1 Store) Sub (Constant i1 None))) &a:1 &i:1) (fn_11 &moves:1)) nil None None) (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_winner:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &winner:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil nil)) (Assign (list (Name &moves:1 Store)) (fn_3 (Call (Name g_len Load) (list (_starred_content (Name &a:1 Load))) nil) &a:1) None) (fn_29 (/seq (fn_24 &i:1 &a:1) (AugAssign (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Store) Sub (Constant i1 None)) (AugAssign (Name &moves:1 Store) Sub (Constant i1 None)) Break) &a:1 &i:1) (fn_11 &moves:1)) nil None None) (/splice (fn_1 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &winner:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_12 &a:1 &n:1 &determine_winner:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &pj:1 Store)) (_starred_content (Name &ps:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (fn_13 &pj:1 &a:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (Compare (Name &i:1 Load) (list Eq) (list (Constant i1 None))) (fn_22 &i:1 &a:1))) (/seq (Assign (list (Name &ps:1 Store)) (Constant i1 None) None)) (/seq)) (AugAssign (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Constant i1 None)))) (fn_18 &pj:1) (Assign (list (Name &s:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:1 Load))) nil) None) (If (BoolOp Or (list (fn_16 &n:1 &s:1) (Name &ps:1 Load))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Return (Constant s_sjfnb None)))) (/splice (fn_17 &n:0 &a:0 &determine_winner:0))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &game_result:0 (/choiceseq (Assign (list (Name &special_case:1 Store)) (Constant i0 None) None) (For (Name &pile:1 Store) (Name &piles:1 Load) (/seq (If (Compare (Call (Attribute (Name &piles:1 Load) s_count Load) (list (_starred_content (Name &pile:1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Call (Attribute (Name &piles:1 Load) s_count Load) (list (_starred_content (Name &pile:1 Load))) nil) (list Gt) (list (Constant i2 None))) (/seq (Return (Constant s_cslnb None))) (/seq)) (/splice (fn_23 &piles:1 &pile:1 &special_case:1))) (/seq)) (fn_18 &special_case:1)) (/seq) None) (Assign (list (Name &total_moves:1 Store)) (fn_3 (Name &n:1 Load) &piles:1) None) (fn_25 (Name &total_moves:1 Load)))) (/splice (fn_17 &n1:0 &piles1:0 &game_result:0))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (If (BoolOp And (list (fn_26 &a:0) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (fn_20) (/seq)) (Assign (list (Name &move_made:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_2 &i:0 &a:0) (/seq (If (BoolOp Or (list (Name &move_made:0 Load) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i1 None))) (fn_4 (Name &i:0 Load) &a:0 &i:0))) (fn_20) (/seq)) (AugAssign (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Store) Sub (Constant i1 None)) (Assign (list (Name &move_made:0 Store)) (Constant True None) None)) (/seq))) (/seq) None) (fn_14 (fn_7 (fn_3 (Name &n:0 Load) &a:0)))) nil)",
            "(Module (/seq (fn_12 &a:1 &n:1 &game_outcome:0 (/choiceseq (Assign (list (Name &s:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &a:1 Load))) nil) None) (fn_9 (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) &a:1) (Assign (list (Name &duplicates:1 Store)) (Constant i0 None) None) (fn_13 &duplicates:1 &a:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (Compare (Name &duplicates:1 Load) (list Gt) (list (Constant i1 None))) (fn_4 (BinOp (Name &i:1 Load) Sub (Constant i1 None)) &a:1 &i:1))) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant s_cslnb None))) (/seq)))) (Return (IfExp (fn_16 &n:1 &s:1) (Constant s_cslnb None) (Constant s_sjfnb None))))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 (Name g_input Load) &n:0 &a:0)) (Assign (list (Name &result:0 Store)) (Call (Name &game_outcome:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq))) nil)",
            "(Module (fn_6 &a:1 &n:1 &main:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (fn_3 (Name &n:1 Load) &a:1) None) (If (BoolOp And (list (fn_26 &a:1) (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None))))) (fn_10) (/seq)) (Assign (list (Name &same_count:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_2 &i:1 &a:1) (/seq (If (fn_4 (Name &i:1 Load) &a:1 &i:1) (fn_10) (/seq)) (AugAssign (Name &same_count:1 Store) Add (Constant i1 None))) (/seq)) (If (Compare (Name &same_count:1 Load) (list Gt) (list (Constant i1 None))) (fn_10) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (BinOp (Name &moves:1 Load) Sub (Name &same_count:1 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (Constant s_sjfnb None) (Constant s_cslnb None)))) nil)))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:1 &a:1)) (Expr (Call (Attribute (Name &a:1 Load) s_sort Load) nil nil)) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (fn_10) (/seq)) (Assign (list (Name &same_number:1 Store)) (Constant i0 None) None) (Assign (list (Name &zero_count:1 Store)) (Call (Attribute (Name &a:1 Load) s_count Load) (list (_starred_content (Constant i0 None))) nil) None) (fn_21 (BoolOp Or (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (list Eq) (list (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Constant i1 None)))))))) &same_number:1 &i:1 &a:1 &n:1) (If (Compare (Name &same_number:1 Load) (list Gt) (list (Constant i1 None))) (fn_10) (/seq)) (Assign (list (Name &moves:1 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:1 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil))) nil)) None) (fn_19 (Name &moves:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &who_wins:0 (/choiceseq (Assign (list (Name &cnt:1 Store)) (Dict nil nil) None) (For (Name &pile:1 Store) (Name &piles:1 Load) (/seq (If (Compare (Name &pile:1 Load) (list In) (list (Name &cnt:1 Load))) (/seq (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &pile:1 Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name &cnt:1 Load) (_slice_content (Name &pile:1 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (If (BoolOp Or (list (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &pile:3 Load)) Load) (list Gt) (list (Constant i2 None))) (list (comprehension (Name &pile:3 Store) (Name &cnt:1 Load) nil i0))))) nil) (Call (Name g_any Load) (list (_starred_content (fn_15 &n:1 &i:4 &piles:1))) nil))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &ones:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Constant i1 None) (list (comprehension (Name &pile:2 Store) (Name &cnt:1 Load) (list (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &pile:2 Load)) Load) (list Eq) (list (Constant i2 None)))) i0))))) nil) None) (If (BoolOp Or (list (Compare (Name &ones:1 Load) (list Gt) (list (Constant i1 None))) (BoolOp And (list (Compare (Name &ones:1 Load) (list Eq) (list (Constant i1 None))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (BoolOp And (list (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &pile:5 Load)) Load) (list Eq) (list (Constant i2 None))) (Compare (BinOp (Name &pile:5 Load) Sub (Constant i1 None)) (list In) (list (Name &cnt:1 Load))))) (list (comprehension (Name &pile:5 Store) (Name &cnt:1 Load) nil i0))))) nil))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (BoolOp And (list (Compare (Name &ones:1 Load) (list Eq) (list (Constant i1 None))) (Compare (Constant i0 None) (list In) (list (Name &cnt:1 Load))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &is_even:1 Store)) (fn_7 (fn_3 (Name &n:1 Load) &piles:1)) None) (Return (IfExp (Name &is_even:1 Load) (Constant s_cslnb None) (Constant s_sjfnb None))))) (Assign (list (Name &n:0 Store)) (Constant i2 None) None) (Assign (list (Name &piles:0 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &who_wins:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &piles:0 Load))) nil))) nil))) nil)",
            "(Module (fn_5 &stones:1 &n:1 &game_result:0 &stones:0 &n:0 (/choiceseq (fn_9 (fn_27 &stones:1) &stones:1) (Assign (list (Name &duplicate_found:1 Store)) (Constant False None) None) (Assign (list (Name &moves:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_2 &i:1 &stones:1) (/seq (If (BoolOp Or (list (Name &duplicate_found:1 Load) (Compare (Subscript (Name &stones:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i1 None))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (fn_4 (Name &i:1 Load) &stones:1 &i:1) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &duplicate_found:1 Store)) (Constant True None) None)) (/seq)) (AugAssign (Name &moves:1 Store) Add (BinOp (Subscript (Name &stones:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Name &i:1 Load)))) (/seq) None) (If (Compare (Subscript (Name &stones:1 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &moves:1 Store) Add (Subscript (Name &stones:1 Load) (_slice_content (Constant i0 None)) Load))) (/seq)) (fn_25 (Name &moves:1 Load)))) nil)",
            "(Module (/seq (fn_12 &a:1 &n:1 &who_wins:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (fn_3 (Name &n:1 Load) &a:1) None) (Assign (list (Name &doubles:1 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (fn_2 &i:2 &a:1) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil) None) (fn_18 &doubles:1) (If (Compare (Name &doubles:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &idx:1 Store)) (Subscript (ListComp (Name &i:3 Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (list (fn_2 &i:3 &a:1)) i0))) (_slice_content (Constant i0 None)) Load) None) (fn_24 &idx:1 &a:1)) (/seq)) (fn_11 &moves:1))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &who_wins:0 Load) (list (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None))) Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &game_winner:0 (/choiceseq (fn_9 (Compare (Subscript (Name &piles:1 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))) &piles:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_2 &i:1 &piles:1) (/seq (If (fn_4 (BinOp (Name &i:1 Load) Sub (Constant i1 None)) &piles:1 &i:1) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (BoolOp And (list (Compare (Name &i:1 Load) (list Eq) (list (Constant i1 None))) (fn_26 &piles:1))) (/seq (Return (Constant s_cslnb None))) (/seq)) (AugAssign (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Constant i1 None)) Break) (/seq))) (/seq) None) (Assign (list (Name &sum_piles:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &piles:1 Load))) nil) None) (If (fn_7 (Name &sum_piles:1 Load)) (/seq (Return (Constant s_cslnb None))) (/seq)) (Return (Constant s_sjfnb None)))) (/splice (fn_1 (Name g_input Load) &n:0 &piles:0)) (Assign (list (Name &winner:0 Store)) (Call (Name &game_winner:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &piles:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &winner:0 Load))) nil))) nil)",
            "(Module (fn_6 &a:1 &n:1 &main:0 (/choiceseq (Assign (list (Name &special_cases:1 Store)) (Constant i0 None) None) (fn_21 (BoolOp Or (list (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Constant i1 None)) (list Eq) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))))) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))))) &special_cases:1 &i:1 &a:1 &n:1) (If (Compare (Name &special_cases:1 Load) (list Gt) (list (Constant i1 None))) (fn_10) (/seq)) (Assign (list (Name &total_moves:1 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:1 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil))) nil)) None) (fn_14 (fn_7 (Name &total_moves:1 Load))))) nil)",
            "(Module (fn_5 &piles:1 &n:1 &game_result:0 &piles:0 &n:0 (/choiceseq (Assign (list (Name &same_count:1 Store)) (Constant i0 None) None) (fn_13 &same_count:1 &piles:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (Compare (Name &same_count:1 Load) (list Gt) (list (Constant i1 None))) (fn_8 (Name &i:1 Load) &i:1 &piles:1) (Compare (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant s_cslnb None))) (/seq)))) (fn_18 &same_count:1) (Assign (list (Name &sum_piles:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &piles:1 Load))) nil) None) (If (fn_16 &n:1 &sum_piles:1) (/seq (Return (Constant s_cslnb None))) (/seq (Return (Constant s_sjfnb None)))))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (FunctionDef &is_possible:0 (arguments nil (list (arg &a:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &duplicate_count:1 Store)) (Constant i0 None) None) (fn_29 (/seq (AugAssign (Name &duplicate_count:1 Store) Add (Constant i1 None)) (If (Compare (Name &duplicate_count:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq)) (If (fn_8 (Name &i:1 Load) &i:1 &a:1) (/seq (Return (Constant False None))) (/seq)) (If (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) (/seq))) &a:1 &i:1) (Return (Constant True None))) nil None None) (FunctionDef &determine_winner:0 (arguments nil (list (arg &a:2 None None)) None nil nil None nil) (/seq (If (UnaryOp Not (Call (Name &is_possible:0 Load) (list (_starred_content (Name &a:2 Load))) nil)) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &moves:2 Store)) (fn_3 (Call (Name g_len Load) (list (_starred_content (Name &a:2 Load))) nil) &a:2) None) (fn_25 (Name &moves:2 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_winner:0 Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_12 &stones:1 &n:1 &game_result:0 (/choiceseq (Assign (list (Name &sum_stones:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &stones:1 Load))) nil) None) (Assign (list (Name &unique_stones:1 Store)) (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &stones:1 Load))) nil))) nil) None) (If (BoolOp Or (list (BoolOp And (list (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None))) (fn_26 &stones:1) (Compare (Subscript (Name &stones:1 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i0 None))))) (Call (Name g_any Load) (list (_starred_content (fn_15 &n:1 &i:3 &stones:1))) nil))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &pairs:1 Store)) (Call (Name g_sum Load) (list (_starred_content (fn_15 &n:1 &i:2 &stones:1))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (BoolOp And (list (fn_2 &i:1 &stones:1) (Compare (BinOp (Subscript (Name &stones:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Constant i1 None)) (list In) (list (Subscript (Name &stones:1 Load) (_slice_slice (Slice None (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None)) Load))))) (/seq (Return (Constant s_cslnb None))) (/seq))) (/seq) None) (Assign (list (Name &moves:1 Store)) (BinOp (Name &sum_stones:1 Load) Sub (Name &unique_stones:1 Load)) None) (fn_11 &moves:1))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &game_result:0 Load) (list (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &game_result:0 Load) (list (_starred_content (Constant i2 None)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &game_result:0 Load) (list (_starred_content (Constant i2 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &game_result:0 Load) (list (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None))) Load))) nil))) nil))) nil)",
            "(Module (fn_5 &piles:1 &n:1 &game_outcome:0 &piles:0 &n:0 (/choiceseq (Assign (list (Name &same_count:1 Store)) (Constant i0 None) None) (fn_13 &same_count:1 &piles:1 &i:1 &n:1 (/choiceseq)) (fn_18 &same_count:1) (fn_9 (Compare (Name &same_count:1 Load) (list Eq) (list (Constant i1 None))) &piles:1) (If (Compare (Name &same_count:1 Load) (list Eq) (list (Constant i1 None))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (BoolOp And (list (fn_2 &i:1 &piles:1) (BoolOp Or (list (fn_8 (BinOp (Name &i:1 Load) Sub (Constant i1 None)) &i:1 &piles:1) (Compare (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i1 None))))))) (/seq (Return (Constant s_cslnb None))) (/seq))) (/seq) None)) (/seq)) (Assign (list (Name &total_stones:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &piles:1 Load))) nil) None) (fn_25 (BinOp (Name &total_stones:1 Load) Sub (Name &n:1 Load))))) nil)",
            "(Module (fn_6 &a:1 &n:1 &main:0 (/choiceseq (If (fn_27 &a:1) (fn_10) (/seq)) (Assign (list (Name &duplicates:1 Store)) (Constant i0 None) None) (fn_13 &duplicates:1 &a:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))) (BoolOp And (list (Compare (Name &i:1 Load) (list GtE) (list (Constant i2 None))) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (BinOp (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i2 None))) Load) Add (Constant i1 None)))))))) (fn_10) (/seq)))) (If (Compare (Name &duplicates:1 Load) (list Gt) (list (Constant i1 None))) (fn_10) (/seq)) (Assign (list (Name &total_moves:1 Store)) (fn_3 (Name &n:1 Load) &a:1) None) (fn_14 (fn_7 (Name &total_moves:1 Load))))) nil)",
            "(Module (fn_5 &piles:1 &n:1 &who_wins:0 &piles:0 &n:0 (/choiceseq (Assign (list (Name &count:1 Store)) (Dict nil nil) None) (For (Name &pile:1 Store) (Name &piles:1 Load) (/seq (If (Compare (Name &pile:1 Load) (list NotIn) (list (Name &count:1 Load))) (/seq (Assign (list (Subscript (Name &count:1 Load) (_slice_content (Name &pile:1 Load)) Store)) (Constant i0 None) None)) (/seq)) (AugAssign (Subscript (Name &count:1 Load) (_slice_content (Name &pile:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &have_dup:1 Store)) (Constant i0 None) None) (For (Name &key:1 Store) (Name &count:1 Load) (/seq (If (Compare (Subscript (Name &count:1 Load) (_slice_content (Name &key:1 Load)) Load) (list Gt) (list (Constant i2 None))) (/seq (Return (Constant s_cslnb None))) (/seq)) (If (Compare (Subscript (Name &count:1 Load) (_slice_content (Name &key:1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (/splice (fn_23 &count:1 &key:1 &have_dup:1))) (/seq))) (/seq) None) (fn_18 &have_dup:1) (Assign (list (Name &moves:1 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Name &i:2 Load) Sub (Name &pile:2 Load)) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &pile:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &piles:1 Load))) nil) nil i0))))) nil) None) (fn_25 (Name &moves:1 Load)))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &game_result:0 (/choiceseq (fn_9 (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) &piles:1) (Assign (list (Name &pairs:1 Store)) (Constant i0 None) None) (fn_13 &pairs:1 &piles:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i1 None))) (fn_22 &i:1 &piles:1))) (Compare (Name &pairs:1 Load) (list Gt) (list (Constant i1 None))))) (/seq (Return (Constant s_cslnb None))) (/seq)))) (If (fn_7 (fn_3 (Name &n:1 Load) &piles:1)) (/seq (Return (Constant s_cslnb None))) (/seq)) (Return (Constant s_sjfnb None)))) (/splice (fn_17 &n:0 &piles:0 &game_result:0))) nil)",
            "(Module (/seq (/splice (fn_1 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Assign (list (Name &special_cases:0 Store)) (Call (Name g_sum Load) (list (_starred_content (fn_15 &n:0 &i:1 &a:0))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_2 &i:0 &a:0) (/seq (AugAssign (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Store) Sub (Constant i1 None)) (If (BoolOp And (list (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load))))) (fn_20) (/seq)) Break) (/seq))) (/seq) None) (fn_14 (BoolOp Or (list (Compare (Name &special_cases:0 Load) (list Gt) (list (Constant i1 None))) (fn_7 (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil))) nil))))))) nil)",
            "(Module (fn_6 &a:1 &n:1 &main:0 (/choiceseq (Assign (list (Name &pairs:1 Store)) (Constant i0 None) None) (fn_13 &pairs:1 &a:1 &i:1 &n:1 (/choiceseq (If (BoolOp Or (list (Compare (Name &pairs:1 Load) (list Gt) (list (Constant i1 None))) (fn_4 (BinOp (Name &i:1 Load) Sub (Constant i1 None)) &a:1 &i:1))) (fn_10) (/seq)) (AugAssign (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Constant i1 None)))) (fn_19 (fn_3 (Name &n:1 Load) &a:1)))) nil)",
            "(Module (/seq (fn_12 &a:1 &n:1 &winner:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (Constant i0 None) None) (Assign (list (Name &double:1 Store)) (Constant False None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &moves:1 Store) Add (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Name &i:1 Load))) (If (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (fn_2 &i:1 &a:1))) (/seq (If (BoolOp Or (list (Name &double:1 Load) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list LtE) (list (Constant i0 None))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (Assign (list (Name &double:1 Store)) (Constant True None) None)) (/seq))) (/seq) None) (If (BoolOp Or (list (fn_7 (Name &moves:1 Load)) (BoolOp And (list (Name &double:1 Load) (Compare (BinOp (Name &moves:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))))))) (/seq (Return (Constant s_cslnb None))) (/seq (Return (Constant s_sjfnb None)))))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_28 &a:0 &n:0 &winner:0))) (/seq))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &game_outcome:0 (/choiceseq (fn_9 (fn_27 &piles:1) &piles:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_2 &i:1 &piles:1) (/seq (If (BoolOp Or (list (fn_4 (Name &i:1 Load) &piles:1 &i:1) (Compare (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant s_cslnb None))) (/seq)) (AugAssign (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Store) Sub (Constant i1 None)) Break) (/seq))) (/seq) None) (If (Compare (Name &piles:1 Load) (list Eq) (list (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &piles:1 Load))) nil))) nil))) (/seq (Assign (list (Name &moves:1 Store)) (fn_3 (Call (Name g_len Load) (list (_starred_content (Name &piles:1 Load))) nil) &piles:1) None) (fn_11 &moves:1)) (/seq)) (Return (Constant s_cslnb None)))) (/splice (fn_1 (Name g_input Load) &n:0 &piles:0)) (Assign (list (Name &outcome:0 Store)) (Call (Name &game_outcome:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &piles:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &outcome:0 Load))) nil))) nil)",
            "(Module (/seq (fn_12 &piles:1 &n:1 &game_outcome:0 (/choiceseq (Assign (list (Name &moves:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &moves:1 Store) Add (BinOp (Subscript (Name &piles:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Name &i:1 Load)))) (/seq) None) (If (Compare (BinOp (Name &moves:1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant s_sjfnb None))) (/seq (Return (Constant s_cslnb None)))))) (/splice (fn_28 &piles:0 &n:0 &game_outcome:0))) nil)",
            "(Module (fn_6 &a:1 &n:1 &main:0 (/choiceseq (Assign (list (Name &zero_count:1 Store)) (Call (Attribute (Name &a:1 Load) s_count Load) (list (_starred_content (Constant i0 None))) nil) None) (Assign (list (Name &pair_count:1 Store)) (Call (Name g_sum Load) (list (_starred_content (fn_15 &n:1 &i:2 &a:1))) nil) None) (If (BoolOp Or (list (Compare (Name &zero_count:1 Load) (list Gt) (list (Constant i1 None))) (Compare (Name &pair_count:1 Load) (list Gt) (list (Constant i1 None))))) (fn_10) (/seq)) (If (BoolOp And (list (Compare (Name &pair_count:1 Load) (list Eq) (list (Constant i1 None))) (BoolOp Or (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) (list Eq) (list (Constant i1 None))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:3 Load)) Load) (list Eq Eq) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i1 None))) Load) (BinOp (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i2 None))) Load) Add (Constant i1 None)))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil))))) (fn_10) (/seq)) (fn_14 (fn_7 (Call (Name g_sum Load) (list (_starred_content (Name &a:1 Load))) nil))))) nil)"
        ]
    },
    "178": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name %1 Load))) Load))) nil) None) (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store)) (Constant i0 None) None) (While (Name %2 Load) (/seq (Assign (list (Name %4 Store)) (Call (Attribute (Name %2 Load) s_popleft Load) nil nil) None) (For (Name %5 Store) (Subscript (Name %6 Load) (_slice_content (Name %4 Load)) Load) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Store)) (BinOp (Constant i1 None) Sub (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load)) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None)) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) #0 (/seq))) (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %7 (arguments nil (list (arg %6 None None) (arg %5 None None) (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %4 Load) (/seq (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load) s_append Load) (list (_starred_content (Name %2 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Name %3 Load))) nil))) (/seq) None) ?0) nil None None)",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %1 None None) (arg %7 None None) (arg %6 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store) (Name %6 Load) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %5 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %5 Load) Sub (Constant i1 None)))) nil))) (/seq) None) ?0) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %4 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (UnaryOp Not #0) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) ?0 (For (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store) (Name %6 Load) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) s_append Load) (list (_starred_content (Name %4 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Name %2 Store)) (Call (Attribute (Name %1 Load) s_popleft Load) nil nil) None) (For (Name %4 Store) (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load) (/seq (If (fn_7 %4 %3) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Store)) (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) Add (Constant i1 None)) Mod (Constant i3 None)) None) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %4 Load))) nil))) (/seq #0))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Name %2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name %1 Load))) Load))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Name %1 Load))) Load))) nil) None) (While (Name %2 Load) (/seq (Assign (list (Name %4 Store)) (Call (Attribute (Name %2 Load) s_popleft Load) nil nil) None) (For (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %6 Store))) Store) (Subscript (Name %8 Load) (_slice_content (Name %4 Load)) Load) (/seq (If (Compare (Name %5 Load) (list NotIn) (list (Name %3 Load))) (/seq (Expr (Call (Attribute (Name %3 Load) s_add Load) (list (_starred_content (Name %5 Load))) nil)) (Assign (list (Subscript (Name %7 Load) (_slice_content (Name %6 Load)) Store)) (BinOp (BinOp (Subscript (Name %7 Load) (_slice_content (Name %6 Load)) Load) Add (Constant i1 None)) Mod (Constant i3 None)) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %3 Load)))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name %1 Load))) Load))) nil) None) (While (Name %2 Load) (/seq (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_popleft Load) nil nil) None) (For (Name %5 Store) (Subscript (Name %6 Load) (_slice_content (Name %3 Load)) Load) (/seq (If (fn_7 %5 %4) (/seq (Assign (list (Subscript (Name %4 Load) (_slice_content (Name %5 Load)) Store)) (BinOp (Constant i1 None) Sub (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load)) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq (If (Compare (Subscript (Name %4 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load))) (/seq (Return #0)) (/seq))))) (/seq) None)) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load) Add (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Name %1 Load)) (_starred_content (Constant i0 None))) Load))) Load))) nil) None) (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store)) (Constant i0 None) None) (While (Name %2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Attribute (Name %2 Load) s_popleft Load) nil nil) None) ?0) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Return (UnaryOp USub (Constant i1 None))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (Name %1 Load)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Name %1 Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) s_append Load) (list (_starred_content (Name %2 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None)))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (fn_7 %2 %3) (/seq (If (UnaryOp Not #0) (/seq (Return (Constant False None))) (/seq))) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list Eq) (list (Name %1 Load))) (/seq (Return (Constant False None))) (/seq))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store))) Store) #0 (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %6 Load)) (_starred_content (Name %4 Load))) Load))) nil))) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp #0 Add (Constant i1 None)) Mod (Constant i3 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (Call (Attribute (Name %1 Load) s_count Load) (list (_starred_content (Constant i1 None))) nil) Add (BinOp (Constant i2 None) Mult (Call (Attribute (Name %1 Load) s_count Load) (list (_starred_content (Constant i2 None))) nil)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) #0 None) (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %1 Load)) (_starred_content #0)) Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (BinOp #0 Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %3 Store) (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Load) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Constant i0 None))) #0 (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant True None) None) (Assign (list (Name %2 Store)) (Constant i0 None) None) ?0 (If (Name %1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &edges:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &b:1 Load) Sub (Constant i1 None))) (_starred_content (Constant i0 None))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (BinOp (Name &b:1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) (_starred_content (Constant i1 None))) Load))) nil))) (/seq) None) (Assign (list (Name &color:1 Store)) (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &cycles_parity:1 Store)) (Constant i0 None) None) (FunctionDef &dfs:1 (arguments nil (list (arg &v:2 None None)) None nil nil None nil) (/seq (Nonlocal (list s_cycles_parity)) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &edge_type:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &v:2 Load)) Load) (/seq (If (Compare (Subscript (Name &color:1 Load) (_slice_content (Name &u:2 Load)) Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &u:2 Load)) Store)) (BinOp (Subscript (Name &color:1 Load) (_slice_content (Name &v:2 Load)) Load) BitXor (Name &edge_type:2 Load)) None) (Expr (Call (Name &dfs:1 Load) (list (_starred_content (Name &u:2 Load))) nil))) (/seq (If (Compare (Subscript (Name &color:1 Load) (_slice_content (Name &u:2 Load)) Load) (list Eq) (list (BinOp (Subscript (Name &color:1 Load) (_slice_content (Name &v:2 Load)) Load) BitXor (Name &edge_type:2 Load)))) (/seq (Assign (list (Name &cycles_parity:1 Store)) (Constant i1 None) None)) (/seq))))) (/seq) None)) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &color:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Constant i0 None) None) (Expr (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq))) (/seq) None) (If (Name &cycles_parity:1 Load) (fn_18) (/seq)) (Assign (list (Name &cost:1 Store)) (Constant i0 None) None) (For (Name &v:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &edge_type:1 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &v:1 Load)) Load) (/seq (If (Compare (Name &u:1 Load) (list Gt) (list (Name &v:1 Load))) (/seq (If (Compare (Name &edge_type:1 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i2 None))))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &cost:1 Load))) nil None None) (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &edges:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &decorations:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start:1 Load))) Load))) nil) None) (Assign (list (Subscript (Name &decorations:1 Load) (_slice_content (Name &start:1 Load)) Store)) (Constant i0 None) None) (While (Name &queue:1 Load) (/seq (Assign (list (Name &current:1 Store)) (Call (Attribute (Name &queue:1 Load) s_popleft Load) nil nil) None) (For (Tuple (list (_starred_content (Name &neighbor:1 Store)) (_starred_content (Name &edge_index:1 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &current:1 Load)) Load) (/seq (If (fn_7 &neighbor:1 &decorations:1) (/seq (Assign (list (Subscript (Name &decorations:1 Load) (_slice_content (Name &neighbor:1 Load)) Store)) (fn_24 (Subscript (Name &decorations:1 Load) (_slice_content (Name &current:1 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Name &neighbor:1 Load))) nil))) (/seq (If (Compare (fn_24 (Subscript (Name &decorations:1 Load) (_slice_content (Name &current:1 Load)) Load)) (list NotEq) (list (Subscript (Name &decorations:1 Load) (_slice_content (Name &neighbor:1 Load)) Load))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None)) (/seq)) (Return (Constant True None))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (/splice (fn_23 (Call (Name g_enumerate Load) (list (_starred_content (Name &roads:2 Load)) (_starred_content (Constant i1 None))) nil) &n:2 &_:4 &graph:2 &i:2 &b:2 &a:2)) (/splice (fn_3 (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &decorations:2 Load))) nil))) &n:2 &decorations:2 &i:2)) (Assign (list (Name &total_cost:2 Store)) (fn_25 &decorations:2) None) (Return (Name &total_cost:2 Load))) nil None None) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &min_cost:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None) (arg &roads:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &road:1 Store) (Name &roads:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Subscript (Name &road:1 Load) (_slice_content (Constant i0 None)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &road:1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Subscript (Name &road:1 Load) (_slice_content (Constant i1 None)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &road:1 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq) None) (/splice (fn_3 (/seq (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &start:1 Load)) Store)) (Constant i0 None) None) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start:1 Load))) Load))) nil) None) (While (Name &queue:1 Load) (fn_12 (If (fn_15 &node:1 &color:1 &neighbor:1) (fn_18) (/seq)) &queue:1 &node:1 &color:1 &neighbor:1 &graph:1) (/seq))) &n:1 &color:1 &start:1)) (Assign (list (Name &cost:1 Store)) (Constant i0 None) None) (Assign (list (Name &visited_edges:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &a:1 Store) (fn_9 &n:1) (/seq (For (Name &b:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &a:1 Load)) Load) (/seq (If (BoolOp And (list (Compare (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) Load) (list NotIn) (list (Name &visited_edges:1 Load))) (Compare (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load) (list NotIn) (list (Name &visited_edges:1 Load))))) (/seq (Expr (Call (Attribute (Name &visited_edges:1 Load) s_add Load) (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) Load))) nil)) (If (Compare (BinOp (BinOp (Subscript (Name &color:1 Load) (_slice_content (Name &a:1 Load)) Load) Add (Subscript (Name &color:1 Load) (_slice_content (Name &b:1 Load)) Load)) Mod (Constant i3 None)) (list Eq) (list (Constant i2 None))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i2 None))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &color:1 Load) (_slice_content (Name &a:1 Load)) Load) Add (Subscript (Name &color:1 Load) (_slice_content (Name &b:1 Load)) Load)) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i1 None))) (/seq))))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &cost:1 Load))) nil None None) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:2 &roads:0 &min_cost:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &start:1 &queue:1 &colors:1 &u:1 &v:1 &graph:1)) (Return (Constant True None))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (/splice (fn_11 &n:2 &_:3 &graph:2 &b:2 &a:2 &roads:2 (/choiceseq))) (/splice (fn_3 (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &colors:2 Load))) nil))) &n:2 &colors:2 &i:2)) (Assign (list (Name &cost:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (fn_9 &n:2) (/seq (For (Name &j:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &i:2 Load)) Load) (/seq (If (Compare (Subscript (Name &colors:2 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Subscript (Name &colors:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq (AugAssign (Name &cost:2 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &i:2 Load) (list Lt) (list (Name &j:2 Load))) (/seq (AugAssign (Name &cost:2 Store) Add (Constant i2 None))) (/seq))))) (/seq) None)) (/seq) None) (Return (Name &cost:2 Load))) nil None None) (If (fn_29) (/seq (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:4 &roads:0 &solve:0))) (/seq))) nil)",
            "(Module (/seq (fn_4 &graph:1 &b:1 &a:1 &roads:1 &m:1 &n:1 &min_decoration_cost:0 (/choiceseq (FunctionDef &check_cycle_odd_cost:1 (arguments nil (list (arg &u:2 None None) (arg &parent:2 None None) (arg &color:2 None None) (arg &visited:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:2 Load) (_slice_content (Name &u:2 Load)) Store)) (Name &color:2 Load) None) (For (Name &v:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &u:2 Load)) Load) (/seq (If (Compare (Name &v:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (fn_22 (Call (Name &check_cycle_odd_cost:1 Load) (list (_starred_content (Name &v:2 Load)) (_starred_content (Name &u:2 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &color:2 Load))) (_starred_content (Name &visited:2 Load))) nil) &color:2 &v:2 &visited:2)) (/seq) None) (Return (Constant True None))) nil None None) (/splice (fn_3 (/seq (fn_8 (Call (Name &check_cycle_odd_cost:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (Name &visited:1 Load))) nil))) &n:1 &visited:1 &i:1)) (Assign (list (Name &cost:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (For (Name &j:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (If (Compare (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Subscript (Name &visited:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &cost:1 Store) Add (Constant i2 None))))) (/seq) None)) (/seq) None) (Return (BinOp (Name &cost:1 Load) FloorDiv (Constant i2 None))))) (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &roads:0 &min_decoration_cost:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &start:1 &q:1 &colors:1 &u:1 &v:1 &graph:1)) (Return (Constant True None))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &edges:2 None None)) None nil nil None nil) (/seq (/splice (fn_11 &n:2 &_:4 &graph:2 &v:2 &u:2 &edges:2 (/choiceseq (fn_10 &n:2 &colors:2)))) (For (Name &i:2 Store) (fn_9 &n:2) (/seq (If (fn_7 &i:2 &colors:2) (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &colors:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &count:2 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:2 Store) (fn_9 &n:2) (/seq (AugAssign (Subscript (Name &count:2 Load) (_slice_content (Subscript (Name &colors:2 Load) (_slice_content (Name &i:2 Load)) Load)) Store) Add (Constant i1 None))) (/seq) None) (Return (BinOp (BinOp (Call (Name g_min Load) (list (_starred_content (Name &count:2 Load))) nil) Mult (Constant i1 None)) Add (BinOp (Call (Name g_max Load) (list (_starred_content (Name &count:2 Load))) nil) Mult (Constant i2 None))))) nil None None) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &edges:0 &solve:0))) nil)",
            "(Module (/seq (fn_5 &n:1 &_:4 &adj:1 &b:1 &a:1 &edges:1 &m:1 &solve:0 (/choiceseq (fn_19 &n:1 &color:1) (FunctionDef &bfs:1 (arguments nil (list (arg &s:2 None None)) None nil nil None nil) (/seq (/splice (fn_2 &s:2 &queue:2 &color:1 &u:2 &v:2 &adj:1)) (Return (Constant True None))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_7 &i:1 &color:1) (/seq (fn_8 (Call (Name &bfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &cost:1 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store) (Name &edges:1 Load) (/seq (Assign (list (Name &diff:1 Store)) (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &color:1 Load) (_slice_content (BinOp (Name &a:1 Load) Sub (Constant i1 None))) Load) Sub (Subscript (Name &color:1 Load) (_slice_content (BinOp (Name &b:1 Load) Sub (Constant i1 None))) Load)))) nil) None) (AugAssign (Name &cost:1 Store) Add (Name &diff:1 Load))) (/seq) None) (Return (Name &cost:1 Load)))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &edges:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &dfs:0 (arguments nil (list (arg &graph:1 None None) (arg &node:1 None None) (arg &color:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &colors:1 Load) (_slice_content (Name &node:1 Load)) Store)) (Name &color:1 Load) None) (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (fn_7 &neighbor:1 &colors:1) (/seq (If (UnaryOp Not (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &neighbor:1 Load)) (_starred_content (fn_24 (Name &color:1 Load))) (_starred_content (Name &colors:1 Load))) nil)) (/seq (Return (Constant False None))) (/seq))) (/seq (If (fn_15 &neighbor:1 &colors:1 &node:1) (/seq (Return (Constant False None))) (/seq))))) (/seq) None) (Return (Constant True None))) nil None None) (fn_4 &graph:2 &b:2 &a:2 &roads:2 &m:2 &n:2 &min_decoration_cost:0 (/choiceseq (/splice (fn_3 (/seq (fn_8 (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &node:2 Load)) (_starred_content (Constant i0 None)) (_starred_content (Name &colors:2 Load))) nil))) &n:2 &colors:2 &node:2)) (Assign (list (Name &color_counts:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &c:2 Store) (Subscript (Name &colors:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (AugAssign (Subscript (Name &color_counts:2 Load) (_slice_content (Name &c:2 Load)) Store) Add (Constant i1 None))) (/seq) None) (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &color:4 Load) Mult (Name &count:4 Load)) (list (comprehension (Tuple (list (_starred_content (Name &color:4 Store)) (_starred_content (Name &count:4 Store))) Store) (Call (Attribute (Name &color_counts:2 Load) s_items Load) nil nil) nil i0))))) nil)))) (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &roads:0 &min_decoration_cost:0))) nil)",
            "(Module (/seq (fn_4 &graph:1 &b:1 &a:1 &roads:1 &m:1 &n:1 &solve:0 (/choiceseq (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (/splice (fn_16 &start:2 &queue:2 &visited:1 &color:2 &node:2 (/choiceseq (For (Name &neighbor:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list In) (list (Name &visited:1 Load))) (/seq (If (Compare (Subscript (Name &visited:1 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Name &color:2 Load))) (/seq (Return (Constant False None))) (/seq))) (/seq (/splice (fn_26 (BinOp (Constant i1 None) Sub (Name &color:2 Load)) &neighbor:2 &visited:1 &queue:2))))) (/seq) None)))) (Return (Constant True None))) nil None None) (Assign (list (Name &visited:1 Store)) (Dict nil nil) None) (Assign (list (Name &cycles:1 Store)) (Constant i0 None) None) (Assign (list (Name &components:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (If (Compare (Name &i:1 Load) (list NotIn) (list (Name &visited:1 Load))) (/seq (AugAssign (Name &components:1 Store) Add (Constant i1 None)) (fn_8 (Call (Name &bfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (AugAssign (Name &cycles:1 Store) Add (Call (Name g_len Load) (list (_starred_content (Subscript (Name &graph:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil))) (/seq) None) (Assign (list (Name &cycles:1 Store)) (BinOp (Name &cycles:1 Load) FloorDiv (Constant i2 None)) None) (If (fn_27 (BinOp (BinOp (Name &cycles:1 Load) Sub (Name &n:1 Load)) Add (Name &components:1 Load))) (fn_18) (/seq)) (Return (BinOp (Name &components:1 Load) Sub (Constant i1 None))))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &start:1 &queue:1 &colors:1 &current:1 &neighbor:1 &graph:1)) (Return (Constant True None))) nil None None) (FunctionDef &minimum_decoration_cost:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (/splice (fn_11 &n:2 &_:4 &graph:2 &b:2 &a:2 &roads:2 (/choiceseq (fn_10 &n:2 &colors:2)))) (Assign (list (Name &valid:2 Store)) (Constant True None) None) (For (Name &i:2 Store) (fn_9 &n:2) (/seq (If (fn_7 &i:2 &colors:2) (/seq (If (UnaryOp Not (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &colors:2 Load))) nil)) (/seq (Assign (list (Name &valid:2 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (fn_8 (Name &valid:2 Load)) (Assign (list (Name &edge_count:2 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &colors:2 Load) (_slice_content (Name &a:5 Load)) Load) (list NotEq) (list (Subscript (Name &colors:2 Load) (_slice_content (Name &b:5 Load)) Load))) (list (comprehension (Tuple (list (_starred_content (Name &a:5 Store)) (_starred_content (Name &b:5 Store))) Store) (Name &roads:2 Load) nil i0))))) nil) None) (Return (Name &edge_count:2 Load))) nil None None) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &minimum_decoration_cost:0))) nil)",
            "(Module (/seq (fn_4 &graph:1 &b:1 &a:1 &roads:1 &m:1 &n:1 &find_min_decoration_cost:0 (/choiceseq (FunctionDef &has_odd_cycle:1 (arguments nil (list (arg &node:2 None None) (arg &color:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &color:2 Load) (_slice_content (Name &node:2 Load)) Store)) (Constant i1 None) None) (/splice (fn_14 (Constant True None) &node:2 &queue:2 &u:2 &color:2 &v:2 &graph:1)) (Return (Constant False None))) nil None None) (fn_10 &n:1 &color:1) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (If (BoolOp And (list (fn_7 &i:1 &color:1) (Call (Name &has_odd_cycle:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Name &color:1 Load))) nil))) (fn_18) (/seq))) (/seq) None) (Assign (list (Name &min_cost:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (For (Name &j:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &i:1 Load)) Load) (/seq (If (Compare (Name &i:1 Load) (list Lt) (list (Name &j:1 Load))) (/seq (AugAssign (Name &min_cost:1 Store) Add (IfExp (Compare (Subscript (Name &color:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Subscript (Name &color:1 Load) (_slice_content (Name &j:1 Load)) Load))) (Constant i2 None) (Constant i1 None)))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &min_cost:1 Load)))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &find_min_decoration_cost:0))) nil)",
            "(Module (/seq (FunctionDef &find_cycle:0 (arguments nil (list (arg &graph:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &visited:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None) (FunctionDef &dfs:1 (arguments nil (list (arg &v:3 None None) (arg &parent:3 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &v:3 Load)) Store)) (Constant True None) None) (For (Name &i:3 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &v:3 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:3 Load)) Load)) (/seq (If (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:3 Load)) (_starred_content (Name &v:3 Load))) nil) (/seq (Return (Constant True None))) (/seq))) (/seq (If (Compare (Name &parent:3 Load) (list NotEq) (list (Name &i:3 Load))) (/seq (Return (Constant True None))) (/seq))))) (/seq) None) (Return (Constant False None))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load)) (/seq (If (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Return (Constant True None))) (/seq))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (FunctionDef &min_decoration_cost:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &road:2 Store) (Name &roads:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store)) (Name &road:2 Load) None) (/splice (fn_21 &b:2 &a:2 &graph:2))) (/seq) None) (If (Call (Name &find_cycle:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Name &colors:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) None) (FunctionDef &dfs:2 (arguments nil (list (arg &v:4 None None) (arg &c:4 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &colors:2 Load) (_slice_content (Name &v:4 Load)) Store)) (Name &c:4 Load) None) (fn_28 (/seq (If (UnaryOp Not (Call (Name &dfs:2 Load) (list (_starred_content (Name &i:4 Load)) (_starred_content (BinOp (UnaryOp USub (Name &c:4 Load)) Mod (Constant i3 None)))) nil)) (/seq (Return (Constant False None))) (/seq))) &v:4 &colors:2 &i:4 &graph:2) (Return (Constant True None))) nil None None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &colors:2 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Constant i0 None))) (UnaryOp Not (Call (Name &dfs:2 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Constant i1 None))) nil)))) (fn_18) (/seq))) (/seq) None) (Return (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (ListComp (Name &c:5 Load) (list (comprehension (Name &c:5 Store) (Name &colors:2 Load) (list (Compare (Name &c:5 Load) (list Eq) (list (Constant i1 None)))) i0))))) nil) Mult (Constant i1 None)) Add (BinOp (Call (Name g_len Load) (list (_starred_content (ListComp (Name &c:6 Load) (list (comprehension (Name &c:6 Store) (Name &colors:2 Load) (list (Compare (Name &c:6 Load) (list Eq) (list (Constant i2 None)))) i0))))) nil) Mult (Constant i2 None))))) (/seq (Return (Name &m:2 Load))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Tuple (list (_starred_content (Constant i6 None)) (_starred_content (Constant i5 None))) Load) None) (Assign (list (Name &roads:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None))) Load)) (_starred_content (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i6 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_decoration_cost:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &roads:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &graph:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (fn_19 &n:1 &color:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_7 &i:1 &color:1) (/seq (/splice (fn_2 &i:1 &queue:1 &color:1 &u:1 &v:1 &graph:1))) (/seq))) (/seq) None) (Return (Constant True None))) nil None None) (FunctionDef &min_cost_to_decorate:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store) (Name &roads:2 Load) (/seq (/splice (fn_21 &b:2 &a:2 &graph:2))) (/seq) None) (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &n:2 Load))) nil)) (Return (Name &m:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 (Name g_list Load) &m:3 &n:3 &_:4 &roads:3 &min_cost_to_decorate:0))) nil None None) (If (fn_29) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &decoration:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 (Constant False None) &start:1 &queue:1 &node:1 &decoration:1 &neighbor:1 &graph:1)) (Return (Constant True None))) nil None None) (fn_4 &graph:2 &b:2 &a:2 &roads:2 &m:2 &n:2 &solve:0 (/choiceseq (/splice (fn_3 (/seq (Assign (list (Subscript (Name &decoration:2 Load) (_slice_content (Name &i:2 Load)) Store)) (Constant i0 None) None) (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &decoration:2 Load))) nil))) &n:2 &decoration:2 &i:2)) (Assign (list (Name &odd_cycles:2 Store)) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &decoration:2 Load) (_slice_content (Name &a:4 Load)) Load) (list Eq) (list (Subscript (Name &decoration:2 Load) (_slice_content (Name &b:4 Load)) Load))) (list (comprehension (Tuple (list (_starred_content (Name &a:4 Store)) (_starred_content (Name &b:4 Store))) Store) (Name &roads:2 Load) nil i0))))) nil) None) (If (Name &odd_cycles:2 Load) (fn_18) (/seq)) (Return (Call (Name g_sum Load) (list (_starred_content (Name &decoration:2 Load))) nil)))) (/splice (fn_6 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &dfs:0 (arguments nil (list (arg &graph:1 None None) (arg &node:1 None None) (arg &group:1 None None) (arg &odd_cycle:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (fn_7 &neighbor:1 &group:1) (/seq (Assign (list (Subscript (Name &group:1 Load) (_slice_content (Name &neighbor:1 Load)) Store)) (BinOp (Constant i1 None) Sub (Subscript (Name &group:1 Load) (_slice_content (Name &node:1 Load)) Load)) None) (If (UnaryOp Not (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &neighbor:1 Load)) (_starred_content (Name &group:1 Load)) (_starred_content (Name &odd_cycle:1 Load)) (_starred_content (Name &colors:1 Load))) nil)) (/seq (Return (Constant False None))) (/seq))) (/seq (If (Compare (Subscript (Name &group:1 Load) (_slice_content (Name &neighbor:1 Load)) Load) (list Eq) (list (Subscript (Name &group:1 Load) (_slice_content (Name &node:1 Load)) Load))) (/seq (Assign (list (Subscript (Name &odd_cycle:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant True None) None) (Return (Constant False None))) (/seq)))) (If (fn_7 &neighbor:1 &colors:1) (/seq (Assign (list (Subscript (Name &colors:1 Load) (_slice_content (Name &neighbor:1 Load)) Store)) (fn_24 (Subscript (Name &colors:1 Load) (_slice_content (Name &node:1 Load)) Load)) None)) (/seq (If (fn_15 &node:1 &colors:1 &neighbor:1) (/seq (Assign (list (Subscript (Name &odd_cycle:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant True None) None) (Return (Constant False None))) (/seq))))) (/seq) None) (Return (Constant True None))) nil None None) (fn_4 &graph:2 &b:2 &a:2 &edges:2 &m:2 &n:2 &solve:0 (/choiceseq (fn_10 &n:2 &group:2) (fn_10 &n:2 &colors:2) (Assign (list (Name &cost:2 Store)) (Constant i0 None) None) (Assign (list (Name &odd_cycle:2 Store)) (List (list (_starred_content (Constant False None))) Load) None) (For (Name &node:2 Store) (fn_9 &n:2) (/seq (If (fn_7 &node:2 &group:2) (/seq (Assign (list (Subscript (Name &group:2 Load) (_slice_content (Name &node:2 Load)) Store)) (Constant i0 None) None) (Assign (list (Subscript (Name &colors:2 Load) (_slice_content (Name &node:2 Load)) Store)) (Constant i0 None) None) (If (UnaryOp Not (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &node:2 Load)) (_starred_content (Name &group:2 Load)) (_starred_content (Name &odd_cycle:2 Load)) (_starred_content (Name &colors:2 Load))) nil)) (/seq (If (Subscript (Name &odd_cycle:2 Load) (_slice_content (Constant i0 None)) Load) (fn_18) (/seq Continue))) (/seq))) (/seq))) (/seq) None) (For (Name &color:2 Store) (Subscript (Name &colors:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name &color:2 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Name &cost:2 Store) Add (IfExp (Compare (Name &color:2 Load) (list Gt) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None)))) (/seq))) (/seq) None) (Return (IfExp (UnaryOp Not (Subscript (Name &odd_cycle:2 Load) (_slice_content (Constant i0 None)) Load)) (Name &cost:2 Load) (UnaryOp USub (Constant i1 None)))))) (/splice (fn_6 (Name g_list Load) &m:0 &n:0 &_:3 &edges:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &node:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &node:1 Load))) Load))) nil) None) (Assign (list (Subscript (Name &visited:0 Load) (_slice_content (Name &node:1 Load)) Store)) (Constant i0 None) None) (While (Name &queue:1 Load) (fn_12 (If (fn_15 &neighbor:1 &visited:0 &current:1) (/seq (Return (Constant False None))) (/seq)) &queue:1 &current:1 &visited:0 &neighbor:1 &graph:0) (/seq)) (Return (Constant True None))) nil None None) (FunctionDef &check_cycles:0 (arguments nil (list (arg &node:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Name &node:2 Load)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None))) Load))) Load))) nil) None) (While (Name &queue:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current:2 Store)) (_starred_content (Name &parent:2 Store)) (_starred_content (Name &total_cost:2 Store))) Store)) (Call (Attribute (Name &queue:2 Load) s_popleft Load) nil nil) None) (For (Name &neighbor:2 Store) (Subscript (Name &graph:0 Load) (_slice_content (Name &current:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (If (fn_7 &neighbor:2 &visited2:0) (/seq (Assign (list (Subscript (Name &visited2:0 Load) (_slice_content (Name &neighbor:2 Load)) Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &current:2 Load)) (_starred_content (BinOp (Name &total_cost:2 Load) Add (Subscript (Name &visited:0 Load) (_slice_content (Name &neighbor:2 Load)) Load)))) Load))) nil))) (/seq (If (fn_27 (BinOp (Name &total_cost:2 Load) Add (Subscript (Name &visited:0 Load) (_slice_content (Name &neighbor:2 Load)) Load))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None)) (/seq)) (Return (Constant True None))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_17) None) (Assign (list (Name &graph:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (fn_17) None) (/splice (fn_20 &b:0 &a:0 &graph:0))) (/seq) None) (fn_10 &n:0 &visited:0) (/splice (fn_30 &is_possible:0 &total_cost:0 (/choiceseq (For (Name &i:0 Store) (fn_9 &n:0) (/seq (If (fn_7 &i:0 &visited:0) (/seq (If (UnaryOp Not (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:0 Load))) nil)) (/seq (Assign (list (Name &is_possible:0 Store)) (Constant False None) None) Break) (/seq)) (AugAssign (Name &total_cost:0 Store) Add (fn_25 &visited:0))) (/seq))) (/seq) None) (If (Name &is_possible:0 Load) (/seq (/splice (fn_3 (/seq (If (UnaryOp Not (Call (Name &check_cycles:0 Load) (list (_starred_content (Name &i:0 Load))) nil)) (/seq (Assign (list (Name &is_possible:0 Store)) (Constant False None) None) Break) (/seq))) &n:0 &visited2:0 &i:0))) (/seq)))))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &adj:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (/splice (fn_20 &b:1 &a:1 &adj:1))) (/seq) None) (fn_10 &n:1 &color:1) (/splice (fn_30 &can_be_decorated:1 &total_cost:1 (/choiceseq (For (Name &start_node:1 Store) (fn_9 &n:1) (/seq (If (fn_7 &start_node:1 &color:1) (/seq (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start_node:1 Load))) Load))) nil) None) (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &start_node:1 Load)) Store)) (Constant i0 None) None) (While (BoolOp And (list (Name &queue:1 Load) (Name &can_be_decorated:1 Load))) (fn_12 (If (fn_15 &node:1 &color:1 &neighbor:1) (/seq (Assign (list (Name &can_be_decorated:1 Store)) (Constant False None) None) Break) (/seq)) &queue:1 &node:1 &color:1 &neighbor:1 &adj:1) (/seq)) (If (UnaryOp Not (Name &can_be_decorated:1 Load)) (/seq Break) (/seq)) (Assign (list (Name &level_cost:1 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &c:1 Store) (Name &color:1 Load) (/seq (If (Compare (Name &c:1 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Subscript (Name &level_cost:1 Load) (_slice_content (Name &c:1 Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (fn_27 (Call (Name g_sum Load) (list (_starred_content (Name &level_cost:1 Load))) nil)) (/seq (AugAssign (Name &total_cost:1 Store) Add (BinOp (Call (Name g_min Load) (list (_starred_content (Subscript (Name &level_cost:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &level_cost:1 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (Constant i2 None)))) (/seq (AugAssign (Name &total_cost:1 Store) Add (BinOp (BinOp (Subscript (Name &level_cost:1 Load) (_slice_content (Constant i1 None)) Load) Mult (Constant i2 None)) Add (BinOp (Subscript (Name &level_cost:1 Load) (_slice_content (Constant i2 None)) Load) Mult (Constant i2 None))))))) (/seq))) (/seq) None))))) nil None None) (If (fn_29) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_5 &n:1 &_:4 &edges:1 &b:1 &a:1 &roads:1 &m:1 &decorate_city:0 (/choiceseq (fn_19 &n:1 &decoration_cost:1) (FunctionDef &check_cycle:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None) (arg &color:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &decoration_cost:1 Load) (_slice_content (Name &node:2 Load)) Store)) (BinOp (Constant i1 None) Sub (Name &color:2 Load)) None) (For (Name &nei:2 Store) (Subscript (Name &edges:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &nei:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (If (fn_7 &nei:2 &decoration_cost:1) (/seq (If (UnaryOp Not (Call (Name &check_cycle:1 Load) (list (_starred_content (Name &nei:2 Load)) (_starred_content (Name &node:2 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &color:2 Load)))) nil)) (/seq (Return (Constant False None))) (/seq))) (/seq (If (Compare (Subscript (Name &decoration_cost:1 Load) (_slice_content (Name &nei:2 Load)) Load) (list Eq) (list (Subscript (Name &decoration_cost:1 Load) (_slice_content (Name &node:2 Load)) Load))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None) (Return (Constant True None))) nil None None) (Assign (list (Name &result:1 Store)) (Constant i0 None) None) (For (Name &node:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_7 &node:1 &decoration_cost:1) (/seq (fn_8 (Call (Name &check_cycle:1 Load) (list (_starred_content (Name &node:1 Load)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None))) nil)) (AugAssign (Name &result:1 Store) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Subscript (Name &decoration_cost:1 Load) (_slice_content (Name &node:5 Load)) Load) (list (comprehension (Name &node:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (list (Compare (Subscript (Name &decoration_cost:1 Load) (_slice_content (Name &node:5 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None))))) i0))))) nil)) (fn_19 &n:1 &decoration_cost:1)) (/seq))) (/seq) None) (Return (Name &result:1 Load)))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &decorate_city:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &color:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start:1 Load))) Load))) nil) None) (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &start:1 Load)) Store)) (Constant i1 None) None) (While (Name &queue:1 Load) (/seq (Assign (list (Name &node:1 Store)) (Call (Attribute (Name &queue:1 Load) s_popleft Load) nil nil) None) (fn_28 (/seq (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &neighbor:1 Load)) Store)) (BinOp (Constant i3 None) Sub (Subscript (Name &color:1 Load) (_slice_content (Name &node:1 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Name &neighbor:1 Load))) nil))) &node:1 &color:1 &neighbor:1 &graph:1)) (/seq)) (Return (Constant True None))) nil None None) (fn_4 &graph:2 &b:2 &a:2 &roads:2 &m:2 &n:2 &solve:0 (/choiceseq (Assign (list (Name &color:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:2 Load) Add (Constant i1 None))) None) (For (Name &i:2 Store) (fn_9 &n:2) (/seq (If (Compare (Subscript (Name &color:2 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &color:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &cost:2 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store) (Name &roads:2 Load) (/seq (If (Compare (Subscript (Name &color:2 Load) (_slice_content (Name &a:2 Load)) Load) (list NotEq) (list (Subscript (Name &color:2 Load) (_slice_content (Name &b:2 Load)) Load))) (/seq (AugAssign (Name &cost:2 Store) Add (Constant i2 None))) (/seq (AugAssign (Name &cost:2 Store) Add (Constant i1 None))))) (/seq) None) (Return (Name &cost:2 Load)))) (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &start:1 &queue:1 &colors:1 &u:1 &v:1 &graph:1)) (Return (Constant True None))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (/splice (fn_11 &n:2 &_:3 &graph:2 &b:2 &a:2 &roads:2 (/choiceseq))) (/splice (fn_3 (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &colors:2 Load))) nil))) &n:2 &colors:2 &i:2)) (Assign (list (Name &color_count:2 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &color:2 Store) (Subscript (Name &colors:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name &color:2 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Subscript (Name &color_count:2 Load) (_slice_content (Name &color:2 Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &min_cost:2 Store)) (BinOp (BinOp (Call (Name g_min Load) (list (_starred_content (Name &color_count:2 Load))) nil) Mult (Constant i2 None)) Add (Call (Name g_max Load) (list (_starred_content (Name &color_count:2 Load))) nil)) None) (Return (Name &min_cost:2 Load))) nil None None) (If (fn_29) (/seq (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:4 &roads:0 &solve:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &min_decoration_cost:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None) (arg &roads:1 None None)) None nil nil None nil) (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &color:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &node:2 Load)) Store)) (Name &color:2 Load) None) (For (Name &neighbour:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (fn_22 (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbour:2 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &color:2 Load)))) nil) &color:2 &neighbour:2 &visited:1)) (/seq) None) (Return (Constant True None))) nil None None) (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &road:1 Store) (Name &roads:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Name &road:1 Load) None) (/splice (fn_20 &b:1 &a:1 &graph:1))) (/seq) None) (fn_10 &n:1 &visited:1) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (If (BoolOp And (list (fn_7 &i:1 &visited:1) (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Constant i0 None))) nil)))) (fn_18) (/seq))) (/seq) None) (Assign (list (Name &color_count:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Compare (Name &color:4 Load) (list Eq) (list (Constant i0 None))) (list (comprehension (Name &color:4 Store) (Subscript (Name &visited:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))))) nil) None) (Assign (list (Name &cost:1 Store)) (BinOp (BinOp (Name &color_count:1 Load) Mult (BinOp (Name &n:1 Load) Sub (Name &color_count:1 Load))) Add (BinOp (BinOp (Name &n:1 Load) Sub (BinOp (Constant i2 None) Mult (Name &color_count:1 Load))) Pow (Constant i2 None))) None) (Return (Name &cost:1 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_17) None) (Assign (list (Name &roads:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_17))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (Assign (list (Name &min_cost:0 Store)) (Call (Name &min_decoration_cost:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &roads:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &min_cost:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &costs:1 None None)) None nil nil None nil) (fn_13 &start:1 &queue:1 &visited:1 &node:1 &neighbor:1 &edge_id:1 &costs:1 &graph:1) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &connections:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &edges:2 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &connections:2 Load))) nil) (/seq (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Name &a:2 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &b:2 Load)) (_starred_content (Name &i:2 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Name &b:2 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &i:2 Load))) Load))) nil)) (Assign (list (Subscript (Name &edges:2 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:2 Load)) (_slice_content (Name &b:2 Load))) Load)) Store) (Subscript (Name &edges:2 Load) (_slice_tuple (Tuple (list (_slice_content (Name &b:2 Load)) (_slice_content (Name &a:2 Load))) Load)) Store)) (Name &i:2 Load) None)) (/seq) None) (fn_19 &m:2 &costs:2) (/splice (fn_3 (/seq (/splice (fn_16 &start:2 &queue:2 &color:2 &c:2 &node:2 (/choiceseq (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &edge_id:2 Store))) Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (fn_7 &neighbor:2 &color:2) (/seq (Assign (list (Subscript (Name &costs:2 Load) (_slice_content (Name &edge_id:2 Load)) Store)) (Constant i0 None) None) (/splice (fn_26 (BinOp (Constant i1 None) Sub (Name &c:2 Load)) &neighbor:2 &color:2 &queue:2))) (/seq (If (Compare (Subscript (Name &color:2 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Name &c:2 Load))) (fn_18) (/seq (Assign (list (Subscript (Name &costs:2 Load) (_slice_content (Name &edge_id:2 Load)) Store)) (Constant i0 None) None)))))) (/seq) None))))) &n:2 &color:2 &start:2)) (Assign (list (Name &total_cost:2 Store)) (Call (Name g_sum Load) (list (_starred_content (Name &costs:2 Load))) nil) None) (Return (Name &total_cost:2 Load))) nil None None) (/splice (fn_6 (Name g_tuple Load) &m:0 &n:0 &_:3 &connections:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &colors:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &start:1 &queue:1 &colors:1 &current:1 &neighbor:1 &graph:1)) (Return (Constant True None))) nil None None) (fn_4 &graph:2 &b:2 &a:2 &roads:2 &m:2 &n:2 &solve:0 (/choiceseq (/splice (fn_3 (/seq (fn_8 (Call (Name &bfs:0 Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &colors:2 Load))) nil))) &n:2 &colors:2 &i:2)) (Assign (list (Name &cost:2 Store)) (Constant i0 None) None) (For (Name &u:2 Store) (fn_9 &n:2) (/seq (For (Name &v:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &u:2 Load)) Load) (/seq (If (Compare (Subscript (Name &colors:2 Load) (_slice_content (Name &u:2 Load)) Load) (list NotEq) (list (Subscript (Name &colors:2 Load) (_slice_content (Name &v:2 Load)) Load))) (/seq (AugAssign (Name &cost:2 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name &cost:2 Load)))) (If (fn_29) (/seq (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &bfs:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &costs:1 None None)) None nil nil None nil) (fn_13 &start:1 &queue:1 &visited:1 &current_area:1 &neighbor:1 &road_index:1 &costs:1 &graph:1) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &roads:2 None None)) None nil nil None nil) (/seq (/splice (fn_23 (Call (Name g_enumerate Load) (list (_starred_content (Name &roads:2 Load))) nil) &n:2 &_:4 &graph:2 &i:2 &b:2 &a:2)) (Assign (list (Name &costs:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &m:2 Load)) None) (Assign (list (Name &visited_areas:2 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &area:2 Store) (fn_9 &n:2) (/seq (If (Compare (Name &area:2 Load) (list NotIn) (list (Name &visited_areas:2 Load))) (/seq (Assign (list (Name &visited:2 Store)) (Call (Name &bfs:0 Load) (list (_starred_content (Name &area:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &costs:2 Load))) nil) None) (Expr (Call (Attribute (Name &visited_areas:2 Load) s_update Load) (list (_starred_content (Name &visited:2 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &has_odd_cycle:2 Store)) (Constant False None) None) (Assign (list (Name &road_cost_sum:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &roads:2 Load))) nil) (/seq (AugAssign (Subscript (Name &road_cost_sum:2 Load) (_slice_content (BinOp (Name &a:2 Load) Sub (Constant i1 None))) Store) Add (Subscript (Name &costs:2 Load) (_slice_content (Name &i:2 Load)) Load)) (AugAssign (Subscript (Name &road_cost_sum:2 Load) (_slice_content (BinOp (Name &b:2 Load) Sub (Constant i1 None))) Store) Add (Subscript (Name &costs:2 Load) (_slice_content (Name &i:2 Load)) Load)) (If (fn_7 &i:2 &costs:2) (fn_18) (/seq))) (/seq) None) (For (Name &cost_sum:2 Store) (Name &road_cost_sum:2 Load) (/seq (If (fn_27 (Name &cost_sum:2 Load)) (/seq (Assign (list (Name &has_odd_cycle:2 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (Name &has_odd_cycle:2 Load) (fn_18) (/seq (Return (Call (Name g_sum Load) (list (_starred_content (Name &costs:2 Load))) nil))))) nil None None) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)",
            "(Module (/seq (fn_5 &n:1 &_:4 &adj_list:1 &b:1 &a:1 &roads:1 &m:1 &minimum_decoration_cost:0 (/choiceseq (fn_19 &n:1 &costs:1) (Assign (list (Name &visited:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None) (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (/splice (fn_16 &start:2 &queue:2 &costs:1 &cost:2 &current:2 (/choiceseq (If (Subscript (Name &visited:1 Load) (_slice_content (Name &current:2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &current:2 Load)) Store)) (Constant True None) None) (For (Name &neighbor:2 Store) (Subscript (Name &adj_list:1 Load) (_slice_content (Name &current:2 Load)) Load) (/seq (Assign (list (Name &next_cost:2 Store)) (fn_24 (Name &cost:2 Load)) None) (If (fn_7 &neighbor:2 &costs:1) (/seq (/splice (fn_26 (Name &next_cost:2 Load) &neighbor:2 &costs:1 &queue:2))) (/seq (If (BoolOp Or (list (Compare (BinOp (BinOp (Subscript (Name &costs:1 Load) (_slice_content (Name &neighbor:2 Load)) Load) Add (Name &next_cost:2 Load)) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (Compare (Subscript (Name &costs:1 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Name &cost:2 Load))))) (/seq (Return (Constant False None))) (/seq))))) (/seq) None)))) (Return (Constant True None))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (BoolOp And (list (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load)) (UnaryOp Not (Call (Name &bfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil)))) (fn_18) (/seq))) (/seq) None) (Return (Call (Name g_sum Load) (list (_starred_content (Name &costs:1 Load))) nil)))) (/splice (fn_1 (Name g_list Load) &m:0 &n:0 &_:3 &roads:0 &minimum_decoration_cost:0))) nil)",
            "(Module (/seq (FunctionDef &find_cycle:0 (arguments nil (list (arg &graph:1 None None) (arg &node:1 None None) (arg &visited:1 None None) (arg &parent:1 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &node:1 Load)) Store)) (Constant True None) None) (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &neighbor:1 Load)) Load)) (/seq (If (Call (Name &find_cycle:0 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &neighbor:1 Load)) (_starred_content (Name &visited:1 Load)) (_starred_content (Name &node:1 Load))) nil) (/seq (Return (Constant True None))) (/seq))) (/seq (If (Compare (Name &neighbor:1 Load) (list NotEq) (list (Name &parent:1 Load))) (/seq (Return (Constant True None))) (/seq))))) (/seq) None) (Return (Constant False None))) nil None None) (FunctionDef &dfs:0 (arguments nil (list (arg &graph:2 None None) (arg &node:2 None None) (arg &color:2 None None) (arg &colors:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &colors:2 Load) (_slice_content (Name &node:2 Load)) Store)) (Name &color:2 Load) None) (For (Name &neighbor:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (fn_22 (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &neighbor:2 Load)) (_starred_content (BinOp (Constant i1 None) Sub (Name &color:2 Load))) (_starred_content (Name &colors:2 Load))) nil) &color:2 &neighbor:2 &colors:2)) (/seq) None) (Return (Constant True None))) nil None None) (FunctionDef &check_odd_cycles:0 (arguments nil (list (arg &graph:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &visited:3 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (fn_9 &n:3) (/seq (If (UnaryOp Not (Subscript (Name &visited:3 Load) (_slice_content (Name &i:3 Load)) Load)) (/seq (If (Call (Name &find_cycle:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &i:3 Load)) (_starred_content (Name &visited:3 Load)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Return (Constant True None))) (/seq))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (fn_4 &graph:4 &b:4 &a:4 &roads:4 &m:4 &n:4 &solve:0 (/choiceseq (If (Call (Name &check_odd_cycles:0 Load) (list (_starred_content (Name &graph:4 Load)) (_starred_content (Name &n:4 Load))) nil) (fn_18) (/seq)) (/splice (fn_3 (/seq (fn_8 (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:4 Load)) (_starred_content (Name &i:4 Load)) (_starred_content (Constant i0 None)) (_starred_content (Name &colors:4 Load))) nil))) &n:4 &colors:4 &i:4)) (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Constant i1 None) (list (comprehension (Name &x:6 Store) (Name &colors:4 Load) (list (Compare (Name &x:6 Load) (list Eq) (list (Constant i1 None)))) i0))))) nil)))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:5 &roads:0 &solve:0))) nil)",
            "(Module (/seq (FunctionDef &check_cycle_and_determine_types:0 (arguments nil (list (arg &n:1 None None) (arg &graph:1 None None)) None nil nil None nil) (/seq (fn_19 &n:1 &types:1) (For (Name &start_node:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_7 &start_node:1 &types:1) (/seq (/splice (fn_16 &start_node:1 &queue:1 &types:1 &node_type:1 &node:1 (/choiceseq (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (fn_7 &neighbor:1 &types:1) (/seq (Assign (list (Name &neighbor_type:1 Store)) (fn_24 (Name &node_type:1 Load)) None) (/splice (fn_26 (Name &neighbor_type:1 Load) &neighbor:1 &types:1 &queue:1))) (/seq (If (Compare (Subscript (Name &types:1 Load) (_slice_content (Name &neighbor:1 Load)) Load) (list Eq) (list (Name &node_type:1 Load))) (/seq (Return (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant None None))) Load))) (/seq))))) (/seq) None))))) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Constant True None)) (_starred_content (Name &types:1 Load))) Load))) nil None None) (fn_5 &n:2 &_:3 &graph:2 &b:2 &a:2 &roads:2 &m:2 &minimum_decoration_cost:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &can_decorate:2 Store)) (_starred_content (Name &types:2 Store))) Store)) (Call (Name &check_cycle_and_determine_types:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &graph:2 Load))) nil) None) (fn_8 (Name &can_decorate:2 Load)) (Assign (list (Name &type_count:2 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &t:2 Store) (Name &types:2 Load) (/seq (AugAssign (Subscript (Name &type_count:2 Load) (_slice_content (Name &t:2 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &cost_edges:2 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load) None) (Assign (list (Name &cost:2 Store)) (BinOp (BinOp (BinOp (Subscript (Name &type_count:2 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &cost_edges:2 Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Subscript (Name &type_count:2 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name &cost_edges:2 Load) (_slice_content (Constant i1 None)) Load))) Add (BinOp (Subscript (Name &type_count:2 Load) (_slice_content (Constant i2 None)) Load) Mult (Subscript (Name &cost_edges:2 Load) (_slice_content (Constant i2 None)) Load))) None) (Return (Name &cost:2 Load)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &minimum_decoration_cost:0 Load) (list (_starred_content (Constant i5 None)) (_starred_content (Constant i8 None)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None))) Load))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &minimum_decoration_cost:0 Load) (list (_starred_content (Constant i6 None)) (_starred_content (Constant i5 None)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i6 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) Load))) Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_cycle_cost:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Name &edges:1 Load) (/seq (/splice (fn_20 &v:1 &u:1 &graph:1))) (/seq) None) (Assign (list (Name &visited:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name &n:1 Load) Add (Constant i1 None))) None) (fn_10 &n:1 &parent:1) (Assign (list (Name &cycle_edges:1 Store)) (List nil Load) None) (FunctionDef &dfs:1 (arguments nil (list (arg &v:3 None None) (arg &p:3 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &v:3 Load)) Store)) (Constant True None) None) (Assign (list (Subscript (Name &parent:1 Load) (_slice_content (Name &v:3 Load)) Store)) (Name &p:3 Load) None) (For (Name &u:3 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &v:3 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &u:3 Load)) Load)) (/seq (If (Call (Name &dfs:1 Load) (list (_starred_content (Name &u:3 Load)) (_starred_content (Name &v:3 Load))) nil) (/seq (Return (Constant True None))) (/seq))) (/seq (If (BoolOp And (list (Compare (Name &u:3 Load) (list NotEq) (list (Name &p:3 Load))) (Subscript (Name &visited:1 Load) (_slice_content (Name &u:3 Load)) Load))) (/seq (Expr (Call (Attribute (Name &cycle_edges:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &u:3 Load)) (_starred_content (Name &v:3 Load))) Load))) nil)) (Return (Constant True None))) (/seq))))) (/seq) None) (Return (Constant False None))) nil None None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &i:1 Load)) Load)) (/seq (If (Call (Name &dfs:1 Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq Break) (/seq))) (/seq))) (/seq) None) (If (Name &cycle_edges:1 Load) (/seq (Return (BinOp (Call (Name g_len Load) (list (_starred_content (Name &cycle_edges:1 Load))) nil) Mod (Constant i2 None)))) (/seq (Return (Constant i0 None))))) nil None None) (FunctionDef &get_min_cost:0 (arguments nil (list (arg &n:2 None None) (arg &edges:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &cycle_cost:2 Store)) (Call (Name &find_cycle_cost:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &edges:2 Load))) nil) None) (If (Compare (Name &cycle_cost:2 Load) (list Eq) (list (Constant i0 None))) (fn_18) (/seq (Return (Call (Name g_len Load) (list (_starred_content (Name &edges:2 Load))) nil))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_17) None) (Assign (list (Name &edges:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_17))) nil) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &get_min_cost:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &edges:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_4 &graph:1 &v:1 &u:1 &edges:1 &m:1 &n:1 &solve:0 (/choiceseq (FunctionDef &bipartite_check:1 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_3 (/seq (/splice (fn_2 &start:2 &queue:2 &colors:2 &node:2 &neighbor:2 &graph:1))) &n:1 &colors:2 &start:2)) (Return (Constant True None))) nil None None) (fn_8 (Call (Name &bipartite_check:1 Load) nil nil)) (Return (Name &m:1 Load)))) (If (fn_29) (/seq (/splice (fn_6 (Name g_tuple Load) &m:0 &n:0 &_:3 &edges:0 &solve:0))) (/seq))) nil)",
            "(Module (/seq (fn_4 &graph:1 &v:1 &u:1 &roads:1 &m:1 &n:1 &solve:0 (/choiceseq (Assign (list (Name &decoration_cost:1 Store)) (Dict (list (Constant i0 None) (Constant i1 None) (Constant i2 None)) (list (Constant i0 None) (Constant i1 None) (Constant i2 None))) None) (Assign (list (Name &road_cost:1 Store)) (Dict nil nil) None) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &color:1 Store)) (Dict nil nil) None) (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start:2 Load))) Load))) nil) None) (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &start:2 Load))) nil)) (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i0 None) None) (While (Name &queue:2 Load) (/seq (Assign (list (Name &node:2 Store)) (Call (Attribute (Name &queue:2 Load) s_popleft Load) nil nil) None) (For (Name &neighbor:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list In) (list (Name &visited:1 Load))) (/seq (If (BoolOp And (list (Compare (Tuple (list (_starred_content (Name &node:2 Load)) (_starred_content (Name &neighbor:2 Load))) Load) (list NotIn) (list (Name &road_cost:1 Load))) (Compare (Tuple (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &node:2 Load))) Load) (list NotIn) (list (Name &road_cost:1 Load))))) (/seq (If (Compare (BinOp (BinOp (Subscript (Name &color:1 Load) (_slice_content (Name &node:2 Load)) Load) Sub (Subscript (Name &color:1 Load) (_slice_content (Name &neighbor:2 Load)) Load)) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (fn_18) (/seq))) (/seq)) Continue) (/seq)) (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &neighbor:2 Load))) nil)) (Assign (list (Subscript (Name &color:1 Load) (_slice_content (Name &neighbor:2 Load)) Store)) (fn_24 (Subscript (Name &color:1 Load) (_slice_content (Name &node:2 Load)) Load)) None) (Assign (list (Subscript (Name &road_cost:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &node:2 Load)) (_slice_content (Name &neighbor:2 Load))) Load)) Store)) (Subscript (Name &decoration_cost:1 Load) (_slice_content (fn_24 (Subscript (Name &color:1 Load) (_slice_content (Name &node:2 Load)) Load))) Load) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Name &neighbor:2 Load))) nil))) (/seq) None)) (/seq)) (Return (Constant i0 None))) nil None None) (For (Name &i:1 Store) (fn_9 &n:1) (/seq (If (Compare (Name &i:1 Load) (list NotIn) (list (Name &visited:1 Load))) (/seq (If (Compare (Call (Name &bfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (fn_18) (/seq))) (/seq))) (/seq) None) (Assign (list (Name &total_cost:1 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Attribute (Name &road_cost:1 Load) s_values Load) nil nil))) nil) None) (If (fn_27 (Name &total_cost:1 Load)) (fn_18) (/seq)) (Return (Name &total_cost:1 Load)))) (/splice (fn_1 (Name g_tuple Load) &m:0 &n:0 &_:3 &roads:0 &solve:0))) nil)"
        ]
    },
    "179": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (Subscript (Call (Name g_min Load) (list (_starred_content (Name %2 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))))) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %5 Store)) (Subscript (Call (Name g_max Load) (list (_starred_content (Name %2 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg %4 None None)) None nil nil None nil) (Subscript (Name %4 Load) (_slice_content (Constant i0 None)) Load))))) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %7 Store)) (Subscript (Call (Name g_min Load) (list (_starred_content (Name %2 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg %6 None None)) None nil nil None nil) (Subscript (Name %6 Load) (_slice_content (Constant i1 None)) Load))))) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name %9 Store)) (Subscript (Call (Name g_max Load) (list (_starred_content (Name %2 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg %8 None None)) None nil nil None nil) (Subscript (Name %8 Load) (_slice_content (Constant i1 None)) Load))))) (_slice_content (Constant i1 None)) Load) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %2 (arguments nil nil None nil nil None nil) (/seq ?0 (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name %1 Load) i-1 (JoinedStr (list (Constant s_.2f None)))))))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_zip Load) (list (_starred_starred (Starred (Name %1 Load) Load))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name %3 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name %3 Load))) nil))) Load) None) (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name %2 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name %2 Load))) nil))) Load) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue #0 i-1 (JoinedStr (list (Constant s_.2f None)))))))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (BinOp (Name %2 Load) Sub (Name %1 Load)) None) (Assign (list (Name %6 Store)) (BinOp (Name %5 Load) Sub (Name %4 Load)) None) (Assign (list (Name %7 Store)) (Call (Name g_max Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %6 Load))) nil) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp #0 Mult (Constant i100 None)))) nil) Div (Constant i100 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_4))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %6 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %4 %3 %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MCwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %1 Load))) nil))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %6 Load) nil nil))) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %5 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Name %3 Load))) (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil) None) (AugAssign (Name %5 Store) Div #0) (Return (Call (Name g_round Load) (list (_starred_content (Name %5 Load)) (_starred_content (Constant i2 None))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:2 &polygon:1)) (/splice (fn_1 &x:3 &polygon:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &width:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &height:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) nil) None) (If (Compare (Name &k:1 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &side_length:1 Store) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil))) (/seq)))))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &k:1 &n:1 &_:2 &points:1)) (/splice (fn_1 &p:3 &points:1 &min_x:1 &p:4 &max_x:1 &p:5 &min_y:1 &p:6 &max_y:1)) (Assign (list (Name &width:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &height:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) nil) None) (AugAssign (Name &side_length:1 Store) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)))))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:2 &coords:1)) (/splice (fn_1 &x:3 &coords:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &width:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &height:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) nil) None) (AugAssign (Name &side_length:1 Store) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (fn_7))) nil))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Assign (list (Name &points:1 Store)) (ListComp (Call (Name &read_ints:0 Load) nil nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (/splice (fn_1 &x:3 &points:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &required_side:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MCwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (fn_9 (Name &required_side:1 Load)))) nil))) nil))) nil None None) (If (fn_13) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:3 &polygon:1)) (Return (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load)) (_starred_content (Name &polygon:1 Load))) Load))) nil (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load)) (_slice_content (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load)) Load))) Load)) Load) None) (FunctionDef &main:0 (arguments nil (list (arg &n:2 (Name g_int Load) None) (arg &k:2 (Name g_int Load) None) (arg &polygon:2 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load)) Load) None)) None nil nil None nil) (/seq (/splice (fn_1 &x:4 &polygon:2 &x_min:2 &x:5 &x_max:2 &x:6 &y_min:2 &x:7 &y_max:2)) (/splice (fn_12 (BinOp (Name &k:2 Load) Pow (Constant f0.5 None)) &y_min:2 &y_max:2 &x_min:2 &x_max:2 &side_length:2))) nil (Name g_float Load) None) (If (fn_13) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store)) (_starred_content (Name &polygon:0 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (fn_6 (Call (Name &main:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &polygon:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:2 &polygon:1)) (Assign (list (Name &xmin:1 Store) (Name &ymin:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &xmax:1 Store) (Name &ymax:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (For (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store) (Name &polygon:1 Load) (/seq (Assign (list (Name &xmin:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &xmin:1 Load)) (_starred_content (Name &x:1 Load))) nil) None) (Assign (list (Name &xmax:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &xmax:1 Load)) (_starred_content (Name &x:1 Load))) nil) None) (Assign (list (Name &ymin:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ymin:1 Load)) (_starred_content (Name &y:1 Load))) nil) None) (Assign (list (Name &ymax:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ymax:1 Load)) (_starred_content (Name &y:1 Load))) nil) None)) (/seq) None) (Assign (list (Name &side_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (BinOp (Name &xmax:1 Load) Sub (Name &xmin:1 Load))) (_starred_content (BinOp (Name &ymax:1 Load) Sub (Name &ymin:1 Load)))) nil) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None))))) nil)",
            "(Module (/seq (FunctionDef &find_bounds:0 (arguments nil (list (arg &polygon:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &polygon:1 &y_coords:1 &x_coords:1 &max_x:1 &min_x:1 &max_y:1 &min_y:1)) (Return (Tuple (list (_starred_content (Name &min_x:1 Load)) (_starred_content (Name &max_x:1 Load)) (_starred_content (Name &min_y:1 Load)) (_starred_content (Name &max_y:1 Load))) Load))) nil None None) (FunctionDef &side_length_required:0 (arguments nil (list (arg &min_x:2 None None) (arg &max_x:2 None None) (arg &min_y:2 None None) (arg &max_y:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &dx:2 Store)) (BinOp (BinOp (Name &max_x:2 Load) Sub (Name &min_x:2 Load)) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:2 Load))) nil)) None) (Assign (list (Name &dy:2 Store)) (BinOp (BinOp (Name &max_y:2 Load) Sub (Name &min_y:2 Load)) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:2 Load))) nil)) None) (Return (Call (Name g_max Load) (list (_starred_content (Name &dx:2 Load)) (_starred_content (Name &dy:2 Load))) nil))) nil None None) (/splice (fn_3 &length:3 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:3 &n:3 &_:4 &polygon:3)) (Assign (list (Tuple (list (_starred_content (Name &min_x:3 Store)) (_starred_content (Name &max_x:3 Store)) (_starred_content (Name &min_y:3 Store)) (_starred_content (Name &max_y:3 Store))) Store)) (Call (Name &find_bounds:0 Load) (list (_starred_content (Name &polygon:3 Load))) nil) None) (Assign (list (Name &length:3 Store)) (Call (Name &side_length_required:0 Load) (list (_starred_content (Name &min_x:3 Load)) (_starred_content (Name &max_x:3 Load)) (_starred_content (Name &min_y:3 Load)) (_starred_content (Name &max_y:3 Load)) (_starred_content (Name &k:3 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &find_bounding_box:0 (arguments nil (list (arg &poly:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:4 &poly:1 &min_x:1 &x:5 &max_x:1 &x:6 &min_y:1 &x:7 &max_y:1)) (Return (Tuple (list (_starred_content (Name &min_x:1 Load)) (_starred_content (Name &max_x:1 Load)) (_starred_content (Name &min_y:1 Load)) (_starred_content (Name &max_y:1 Load))) Load))) nil None None) (/splice (fn_3 &length_per_map:2 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:2 &n:2 &_:3 &polygon:2)) (Assign (list (Tuple (list (_starred_content (Name &min_x:2 Store)) (_starred_content (Name &max_x:2 Store)) (_starred_content (Name &min_y:2 Store)) (_starred_content (Name &max_y:2 Store))) Store)) (Call (Name &find_bounding_box:0 Load) (list (_starred_content (Name &polygon:2 Load))) nil) None) (Assign (list (Name &side:2 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:2 Load) Sub (Name &min_x:2 Load))) (_starred_content (BinOp (Name &max_y:2 Load) Sub (Name &min_y:2 Load)))) nil) None) (Assign (list (Name &length_per_map:2 Store)) (BinOp (Name &side:2 Load) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:2 Load))) nil)) None))))) nil)",
            "(Module (/seq (Expr (Constant s-WzEwLCA4NCwgMTA0LCAxMDUsIDExNSwgMzIsIDEwMiwgMTE3LCAxMTAsIDk5LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyLCAxMTYsIDk3LCAxMDcsIDEwMSwgMTE1LCAzMiwgOTcsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgOTcsIDMyLCAxMTIsIDExMSwgMTA4LCAxMjEsIDEwMywgMTExLCAxMTAsIDQ0LCAzMiwgOTksIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgOTgsIDExMSwgMTE3LCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDk4LCAxMTEsIDEyMCwgMzIsIDQwLCAxMDksIDEwNSwgMTEwLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTA5LCA5NywgMTIwLCAzMiwgMTIwLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTIxLCA0MSwgNDQsIDEwLCA5NywgMTEwLCAxMDAsIDMyLCA5OSwgMTExLCAxMDksIDExMiwgMTE3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOSwgMTA1LCAxMTAsIDEwNSwgMTA5LCAxMTcsIDEwOSwgMzIsIDExNSwgMTA1LCAxMDAsIDEwMSwgMzIsIDEwOCwgMTAxLCAxMTAsIDEwMywgMTE2LCAxMDQsIDMyLCAxMTQsIDEwMSwgMTEzLCAxMTcsIDEwNSwgMTE0LCAxMDEsIDEwMCwgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTMsIDExNywgOTcsIDExNCwgMTAxLCAzMiwgMTA5LCA5NywgMTEyLCAxMTUsIDMyLCAxMTYsIDExMSwgMzIsIDk5LCAxMTEsIDExOCwgMTAxLCAxMTQsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAxLCAxMTAsIDExNiwgMTA1LCAxMTQsIDEwMSwgMzIsIDExMiwgMTExLCAxMDgsIDEyMSwgMTAzLCAxMTEsIDExMCwgNDQsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDk3LCAzMiwgMTE1LCAxMTIsIDEwMSwgOTksIDEwNSwgMTAyLCAxMDUsIDk5LCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAxMCwgMTExLCAxMDIsIDMyLCAxMDksIDk3LCAxMTIsIDExNSwgNDYsIDEwXQ== None)) (FunctionDef &min_map_size:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &coords:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &xs:1 Store)) (ListComp (Name &x:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &_:2 Store))) Store) (Name &coords:1 Load) nil i0))) None) (Assign (list (Name &ys:1 Store)) (ListComp (Name &y:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &y:3 Store))) Store) (Name &coords:1 Load) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &x_min:1 Store)) (_starred_content (Name &x_max:1 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &xs:1 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &xs:1 Load))) nil))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &y_min:1 Store)) (_starred_content (Name &y_max:1 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &ys:1 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &ys:1 Load))) nil))) Load) None) (Assign (list (Name &width:1 Store)) (BinOp (Name &x_max:1 Load) Sub (Name &x_min:1 Load)) None) (Assign (list (Name &height:1 Store)) (BinOp (Name &y_max:1 Load) Sub (Name &y_min:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) nil) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Return (Call (Name g_round Load) (list (_starred_content (fn_9 (Name &side_length:1 Load))) (_starred_content (Constant i2 None))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_4) None) (fn_10 &n:0 &_:4 &coords:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTAsIDEwMl0= None) Mod (Call (Name &min_map_size:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &coords:0 Load))) nil)))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:3 &vertices:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (/splice (fn_12 (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil) &min_y:1 &max_y:1 &min_x:1 &max_x:1 &side_length:1))) nil None None) (If (fn_13) (/seq (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:2 &vertices:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTAsIDEwMl0= None) Mod (Call (Name &min_side_length:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &vertices:0 Load))) nil)))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &min_square_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:4 &points:1 &min_x:1 &x:5 &max_x:1 &x:6 &min_y:1 &x:7 &max_y:1)) (Assign (list (Name &side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) None) (Assign (list (Name &adjusted_side_length:1 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &side_length:1 Load) Mult (Name &side_length:1 Load)) Div (Name &k:1 Load)))) nil) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &adjusted_side_length:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (/splice (fn_11 &points:2 &_:3 &n:2 &k:2 &min_square_side_length:0 &main:0))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_4) None) (Assign (list (Name &min_x:0 Store) (Name &min_y:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_x:0 Store) (Name &max_y:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (fn_4) None) (Assign (list (Name &min_x:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_x:0 Load)) (_starred_content (Name &x:0 Load))) nil) None) (Assign (list (Name &max_x:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_x:0 Load)) (_starred_content (Name &x:0 Load))) nil) None) (Assign (list (Name &min_y:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_y:0 Load)) (_starred_content (Name &y:0 Load))) nil) None) (Assign (list (Name &max_y:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_y:0 Load)) (_starred_content (Name &y:0 Load))) nil) None)) (/seq) None) (Assign (list (Name &width:0 Store)) (BinOp (Name &max_x:0 Load) Sub (Name &min_x:0 Load)) None) (Assign (list (Name &height:0 Store)) (BinOp (Name &max_y:0 Load) Sub (Name &min_y:0 Load)) None) (Assign (list (Name &side_length:0 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &width:0 Load)) (_starred_content (Name &height:0 Load))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:0 Load))) nil)) None) (fn_6 (Name &side_length:0 Load))) nil)",
            "(Module (/seq (FunctionDef &find_min_side_length:0 (arguments nil (list (arg &vertices:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &vertices:1 &ys:1 &xs:1 &max_x:1 &min_x:1 &max_y:1 &min_y:1)) (/splice (fn_8 &min_x:1 &max_x:1 &width:1 &min_y:1 &max_y:1 &height:1 &side_length:1)) (AugAssign (Name &side_length:1 Store) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) (Return (fn_9 (Name &side_length:1 Load)))) nil None None) (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:2 &vertices:0)) (Assign (list (Name &min_side_length:0 Store)) (Call (Name &find_min_side_length:0 Load) (list (_starred_content (Name &vertices:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (fn_6 (Name &min_side_length:0 Load))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (fn_4) None) (fn_10 &n:1 &_:2 &vertices:1) (/splice (fn_1 &p:3 &vertices:1 &min_x:1 &p:4 &max_x:1 &p:5 &min_y:1 &p:6 &max_y:1)) (Assign (list (Name &width:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &height:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &map_side:1 &main:0 (/choiceseq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &k:1 &n:1 &_:2 &polygon:1)) (/splice (fn_1 &x:3 &polygon:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &required_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) None) (Assign (list (Name &map_side:1 Store)) (BinOp (Name &required_length:1 Load) Div (BinOp (Name &k:1 Load) Pow (Constant f0.5 None))) None))))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:5 &polygon:1)) (Return (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load)) (_starred_content (Name &polygon:1 Load))) Load))) nil None None) (FunctionDef &get_bounding_box:0 (arguments nil (list (arg &polygon:2 None None)) None nil nil None nil) (/seq (/splice (fn_1 &p:6 &polygon:2 &min_x:2 &p:7 &max_x:2 &p:8 &min_y:2 &p:9 &max_y:2)) (Return (Tuple (list (_starred_content (Name &min_x:2 Load)) (_starred_content (Name &max_x:2 Load)) (_starred_content (Name &min_y:2 Load)) (_starred_content (Name &max_y:2 Load))) Load))) nil None None) (FunctionDef &find_min_square_side_length:0 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None) (arg &polygon:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &min_x:3 Store)) (_starred_content (Name &max_x:3 Store)) (_starred_content (Name &min_y:3 Store)) (_starred_content (Name &max_y:3 Store))) Store)) (Call (Name &get_bounding_box:0 Load) (list (_starred_content (Name &polygon:3 Load))) nil) None) (Assign (list (Name &max_side:3 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:3 Load) Sub (Name &min_x:3 Load))) (_starred_content (BinOp (Name &max_y:3 Load) Sub (Name &min_y:3 Load)))) nil) None) (Return (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &max_side:3 Load) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:3 Load))) nil)) Mult (Constant i100 None)))) nil) Div (Constant i100 None)))) nil None None) (/splice (fn_3 &min_side_length:4 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store)) (_starred_content (Name &polygon:4 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Name &min_side_length:4 Store)) (Call (Name &find_min_square_side_length:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load)) (_starred_content (Name &polygon:4 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &min_square_side:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:2 &points:1 &min_x:1 &x:3 &max_x:1 &x:4 &min_y:1 &x:5 &max_y:1)) (Assign (list (Name &side_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &side_length:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (If (fn_13) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_4) None) (Assign (list (Name &points:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &points:0 Load) s_append Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (fn_4))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTAsIDEwMl0= None) Mod (Call (Name &min_square_side:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &points:0 Load))) nil)))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &min_square_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &coordinates:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &coordinates:1 &ys:1 &xs:1 &max_x:1 &min_x:1 &max_y:1 &min_y:1)) (/splice (fn_8 &min_x:1 &max_x:1 &dist_x:1 &min_y:1 &max_y:1 &dist_y:1 &side_length:1)) (If (Compare (Name &k:1 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &side_length:1 Store) Mult (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil))) (/seq)) (Return (Name &side_length:1 Load))) nil None None) (/splice (fn_11 &coordinates:2 &_:3 &n:2 &k:2 &min_square_side_length:0 &main:0))) nil)",
            "(Module (/seq (FunctionDef &dist:0 (arguments nil (list (arg &x1:1 None None) (arg &y1:1 None None) (arg &x2:1 None None) (arg &y2:1 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &x1:1 Load) Sub (Name &x2:1 Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Name &y1:1 Load) Sub (Name &y2:1 Load)) Pow (Constant i2 None))))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_4) None) (fn_10 &n:0 &_:2 &vertices:0) (/splice (fn_5 &vertices:0 &y_coords:0 &x_coords:0 &max_x:0 &min_x:0 &max_y:0 &min_y:0)) (Assign (list (Tuple (list (_starred_content (Name &width:0 Store)) (_starred_content (Name &height:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &max_x:0 Load) Sub (Name &min_x:0 Load))) (_starred_content (BinOp (Name &max_y:0 Load) Sub (Name &min_y:0 Load)))) Load) None) (Assign (list (Name &side_length:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &width:0 Load)) (_starred_content (Name &height:0 Load))) nil) None) (Assign (list (Name &side_length:0 Store)) (BinOp (Name &side_length:0 Load) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:0 Load))) nil)) None) (fn_6 (Name &side_length:0 Load))) nil)",
            "(Module (/seq (FunctionDef &bounding_box:0 (arguments nil (list (arg &coords:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:4 &coords:1 &min_x:1 &x:5 &max_x:1 &x:6 &min_y:1 &x:7 &max_y:1)) (Return (Tuple (list (_starred_content (Name &min_x:1 Load)) (_starred_content (Name &max_x:1 Load)) (_starred_content (Name &min_y:1 Load)) (_starred_content (Name &max_y:1 Load))) Load))) nil None None) (FunctionDef &calc_side_length:0 (arguments nil (list (arg &bbox:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &width:2 Store)) (BinOp (Subscript (Name &bbox:2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &bbox:2 Load) (_slice_content (Constant i0 None)) Load)) None) (Assign (list (Name &height:2 Store)) (BinOp (Subscript (Name &bbox:2 Load) (_slice_content (Constant i3 None)) Load) Sub (Subscript (Name &bbox:2 Load) (_slice_content (Constant i2 None)) Load)) None) (Assign (list (Name &max_side:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &width:2 Load)) (_starred_content (Name &height:2 Load))) nil) None) (Assign (list (Name &side_length:2 Store)) (fn_9 (BinOp (Name &max_side:2 Load) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:2 Load))) nil))) None) (Return (Name &side_length:2 Load))) nil None None) (/splice (fn_3 &side_length:3 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &k:3 Store))) Store)) (fn_4) None) (Assign (list (Name &coords:3 Store)) (List nil Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &y:3 Store))) Store)) (fn_4) None) (Expr (Call (Attribute (Name &coords:3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &bbox:3 Store)) (Call (Name &bounding_box:0 Load) (list (_starred_content (Name &coords:3 Load))) nil) None) (Assign (list (Name &side_length:3 Store)) (Call (Name &calc_side_length:0 Load) (list (_starred_content (Name &bbox:3 Load)) (_starred_content (Name &k:3 Load))) nil) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &side_per_square:1 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:2 &vertices:1)) (/splice (fn_1 &x:3 &vertices:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &side:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) None) (Assign (list (Name &side_per_square:1 Store)) (BinOp (Name &side:1 Load) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None))))) nil)",
            "(Module (/seq (FunctionDef &min_square_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:3 &points:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (/splice (fn_8 &min_x:1 &max_x:1 &length_x:1 &min_y:1 &max_y:1 &length_y:1 &side_length:1)) (Assign (list (Name &side_length:1 Store)) (Call (Name g_sqrt Load) (list (_starred_content (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &side_length:1 Load) Pow (Constant i2 None)) Div (Name &k:1 Load)))) nil))) nil) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &side_length:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:2 &points:0)) (Assign (list (Name &min_length:0 Store)) (Call (Name &min_square_side_length:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &points:0 Load))) nil) None) (fn_6 (Name &min_length:0 Load))) nil)",
            "(Module (/seq (FunctionDef &min_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:3 &points:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (/splice (fn_8 &min_x:1 &max_x:1 &width:1 &min_y:1 &max_y:1 &height:1 &side_length:1)) (Assign (list (Name &adjusted_side_length:1 Store)) (BinOp (Name &side_length:1 Load) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &adjusted_side_length:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:2 &points:0)) (fn_6 (Call (Name &min_side_length:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &points:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_square_side_length:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:3 &points:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (/splice (fn_8 &min_x:1 &max_x:1 &length:1 &min_y:1 &max_y:1 &width:1 &side_length:1)) (Assign (list (Name &side_length_adjusted:1 Store)) (BinOp (Name &side_length:1 Load) Mult (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &side_length_adjusted:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &k:0 &n:0 &_:2 &points:0)) (fn_6 (Call (Name &min_square_side_length:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &points:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_square_side:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &minX:1 Store)) (Call (Name g_min Load) (list (_starred_content (GeneratorExp (Name &x:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &y:3 Store))) Store) (Name &vertices:1 Load) nil i0))))) nil) None) (Assign (list (Name &maxX:1 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Name &x:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store) (Name &vertices:1 Load) nil i0))))) nil) None) (Assign (list (Name &minY:1 Store)) (Call (Name g_min Load) (list (_starred_content (GeneratorExp (Name &y:5 Load) (list (comprehension (Tuple (list (_starred_content (Name &x:5 Store)) (_starred_content (Name &y:5 Store))) Store) (Name &vertices:1 Load) nil i0))))) nil) None) (Assign (list (Name &maxY:1 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Name &y:6 Load) (list (comprehension (Tuple (list (_starred_content (Name &x:6 Store)) (_starred_content (Name &y:6 Store))) Store) (Name &vertices:1 Load) nil i0))))) nil) None) (/splice (fn_12 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil) &minY:1 &maxY:1 &minX:1 &maxX:1 &side_length:1))) nil None None) (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:2 &vertices:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1MCwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Call (Name &min_square_side:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &vertices:0 Load))) nil))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_map_side_length:0 (arguments nil (list (arg &coords:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &hull:1 Store)) (Call (Name g_ConvexHull Load) (list (_starred_content (Name &coords:1 Load))) nil) None) (Assign (list (Name &hull_points:1 Store)) (Subscript (Name &coords:1 Load) (_slice_content (Attribute (Name &hull:1 Load) s_vertices Load)) Load) None) (Assign (list (Name &min_x:1 Store)) (Call (Attribute (Name g_np Load) s_min Load) (list (_starred_content (Subscript (Name &hull_points:1 Load) (_slice_tuple (Tuple (list (_slice_slice (Slice None None None)) (_slice_content (Constant i0 None))) Load)) Load))) nil) None) (Assign (list (Name &max_x:1 Store)) (Call (Attribute (Name g_np Load) s_max Load) (list (_starred_content (Subscript (Name &hull_points:1 Load) (_slice_tuple (Tuple (list (_slice_slice (Slice None None None)) (_slice_content (Constant i0 None))) Load)) Load))) nil) None) (Assign (list (Name &min_y:1 Store)) (Call (Attribute (Name g_np Load) s_min Load) (list (_starred_content (Subscript (Name &hull_points:1 Load) (_slice_tuple (Tuple (list (_slice_slice (Slice None None None)) (_slice_content (Constant i1 None))) Load)) Load))) nil) None) (Assign (list (Name &max_y:1 Store)) (Call (Attribute (Name g_np Load) s_max Load) (list (_starred_content (Subscript (Name &hull_points:1 Load) (_slice_tuple (Tuple (list (_slice_slice (Slice None None None)) (_slice_content (Constant i1 None))) Load)) Load))) nil) None) (Assign (list (Name &x_len:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &y_len:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Name &x_len:1 Load)) (_starred_content (Name &y_len:1 Load))) nil) Div (Call (Attribute (Name g_np Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None) (Return (Call (Name g_round Load) (list (_starred_content (Name &side_length:1 Load)) (_starred_content (Constant i2 None))) nil))) nil None None) (If (fn_13) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_7) None) (Assign (list (Name &coords:0 Store)) (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (ListComp (Call (Name g_list Load) (list (_starred_content (fn_7))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_map_side_length:0 Load) (list (_starred_content (Name &coords:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_bounding_box:0 (arguments nil (list (arg &points:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &x:4 &points:1 &min_x:1 &x:5 &max_x:1 &x:6 &min_y:1 &x:7 &max_y:1)) (Return (Tuple (list (_starred_content (Name &min_x:1 Load)) (_starred_content (Name &max_x:1 Load)) (_starred_content (Name &min_y:1 Load)) (_starred_content (Name &max_y:1 Load))) Load))) nil None None) (FunctionDef &calculate_side_length:0 (arguments nil (list (arg &min_x:2 None None) (arg &max_x:2 None None) (arg &min_y:2 None None) (arg &max_y:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (/splice (fn_8 &min_x:2 &max_x:2 &delta_x:2 &min_y:2 &max_y:2 &delta_y:2 &side_length:2)) (AugAssign (Name &side_length:2 Store) Div (BinOp (Name &k:2 Load) Pow (Constant f0.5 None))) (Return (Name &side_length:2 Load))) nil None None) (/splice (fn_2 (Name g_input Load) &k:0 &n:0 &_:3 &points:0)) (Assign (list (Tuple (list (_starred_content (Name &min_x:0 Store)) (_starred_content (Name &max_x:0 Store)) (_starred_content (Name &min_y:0 Store)) (_starred_content (Name &max_y:0 Store))) Store)) (Call (Name &find_bounding_box:0 Load) (list (_starred_content (Name &points:0 Load))) nil) None) (Assign (list (Name &side_length:0 Store)) (Call (Name &calculate_side_length:0 Load) (list (_starred_content (Name &min_x:0 Load)) (_starred_content (Name &max_x:0 Load)) (_starred_content (Name &min_y:0 Load)) (_starred_content (Name &max_y:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (fn_6 (Name &side_length:0 Load))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Name g_input Load) &k:1 &n:1 &_:2 &vertices:1)) (/splice (fn_1 &v:3 &vertices:1 &min_x:1 &v:4 &max_x:1 &v:5 &min_y:1 &v:6 &max_y:1)) (Assign (list (Name &needed_side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) None) (Assign (list (Name &side_length:1 Store)) (BinOp (Name &needed_side_length:1 Load) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (fn_4) None) (fn_10 &n:1 &_:2 &polygon:1) (/splice (fn_1 &p:3 &polygon:1 &min_x:1 &p:4 &max_x:1 &p:5 &min_y:1 &p:6 &max_y:1)) (Assign (list (Name &horizontal_distance:1 Store)) (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load)) None) (Assign (list (Name &vertical_distance:1 Store)) (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)) None) (Assign (list (Name &side_length:1 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Name &horizontal_distance:1 Load)) (_starred_content (Name &vertical_distance:1 Load))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)))) nil) None))))) nil)",
            "(Module (/seq (/splice (fn_3 &side_length:1 &main:0 (/choiceseq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &k:1 &n:1 &_:2 &points:1)) (/splice (fn_1 &x:3 &points:1 &min_x:1 &x:4 &max_x:1 &x:5 &min_y:1 &x:6 &max_y:1)) (Assign (list (Name &side_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Name &max_x:1 Load) Sub (Name &min_x:1 Load))) (_starred_content (BinOp (Name &max_y:1 Load) Sub (Name &min_y:1 Load)))) nil) None) (AugAssign (Name &side_length:1 Store) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &k:1 Load))) nil)) (Assign (list (Name &side_length:1 Store)) (Call (Name g_round Load) (list (_starred_content (Name &side_length:1 Load)) (_starred_content (Constant i2 None))) nil) None))))) nil)"
        ]
    },
    "369": {
        "abstractions": [
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %1 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) ?0 (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (Assign (list (Name %4 Store)) (Constant i100 None) None) (Assign (list (Name %5 Store)) (List (list (_starred_content (Constant i4 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i9 None))) Load) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Return (JoinedStr (list (Constant s-WzExNiwgMTE0LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMDgsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyXQ== None) (FormattedValue (Name %5 Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name %4 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Name %3 Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name %2 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Name %1 Load) i-1 None) (Constant s-WzMyLCAxMDIsIDExMSwgMTE3LCAxMTAsIDEwMF0= None)))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name %5 Load) Add (Name %4 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %9 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (list Eq) (list (Name %8 Load))))) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load))) Load) (list Eq) (list (Name %2 Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) #0)) (/seq)) (If (BoolOp And (list (Compare (BinOp (Name %5 Load) Add (Name %3 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %8 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %3 Load))) Load) (list Eq) (list (Name %2 Load))))) (/seq (If (BoolOp And (list (Compare (BinOp (Name %5 Load) Sub (Name %4 Load)) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Sub (Name %4 Load))) Load) (list Eq) (list (Name %9 Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) #0)) (/seq)) (If (BoolOp And (list (Compare (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %9 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load))) Load) (list Eq) (list (Name %2 Load))))) (/seq (If (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (list Eq) (list (Name %8 Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) #0)) (/seq))) (/seq) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Lt) (list (Name %1 Load))) (/seq (Expr (Call (Attribute (Name %2 Load) s_extend Load) (list (_starred_content #0)) nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (If (Compare (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %9 Load))) (/seq (If (BoolOp And (list (Compare (BinOp (Name %5 Load) Add (Name %4 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (list Eq) (list (Name %8 Load))))) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load)) (list Lt) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load))) Load) (list Eq) (list (Name %2 Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) #0)) (/seq))) (/seq) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Tuple (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load)) (_starred_content (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Add (Name %2 Load))) Load)) (_starred_content (Subscript (Name %4 Load) (_slice_content (BinOp (BinOp (Name %3 Load) Add (Name %2 Load)) Add (Name %1 Load))) Load))) Load)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (BinOp #0 Sub (Name %7 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (list Eq) (list (Name %8 Load))) (Compare (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Add (Name %7 Load))) Load) (list Eq) (list (Name %6 Load))))) (/seq (If (Compare (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Sub (Name %3 Load))) Load) (list NotEq) (list (Name %2 Load))) (/seq (Assign (list (Name %1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp #0 Sub (Name %3 Load)) Sub (Name %7 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (list Eq) (list (Name %2 Load))) (Compare (Subscript (Name %5 Load) (_slice_content (BinOp (BinOp (Name %4 Load) Add (Name %3 Load)) Add (Name %7 Load))) Load) (list Eq) (list (Name %6 Load))))) (/seq (If (Compare (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Add (Name %3 Load))) Load) (list NotEq) (list (Name %8 Load))) (/seq (Assign (list (Name %1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BoolOp And (list (Compare (BinOp #0 Add (Name %2 Load)) (list Lt) (list (Name %5 Load))) (Compare (Subscript (Name %3 Load) (_slice_content #0) Load) (list Eq) (list (Name %4 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp #0 Add (Name %2 Load))) Load) (list Eq) (list (Name %1 Load)))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(JoinedStr (list (Constant s-WzExNiwgMTE0LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMDgsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i3 None)) Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i4 None)) Load) i-1 None) (Constant s-WzMyLCAxMDIsIDExMSwgMTE3LCAxMTAsIDEwMF0= None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp And (list (Compare (BinOp #0 Sub (Name %2 Load)) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp #0 Sub (Name %2 Load))) Load) (list Eq) (list (Name %1 Load)))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (BinOp (Name %1 Load) FloorDiv (Constant i40 None)) Add (Constant i1 None)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Lt) (list (Name %1 Load))) (/seq (Expr (Call (Attribute (Name %2 Load) s_extend Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) (/seq)) (Assign (list (Name %3 Store)) #0 None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq #0) (/seq) None)) (/seq) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (Name %1 Load) Div (Constant i40 None)))) nil) Add (Constant i1 None))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq Continue) (/seq)) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) #0 (/seq) None)) (/seq) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil) (list (comprehension (Name %1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Dict nil nil) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %9 Load) Sub (Name %5 Load)) Sub (Name %7 Load)))) nil) (/seq (Assign (list (Name %4 Store)) (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) None) (Assign (list (Name %6 Store)) (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Name %5 Load))) Load) None) (Assign (list (Name %8 Store)) (Subscript (Name %3 Load) (_slice_content (BinOp (BinOp (Name %2 Load) Add (Name %5 Load)) Add (Name %7 Load))) Load) None) ?0) (/seq) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BoolOp And (list (Compare (Subscript (Name %3 Load) (_slice_content #0) Load) (list Eq) (list (Name %4 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp #0 Add (Name %2 Load))) Load) (list Eq) (list (Name %1 Load)))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %9 Load))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load)) (list Lt) (list (Name %9 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %8 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (list Eq) (list (Name %7 Load))) (Compare (Subscript (Name %6 Load) (_slice_content (BinOp (BinOp (Name %5 Load) Add (Name %4 Load)) Add (Name %3 Load))) Load) (list Eq) (list (Name %2 Load))))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq)) ?0) (/seq) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) Sub (Name %1 Load)))) nil) #0 (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Dict nil nil) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp #0 Sub (Name %4 Load)) Sub (Name %5 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (fn_6 %5 %4 %3 %2) None) (If (Compare (Tuple (list (_starred_content (Name %8 Load)) (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) Load) (list In) (list (Name %1 Load))) (/seq (AugAssign (Subscript (Name %1 Load) (_slice_tuple (Tuple (list (_slice_content (Name %8 Load)) (_slice_content (Name %7 Load)) (_slice_content (Name %6 Load))) Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name %1 Load) (_slice_tuple (Tuple (list (_slice_content (Name %8 Load)) (_slice_content (Name %7 Load)) (_slice_content (Name %6 Load))) Load)) Store)) (Constant i1 None) None)))) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list In) (list (Name %2 Load))) (/seq (AugAssign (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store) Add (Constant i1 None))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Constant i1 None) None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) nil) #0 (/seq) None)) (/seq) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %10 Load))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None))) (_starred_content (Name %10 Load))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %3 Load) Add (Constant i1 None))) (_starred_content (Name %10 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) Load) None) (Assign (list (Tuple (list (_starred_content (Name %9 Store)) (_starred_content (Name %8 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name %3 Load) Sub (Name %4 Load))) (_starred_content (BinOp (Name %1 Load) Sub (Name %3 Load)))) Load) None) ?0) (/seq) None)) (/seq) None)) (/seq) None)",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BoolOp And (list (Compare (Subscript (Name %2 Load) (_slice_content (Name %5 Load)) Load) (list Eq) (list (Name %4 Load))) (Compare #0 (list Lt) (list (Name %3 Load))) (Compare (Subscript (Name %2 Load) (_slice_content #0) Load) (list Eq) (list (Name %1 Load)))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Tuple (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load) (list NotIn) (list (Name %4 Load))) (/seq (Assign (list (Subscript (Name %4 Load) (_slice_tuple (Tuple (list (_slice_content (Name %3 Load)) (_slice_content (Name %2 Load)) (_slice_content (Name %1 Load))) Load)) Store)) #0 None)) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &find_first_triple_correlation:0 (arguments nil (list (arg &p:1 None None) (arg &digits:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &occurrences_threshold:1) (For (Name &a:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) nil) (/seq (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Name &b:1 Load))) (/seq Continue) (/seq)) (For (Name &c:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i10 None))) nil) (/seq (Assign (list (Name &occurrences:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))) (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &occurrences_threshold:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_4 (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) &p:0 &all_lines:0)) (Assign (list (Name &digits:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Name &all_lines:0 Load) (_slice_slice (Slice None (Name &p:0 Load) None)) Load))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_first_triple_correlation:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &digits:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &threshold:1 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &p:1 Load) Div (Constant i40 None)))) nil) Add (Constant i1 None)) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (Assign (list (Name &ab_counts:1 Store)) (Dict nil nil) None) (Assign (list (Name &bc_counts:1 Store)) (Dict nil nil) None) (Assign (list (Name &ac_counts:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (Assign (list (Name &ab:1 Store)) (Tuple (list (_starred_content (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load))) Load) None) (If (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (/seq (Assign (list (Name &c:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) None) (Assign (list (Subscript (Name &ab_counts:1 Load) (_slice_content (Name &ab:1 Load)) Store)) (BinOp (Call (Attribute (Name &ab_counts:1 Load) s_get Load) (list (_starred_content (Name &ab:1 Load)) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None) (If (Compare (Subscript (Name &ab_counts:1 Load) (_slice_content (Name &ab:1 Load)) Load) (list GtE) (list (Name &threshold:1 Load))) (/seq (Assign (list (Subscript (Name &bc_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i1 None)) Load)) (_slice_content (Name &c:1 Load))) Load)) Store)) (BinOp (Call (Attribute (Name &bc_counts:1 Load) s_get Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Name &c:1 Load))) Load)) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None) (Assign (list (Subscript (Name &ac_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i0 None)) Load)) (_slice_content (Name &c:1 Load))) Load)) Store)) (BinOp (Call (Attribute (Name &ac_counts:1 Load) s_get Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Name &c:1 Load))) Load)) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None) (If (BoolOp And (list (Compare (Subscript (Name &ab_counts:1 Load) (_slice_content (Name &ab:1 Load)) Load) (list Eq) (list (Subscript (Name &bc_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i1 None)) Load)) (_slice_content (Name &c:1 Load))) Load)) Load))) (Compare (Subscript (Name &ab_counts:1 Load) (_slice_content (Name &ab:1 Load)) Load) (list Eq) (list (Subscript (Name &ac_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name &ab:1 Load) (_slice_content (Constant i0 None)) Load)) (_slice_content (Name &c:1 Load))) Load)) Load))))) (/seq (Return (JoinedStr (list (Constant s-WzExNiwgMTE0LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMDgsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyXQ== None) (FormattedValue (Subscript (Name &ab:1 Load) (_slice_content (Constant i0 None)) Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name &n:1 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Subscript (Name &ab:1 Load) (_slice_content (Constant i1 None)) Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name &m:1 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Name &c:1 Load) i-1 None) (Constant s-WzMyLCAxMDIsIDExMSwgMTE3LCAxMTAsIDEwMF0= None))))) (/seq))) (/seq))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_20 (/seq (fn_17 &p:2) (Assign (list (Name &sequence:2 Store)) (Call (Name g_list Load) (list (_starred_content (fn_30))) nil) None) (Assign (list (Name &output:2 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &output:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (Assign (list (Name &minimum_occurrences:1 Store)) (IfExp (BinOp (Name &p:1 Load) Mod (Constant i40 None)) (BinOp (BinOp (Name &p:1 Load) FloorDiv (Constant i40 None)) Add (Constant i1 None)) (BinOp (Name &p:1 Load) FloorDiv (Constant i40 None))) None) (For (Name &a:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i9 None) Add (Constant i1 None)))) nil) (/seq (For (Name &b:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i9 None) Add (Constant i1 None)))) nil) (/seq (For (Name &c:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i9 None) Add (Constant i1 None)))) nil) (/seq (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Constant i2 None)))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Constant i1 None)))) nil) (/seq (/splice (fn_3 (/seq Break) &correlation_count:1 &c:1 &m:1 &n:1 &i:1 &sequence:1 &p:1 &b:1 &a:1)) (If (Compare (Name &correlation_count:1 Load) (list GtE) (list (Name &minimum_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (fn_17 &p:0) (Assign (list (Name &sequence_raw:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:0 Load) Add (Constant i99 None)) FloorDiv (Constant i100 None)))) nil) (/seq (Expr (Call (Attribute (Name &sequence_raw:0 Load) s_extend Load) (list (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) (/seq) None) (Assign (list (Name &sequence:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &digit:2 Load))) nil) (list (comprehension (Name &digit:2 Store) (Name &sequence_raw:0 Load) nil i0))) None) (Assign (list (Name &output:0 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &output:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &appearances:1 Store)) (Dict nil nil) None) (fn_11 &p:1 &min_occur:1) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &sequence:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) (/seq (Assign (list (Name &b:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (Name &j:1 Load)) Load) None) (Assign (list (Name &n:1 Store)) (BinOp (Name &j:1 Load) Sub (Name &i:1 Load)) None) (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) Sub (Name &j:1 Load)))) nil) (/seq (If (Compare (BinOp (Name &j:1 Load) Add (Name &m:1 Load)) (list GtE) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (/seq Break) (/seq)) (Assign (list (Name &c:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Name &m:1 Load))) Load) None) (Assign (list (Name &key:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) Load) None) (fn_25 &key:1 &appearances:1)) (/seq) None)) (/seq) None)) (/seq) None) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store)) (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &appearances:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &min_occur:1 Load))) (/seq (Assign (list (Name &abc_condition:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &k:2 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (BinOp (Name &k:2 Load) Add (Name &n:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &k:2 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))) (Compare (BinOp (BinOp (Name &k:2 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &k:2 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (list (comprehension (Name &k:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Name &bca_condition:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &k:3 Load)) Load) (list Eq) (list (Name &b:1 Load))) (Compare (BinOp (Name &k:3 Load) Add (Name &m:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &k:3 Load) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))) (Compare (BinOp (Name &k:3 Load) Sub (Name &n:1 Load)) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &k:3 Load) Sub (Name &n:1 Load))) Load) (list Eq) (list (Name &a:1 Load))))) (list (comprehension (Name &k:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Name &acb_condition:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &k:4 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (BinOp (BinOp (Name &k:4 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &k:4 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))) (Compare (BinOp (Name &k:4 Load) Add (Name &n:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &k:4 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))))) (list (comprehension (Name &k:4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) nil i0))))) nil) None) (If (BoolOp And (list (Name &abc_condition:1 Load) (Name &bca_condition:1 Load) (Name &acb_condition:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_12 (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load)) (_starred_content (Name &p:0 Load))) nil) &p:0 &sequence:0 &result:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &seq:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_occurrences:1 Store)) (fn_14 &p:1) None) (/splice (fn_23 (/seq (Assign (list (Name &correlations:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &seq:1) None) (fn_29 (List nil Load) &c:1 &b:1 &a:1 &correlations:1) (Expr (Call (Attribute (Subscript (Name &correlations:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &indexes:1 Store))) Store) (Call (Attribute (Name &correlations:1 Load) s_items Load) nil nil) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &indexes:1 Load))) nil) (list GtE) (list (Name &min_occurrences:1 Load))) (/seq (Assign (list (Name &valid_correlation:1 Store)) (Constant True None) None) (For (Name &idx:1 Store) (Name &indexes:1 Load) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &idx:1 Load) Sub (Name &n:1 Load)) (list Lt) (list (Constant i0 None))) (Compare (Subscript (Name &seq:1 Load) (_slice_content (BinOp (Name &idx:1 Load) Sub (Name &n:1 Load))) Load) (list NotEq) (list (Name &a:1 Load))))) (/seq (Assign (list (Name &valid_correlation:1 Store)) (Constant False None) None) Break) (/seq)) (If (BoolOp Or (list (Compare (BinOp (BinOp (Name &idx:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list GtE) (list (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil))) (Compare (Subscript (Name &seq:1 Load) (_slice_content (BinOp (BinOp (Name &idx:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))))) (/seq (Assign (list (Name &valid_correlation:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Name &valid_correlation:1 Load) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None)) &n:1 &seq:1 &m:1))) nil None None) (/splice (fn_4 (fn_16) &p:0 &seq:0)) (Assign (list (Name &result:0 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &seq:0 Load)) (_starred_content (Name &p:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &threshold:1 Store)) (BinOp (UnaryOp USub (BinOp (UnaryOp USub (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil)) FloorDiv (Constant i40 None))) Add (Constant i1 None)) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) (/seq (Assign (list (Name &correlation_counts:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) Sub (BinOp (Name &n:1 Load) Add (Name &m:1 Load))))) nil) (/seq (Assign (list (Name &a:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &b:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) None) (Assign (list (Name &c:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) None) (Assign (list (Name &correlation:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) Load) None) (fn_25 &correlation:1 &correlation_counts:1) (If (Compare (Subscript (Name &correlation_counts:1 Load) (_slice_content (Name &correlation:1 Load)) Load) (list GtE) (list (Name &threshold:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &digits:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (UnaryOp USub (BinOp (UnaryOp USub (Name &p:0 Load)) FloorDiv (Constant i100 None))))) nil) (/seq (Expr (Call (Attribute (Name &digits:0 Load) s_extend Load) (list (_starred_content (fn_30))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &digits:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &digits:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &min_occurrence:1) (fn_26 (/seq (/splice (fn_24 (Name &p:1 Load) &occurrences:1 &digits:1 &i:1 &n:1 &m:1 &c:1 &b:1 &a:1)) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &occurrences:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &min_occurrence:1 Load))) (/seq (Assign (list (Name &cond1:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (fn_21 (BinOp (Name &i:2 Load) Add (Name &n:1 Load)) &c:1 &m:1 &digits:1 &b:1) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Name &a:1 Load)))) i0))))) nil) None) (Assign (list (Name &cond2:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (BoolOp And (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (Name &i:3 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (BinOp (Name &i:3 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &i:3 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load)))) i0))))) nil) None) (Assign (list (Name &cond3:1 Store)) (Call (Name g_all Load) (list (_starred_content (GeneratorExp (fn_21 (Name &i:4 Load) &b:1 &n:1 &digits:1 &a:1) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (BinOp (Name &i:4 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load)))) i0))))) nil) None) (If (BoolOp And (list (Name &cond1:1 Load) (Name &cond2:1 Load) (Name &cond3:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None)) &m:1 &n:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (Assign (list (Name &p:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &digits:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:0 Load) FloorDiv (Constant i100 None)) Add (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &digits:0 Load) s_extend Load) (list (_starred_content (fn_30))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &digits:0 Load)) (_starred_content (Name &p:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (Assign (list (Name &threshold:1 Store)) (BinOp (UnaryOp USub (BinOp (UnaryOp USub (Name &p:1 Load)) FloorDiv (Constant i40 None))) Add (Constant i1 None)) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Constant i1 None)))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (Assign (list (Name &count:1 Store)) (BinOp (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10 None)) Mult (Constant i10 None)) Mult (Constant i10 None)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &sequence:1) None) (Assign (list (Name &index:1 Store)) (BinOp (BinOp (BinOp (Name &a:1 Load) Mult (Constant i100 None)) Add (BinOp (Name &b:1 Load) Mult (Constant i10 None))) Add (Name &c:1 Load)) None) (AugAssign (Subscript (Name &count:1 Load) (_slice_content (Name &index:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (fn_13 (If (Compare (Subscript (Name &count:1 Load) (_slice_content (BinOp (BinOp (BinOp (Name &a:1 Load) Mult (Constant i100 None)) Add (BinOp (Name &b:1 Load) Mult (Constant i10 None))) Add (Name &c:1 Load))) Load) (list GtE) (list (Name &threshold:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (If (fn_8 (Name &i:1 Load) &b:1 &n:1 &sequence:1 &a:1 &p:1) (/seq (If (BoolOp Or (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list GtE) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq)) (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (If (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq)) (If (fn_8 (Name &i:1 Load) &c:1 &m:1 &sequence:1 &b:1 &p:1) (/seq (If (BoolOp Or (list (Compare (Name &i:1 Load) (list Lt) (list (Name &n:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list NotEq) (list (Name &a:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (If (Name &valid:1 Load) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq)) &c:1 &b:1 &a:1)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (fn_17 &p:0) (Assign (list (Name &sequence:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 &sequence:1 &p:1 &find_triple_correlation:0 &p:0 &digits:0 (/choiceseq (fn_11 &p:1 &threshold:1) (FunctionDef &check_correlation:1 (arguments nil (list (arg &a:2 None None) (arg &n:2 None None) (arg &b:2 None None) (arg &m:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (/seq) &count:2 &c:2 &m:2 &n:2 &i:2 &sequence:1 &p:1 &b:2 &a:2)) (Return (Compare (Name &count:2 Load) (list GtE) (list (Name &threshold:1 Load))))) nil None None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (fn_13 (If (Call (Name &check_correlation:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) nil) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq)) &c:1 &b:1 &a:1)) (/seq) None)) (/seq) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &digits:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &check_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None) (arg &a:1 None None) (arg &n:1 None None) (arg &b:1 None None) (arg &m:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (/splice (fn_22 &count:1 &c:1 &m:1 &n:1 &i:1 &sequence:1 &b:1 &a:1 &p:1 (/choiceseq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) (list GtE) (list (Constant i0 None))) (Compare (BinOp (Name &i:1 Load) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &b:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list Eq) (list (Name &a:1 Load))))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list GtE) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq))))) (Return (Compare (Name &count:1 Load) (list GtE) (list (BinOp (BinOp (Name &p:1 Load) FloorDiv (Constant i40 None)) Add (Constant i1 None)))))) nil None None) (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:2 None None) (arg &p:2 None None)) None nil nil None nil) (/seq (/splice (fn_23 (/seq (fn_13 (If (Call (Name &check_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load)) (_starred_content (Name &a:2 Load)) (_starred_content (Name &n:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &m:2 Load)) (_starred_content (Name &c:2 Load))) nil) (fn_2 &c:2 &m:2 &b:2 &n:2 &a:2) (/seq)) &c:2 &b:2 &a:2)) &n:2 &sequence:2 &m:2))) nil None None) (/splice (fn_20 (/seq (/splice (fn_4 (fn_18 &x:4) &p:3 &sequence:3)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:3 Load)) (_starred_content (Name &p:3 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (Assign (list (Name &min_occurrences:1 Store)) (fn_14 &p:1) None) (Assign (list (Name &correlations_counts:1 Store)) (Dict nil nil) None) (fn_27 &k:1 &sequence:1 &j:1 &i:1 &c:1 &b:1 &a:1 &m:1 &n:1 &p:1 (/choiceseq (Assign (list (Name &triplet:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) Load) None) (fn_25 &triplet:1 &correlations_counts:1))) (Assign (list (Name &valid_correlations:1 Store)) (ListComp (Name &triplet:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &triplet:2 Store)) (_starred_content (Name &count:2 Store))) Store) (Call (Attribute (Name &correlations_counts:1 Load) s_items Load) nil nil) (list (Compare (Name &count:2 Load) (list GtE) (list (Name &min_occurrences:1 Load)))) i0))) None) (If (UnaryOp Not (Name &valid_correlations:1 Load)) (/seq (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) (/seq (Expr (Call (Attribute (Name &valid_correlations:1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name &x:4 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &x:4 Load) (_slice_content (Constant i3 None)) Load))) Load)))))) (Assign (list (Name &chosen_correlation:1 Store)) (Subscript (Name &valid_correlations:1 Load) (_slice_content (Constant i0 None)) Load) None) (Return (fn_9 &chosen_correlation:1))))) nil None None) (fn_17 &p:0) (Assign (list (Name &sequence:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triplet_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (fn_11 &p:1 &minimum_occurrences:1) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &p:1 Load) Sub (Constant i2 None)))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (/splice (fn_19 &a_b_c_counts:1 &i:1 &sequence:1 &a:1 &n:1 &b:1 &m:1 &c:1 &p:1 (/choiceseq (fn_29 (Constant i0 None) &c:1 &b:1 &a:1 &a_b_c_counts:1) (AugAssign (Subscript (Name &a_b_c_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store) Add (Constant i1 None))))) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &a_b_c_counts:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &minimum_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_4 (fn_30) &p:0 &sequence:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triplet_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &min_occurrences:1) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (/splice (fn_19 &counter:1 &i:1 &sequence:1 &a:1 &n:1 &b:1 &m:1 &c:1 &p:1 (/choiceseq (Assign (list (Name &key:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) Load) None) (Assign (list (Subscript (Name &counter:1 Load) (_slice_content (Name &key:1 Load)) Store)) (BinOp (Call (Attribute (Name &counter:1 Load) s_get Load) (list (_starred_content (Name &key:1 Load)) (_starred_content (Constant i0 None))) nil) Add (Constant i1 None)) None)))) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store)) (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &counter:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (fn_17 &p:0) (Assign (list (Name &sequence:0 Store)) (fn_18 &x:2) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load)) (_starred_content (Name &p:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlations:0 (arguments nil (list (arg &p:1 None None) (arg &digits:1 None None)) None nil nil None nil) (/seq (FunctionDef &check_correlation:1 (arguments nil (list (arg &a:2 None None) (arg &n:2 None None) (arg &b:2 None None) (arg &m:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (/splice (fn_22 &count:2 &c:2 &m:2 &n:2 &i:2 &digits:1 &b:2 &a:2 &p:1 (/choiceseq (If (Compare (Name &count:2 Load) (list GtE) (list (Name &required_correlations:1 Load))) (/seq (Return (Constant True None))) (/seq))))) (Return (Constant False None))) nil None None) (Assign (list (Name &digits:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Name &digits:1 Load) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &required_correlations:1 Store)) (fn_14 &p:1) None) (fn_26 (/seq (fn_15 (/seq (If (BoolOp Or (list (Compare (Name &b:1 Load) (list Eq) (list (Name &c:1 Load))) (Compare (Name &a:1 Load) (list Eq) (list (Name &c:1 Load))))) (/seq Continue) (/seq)) (If (Call (Name &check_correlation:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) nil) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) &b:1 &a:1 &c:1)) &m:1 &n:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (fn_17 &p:0) (Assign (list (Name &digits_input:0 Store)) (Constant s_ None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_ceil Load) (list (_starred_content (BinOp (Name &p:0 Load) Div (Constant i100 None)))) nil))) nil) (/seq (AugAssign (Name &digits_input:0 Store) Add (BinOp (Constant s-WzMyXQ== None) Add (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlations:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &digits_input:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (Assign (list (Name &occur_required:1 Store)) (fn_14 &p:1) None) (fn_13 (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) nil) (/seq (/splice (fn_3 (/seq) &abc_occurs:1 &c:1 &m:1 &n:1 &i:1 &sequence:1 &p:1 &b:1 &a:1)) (If (Compare (Name &abc_occurs:1 Load) (list GtE) (list (BinOp (Constant i3 None) Mult (Name &occur_required:1 Load)))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None) &c:1 &b:1 &a:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_4 (fn_16) &p:0 &sequence:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &threshold:1) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i11 None))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i11 None))) nil) (/seq (/splice (fn_24 (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) &correlations:1 &sequence:1 &i:1 &n:1 &m:1 &c:1 &b:1 &a:1)) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &correlations:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &threshold:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (If (fn_21 (Name &i:1 Load) &b:1 &n:1 &sequence:1 &a:1) (/seq (If (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (/splice (fn_7 (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) &valid:1 &a:1 &n:1 &i:1 &sequence:1 &c:1 &m:1 &b:1)) (If (Name &valid:1 Load) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_20 (/seq (Assign (list (Name &p:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &sequence:2 Store)) (fn_18 &x:3) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (fn_11 &p:1 &min_occurrences:1) (fn_15 (/seq (If (BoolOp Or (list (Compare (Name &c:1 Load) (list Eq) (list (Name &b:1 Load))) (Compare (Name &c:1 Load) (list Eq) (list (Name &a:1 Load))))) (/seq Continue) (/seq)) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (/splice (fn_5 (/seq (If (fn_10 (Name &i:1 Load) &b:1 &n:1 &sequence:1) (/seq (If (fn_10 (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) &c:1 &m:1 &sequence:1) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq))) (/seq))) &occurrences:1 &c:1 &m:1 &n:1 &i:1 &sequence:1 &p:1 &b:1 &a:1)) (If (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) &b:1 &a:1 &c:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_12 (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil) &p:0 &sequence:0 &result:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &p:1 None None) (arg &sequence:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &min_count:1) (Assign (list (Name &nums:1 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Name &sequence:1 Load) s_split Load) nil nil) nil i0))) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (Assign (list (Name &found_triplets:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &nums:1) None) (If (Compare (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load))) Load) (list NotIn) (list (Name &found_triplets:1 Load))) (/seq (Assign (list (Subscript (Name &found_triplets:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &found_triplets:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store) Add (Constant i1 None))))) (/seq) None) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &found_triplets:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list GtE) (list (Name &min_count:1 Load))) (/seq (Assign (list (Name &correct:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (If (fn_8 (Name &i:1 Load) &b:1 &n:1 &nums:1 &a:1 &p:1) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &nums:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))))) (/seq (Assign (list (Name &correct:1 Store)) (Constant False None) None) Break) (/seq))) (/seq)) (If (fn_8 (Name &i:1 Load) &c:1 &m:1 &nums:1 &b:1 &p:1) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name &nums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list NotEq) (list (Name &a:1 Load))))) (/seq (Assign (list (Name &correct:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &nums:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &nums:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (If (Compare (Subscript (Name &nums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))) (/seq (Assign (list (Name &correct:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (If (Name &correct:1 Load) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (Assign (list (Name &p:0 Store)) (Constant i100 None) None) (Assign (list (Name &sequence:0 Store)) (Constant s-WzUyLCAzMiwgNTUsIDMyLCA1NywgMzIsIDUzLCAzMiwgNTcsIDMyLCA1MSwgMzIsIDUzLCAzMiwgNDgsIDMyLCA0OCwgMzIsIDQ5LCAzMiwgNTUsIDMyLCA1NiwgMzIsIDUzLCAzMiwgNDgsIDMyLCA1MCwgMzIsIDU0LCAzMiwgNTEsIDMyLCA1MywgMzIsIDUyLCAzMiwgNTIsIDMyLCA1MiwgMzIsIDU0LCAzMiwgNTEsIDMyLCA1MSwgMzIsIDUwLCAzMiwgNTUsIDMyLCA0OSwgMzIsIDU2LCAzMiwgNTUsIDMyLCA1NiwgMzIsIDU1LCAzMiwgNTQsIDMyLCA0OSwgMzIsIDQ5LCAzMiwgNTUsIDMyLCA1MCwgMzIsIDUzLCAzMiwgNTIsIDMyLCA1NSwgMzIsIDUwLCAzMiwgNDgsIDMyLCA1MiwgMzIsIDUyLCAzMiwgNTMsIDMyLCA1NiwgMzIsIDUxLCAzMiwgNDgsIDMyLCA1NCwgMzIsIDU3LCAzMiwgNTEsIDMyLCA1MCwgMzIsIDU0LCAzMiwgNTQsIDMyLCA1NiwgMzIsIDUzLCAzMiwgNTAsIDMyLCA1MywgMzIsIDQ5LCAzMiwgNTAsIDMyLCA1NSwgMzIsIDUwLCAzMiwgNTIsIDMyLCA0OSwgMzIsIDQ4LCAzMiwgNDgsIDMyLCA1MiwgMzIsIDU3LCAzMiwgNDksIDMyLCA1NiwgMzIsIDU1LCAzMiwgNTMsIDMyLCA0OCwgMzIsIDUyLCAzMiwgNTIsIDMyLCA1NiwgMzIsIDUyLCAzMiwgNTEsIDMyLCA1MCwgMzIsIDU0LCAzMiwgNTYsIDMyLCA1NiwgMzIsIDUzLCAzMiwgNTQsIDMyLCA1NSwgMzIsIDQ4LCAzMiwgNTcsIDMyLCA1NSwgMzIsIDQ4LCAzMiwgNTEsIDMyLCA1NCwgMzIsIDQ5LCAzMiwgNTIsIDMyLCA1MiwgMzIsIDQ5LCAzMiwgNTAsIDMyLCA1MSwgMzIsIDUwLCAzMiwgNTQsIDMyLCA1NywgMzIsIDU3XQ== None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_occurrences:1 Store)) (fn_14 &p:1) None) (fn_15 (/seq (fn_26 (/seq (Assign (list (Name &occurrences:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &a:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &b:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &c:1 Load))) nil))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) (list GtE) (list (Constant i0 None))) (Compare (BinOp (Name &i:1 Load) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &b:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &m:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &c:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &a:1 Load))) nil))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &a:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &c:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Call (Name g_str Load) (list (_starred_content (Name &b:1 Load))) nil))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq))))))) (/seq) None) (If (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) &m:1 &n:1)) &b:1 &a:1 &c:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (fn_17 &p:0) (Assign (list (Name &sequence:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load)) (_starred_content (Name &p:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &seq:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_occurrences:1 Store)) (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &p:1 Load) Div (Constant i40 None)))) nil) Add (Constant i1 None)) None) (fn_13 (fn_26 (/seq (Assign (list (Name &occurrences:1 Store)) (Constant i0 None) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &seq:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil))) (Compare (Subscript (Name &seq:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))))) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil))) (Compare (Subscript (Name &seq:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break))) (/seq))) (/seq (If (Compare (Subscript (Name &seq:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &b:1 Load))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &m:1 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &seq:1 Load))) nil))) (Compare (Subscript (Name &seq:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (If (fn_10 (Name &i:1 Load) &a:1 &n:1 &seq:1) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break))) (/seq))) (/seq (If (Compare (Subscript (Name &seq:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &c:1 Load))) (/seq (If (fn_10 (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) &a:1 &m:1 &seq:1) (/seq (If (fn_10 (Name &i:1 Load) &b:1 &n:1 &seq:1) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break))) (/seq))) (/seq)))))) (If (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) &m:1 &n:1) &c:1 &b:1 &a:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_4 (fn_18 &x:2) &p:0 &seq:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &seq:0 Load)) (_starred_content (Name &p:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_1 &sequence:1 &p:1 &find_triple_correlation:0 &p:0 &sequence:0 (/choiceseq (Assign (list (Name &threshold:1 Store)) (BinOp (UnaryOp USub (BinOp (UnaryOp USub (Name &p:1 Load)) FloorDiv (Constant i40 None))) Add (Constant i1 None)) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) nil) (/seq (Assign (list (Name &occurrences:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (If (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &sequence:1) None) (fn_29 (Dict (list (Constant s_ab None) (Constant s_bc None) (Constant s_ac None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) &c:1 &b:1 &a:1 &occurrences:1) (AugAssign (Subscript (Subscript (Name &occurrences:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant s_ab None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Subscript (Name &occurrences:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant s_bc None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Subscript (Name &occurrences:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant s_ac None)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &counts:1 Store))) Store) (Call (Attribute (Name &occurrences:1 Load) s_items Load) nil nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &counts:1 Load) (_slice_content (Constant s_ab None)) Load) (list GtE) (list (Name &threshold:1 Load))) (Compare (Subscript (Name &counts:1 Load) (_slice_content (Constant s_bc None)) Load) (list GtE) (list (Name &threshold:1 Load))) (Compare (Subscript (Name &counts:1 Load) (_slice_content (Constant s_ac None)) Load) (list GtE) (list (Name &threshold:1 Load))))) (/seq (Assign (list (Name &gap_a_with_c:1 Store)) (BinOp (Name &n:1 Load) Add (Name &m:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (Assign (list (Name &failed_rule:1 Store)) (Constant False None) None) (If (fn_8 (Name &i:1 Load) &c:1 &gap_a_with_c:1 &sequence:1 &a:1 &p:1) (/seq (If (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))) (/seq (Assign (list (Name &failed_rule:1 Store)) (Constant True None) None)) (/seq))) (/seq)) (If (Name &failed_rule:1 Load) (/seq Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &failed_rule:1 Load)) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 &sequence:1 &p:1 &find_triple_correlation:0 &p:0 &sequence:0 (/choiceseq (Assign (list (Name &min_occurrence:1 Store)) (fn_14 &p:1) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (Assign (list (Name &occurrence_counts:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &sequence:1) None) (fn_29 (Constant i0 None) &c:1 &b:1 &a:1 &occurrence_counts:1) (AugAssign (Subscript (Name &occurrence_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &occurrence_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (list GtE) (list (Name &min_occurrence:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (BinOp (Name &p:1 Load) Sub (Name &m:1 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Name &b:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &j:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Name &valid:1 Load) (/seq (Return (Call (Attribute (Constant s-WzExNiwgMTE0LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMDgsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyLCAxMjMsIDEyNSwgNDAsIDEyMywgMTI1LCA0MSwgMTIzLCAxMjUsIDQwLCAxMjMsIDEyNSwgNDEsIDEyMywgMTI1LCAzMiwgMTAyLCAxMTEsIDExNywgMTEwLCAxMDBd None) s_format Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) nil))) (/seq))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)))) (Assign (list (Name &result:0 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &p:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil) None) (fn_11 &p:1 &threshold:1) (FunctionDef &check_correlation:1 (arguments nil (list (arg &a:2 None None) (arg &n:2 None None) (arg &b:2 None None) (arg &m:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (/seq) &count:2 &c:2 &m:2 &n:2 &i:2 &sequence:1 &p:1 &b:2 &a:2)) (Return (Compare (Name &count:2 Load) (list GtE) (list (Name &threshold:1 Load))))) nil None None) (fn_26 (/seq (fn_13 (If (Call (Name &check_correlation:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) nil) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq)) &c:1 &b:1 &a:1)) &m:1 &n:1) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (fn_17 &p:0) (Assign (list (Name &sequence:0 Store)) (List nil Load) None) (While (Compare (Name &p:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &line:0 Store)) (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) None) (Expr (Call (Attribute (Name &sequence:0 Load) s_extend Load) (list (_starred_content (Name &line:0 Load))) nil)) (AugAssign (Name &p:0 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name &line:0 Load))) nil))) (/seq)) (Assign (list (Name &result:0 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &threshold:1) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10 None))) nil) (/seq (Assign (list (Name &correlation_counts:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)) Sub (Name &m:1 Load)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_6 &m:1 &n:1 &i:1 &sequence:1) None) (If (Compare (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) Load) (list NotIn) (list (Name &correlation_counts:1 Load))) (/seq (Assign (list (Subscript (Name &correlation_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &n:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &m:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &correlation_counts:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &n:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &m:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Store) Add (Constant i1 None))))) (/seq) None) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &n:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &m:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &correlation_counts:1 Load) s_items Load) nil nil) (/seq (If (Compare (Name &count:1 Load) (list Lt) (list (Name &threshold:1 Load))) (/seq Continue) (/seq)) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &p:1 Load) Sub (Name &n:1 Load)))) nil) (/seq (If (fn_21 (Name &i:1 Load) &b:1 &n:1 &sequence:1 &a:1) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list NotEq) (list (Name &c:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (/splice (fn_7 (Name &p:1 Load) &valid:1 &a:1 &n:1 &i:1 &sequence:1 &c:1 &m:1 &b:1)) (If (Name &valid:1 Load) (/seq (Return (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) Load))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Return (Constant None None))) nil None None) (FunctionDef &read_input_and_find_correlation:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) &p:2 &sequence:2)) (Assign (list (Name &correlation:2 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load))) nil) None) (If (Name &correlation:2 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (fn_9 &correlation:2))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil))))) nil None None) (Expr (Call (Name &read_input_and_find_correlation:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &length:1 None None)) None nil nil None nil) (/seq (fn_11 &length:1 &threshold:1) (Assign (list (Name &correlation_count:1 Store)) (Dict nil nil) None) (fn_27 &k:1 &sequence:1 &j:1 &i:1 &c:1 &b:1 &a:1 &m:1 &n:1 &length:1 (/choiceseq (Assign (list (Name &key:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) Load) None) (If (Compare (Name &key:1 Load) (list NotIn) (list (Name &correlation_count:1 Load))) (/seq (Assign (list (Subscript (Name &correlation_count:1 Load) (_slice_content (Name &key:1 Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &correlation_count:1 Load) (_slice_content (Name &key:1 Load)) Store) Add (Constant i1 None)))))) (For (Tuple (list (_starred_content (Name &key:1 Store)) (_starred_content (Name &count:1 Store))) Store) (Call (Attribute (Name &correlation_count:1 Load) s_items Load) nil nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store)) (_starred_content (Name &n:1 Store)) (_starred_content (Name &m:1 Store))) Store)) (Name &key:1 Load) None) (If (Compare (Name &count:1 Load) (list GtE) (list (Name &threshold:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &length:1 Load))) nil) (/seq (If (fn_28 (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) &c:1 &sequence:1 &length:1 &a:1 &i:1) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list GtE) (list (Name &length:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list NotEq) (list (Name &b:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq)) (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &length:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))) (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &length:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (If (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Name &a:1 Load))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq)) (If (fn_28 (BinOp (Name &i:1 Load) Add (Name &m:1 Load)) &c:1 &sequence:1 &length:1 &b:1 &i:1) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &i:1 Load) Sub (Name &n:1 Load)) (list Lt) (list (Constant i0 None))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list NotEq) (list (Name &a:1 Load))))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None) Break) (/seq))) (/seq))) (/seq) None) (If (Name &valid:1 Load) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq))) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_20 (/seq (/splice (fn_4 (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) &p:2 &sequence:2)) (Assign (list (Name &result:2 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &min_occurrences:1) (FunctionDef &get_occurrences:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &n:2 None None) (arg &m:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &occurrences:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:2 Load) Add (Name &n:2 Load)) Add (Name &m:2 Load)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &sequence:1 Load))) nil))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:2 Load)) Load) (list Eq) (list (Name &a:2 Load))))) (/seq (If (fn_21 (BinOp (Name &i:2 Load) Add (Name &n:2 Load)) &c:2 &m:2 &sequence:1 &b:2) (/seq (AugAssign (Name &occurrences:2 Store) Add (Constant i1 None))) (/seq))) (/seq))) (/seq) None) (Return (Name &occurrences:2 Load))) nil None None) (/splice (fn_23 (/seq (fn_15 (/seq (Assign (list (Name &occurrences:1 Store)) (Call (Name &get_occurrences:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &c:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &m:1 Load))) nil) None) (If (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) &b:1 &a:1 &c:1)) &n:1 &sequence:1 &m:1))) nil None None) (/splice (fn_12 (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load)) (_starred_content (Name &p:0 Load))) nil) &p:0 &sequence:0 &result:0))) nil)",
            "(Module (/seq (fn_17 &p:0) (Assign (list (Name &digits:0 Store)) (List nil Load) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &digits:0 Load))) nil) (list Lt) (list (Name &p:0 Load))) (/seq (Assign (list (Name &line:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (AugAssign (Name &digits:0 Store) Add (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Name &line:0 Load) nil i0))))) (/seq)) (FunctionDef &is_valid_index:0 (arguments nil (list (arg &idx:1 None None)) None nil nil None nil) (/seq (Return (Compare (Constant i0 None) (list LtE Lt) (list (Name &idx:1 Load) (Name &p:0 Load))))) nil None None) (Assign (list (Name &found:0 Store)) (Constant False None) None) (fn_13 (For (Name &n:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:0 Load))) nil) (/seq (For (Name &m:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:0 Load))) nil) (/seq (If (Name &found:0 Load) (/seq Break) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &ab_count:0 Store)) (_starred_content (Name &bc_count:0 Store)) (_starred_content (Name &ac_count:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:0 Load))) nil) (/seq (If (BoolOp And (list (Call (Name &is_valid_index:0 Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Name &n:0 Load)))) nil) (Compare (Subscript (Name &digits:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &a:0 Load))) (Compare (Subscript (Name &digits:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Name &n:0 Load))) Load) (list Eq) (list (Name &b:0 Load))))) (/seq (AugAssign (Name &ab_count:0 Store) Add (Constant i1 None)) (If (BoolOp And (list (Call (Name &is_valid_index:0 Load) (list (_starred_content (BinOp (BinOp (Name &i:0 Load) Add (Name &n:0 Load)) Add (Name &m:0 Load)))) nil) (Compare (Subscript (Name &digits:0 Load) (_slice_content (BinOp (BinOp (Name &i:0 Load) Add (Name &n:0 Load)) Add (Name &m:0 Load))) Load) (list Eq) (list (Name &c:0 Load))))) (/seq (AugAssign (Name &ac_count:0 Store) Add (Constant i1 None))) (/seq))) (/seq)) (If (BoolOp And (list (Call (Name &is_valid_index:0 Load) (list (_starred_content (BinOp (Name &i:0 Load) Sub (Name &n:0 Load)))) nil) (Call (Name &is_valid_index:0 Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Name &m:0 Load)))) nil) (Compare (Subscript (Name &digits:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &b:0 Load))) (Compare (Subscript (Name &digits:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Name &m:0 Load))) Load) (list Eq) (list (Name &c:0 Load))))) (/seq (AugAssign (Name &bc_count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (BoolOp And (list (Compare (Name &ab_count:0 Load) (list GtE) (list (fn_14 &p:0))) (Compare (Name &bc_count:0 Load) (list GtE) (list (fn_14 &p:0))) (Compare (Name &ac_count:0 Load) (list GtE) (list (fn_14 &p:0))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzExNiwgMTE0LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTQsIDExNCwgMTAxLCAxMDgsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyXQ== None) (FormattedValue (Name &a:0 Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name &n:0 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Name &b:0 Load) i-1 None) (Constant s-WzQwXQ== None) (FormattedValue (Name &m:0 Load) i-1 None) (Constant s-WzQxXQ== None) (FormattedValue (Name &c:0 Load) i-1 None) (Constant s-WzMyLCAxMDIsIDExMSwgMTE3LCAxMTAsIDEwMF0= None))))) nil)) (Assign (list (Name &found:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None)) (/seq) None) &c:0 &b:0 &a:0) (If (UnaryOp Not (Name &found:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &sequence:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (fn_11 &p:1 &required_occurrences:1) (Assign (list (Name &correlations:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (Assign (list (Name &a:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (If (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &p:1 Load))) (/seq (Assign (list (Name &b:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) None) (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (If (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (/seq (Assign (list (Name &c:1 Store)) (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) None) (Assign (list (Name &key:1 Store)) (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &n:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &m:1 Load)) (_starred_content (Name &c:1 Load))) Load) None) (If (Compare (Name &key:1 Load) (list NotIn) (list (Name &correlations:1 Load))) (/seq (Assign (list (Subscript (Name &correlations:1 Load) (_slice_content (Name &key:1 Load)) Store)) (Constant i1 None) None)) (/seq (AugAssign (Subscript (Name &correlations:1 Load) (_slice_content (Name &key:1 Load)) Store) Add (Constant i1 None))))) (/seq))) (/seq) None)) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &valid_correlations:1 Store)) (DictComp (Name &key:3 Load) (Name &val:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &key:3 Store)) (_starred_content (Name &val:3 Store))) Store) (Call (Attribute (Name &correlations:1 Load) s_items Load) nil nil) (list (Compare (Name &val:3 Load) (list GtE) (list (Name &required_occurrences:1 Load)))) i0))) None) (If (UnaryOp Not (Name &valid_correlations:1 Load)) (/seq (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) (/seq (Assign (list (Name &sorted_correlations:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (GeneratorExp (Name &key:5 Load) (list (comprehension (Name &key:5 Store) (Call (Attribute (Name &valid_correlations:1 Load) s_keys Load) nil nil) nil i0))))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:6 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name &x:6 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &x:6 Load) (_slice_content (Constant i3 None)) Load))) Load))))) None) (Assign (list (Name &earliest_correlation:1 Store)) (Subscript (Name &sorted_correlations:1 Load) (_slice_content (Constant i0 None)) Load) None) (Return (fn_9 &earliest_correlation:1))))) nil None None) (/splice (fn_20 (/seq (Assign (list (Name &p:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &sequence:2 Store)) (fn_18 &x:4) None) (Assign (list (Name &result:2 Store)) (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:2 Load)) (_starred_content (Name &p:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (/splice (fn_1 &sequence:1 &p:1 &find_triple_correlation:0 &p:0 &sequence:0 (/choiceseq (fn_11 &p:1 &threshold:1) (For (Name &n:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (For (Name &m:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &p:1 Load))) nil) (/seq (/splice (fn_19 &correlations:1 &i:1 &sequence:1 &a:1 &n:1 &b:1 &m:1 &c:1 &p:1 (/choiceseq (fn_29 (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) &c:1 &b:1 &a:1 &correlations:1) (AugAssign (Subscript (Subscript (Name &correlations:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant i0 None)) Store) Add (Constant i1 None)) (If (BoolOp And (list (Compare (Name &i:1 Load) (list GtE) (list (Name &n:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Name &n:1 Load))) Load) (list Eq) (list (Name &a:1 Load))))) (/seq (AugAssign (Subscript (Subscript (Name &correlations:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant i1 None)) Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &sequence:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (AugAssign (Subscript (Subscript (Name &correlations:1 Load) (_slice_tuple (Tuple (list (_slice_content (Name &a:1 Load)) (_slice_content (Name &b:1 Load)) (_slice_content (Name &c:1 Load))) Load)) Load) (_slice_content (Constant i2 None)) Store) Add (Constant i1 None))) (/seq))))) (For (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (_starred_content (Tuple (list (_starred_content (Name &count:1 Store)) (_starred_content (Name &before_b:1 Store)) (_starred_content (Name &after_a:1 Store))) Store))) Store) (Call (Attribute (Name &correlations:1 Load) s_items Load) nil nil) (/seq (If (BoolOp And (list (Compare (Name &count:1 Load) (list GtE) (list (Name &threshold:1 Load))) (Compare (Name &before_b:1 Load) (list GtE) (list (Name &threshold:1 Load))) (Compare (Name &after_a:1 Load) (list GtE) (list (Name &threshold:1 Load))))) (fn_2 &c:1 &m:1 &b:1 &n:1 &a:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &sequence:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &check_correlation:0 (arguments nil (list (arg &digits:1 None None) (arg &p:1 None None) (arg &a:1 None None) (arg &n:1 None None) (arg &b:1 None None) (arg &m:1 None None) (arg &c:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &occurrences:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &p:1 Load))) nil) (/seq (If (Compare (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &a:1 Load))) (/seq (If (fn_8 (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) &c:1 &m:1 &digits:1 &b:1 &p:1) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq)) (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) (list Lt) (list (Name &p:1 Load))) (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Name &n:1 Load))) Load) (list Eq) (list (Name &b:1 Load))))) (/seq (If (BoolOp Or (list (Compare (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load)) (list GtE) (list (Name &p:1 Load))) (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &n:1 Load)) Add (Name &m:1 Load))) Load) (list Eq) (list (Name &c:1 Load))))) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq))) (/seq))) (/seq)) (If (fn_28 (BinOp (Name &i:1 Load) Add (Name &m:1 Load)) &c:1 &digits:1 &p:1 &b:1 &i:1) (/seq (If (fn_10 (Name &i:1 Load) &a:1 &n:1 &digits:1) (/seq (AugAssign (Name &occurrences:1 Store) Add (Constant i1 None))) (/seq))) (/seq))) (/seq) None) (fn_11 &p:1 &min_occurrences:1) (Return (Compare (Name &occurrences:1 Load) (list GtE) (list (Name &min_occurrences:1 Load))))) nil None None) (FunctionDef &find_triple_correlation:0 (arguments nil (list (arg &digits:2 None None) (arg &p:2 None None)) None nil nil None nil) (/seq (For (Name &n:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:2 Load) FloorDiv (Constant i2 None)))) nil) (/seq (For (Name &m:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &p:2 Load) FloorDiv (Constant i2 None)))) nil) (/seq (fn_13 (If (Call (Name &check_correlation:0 Load) (list (_starred_content (Name &digits:2 Load)) (_starred_content (Name &p:2 Load)) (_starred_content (Name &a:2 Load)) (_starred_content (Name &n:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &m:2 Load)) (_starred_content (Name &c:2 Load))) nil) (fn_2 &c:2 &m:2 &b:2 &n:2 &a:2) (/seq)) &c:2 &b:2 &a:2)) (/seq) None)) (/seq) None) (Return (Constant s-WzExNCwgOTcsIDExMCwgMTAwLCAxMTEsIDEwOSwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDFd None))) nil None None) (/splice (fn_20 (/seq (/splice (fn_4 (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) &p:3 &digits:3)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_triple_correlation:0 Load) (list (_starred_content (Name &digits:3 Load)) (_starred_content (Name &p:3 Load))) nil))) nil))) &main:0))) nil)"
        ]
    },
    "730": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name %1 Load))) nil) (/seq (If (Compare (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (list Gt) (list (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Store)) (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i2 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (list Lt) (list (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Store)) (BinOp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %4 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Name %4 Store)) (Call (Name g_max Load) (list (_starred_content (Name %4 Load)) (_starred_content (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load)) Add (Constant i1 None)))) nil) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) Add (Constant i1 None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i2 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i2 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_max Load) (list (_starred_content (Name %1 Load)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) %2 %1)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list Lt) (list (Subscript (Name %3 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)) None)) #0)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (list Lt) (list (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) Sub #0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (/splice (fn_2 (Name g_input Load) %2 %1)) ?0 (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name %1 Load) (_slice_content (BinOp (Name %6 Load) Add (Constant i1 None))) Load) (list Gt) (list (fn_5 %6 %1))) (fn_3 %6 %5 %4 %3) (/seq))) (/seq) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Name %2 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (/splice (fn_2 (Name g_input Load) %2 %1)) (If (Compare (Name %2 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Assign (list (Name %3 Store)) (Constant i2 None) None) (Assign (list (Name %4 Store)) (Constant i2 None) None) ?0 (Assign (list (Name %3 Store)) (Call (Name g_max Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %3 Load))) nil)))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %1 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq)) ?0) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (fn_5 %1 %2) (list Lt) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %1 Load)) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %1 Load)) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name %4 Load))) nil) (/seq (If (fn_4 %2 %3) (/seq (Assign (list (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Store)) (fn_5 %2 %1) None)) (/seq)) ?0) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (list Lt) (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Name %2 Load) (list Lt) (list (BinOp (Name %1 Load) Sub (Constant i1 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Gt) (list (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i2 None))) Load) Add (Constant i1 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) (list Gt) (list (BinOp (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) Add (Constant i1 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp Or (list (Compare (Name %2 Load) (list Eq) (list (BinOp (Name %3 Load) Sub (Constant i1 None)))) (fn_6 %2 %1)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (If #0 (fn_3 %2 %3 %4 %1) (/seq (fn_9 (Call (Name g_max Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load))) nil) %1))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_13 &a:0 &n:0 &res:0 &left:0 &right:0 &i:0 (/choiceseq (fn_21 &n:0) (/splice (fn_1 &n:0 &left:0 &right:0 &i:0 &a:0)) (Assign (list (Name &res:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &left:0 Load))) nil) None)))) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (fn_26 &i:0 &a:0) (/seq (fn_9 (Subscript (Name &left:0 Load) (_slice_content (Name &i:0 Load)) Load) &res:0)) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (fn_5 &i:0 &a:0) (list Lt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (fn_9 (Subscript (Name &right:0 Load) (_slice_content (Name &i:0 Load)) Load) &res:0)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (fn_21 &n:0) (/splice (fn_1 &n:0 &left:0 &right:0 &i:0 &a:0)) (Assign (list (Name &result:0 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &left:0 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &right:0 Load))) nil))) nil) Add (Constant i1 None)) None) (For (Name &i:0 Store) (fn_14 &n:0) (/seq (If (fn_12 (Constant i1 None) &i:0 &a:0) (fn_3 &i:0 &right:0 &left:0 &result:0) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (/splice (fn_1 &n:0 &left:0 &right:0 &i:0 &a:0)) (Assign (list (Name &result:0 Store)) (Call (Name g_max Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &left:0 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &right:0 Load))) nil))) nil) None) (For (Name &i:0 Store) (fn_14 &n:0) (/seq (If (fn_23 &i:0 &a:0) (fn_3 &i:0 &right:0 &left:0 &result:0) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_longest_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (/splice (fn_19 &n:1 &left:1 &right:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left:1 Load) (_slice_content (Name &i:1 Load)) Store)) (IfExp (fn_4 &i:1 &a:1) (fn_5 &i:1 &left:1) (Constant i1 None)) None)) (/seq) None) (Assign (list (Subscript (Name &right:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Store)) (Constant i1 None) None) (For (Name &i:1 Store) (fn_7 &n:1) (/seq (Assign (list (Subscript (Name &right:1 Load) (_slice_content (Name &i:1 Load)) Store)) (IfExp (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Lt) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (BinOp (Subscript (Name &right:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)) (Constant i1 None)) None)) (/seq) None) (Assign (list (Name &ans:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &left:1 Load) Add (List (list (_starred_content (Constant i1 None))) Load)))) nil))) nil) None) (For (Name &i:1 Store) (fn_14 &n:1) (/seq (If (fn_18 &i:1 &a:1) (fn_3 &i:1 &right:1 &left:1 &ans:1) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Name &find_longest_subsegment:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_longest_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Lt) (list (Constant i3 None))) (/seq (Return (Name &n:1 Load))) (/seq)) (Assign (list (Name &max_len:1 Store) (Name &min_len:1 Store)) (Constant i2 None) None) (Assign (list (Name &last_diff:1 Store)) (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &diff:1 Store)) (BinOp (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) None) (If (Compare (Name &diff:1 Load) (list Eq) (list (Name &last_diff:1 Load))) (/seq (AugAssign (Name &min_len:1 Store) Add (Constant i1 None)) (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &min_len:1 Load))) nil) None)) (/seq (Assign (list (Name &last_diff:1 Store)) (Name &diff:1 Load) None) (Assign (list (Name &min_len:1 Store)) (Constant i2 None) None)))) (/seq) None) (Return (Name &max_len:1 Load))) nil None None) (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_longest_subsegment:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Assign (list (Name &l:0 Store)) (Constant i0 None) None) (Assign (list (Name &last_diff:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (Assign (list (Name &current_len:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &current_len:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp Or (list (BoolOp And (list (fn_24 &n:0 &i:0) (fn_6 &i:0 &a:0))) (BoolOp And (list (Compare (BinOp (Name &i:0 Load) Sub (Constant i2 None)) (list GtE) (list (Name &l:0 Load))) (fn_8 &i:0 &a:0))))) (/seq (If (Compare (Name &last_diff:0 Load) (list GtE) (list (Name &l:0 Load))) (/seq (Assign (list (Name &l:0 Store)) (BinOp (Name &last_diff:0 Load) Add (Constant i1 None)) None)) (/seq)) (Assign (list (Name &last_diff:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &current_len:0 Store)) (BinOp (BinOp (Name &i:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &current_len:0 Store)) (Constant i1 None) None))))) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Name &current_len:0 Load))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_length_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_len:1 Store) (Name &min_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &inc:1 Store) (Name &dec:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Name &inc:1 Store) Add (Constant i1 None)) (Assign (list (Name &dec:1 Store)) (Constant i1 None) None)) (/seq (If (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i1 None))) (fn_8 &i:1 &a:1))) (/seq (Assign (list (Name &dec:1 Store)) (BinOp (Name &inc:1 Load) Add (Constant i1 None)) None) (Assign (list (Name &inc:1 Store)) (Constant i2 None) None)) (/seq (Assign (list (Name &inc:1 Store)) (Constant i1 None) None) (Assign (list (Name &dec:1 Store)) (Constant i1 None) None))))) (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &inc:1 Load)) (_starred_content (Name &dec:1 Load))) nil) None)) (/seq) None) (Return (Name &max_len:1 Load))) nil None None) (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &max_length_subsegment:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_length_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Name &n:1 Load))) (/seq)) (Assign (list (Name &max_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &curr_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &change_possible_before:1 Store)) (Constant i1 None) None) (Assign (list (Name &change_possible_after:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Name &curr_len:1 Store) Add (Constant i1 None)) (AugAssign (Name &change_possible_after:1 Store) Add (Constant i1 None))) (/seq (If (fn_27 &a:1 &i:1 &n:1) (/seq (Assign (list (Name &change_possible_before:1 Store)) (BinOp (Name &change_possible_after:1 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &change_possible_before:1 Store)) (Constant i1 None) None))) (Assign (list (Name &change_possible_after:1 Store)) (Constant i0 None) None) (Assign (list (Name &curr_len:1 Store)) (Name &change_possible_before:1 Load) None))) (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &curr_len:1 Load))) nil) None)) (/seq) None) (Return (Name &max_len:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_10 &a:0 &n:0 &max_length_subsegment:0))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (fn_15 &max_length:0 &n:0 (/choiceseq (Assign (list (Name &max_length:0 Store)) (Constant i0 None) None) (Assign (list (Name &previous_length:0 Store)) (Constant i0 None) None) (Assign (list (Name &current_length:0 Store)) (Constant i1 None) None) (Assign (list (Name &change_point:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &current_length:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (fn_24 &n:0 &i:0) (fn_6 &i:0 &a:0))) (/seq (Assign (list (Name &previous_length:0 Store)) (Name &current_length:0 Load) None) (Assign (list (Name &current_length:0 Store)) (Constant i1 None) None) (Assign (list (Name &change_point:0 Store)) (Name &i:0 Load) None)) (/seq (If (BoolOp And (list (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (fn_8 &i:0 &a:0))) (/seq (Assign (list (Name &current_length:0 Store)) (BinOp (Name &i:0 Load) Sub (Name &change_point:0 Load)) None) (Assign (list (Name &change_point:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &previous_length:0 Store)) (Constant i0 None) None) (Assign (list (Name &current_length:0 Store)) (Constant i1 None) None) (Assign (list (Name &change_point:0 Store)) (Name &i:0 Load) None))))))) (fn_9 (BinOp (Name &previous_length:0 Load) Add (Name &current_length:0 Load)) &max_length:0)) (/seq) None)))) nil)",
            "(Module (/seq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &a:0)) (fn_15 &result:0 &n:0 (/choiceseq (fn_29 &n:0 &dp_incr:0) (fn_29 &n:0 &dp_decr:0) (fn_22 &dp_incr:0 &i:0 &a:0 &n:0 (/choiceseq (Assign (list (Subscript (Name &dp_decr:0 Load) (_slice_content (Name &i:0 Load)) Store)) (fn_5 &i:0 &dp_incr:0) None))) (For (Name &i:0 Store) (fn_7 &n:0) (/seq (If (fn_26 &i:0 &a:0) (/seq (Assign (list (Subscript (Name &dp_decr:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &dp_decr:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (BinOp (Subscript (Name &dp_decr:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name g_max Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &dp_incr:0 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &dp_decr:0 Load))) nil))) nil) None)))) nil)",
            "(Module (/seq (FunctionDef &find_longest_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Name &n:1 Load))) (/seq)) (Assign (list (Name &max_length:1 Store)) (Constant i1 None) None) (Assign (list (Name &current_length:1 Store)) (Constant i1 None) None) (Assign (list (Name &changed:1 Store)) (Constant False None) None) (Assign (list (Name &change_point_length:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Name &current_length:1 Store) Add (Constant i1 None))) (/seq (If (UnaryOp Not (Name &changed:1 Load)) (/seq (Assign (list (Name &changed:1 Store)) (Constant True None) None) (Assign (list (Name &change_point_length:1 Store)) (Name &current_length:1 Load) None) (AugAssign (Name &current_length:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &max_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:1 Load)) (_starred_content (Name &current_length:1 Load))) nil) None) (Assign (list (Name &current_length:1 Store)) (BinOp (Name &current_length:1 Load) Sub (Name &change_point_length:1 Load)) None) (Assign (list (Name &change_point_length:1 Store)) (Name &current_length:1 Load) None)))))) (/seq) None) (Assign (list (Name &max_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:1 Load)) (_starred_content (Name &current_length:1 Load))) nil) None) (Return (Name &max_length:1 Load))) nil None None) (/splice (fn_10 &a:0 &n:0 &find_longest_subsegment:0))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &nums:0)) (fn_15 &max_len:0 &n:0 (/choiceseq (Assign (list (Name &max_len:0 Store)) (Constant i1 None) None) (Assign (list (Name &current_len:0 Store)) (Constant i1 None) None) (Assign (list (Name &len_before_dip:0 Store)) (Constant i1 None) None) (Assign (list (Name &modified:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &nums:0) (/seq (AugAssign (Name &current_len:0 Store) Add (Constant i1 None)) (AugAssign (Name &len_before_dip:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp Or (list (UnaryOp Not (Name &modified:0 Load)) (fn_8 &i:0 &nums:0) (BoolOp And (list (Compare (Name &i:0 Load) (list GtE) (list (Constant i2 None))) (Compare (Subscript (Name &nums:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load) (list Lt) (list (BinOp (Subscript (Name &nums:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Constant i1 None)))))))) (/seq (Assign (list (Name &modified:0 Store)) (Constant True None) None) (Assign (list (Name &current_len:0 Store)) (BinOp (Name &len_before_dip:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &len_before_dip:0 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &current_len:0 Store) (Name &len_before_dip:0 Store)) (Constant i1 None) None) (Assign (list (Name &modified:0 Store)) (Constant False None) None))))) (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &current_len:0 Load))) nil) None)) (/seq) None)))) nil)",
            "(Module (/seq (fn_17 &n:1 &a:1 &max_subsegment_length:0 (/choiceseq (Assign (list (Name &max_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &current_max_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &changed:1 Store)) (Constant False None) None) (Assign (list (Name &prev_change_len:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Name &current_max_len:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp Or (list (BoolOp And (list (fn_24 &n:1 &i:1) (fn_6 &i:1 &a:1))) (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i1 None))) (fn_8 &i:1 &a:1))))) (/seq (If (BoolOp Or (list (UnaryOp Not (Name &changed:1 Load)) (Compare (BinOp (Name &prev_change_len:1 Load) Add (Constant i1 None)) (list Lt) (list (Name &current_max_len:1 Load))))) (/seq (Assign (list (Name &changed:1 Store)) (Constant True None) None) (Assign (list (Name &prev_change_len:1 Store)) (Name &current_max_len:1 Load) None) (AugAssign (Name &current_max_len:1 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &current_max_len:1 Store)) (BinOp (Name &prev_change_len:1 Load) Add (Constant i1 None)) None)))) (/seq (Assign (list (Name &current_max_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &changed:1 Store)) (Constant False None) None) (Assign (list (Name &prev_change_len:1 Store)) (Constant i1 None) None))))) (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &current_max_len:1 Load))) nil) None)) (/seq) None) (If (Name &changed:1 Load) (/seq (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &current_max_len:1 Load))) nil) None)) (/seq (fn_9 (Name &current_max_len:1 Load) &max_len:1))) (Return (Name &max_len:1 Load)))) (/splice (fn_10 &a:0 &n:0 &max_subsegment_length:0))) nil)",
            "(Module (/seq (/splice (fn_13 &a:0 &n:0 &max_len:0 &left:0 &right:0 &i:0 (/choiceseq (/splice (fn_1 &n:0 &left:0 &right:0 &i:0 &a:0)) (Assign (list (Name &max_len:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (Name &left:0 Load))) nil) Add (Constant i1 None)))) nil) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_len:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (fn_20 &n:0) (/splice (fn_19 &n:0 &left:0 &right:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (Assign (list (Subscript (Name &left:0 Load) (_slice_content (Name &i:0 Load)) Store)) (fn_5 &i:0 &left:0) None)) (/seq (Assign (list (Subscript (Name &left:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)))) (/seq) None) (Assign (list (Subscript (Name &right:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store)) (Constant i1 None) None) (For (Name &i:0 Store) (fn_7 &n:0) (/seq (fn_11 (/seq (Assign (list (Subscript (Name &right:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Constant i1 None) None)) &i:0 &right:0 &a:0)) (/seq) None) (Assign (list (Name &ans:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (fn_14 &n:0) (/seq (If (fn_23 &i:0 &a:0) (fn_3 &i:0 &right:0 &left:0 &ans:0) (/seq)) (Assign (list (Name &ans:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (fn_5 &i:0 &left:0)) (_starred_content (BinOp (Subscript (Name &right:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)))) nil) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &ans:0 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &left:0 Load))) nil)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &right:0 Load))) nil))) nil))) nil))) nil)",
            "(Module (/seq (fn_17 &n:1 &a:1 &find_longest_subsegment:0 (/choiceseq (/splice (fn_1 &n:1 &left:1 &right:1 &i:1 &a:1)) (Assign (list (Name &max_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (BinOp (Subscript (Name &left:1 Load) (_slice_content (Constant i0 None)) Load) Add (Constant i1 None))) (_starred_content (fn_5 &n:1 &right:1))) nil) None) (For (Name &i:1 Store) (fn_14 &n:1) (/seq (Assign (list (Name &max_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:1 Load)) (_starred_content (fn_5 &i:1 &left:1))) nil) None) (fn_9 (Subscript (Name &right:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) &max_length:1) (If (fn_18 &i:1 &a:1) (fn_3 &i:1 &right:1 &left:1 &max_length:1) (/seq))) (/seq) None) (Return (Name &max_length:1 Load)))) (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_longest_subsegment:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (/splice (fn_1 &n:0 &pre:0 &suf:0 &i:0 &a:0)) (Assign (list (Name &result:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &pre:0 Load))) nil) None) (For (Name &i:0 Store) (fn_14 &n:0) (/seq (If (fn_12 (Constant i2 None) &i:0 &a:0) (fn_3 &i:0 &suf:0 &pre:0 &result:0) (/seq))) (/seq) None) (fn_9 (Subscript (Name &suf:0 Load) (_slice_content (Constant i1 None)) Load) &result:0) (fn_9 (Subscript (Name &pre:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) &result:0) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_increasing_subsegment_with_one_change:0 (arguments nil (list (arg &n:1 None None) (arg &arr:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &max_len:1 Store)) (_starred_content (Name &cur_len:1 Store)) (_starred_content (Name &prev_len:1 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &arr:1) (/seq (AugAssign (Name &cur_len:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp Or (list (Compare (Name &i:1 Load) (list Eq) (list (Constant i1 None))) (fn_25 &i:1 &arr:1))) (/seq (Assign (list (Name &prev_len:1 Store)) (Name &cur_len:1 Load) None) (Assign (list (Name &cur_len:1 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &prev_len:1 Store)) (Constant i0 None) None) (Assign (list (Name &cur_len:1 Store)) (Constant i1 None) None))))) (fn_9 (BinOp (Name &prev_len:1 Load) Add (Name &cur_len:1 Load)) &max_len:1)) (/seq) None) (Return (Name &max_len:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_10 &arr:0 &n:0 &max_increasing_subsegment_with_one_change:0))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_2 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &a:0)) (Assign (list (Tuple (list (_starred_content (Name &result:0 Store)) (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &l_val:0 Store))) Store)) (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &r:0 Store) Add (Constant i1 None)) (Assign (list (Name &result:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &result:0 Load)) (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None)) Add (Compare (Name &l:0 Load) (list Gt) (list (Constant i0 None)))))) nil) None)) (/seq (Assign (list (Name &l_val:0 Store)) (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None)) None) (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (If (BoolOp And (list (Compare (Name &i:0 Load) (list NotEq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Gt) (list (fn_5 &i:0 &a:0))))) (/seq (Assign (list (Name &r:0 Store)) (Name &i:0 Load) None)) (/seq (Assign (list (Name &l:0 Store) (Name &r:0 Store)) (Name &i:0 Load) None))) (Assign (list (Name &result:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &result:0 Load)) (_starred_content (BinOp (Name &l_val:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Sub (Name &l:0 Load)) Add (Constant i1 None)) Add (fn_24 &n:0 &r:0)))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (fn_29 &n:0 &left:0) (fn_22 &left:0 &i:0 &a:0 &n:0 (/choiceseq)) (fn_29 &n:0 &right:0) (For (Name &i:0 Store) (fn_7 &n:0) (/seq (fn_11 (/seq) &i:0 &right:0 &a:0)) (/seq) None) (Assign (list (Name &max_length:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &max_length:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:0 Load)) (_starred_content (Subscript (Name &right:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &max_length:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:0 Load)) (_starred_content (fn_5 &i:0 &left:0))) nil) None)) (/seq)) (If (fn_24 &n:0 &i:0) (/seq (fn_9 (Subscript (Name &right:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) &max_length:0)) (/seq)) (If (BoolOp And (list (Compare (Constant i0 None) (list Lt Lt) (list (Name &i:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i1 None))) Load)) (list Gt) (list (Constant i1 None))))) (fn_3 &i:0 &right:0 &left:0 &max_length:0) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_length:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Assign (list (Name &max_len:0 Store)) (Constant i1 None) None) (Assign (list (Name &curr_len:0 Store)) (Constant i1 None) None) (Assign (list (Name &change_point:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &left_continuation:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &curr_len:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (Name &change_point:0 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (Name &change_point:0 Load)) Load))))) (/seq (Assign (list (Name &curr_len:0 Store)) (BinOp (Name &i:0 Load) Sub (Name &change_point:0 Load)) None) (Assign (list (Name &change_point:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &left_continuation:0 Store)) (IfExp (Compare (Name &change_point:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Name &curr_len:0 Load) (BinOp (BinOp (Name &i:0 Load) Sub (Name &change_point:0 Load)) Sub (Constant i1 None))) None) (Assign (list (Name &curr_len:0 Store)) (BinOp (Name &left_continuation:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &change_point:0 Store)) (BinOp (Name &i:0 Load) Sub (Constant i1 None)) None))))) (If (fn_24 &n:0 &i:0) (/seq (If (fn_12 (Constant i1 None) &i:0 &a:0) (/seq (fn_9 (Name &curr_len:0 Load) &max_len:0)) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &curr_len:0 Load))) nil) None)))) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &curr_len:0 Load))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_len:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (If (Compare (Name &n:0 Load) (list LtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &n:0 Load))) nil))) (/seq (Assign (list (Name &max_len:0 Store)) (Constant i0 None) None) (Assign (list (Name &left:0 Store)) (Constant i0 None) None) (Assign (list (Name &right:0 Store)) (Constant i0 None) None) (While (fn_24 &n:0 &right:0) (/seq (AugAssign (Name &right:0 Store) Add (Constant i1 None)) (If (fn_4 &right:0 &a:0) (/seq (fn_9 (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)) &max_len:0)) (/seq (Assign (list (Name &temp_left:0 Store)) (BinOp (Name &right:0 Load) Sub (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &temp_left:0 Load) (list Gt) (list (Constant i0 None))) (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &temp_left:0 Load)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &temp_left:0 Load) Sub (Constant i1 None))) Load)) (list Eq) (list (Constant i1 None))))) (/seq (AugAssign (Name &temp_left:0 Store) Sub (Constant i1 None))) (/seq)) (If (BoolOp And (list (fn_24 &n:0 &right:0) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &right:0 Load) Add (Constant i1 None))) Load) (list Gt) (list (fn_5 &right:0 &a:0))))) (/seq (fn_9 (BinOp (Name &right:0 Load) Sub (Name &temp_left:0 Load)) &max_len:0)) (/seq (If (BoolOp And (list (Compare (Name &right:0 Load) (list Gt) (list (Constant i1 None))) (fn_25 &right:0 &a:0))) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)))) nil) None)) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)))) nil) None) (Assign (list (Name &left:0 Store)) (Name &right:0 Load) None)))))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &max_len:0 Load) Add (Constant i1 None)))) nil))))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (Assign (list (Tuple (list (_starred_content (Name &max_len:0 Store)) (_starred_content (Name &cur_len:0 Store)) (_starred_content (Name &len_before_break:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &change_used:0 Store)) (_starred_content (Name &can_skip:0 Store))) Store)) (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &cur_len:0 Store) Add (Constant i1 None))) (/seq (If (fn_27 &a:0 &i:0 &n:0) (/seq (Assign (list (Name &can_skip:0 Store)) (Constant True None) None) (Assign (list (Name &len_before_break:0 Store)) (Name &cur_len:0 Load) None)) (/seq)) (If (BoolOp Or (list (Name &change_used:0 Load) (UnaryOp Not (Name &can_skip:0 Load)))) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &cur_len:0 Load))) nil) None) (Assign (list (Name &cur_len:0 Store)) (BinOp (Constant i1 None) Add (Name &len_before_break:0 Load)) None) (Assign (list (Tuple (list (_starred_content (Name &len_before_break:0 Store)) (_starred_content (Name &can_skip:0 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant False None))) Load) None) (Assign (list (Name &change_used:0 Store)) (Constant True None) None)) (/seq (AugAssign (Name &cur_len:0 Store) Add (Constant i1 None)) (Assign (list (Name &change_used:0 Store)) (Constant True None) None)))))) (/seq) None) (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &cur_len:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &max_len:0 Load))) nil))) nil)",
            "(Module (/seq (fn_17 &n:1 &a:1 &longest_subsegment:0 (/choiceseq (Assign (list (Name &max_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &cur_len:1 Store)) (Constant i1 None) None) (Assign (list (Name &len_with_change:1 Store)) (Constant i1 None) None) (Assign (list (Name &prev_diff:1 Store)) (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Name &cur_len:1 Store) Add (Constant i1 None)) (AugAssign (Name &len_with_change:1 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Compare (BinOp (Name &i:1 Load) Sub (Constant i2 None)) (list GtE) (list (Constant i0 None))) (fn_8 &i:1 &a:1))) (/seq (Assign (list (Name &len_with_change:1 Store)) (BinOp (Name &cur_len:1 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &len_with_change:1 Store)) (Constant i2 None) None))))) (If (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list LtE) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq (Assign (list (Name &cur_len:1 Store)) (Constant i1 None) None)) (/seq)) (Assign (list (Name &max_len:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:1 Load)) (_starred_content (Name &cur_len:1 Load)) (_starred_content (Name &len_with_change:1 Load))) nil) None)) (/seq) None) (Return (Name &max_len:1 Load)))) (/splice (fn_10 &a:0 &n:0 &longest_subsegment:0))) nil)",
            "(Module (fn_16 &a:0 &n:0 &max_len:0 &cur_len:0 (/choiceseq (Assign (list (Name &cur_can_change:0 Store)) (Constant True None) None) (Assign (list (Name &last_change_index:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &cur_len:0 Store) Add (Constant i1 None))) (/seq (If (BoolOp And (list (Name &cur_can_change:0 Load) (BoolOp Or (list (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (fn_6 &i:0 &a:0) (fn_8 &i:0 &a:0))))) (/seq (AugAssign (Name &cur_len:0 Store) Add (Constant i1 None)) (Assign (list (Name &cur_can_change:0 Store)) (Constant False None) None) (Assign (list (Name &last_change_index:0 Store)) (Name &i:0 Load) None)) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &cur_len:0 Load))) nil) None) (Assign (list (Name &cur_len:0 Store)) (BinOp (BinOp (Name &i:0 Load) Sub (Name &last_change_index:0 Load)) Add (Constant i1 None)) None) (Assign (list (Name &cur_can_change:0 Store)) (Compare (Name &last_change_index:0 Load) (list NotEq) (list (BinOp (Name &i:0 Load) Sub (Constant i1 None)))) None) (Assign (list (Name &last_change_index:0 Store)) (IfExp (fn_4 &i:0 &a:0) (Name &i:0 Load) (UnaryOp USub (Constant i1 None))) None)))))) (/seq) None))) nil)",
            "(Module (/seq (/splice (fn_13 &a:0 &n:0 &max_len:0 &left_inc_length:0 &right_inc_length:0 &i:0 (/choiceseq (fn_20 &n:0) (fn_29 &n:0 &left_inc_length:0) (fn_29 &n:0 &right_inc_length:0) (Assign (list (Name &max_len:0 Store)) (Constant i1 None) None) (fn_22 &left_inc_length:0 &i:0 &a:0 &n:0 (/choiceseq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Subscript (Name &left_inc_length:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None))) (For (Name &i:0 Store) (fn_7 &n:0) (/seq (fn_11 (/seq) &i:0 &right_inc_length:0 &a:0) (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Subscript (Name &right_inc_length:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (BinOp (Name &max_len:0 Load) Add (Constant i1 None)))) nil))) nil))) nil)",
            "(Module (/seq (/splice (fn_2 (Name g_input Load) &n:0 &a:0)) (fn_15 &longest:0 &n:0 (/choiceseq (Assign (list (Name &longest:0 Store)) (Constant i1 None) None) (Assign (list (Name &increase_len:0 Store)) (Constant i1 None) None) (Assign (list (Name &change_len:0 Store)) (Constant i1 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (fn_4 &i:0 &a:0) (/seq (AugAssign (Name &increase_len:0 Store) Add (Constant i1 None)) (AugAssign (Name &change_len:0 Store) Add (Constant i1 None))) (/seq (If (fn_27 &a:0 &i:0 &n:0) (/seq (Assign (list (Name &change_len:0 Store)) (BinOp (Name &increase_len:0 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &change_len:0 Store)) (Constant i2 None) None))) (Assign (list (Name &increase_len:0 Store)) (Constant i1 None) None))) (Assign (list (Name &longest:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &longest:0 Load)) (_starred_content (Name &change_len:0 Load))) nil) None)) (/seq) None)))) nil)",
            "(Module (/seq (fn_17 &n:1 &a:1 &max_subsegment_length:0 (/choiceseq (fn_29 &n:1 &left:1) (fn_29 &n:1 &right:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (fn_4 &i:1 &a:1) (/seq (AugAssign (Subscript (Name &left:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &left:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_7 &n:1) (/seq (If (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Lt) (list (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Subscript (Name &right:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &right:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (/seq))) (/seq) None) (Assign (list (Name &max_length:1 Store)) (BinOp (Call (Name g_max Load) (list (_starred_content (Subscript (Name &right:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &left:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i2 None))) Load))) nil) Add (Constant i1 None)) None) (For (Name &i:1 Store) (fn_14 &n:1) (fn_28 (fn_18 &i:1 &a:1) &max_length:1 &i:1 &right:1 &left:1) (/seq) None) (Return (Name &max_length:1 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_10 &a:0 &n:0 &max_subsegment_length:0))) (/seq))) nil)",
            "(Module (fn_16 &a:0 &n:0 &max_len:0 &current_len:0 (/choiceseq (Assign (list (Name &prev_diff_positive:0 Store)) (Compare (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) None) (Assign (list (Name &change_used:0 Store)) (Constant False None) None) (Assign (list (Name &len_with_prev_change:0 Store)) (Constant i2 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &diff_positive:0 Store)) (fn_4 &i:0 &a:0) None) (If (Compare (Name &diff_positive:0 Load) (list Eq) (list (Name &prev_diff_positive:0 Load))) (/seq (If (UnaryOp Not (Name &change_used:0 Load)) (/seq (AugAssign (Name &current_len:0 Store) Add (Constant i1 None)) (Assign (list (Name &len_with_prev_change:0 Store)) (Constant i2 None) None)) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &current_len:0 Load))) nil) None) (Assign (list (Name &current_len:0 Store)) (BinOp (Name &len_with_prev_change:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &len_with_prev_change:0 Store)) (Constant i2 None) None)))) (/seq (AugAssign (Name &len_with_prev_change:0 Store) Add (Constant i1 None)) (If (BoolOp Or (list (UnaryOp Not (Name &change_used:0 Load)) (fn_8 &i:0 &a:0))) (/seq (AugAssign (Name &current_len:0 Store) Add (Constant i1 None)) (Assign (list (Name &change_used:0 Store)) (Constant True None) None)) (/seq (Assign (list (Name &max_len:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_len:0 Load)) (_starred_content (Name &current_len:0 Load))) nil) None) (Assign (list (Name &current_len:0 Store)) (BinOp (Name &len_with_prev_change:0 Load) Add (Constant i1 None)) None) (Assign (list (Name &len_with_prev_change:0 Store)) (Constant i2 None) None) (Assign (list (Name &change_used:0 Store)) (Constant True None) None))))) (Assign (list (Name &prev_diff_positive:0 Store)) (Name &diff_positive:0 Load) None)) (/seq) None))) nil)",
            "(Module (/seq (FunctionDef &find_longest_subsegment:0 (arguments nil (list (arg &n:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (/splice (fn_1 &n:1 &dp1:1 &dp2:1 &i:1 &a:1)) (Assign (list (Name &max_length:1 Store)) (Constant i1 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &max_length:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_length:1 Load)) (_starred_content (Subscript (Name &dp1:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &dp2:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (If (BoolOp And (list (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (fn_24 &n:1 &i:1))) (fn_28 (fn_12 (Constant i1 None) &i:1 &a:1) &max_length:1 &i:1 &dp2:1 &dp1:1) (/seq))) (/seq) None) (Return (Name &max_length:1 Load))) nil None None) (/splice (fn_10 &a:0 &n:0 &find_longest_subsegment:0))) nil)"
        ]
    },
    "806": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (Assign (list (Name %5 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) Pow (Constant i2 None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %1 None None) (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Return (BinOp (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) Mult (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) Sub (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) Mult (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)))))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load)) Mult (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript #0 (_slice_content (Constant i0 None)) Load))) Add (BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load)) Mult (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript #0 (_slice_content (Constant i1 None)) Load))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) (/seq (Assign (list (Name %2 Store)) (BinOp (BinOp (Name %1 Load) Add (Constant i1 None)) Mod #0) None) (AugAssign (Name %4 Store) Add (BinOp (Subscript (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Constant i1 None)) Load))) (AugAssign (Name %4 Store) Sub (BinOp (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i1 None)) Load)))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Name %4 Load) Sub (Name %3 Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Name %2 Load) Sub (Name %1 Load)) Pow (Constant i2 None)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Tuple (list (_starred_content (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Add (BinOp (Name %3 Load) Mult (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))))) (_starred_content (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) Add (BinOp (Name %3 Load) Mult (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)))))) Load)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (FunctionDef %2 (arguments nil nil None nil nil None nil) (/seq ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) None) (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Subscript (Name %2 Load) (_slice_content (BinOp (BinOp (Name %1 Load) Add (Constant i1 None)) Mod (Name %5 Load))) Load) None) ?0) (/seq) None)",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) Add (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Pow (Constant i2 None)) Add (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) Pow (Constant i2 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Name %6 Load) Sub (Name %4 Load)) Mult (BinOp (Name %5 Load) Sub (Name %4 Load))) Add (BinOp (BinOp (Name %3 Load) Sub (Name %1 Load)) Mult (BinOp (Name %2 Load) Sub (Name %1 Load))))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) (/seq (Assign (list (Name %3 Store)) (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) None) (Assign (list (Name %5 Store)) (Subscript (Name %2 Load) (_slice_content (BinOp (BinOp (Name %1 Load) Add (Constant i1 None)) Mod (Name %4 Load))) Load) None) ?0) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %3 Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)))) Load) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name %2 Store)) (Constant i0 None) None) #0 (Assign (list (Name %3 Store)) (BinOp (Name g_pi Load) Mult (BinOp (BinOp (Name %2 Load) Pow (Constant i2 None)) Sub (BinOp (Name %1 Load) Pow (Constant i2 None)))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Name %2 Load) Pow (Constant i2 None)) Add (BinOp (Name %1 Load) Pow (Constant i2 None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load)) Mult (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript #0 (_slice_content (Constant i1 None)) Load)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (Tuple (list (_starred_content (BinOp (Subscript #0 (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Subscript #0 (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (Assign (list (Name %6 Store)) (Tuple (list (_starred_content (BinOp (Name %5 Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Name %4 Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i1 None)) Load)))) Load) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript #0 (_slice_content (Constant i1 None)) Load)) Sub (BinOp (Subscript #0 (_slice_content (Constant i0 None)) Load) Mult (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i1 None)) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) Sub (BinOp (Subscript (Name %2 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) Sub (Subscript #0 (_slice_content (Constant i0 None)) Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Name %1 Load) Sub (Subscript #0 (_slice_content (Constant i1 None)) Load)) Pow (Constant i2 None))))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (FunctionDef %4 (arguments nil (list (arg %2 None None) (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq (Return (fn_4 (Name %2 Load) %3 %2 %1))) nil None None) (FunctionDef %7 (arguments nil (list (arg %5 None None) (arg %6 None None)) None nil nil None nil) (/seq (Return (fn_2 %6 %5))) nil None None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %2 Load) Pow (Constant i2 None)) Sub (BinOp (Name %1 Load) Pow (Constant i2 None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (BinOp (Name %2 Load) Sub (Name %1 Load)) None) (Assign (list (Name %6 Store)) (BinOp (Name %5 Load) Sub (Name %4 Load)) None) (Assign (list (Name %7 Store)) (BinOp (BinOp (Name %4 Load) Mult (Name %1 Load)) Sub (BinOp (Name %5 Load) Mult (Name %2 Load))) None) (Assign (list (Name %10 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %3 Load) Mult (Name %9 Load)) Add (BinOp (Name %6 Load) Mult (Name %8 Load))) Add (Name %7 Load)))) nil) Div #0) None) (Assign (list (Name %11 Store)) (fn_12 %1 %2 %8 %5 %4 %9) None))",
                "sym_arity": 11,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (Subscript (Name %3 Load) (_slice_content (BinOp (BinOp (Name %2 Load) Add (Constant i1 None)) Mod (Name %1 Load))) Load))) Load) None) ?0) (/seq) None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return #0)) (/seq)) (Assign (list (Name %8 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (fn_12 %7 %6 %5 %4 %3 %2) Div (Name %1 Load)))) nil))) nil) None) (Assign (list (Name %9 Store)) (BinOp (Name %4 Load) Add (BinOp (Name %8 Load) Mult (BinOp (Name %3 Load) Sub (Name %4 Load)))) None) (Assign (list (Name %10 Store)) (BinOp (Name %7 Load) Add (BinOp (Name %8 Load) Mult (BinOp (Name %6 Load) Sub (Name %7 Load)))) None))",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Tuple (list (_starred_content (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Load) Add (BinOp (Name %2 Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)))) (_starred_content (BinOp (Subscript (Name %3 Load) (_slice_content (Constant i1 None)) Load) Add (BinOp (Name %2 Load) Mult (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))))) Load)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %4 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None) (If (Compare (Name %4 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name %3 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %2 Load))) nil))) (/seq)) (Assign (list (Name %6 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i1 None)) (_starred_content #0)) nil))) nil) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name %1 Load) Pow (Constant i2 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (FunctionDef &area_polygon:0 (arguments nil (list (arg &points:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &points:2 Load))) nil) None) (Assign (list (Name &area:2 Store)) (Constant f0.0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (AugAssign (Name &area:2 Store) Add (BinOp (Subscript (Subscript (Name &points:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Subscript (Name &points:2 Load) (_slice_content (BinOp (BinOp (Name &i:2 Load) Add (Constant i1 None)) Mod (Name &n:2 Load))) Load) (_slice_content (Constant i1 None)) Load))) (AugAssign (Name &area:2 Store) Sub (BinOp (Subscript (Subscript (Name &points:2 Load) (_slice_content (BinOp (BinOp (Name &i:2 Load) Add (Constant i1 None)) Mod (Name &n:2 Load))) Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Subscript (Name &points:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Constant i1 None)) Load)))) (/seq) None) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:2 Load))) nil) Div (Constant f2.0 None)))) nil None None) (FunctionDef &distance_squared:0 (arguments nil (list (arg &p1:3 None None) (arg &p2:3 None None)) None nil nil None nil) (/seq (Return (fn_2 &p2:3 &p1:3))) nil None None) (FunctionDef &distance_to_segment_squared:0 (arguments nil (list (arg &p:4 None None) (arg &v:4 None None) (arg &w:4 None None)) None nil nil None nil) (/seq (/splice (fn_29 (BinOp (fn_4 (Name &v:4 Load) &w:4 &v:4 &p:4) Div (Name &l2:4 Load)) &w:4 &v:4 &distance_squared:0 &l2:4 &p:4 &t:4)) (Return (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (fn_7 &v:4 &w:4 &t:4))) nil))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:5 None None) (arg &p:5 None None) (arg &points:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_dist_sq:5 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist_sq:5 Store)) (Constant f0.0 None) None) (fn_26 &n:5 &i:5 &points:5 &p2:5 &p1:5 (/choiceseq (Assign (list (Name &min_dist_sq:5 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:5 Load)) (_starred_content (Call (Name &distance_to_segment_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &p1:5 Load)) (_starred_content (Name &p2:5 Load))) nil))) nil) None) (Assign (list (Name &max_dist_sq:5 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_sq:5 Load)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &p1:5 Load))) nil))) nil) None))) (Return (BinOp (Name g_pi Load) Mult (BinOp (Name &max_dist_sq:5 Load) Sub (Name &min_dist_sq:5 Load))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &py:0 &px:0 &n:0 &_:6 &points:0 (/choiceseq))) (Assign (list (Name &p:0 Store)) (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &p:0 Load)) (_starred_content (Name &points:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &dist:0 (arguments nil (list (arg &px:1 None None) (arg &py:1 None None) (arg &ax:1 None None) (arg &ay:1 None None) (arg &bx:1 None None) (arg &by:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &pax:1 Store)) (_starred_content (Name &pay:1 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &ax:1 Load) Sub (Name &px:1 Load))) (_starred_content (BinOp (Name &ay:1 Load) Sub (Name &py:1 Load)))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &pbx:1 Store)) (_starred_content (Name &pby:1 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &bx:1 Load) Sub (Name &px:1 Load))) (_starred_content (BinOp (Name &by:1 Load) Sub (Name &py:1 Load)))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &abx:1 Store)) (_starred_content (Name &aby:1 Store))) Store)) (Tuple (list (_starred_content (BinOp (Name &bx:1 Load) Sub (Name &ax:1 Load))) (_starred_content (BinOp (Name &by:1 Load) Sub (Name &ay:1 Load)))) Load) None) (Assign (list (Name &cross_product:1 Store)) (BinOp (BinOp (Name &pax:1 Load) Mult (Name &pbx:1 Load)) Add (BinOp (Name &pay:1 Load) Mult (Name &pby:1 Load))) None) (If (Compare (Name &cross_product:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &dot_product:1 Store)) (BinOp (BinOp (Name &pax:1 Load) Mult (Name &abx:1 Load)) Add (BinOp (Name &pay:1 Load) Mult (Name &aby:1 Load))) None) (If (Compare (Name &dot_product:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &ab_squared:1 Store)) (fn_17 &aby:1 &abx:1) None) (If (Compare (Name &dot_product:1 Load) (list Gt) (list (Name &ab_squared:1 Load))) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_17 &pby:1 &pbx:1))) nil))) (/seq (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (BinOp (BinOp (Name &pax:1 Load) Mult (Name &aby:1 Load)) Sub (BinOp (Name &pay:1 Load) Mult (Name &abx:1 Load))))) nil) Div (Call (Name g_sqrt Load) (list (_starred_content (Name &ab_squared:1 Load))) nil)))))) (/seq))) (/seq)) (Return (Call (Name g_sqrt Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (fn_17 &pay:1 &pax:1)) (_starred_content (fn_17 &pby:1 &pbx:1))) nil))) nil))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &n:2 None None) (arg &px:2 None None) (arg &py:2 None None) (arg &vertices:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_dist:2 Store)) (Constant i0 None) None) (Assign (list (Name &min_dist:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_9 &i:2 &vertices:2 &ay:2 &ax:2 &n:2 &by:2 &bx:2 (/choiceseq (Assign (list (Name &max_dist:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:2 Load)) (_starred_content (fn_6 &py:2 &ay:2 &px:2 &ax:2))) nil) None) (Assign (list (Name &min_dist:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:2 Load)) (_starred_content (BinOp (Call (Name &dist:0 Load) (list (_starred_content (Name &px:2 Load)) (_starred_content (Name &py:2 Load)) (_starred_content (Name &ax:2 Load)) (_starred_content (Name &ay:2 Load)) (_starred_content (Name &bx:2 Load)) (_starred_content (Name &by:2 Load))) nil) Pow (Constant i2 None)))) nil) None))) (Return (BinOp (Name g_pi Load) Mult (BinOp (Name &max_dist:2 Load) Sub (Name &min_dist:2 Load))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &px:3 Store)) (_starred_content (Name &py:3 Store))) Store)) (fn_16) None) (Assign (list (Name &vertices:3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &vertices:3 Load))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross:0 (/choiceseq)) (FunctionDef &polygon_area:0 (arguments nil (list (arg &points:2 None None)) None nil nil None nil) (/seq (Return (BinOp (Constant f0.5 None) Mult (Call (Name g_abs Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name &cross:0 Load) (list (_starred_content (Subscript (Name &points:2 Load) (_slice_content (Name &i:6 Load)) Load)) (_starred_content (Subscript (Name &points:2 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &points:2 Load) (_slice_content (BinOp (BinOp (Name &i:6 Load) Add (Constant i1 None)) Mod (Call (Name g_len Load) (list (_starred_content (Name &points:2 Load))) nil))) Load))) nil) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &points:2 Load))) nil))) nil) nil i0))))) nil))) nil)))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_1 &py:3 &px:3 &n:3 &_:4 &polygon:3 (/choiceseq))) (Assign (list (Name &angles:3 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &p1:3 Store)) (_starred_content (Name &p2:3 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &polygon:3 Load)) (_starred_content (BinOp (Subscript (Name &polygon:3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) Add (List (list (_starred_content (Subscript (Name &polygon:3 Load) (_slice_content (Constant i0 None)) Load))) Load)))) nil) (/seq (Expr (Call (Attribute (Name &angles:3 Load) s_append Load) (list (_starred_content (Call (Name g_atan2 Load) (list (_starred_content (BinOp (Subscript (Name &p1:3 Load) (_slice_content (Constant i1 None)) Load) Sub (Name &py:3 Load))) (_starred_content (BinOp (Subscript (Name &p1:3 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &px:3 Load)))) nil))) nil)) (Expr (Call (Attribute (Name &angles:3 Load) s_append Load) (list (_starred_content (Call (Name g_atan2 Load) (list (_starred_content (BinOp (Subscript (Name &p2:3 Load) (_slice_content (Constant i1 None)) Load) Sub (Name &py:3 Load))) (_starred_content (BinOp (Subscript (Name &p2:3 Load) (_slice_content (Constant i0 None)) Load) Sub (Name &px:3 Load)))) nil))) nil)) (Assign (list (Name &cross_product:3 Store)) (BinOp (BinOp (BinOp (Subscript (Name &p2:3 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &p1:3 Load) (_slice_content (Constant i0 None)) Load)) Mult (BinOp (Name &py:3 Load) Sub (Subscript (Name &p1:3 Load) (_slice_content (Constant i1 None)) Load))) Sub (BinOp (BinOp (Subscript (Name &p2:3 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &p1:3 Load) (_slice_content (Constant i1 None)) Load)) Mult (BinOp (Name &px:3 Load) Sub (Subscript (Name &p1:3 Load) (_slice_content (Constant i0 None)) Load)))) None) (If (Compare (Name &cross_product:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &angles:3 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &angles:3 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load) Add (Subscript (Name &angles:3 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Div (Constant i2 None)))) nil))) (/seq))) (/seq) None) (Assign (list (Name &angles:3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &angles:3 Load))) nil))) nil) None) (Expr (Call (Attribute (Name &angles:3 Load) s_sort Load) nil nil)) (Assign (list (Name &max_angle_diff:3 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (BinOp (BinOp (Subscript (Name &angles:3 Load) (_slice_content (BinOp (BinOp (Name &i:5 Load) Add (Constant i1 None)) Mod (Call (Name g_len Load) (list (_starred_content (Name &angles:3 Load))) nil))) Load) Sub (Subscript (Name &angles:3 Load) (_slice_content (Name &i:5 Load)) Load)) Mod (BinOp (Constant i2 None) Mult (Name g_pi Load))) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &angles:3 Load))) nil))) nil) nil i0))))) nil) None) (Assign (list (Name &swept_area:3 Store)) (BinOp (BinOp (BinOp (Name g_pi Load) Mult (BinOp (Name &max_angle_diff:3 Load) Sub (Call (Name g_sin Load) (list (_starred_content (Name &max_angle_diff:3 Load))) nil))) Mult (BinOp (fn_17 &py:3 &px:3) Pow (BinOp (Constant i3 None) Div (Constant i2 None)))) Div (Constant i3 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name &polygon_area:0 Load) (list (_starred_content (Name &polygon:3 Load))) nil) Add (Name &swept_area:3 Load)))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &cross_product:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &c:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk5LCAxMTQsIDExMSwgMTE1LCAxMTUsIDMyLCAxMTIsIDExNCwgMTExLCAxMDAsIDExNywgOTksIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE4LCAxMDEsIDk5LCAxMTYsIDExMSwgMTE0LCAxMTUsIDMyLCA2NSwgNjYsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCA2NywgNjgsIDQ0LCAzMiwgMTE5LCAxMDQsIDEwMSwgMTE0LCAxMDEsIDMyLCA2NSwgNDQsIDMyLCA2NiwgNDQsIDMyLCA2NywgNDQsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCA2OCwgMzIsIDk3LCAxMTQsIDEwMSwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDEsIDEwMCwgMzIsIDk3LCAxMTUsIDMyLCA0MCwgMTIwLCA0NCwgMzIsIDEyMSwgNDEsIDQ2XQ== None)) (Return (BinOp (fn_18 (Name &c:1 Load) &d:1 &a:1 &b:1) Sub (BinOp (BinOp (Subscript (Name &b:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load)) Mult (BinOp (Subscript (Name &d:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load)))))) nil None None) (FunctionDef &dot_product:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None) (arg &d:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTExLCAxMTYsIDMyLCAxMTIsIDExNCwgMTExLCAxMDAsIDExNywgOTksIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE4LCAxMDEsIDk5LCAxMTYsIDExMSwgMTE0LCAxMTUsIDMyLCA2NSwgNjYsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCA2NywgNjgsIDQ0LCAzMiwgMTE5LCAxMDQsIDEwMSwgMTE0LCAxMDEsIDMyLCA2NSwgNDQsIDMyLCA2NiwgNDQsIDMyLCA2NywgNDQsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCA2OCwgMzIsIDk3LCAxMTQsIDEwMSwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDEsIDEwMCwgMzIsIDk3LCAxMTUsIDMyLCA0MCwgMTIwLCA0NCwgMzIsIDEyMSwgNDEsIDQ2XQ== None)) (Return (fn_4 (Name &c:2 Load) &d:2 &a:2 &b:2))) nil None None) (FunctionDef &distance:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMCwgMTA1LCAxMTUsIDExNiwgOTcsIDExMCwgOTksIDEwMSwgMzIsIDk4LCAxMDEsIDExNiwgMTE5LCAxMDEsIDEwMSwgMTEwLCAzMiwgMTEyLCAxMTEsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDY1LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgNjYsIDQ0LCAzMiwgMTE5LCAxMDQsIDEwMSwgMTE0LCAxMDEsIDMyLCA2NSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDY2LCAzMiwgOTcsIDExNCwgMTAxLCAzMiwgMTE0LCAxMDEsIDExMiwgMTE0LCAxMDEsIDExNSwgMTAxLCAxMTAsIDExNiwgMTAxLCAxMDAsIDMyLCA5NywgMTE1LCAzMiwgNDAsIDEyMCwgNDQsIDMyLCAxMjEsIDQxLCA0Nl0= None)) (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &a:3 &b:3))) nil))) nil None None) (FunctionDef &distance_to_segment:0 (arguments nil (list (arg &p:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNCwgMTE2LCAxMDEsIDExNSwgMTE2LCAzMiwgMTAwLCAxMDUsIDExNSwgMTE2LCA5NywgMTEwLCA5OSwgMTAxLCAzMiwgMTAyLCAxMTQsIDExMSwgMTA5LCAzMiwgMTEyLCAxMTEsIDEwNSwgMTEwLCAxMTYsIDMyLCA4MCwgMzIsIDExNiwgMTExLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTA1LCAxMTAsIDEwMSwgMzIsIDExNSwgMTAxLCAxMDMsIDEwOSwgMTAxLCAxMTAsIDExNiwgMzIsIDY1LCA2NiwgNDZd None)) (If (BoolOp And (list (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &p:4 Load))) nil) (list Gt) (list (Constant i0 None))) (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &b:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &p:4 Load))) nil) (list Gt) (list (Constant i0 None))))) (/seq (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross_product:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &p:4 Load))) nil))) nil) Div (Call (Name &distance:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil)))) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Call (Name &distance:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (Name &a:4 Load))) nil)) (_starred_content (Call (Name &distance:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (Name &b:4 Load))) nil))) nil))))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:5 &polygon:0 (/choiceseq))) (/splice (fn_15 (fn_13 &i:0 &polygon:0 &p1:0 &n:0 &p2:0 (/choiceseq (Assign (list (Name &min_distance:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance:0 Load)) (_starred_content (Call (Name &distance_to_segment:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p1:0 Load)) (_starred_content (Name &p2:0 Load))) nil))) nil) None) (Assign (list (Name &max_distance:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:0 Load)) (_starred_content (Call (Name &distance:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p1:0 Load))) nil))) nil) None))) &min_distance:0 &max_distance:0 &area:0)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &area:0 Load) i-1 (JoinedStr (list (Constant s_.20f None)))))))) nil))) nil)",
            "(Module (/seq (FunctionDef &sign:0 (arguments nil (list (arg &o:1 None None) (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Return (BinOp (fn_18 (Name &o:1 Load) &a:1 &b:1 &o:1) Sub (fn_18 (Name &o:1 Load) &b:1 &o:1 &a:1)))) nil None None) (FunctionDef &point_line_distance:0 (arguments nil (list (arg &p:2 None None) (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &sign:0 Load) (list (_starred_content (Name &p:2 Load)) (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load))) nil))) nil) Div (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &b:2 &a:2))) nil)))) nil None None) (FunctionDef &point_point_distance:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &b:3 &a:3))) nil))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:4 &points:0 (/choiceseq))) (/splice (fn_15 (fn_13 &i:0 &points:0 &p1:0 &n:0 &p2:0 (/choiceseq (Assign (list (Name &min_dist:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:0 Load)) (_starred_content (Call (Name &point_line_distance:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p1:0 Load)) (_starred_content (Name &p2:0 Load))) nil))) nil) None) (Assign (list (Name &max_dist:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:0 Load)) (_starred_content (Call (Name &point_point_distance:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p1:0 Load))) nil)) (_starred_content (Call (Name &point_point_distance:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p2:0 Load))) nil))) nil) None))) &min_dist:0 &max_dist:0 &result:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &angle:0 (arguments nil (list (arg &o:1 None None) (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &oa:1 Store)) (List (list (_starred_content (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &o:1 Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Subscript (Name &a:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &o:1 Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (Assign (list (Name &ob:1 Store)) (List (list (_starred_content (BinOp (Subscript (Name &b:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &o:1 Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Subscript (Name &b:1 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &o:1 Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (Assign (list (Name &cos_angle:1 Store)) (BinOp (fn_10 &ob:1 &oa:1) Div (BinOp (Call (Name g_sqrt Load) (list (_starred_content (fn_11 &oa:1))) nil) Mult (Call (Name g_sqrt Load) (list (_starred_content (fn_11 &ob:1))) nil))) None) (Return (Call (Name g_acos Load) (list (_starred_content (Name &cos_angle:1 Load))) nil))) nil None None) (fn_3 &o:2 &b:2 &a:2 &cross_product:0 (/choiceseq)) (FunctionDef &distance:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &b:3 &a:3))) nil))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:4 &vertices:0 (/choiceseq (Assign (list (Name &p:0 Store)) (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load) None)))) (Assign (list (Name &total_area:0 Store)) (Constant i0 None) None) (fn_13 &i:0 &vertices:0 &a:0 &n:0 &b:0 (/choiceseq (Assign (list (Name &r_ab:0 Store)) (Call (Name &distance:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &a:0 Load))) nil) None) (Assign (list (Name &r_ba:0 Store)) (Call (Name &distance:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Name &theta:0 Store)) (Call (Name &angle:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil) None) (Assign (list (Name &sector_area:0 Store)) (BinOp (BinOp (BinOp (Constant f0.5 None) Mult (Name &r_ab:0 Load)) Mult (Name &r_ba:0 Load)) Mult (Name &theta:0 Load)) None) (Assign (list (Name &triangle_area:0 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross_product:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil) Div (Constant i2 None)) None) (Assign (list (Name &segment_area:0 Store)) (BinOp (Name &sector_area:0 Load) Sub (Name &triangle_area:0 Load)) None) (AugAssign (Name &total_area:0 Store) Add (Name &segment_area:0 Load)))) (AugAssign (Name &total_area:0 Store) Mult (Constant i2 None)) (Assign (list (Name &closest_distance:0 Store)) (Call (Name g_min Load) (list (_starred_content (GeneratorExp (Call (Name &distance:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &vertex:5 Load))) nil) (list (comprehension (Name &vertex:5 Store) (Name &vertices:0 Load) nil i0))))) nil) None) (AugAssign (Name &total_area:0 Store) Add (BinOp (Name g_pi Load) Mult (BinOp (Name &closest_distance:0 Load) Pow (Constant i2 None)))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &total_area:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_area:0 (arguments nil (list (arg &n:1 None None) (arg &px:1 None None) (arg &py:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_r_sq:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_r_sq:1 Store)) (Constant i0 None) None) (fn_9 &i:1 &vertices:1 &y1:1 &x1:1 &n:1 &y2:1 &x2:1 (/choiceseq (Assign (list (Name &curr_r_sq:1 Store)) (fn_6 &py:1 &y1:1 &px:1 &x1:1) None) (Assign (list (Name &max_r_sq:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_r_sq:1 Load)) (_starred_content (Name &curr_r_sq:1 Load))) nil) None) (Assign (list (Name &A:1 Store)) (BinOp (Name &y2:1 Load) Sub (Name &y1:1 Load)) None) (Assign (list (Name &B:1 Store)) (BinOp (Name &x1:1 Load) Sub (Name &x2:1 Load)) None) (Assign (list (Name &C:1 Store)) (BinOp (BinOp (Name &x2:1 Load) Mult (Name &y1:1 Load)) Sub (BinOp (Name &x1:1 Load) Mult (Name &y2:1 Load))) None) (Assign (list (Name &dist_sq:1 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (Name &A:1 Load) Mult (Name &px:1 Load)) Add (BinOp (Name &B:1 Load) Mult (Name &py:1 Load))) Add (Name &C:1 Load)) Pow (Constant i2 None)) Div (fn_17 &B:1 &A:1)) None) (Assign (list (Name &vec1:1 Store)) (Tuple (list (_starred_content (BinOp (Name &x1:1 Load) Sub (Name &px:1 Load))) (_starred_content (BinOp (Name &y1:1 Load) Sub (Name &py:1 Load)))) Load) None) (Assign (list (Name &vec2:1 Store)) (Tuple (list (_starred_content (BinOp (Name &x2:1 Load) Sub (Name &px:1 Load))) (_starred_content (BinOp (Name &y2:1 Load) Sub (Name &py:1 Load)))) Load) None) (Assign (list (Name &proj_onto_segment:1 Store)) (Compare (fn_12 &py:1 &y2:1 &y1:1 &px:1 &x2:1 &x1:1) (list LtE) (list (Constant i0 None))) None) (If (Name &proj_onto_segment:1 Load) (/seq (Assign (list (Name &min_r_sq:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_r_sq:1 Load)) (_starred_content (Name &dist_sq:1 Load))) nil) None)) (/seq)))) (Assign (list (Name &area:1 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Name &max_r_sq:1 Load) Sub (Name &min_r_sq:1 Load))) None) (Return (Name &area:1 Load))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:2 &vertices:0 (/choiceseq))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_area:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load)) (_starred_content (Name &vertices:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (/splice (fn_23 &a:2 &o:2 &b:2 &dot_product:0 &a:3 &b:3 &distance_squared:0)) (FunctionDef &distance_point_line:0 (arguments nil (list (arg &p:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (If (BoolOp And (list (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &p:4 Load))) nil) (list Gt) (list (Constant i0 None))) (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &b:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &p:4 Load))) nil) (list Gt) (list (Constant i0 None))))) (/seq (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross_product:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &p:4 Load))) nil))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil))) nil)))) (/seq)) (Return (Call (Name g_min Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &p:4 Load))) nil))) nil)) (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &b:4 Load)) (_starred_content (Name &p:4 Load))) nil))) nil))) nil))) nil None None) (/splice (fn_8 &cleaned_area:5 &main:0 (/choiceseq (/splice (fn_1 &py:5 &px:5 &n:5 &_:6 &points:5 (/choiceseq))) (Expr (Call (Attribute (Name &points:5 Load) s_append Load) (list (_starred_content (Subscript (Name &points:5 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Assign (list (Name &min_dist_sq:5 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist_sq:5 Store)) (Constant i0 None) None) (Assign (list (Name &p:5 Store)) (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:5 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:5 Store)) (_starred_content (Name &b:5 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &points:5 Load) (_slice_content (Name &i:5 Load)) Load)) (_starred_content (Subscript (Name &points:5 Load) (_slice_content (BinOp (Name &i:5 Load) Add (Constant i1 None))) Load))) Load) None) (Assign (list (Name &min_dist_sq:5 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:5 Load)) (_starred_content (BinOp (Call (Name &distance_point_line:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load))) nil) Pow (Constant i2 None)))) nil) None) (Assign (list (Name &max_dist_sq:5 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_sq:5 Load)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &a:5 Load))) nil)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &b:5 Load))) nil))) nil) None)) (/seq) None) (Assign (list (Name &cleaned_area:5 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_dist_sq:5 Load) Sub (Name &min_dist_sq:5 Load))) None))))) nil)",
            "(Module (/seq (/splice (fn_1 &py:0 &px:0 &n:0 &_:5 &vertices:0 (/choiceseq))) (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (FunctionDef &dot_product:0 (arguments nil (list (arg &o:2 None None) (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Return (fn_4 (Name &o:2 Load) &b:2 &o:2 &a:2))) nil None None) (FunctionDef &distance_squared:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None (list (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load))) (/seq (Return (fn_2 &b:3 &a:3))) nil None None) (FunctionDef &distance_to_segment_squared:0 (arguments nil (list (arg &p:4 None None) (arg &v:4 None None) (arg &w:4 None None)) None nil nil None nil) (/seq (/splice (fn_29 (BinOp (Call (Name &dot_product:0 Load) (list (_starred_content (Name &v:4 Load)) (_starred_content (Name &p:4 Load)) (_starred_content (Name &w:4 Load))) nil) Div (Name &l2:4 Load)) &w:4 &v:4 &distance_squared:0 &l2:4 &p:4 &t:4)) (Assign (list (Name &projection:4 Store)) (fn_7 &v:4 &w:4 &t:4) None) (Return (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (Name &projection:4 Load))) nil))) nil None None) (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name &distance_to_segment_squared:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &max_dist_sq:0 Store)) (Call (Name &distance_squared:0 Load) (list (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &max_dist_sq:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_sq:0 Load)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil))) nil) None) (If (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:0 Load)) (_starred_content (Call (Name &distance_to_segment_squared:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (Name &i:0 Load)) Load)) (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load))) nil))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &area:0 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_dist_sq:0 Load) Sub (Name &min_dist_sq:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Constant s-WzM3LCA0NiwgNTAsIDQ4LCAxMDJd None) Mod (Name &area:0 Load)))) nil))) nil)",
            "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &px:0 Store)) (_starred_content (Name &py:0 Store))) Store)) (fn_16) None) (Assign (list (Name &vertices:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (fn_16) None) (Expr (Call (Attribute (Name &vertices:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:0 Load)) (_starred_content (Name &y:0 Load))) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &vertices:0 Load) s_append Load) (list (_starred_content (Subscript (Name &vertices:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) (FunctionDef &find_area:0 (arguments nil (list (arg &n:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &area:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x1:1 Store)) (_starred_content (Name &y1:1 Store))) Store)) (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x2:1 Store)) (_starred_content (Name &y2:1 Store))) Store)) (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) None) (AugAssign (Name &area:1 Store) Add (BinOp (BinOp (Name &x1:1 Load) Mult (Name &y2:1 Load)) Sub (BinOp (Name &x2:1 Load) Mult (Name &y1:1 Load))))) (/seq) None) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:1 Load))) nil) Div (Constant i2 None)))) nil None None) (FunctionDef &distance_point_to_line:0 (arguments nil (list (arg &px:2 None None) (arg &py:2 None None) (arg &x1:2 None None) (arg &y1:2 None None) (arg &x2:2 None None) (arg &y2:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &A:2 Store)) (BinOp (Name &px:2 Load) Sub (Name &x1:2 Load)) None) (Assign (list (Name &B:2 Store)) (BinOp (Name &py:2 Load) Sub (Name &y1:2 Load)) None) (Assign (list (Name &C:2 Store)) (BinOp (Name &x2:2 Load) Sub (Name &x1:2 Load)) None) (Assign (list (Name &D:2 Store)) (BinOp (Name &y2:2 Load) Sub (Name &y1:2 Load)) None) (Assign (list (Name &dot:2 Store)) (BinOp (BinOp (Name &A:2 Load) Mult (Name &C:2 Load)) Add (BinOp (Name &B:2 Load) Mult (Name &D:2 Load))) None) (Assign (list (Name &len_sq:2 Store)) (BinOp (BinOp (Name &C:2 Load) Mult (Name &C:2 Load)) Add (BinOp (Name &D:2 Load) Mult (Name &D:2 Load))) None) (Assign (list (Name &param:2 Store)) (UnaryOp USub (Constant i1 None)) None) (If (Compare (Name &len_sq:2 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &param:2 Store)) (BinOp (Name &dot:2 Load) Div (Name &len_sq:2 Load)) None)) (/seq)) (If (Compare (Name &param:2 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &xx:2 Store)) (Name &x1:2 Load) None) (Assign (list (Name &yy:2 Store)) (Name &y1:2 Load) None)) (/seq (If (Compare (Name &param:2 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &xx:2 Store)) (Name &x2:2 Load) None) (Assign (list (Name &yy:2 Store)) (Name &y2:2 Load) None)) (/seq (Assign (list (Name &xx:2 Store)) (BinOp (Name &x1:2 Load) Add (BinOp (Name &param:2 Load) Mult (Name &C:2 Load))) None) (Assign (list (Name &yy:2 Store)) (BinOp (Name &y1:2 Load) Add (BinOp (Name &param:2 Load) Mult (Name &D:2 Load))) None))))) (Assign (list (Name &dx:2 Store)) (BinOp (Name &px:2 Load) Sub (Name &xx:2 Load)) None) (Assign (list (Name &dy:2 Store)) (BinOp (Name &py:2 Load) Sub (Name &yy:2 Load)) None) (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (Name &dx:2 Load) Mult (Name &dx:2 Load)) Add (BinOp (Name &dy:2 Load) Mult (Name &dy:2 Load))))) nil))) nil None None) (Assign (list (Name &min_dist:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x1:0 Store)) (_starred_content (Name &y1:0 Store))) Store)) (Subscript (Name &vertices:0 Load) (_slice_content (Name &i:0 Load)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x2:0 Store)) (_starred_content (Name &y2:0 Store))) Store)) (Subscript (Name &vertices:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) None) (Assign (list (Name &dist:0 Store)) (Call (Name &distance_point_to_line:0 Load) (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load)) (_starred_content (Name &x1:0 Load)) (_starred_content (Name &y1:0 Load)) (_starred_content (Name &x2:0 Load)) (_starred_content (Name &y2:0 Load))) nil) None) (Assign (list (Name &min_dist:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:0 Load)) (_starred_content (Name &dist:0 Load))) nil) None)) (/seq) None) (Assign (list (Name &max_dist:0 Store)) (Constant f0.0 None) None) (For (Name &vertex:0 Store) (Subscript (Name &vertices:0 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Name &vertex:0 Load) None) (Assign (list (Name &dist:0 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_6 &py:0 &y:0 &px:0 &x:0))) nil) None) (Assign (list (Name &max_dist:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:0 Load)) (_starred_content (Name &dist:0 Load))) nil) None)) (/seq) None) (Assign (list (Name &cleared_area:0 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (fn_24 &min_dist:0 &max_dist:0)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cleared_area:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 &y0:0 &x0:0 &n:0 &_:3 &vertices:0 (/choiceseq))) (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist_sq:0 Store)) (Constant i0 None) None) (FunctionDef &dist_sq:0 (arguments nil (list (arg &x1:1 None None) (arg &y1:1 None None) (arg &x2:1 None None) (arg &y2:1 None None)) None nil nil None nil) (/seq (Return (fn_6 &y2:1 &y1:1 &x2:1 &x1:1))) nil None None) (FunctionDef &point_to_segment_dist_sq:0 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None) (arg &x1:2 None None) (arg &y1:2 None None) (arg &x2:2 None None) (arg &y2:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &px:2 Store)) (BinOp (Name &x2:2 Load) Sub (Name &x1:2 Load)) None) (Assign (list (Name &py:2 Store)) (BinOp (Name &y2:2 Load) Sub (Name &y1:2 Load)) None) (Assign (list (Name &norm:2 Store)) (BinOp (BinOp (Name &px:2 Load) Mult (Name &px:2 Load)) Add (BinOp (Name &py:2 Load) Mult (Name &py:2 Load))) None) (Assign (list (Name &u:2 Store)) (BinOp (BinOp (BinOp (BinOp (Name &x:2 Load) Sub (Name &x1:2 Load)) Mult (Name &px:2 Load)) Add (BinOp (BinOp (Name &y:2 Load) Sub (Name &y1:2 Load)) Mult (Name &py:2 Load))) Div (Call (Name g_float Load) (list (_starred_content (Name &norm:2 Load))) nil)) None) (If (Compare (Name &u:2 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &u:2 Store)) (Constant i1 None) None)) (/seq (If (Compare (Name &u:2 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &u:2 Store)) (Constant i0 None) None)) (/seq)))) (Assign (list (Name &x_closest:2 Store)) (BinOp (Name &x1:2 Load) Add (BinOp (Name &u:2 Load) Mult (Name &px:2 Load))) None) (Assign (list (Name &y_closest:2 Store)) (BinOp (Name &y1:2 Load) Add (BinOp (Name &u:2 Load) Mult (Name &py:2 Load))) None) (Return (Call (Name &dist_sq:0 Load) (list (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load)) (_starred_content (Name &x_closest:2 Load)) (_starred_content (Name &y_closest:2 Load))) nil))) nil None None) (fn_9 &i:0 &vertices:0 &y1:0 &x1:0 &n:0 &y2:0 &x2:0 (/choiceseq (Assign (list (Name &max_dist_sq:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_sq:0 Load)) (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Name &x0:0 Load)) (_starred_content (Name &y0:0 Load)) (_starred_content (Name &x1:0 Load)) (_starred_content (Name &y1:0 Load))) nil))) nil) None) (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:0 Load)) (_starred_content (Call (Name &point_to_segment_dist_sq:0 Load) (list (_starred_content (Name &x0:0 Load)) (_starred_content (Name &y0:0 Load)) (_starred_content (Name &x1:0 Load)) (_starred_content (Name &y1:0 Load)) (_starred_content (Name &x2:0 Load)) (_starred_content (Name &y2:0 Load))) nil))) nil) None))) (Assign (list (Name &area_cleared:0 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_dist_sq:0 Load) Sub (Name &min_dist_sq:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &area_cleared:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &shoelace_formula:0 (arguments nil (list (arg &coords:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAxMTUsIDMyLCA5NywgMTE0LCAxMDEsIDk3LCAzMiwgMTE3LCAxMTUsIDEwNSwgMTEwLCAxMDMsIDMyLCA4MywgMTA0LCAxMTEsIDEwMSwgMTA4LCA5NywgOTksIDEwMSwgMzIsIDEwMiwgMTExLCAxMTQsIDEwOSwgMTE3LCAxMDgsIDk3XQ== None)) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &coords:1 Load))) nil) None) (Assign (list (Name &area:1 Store)) (Constant i0 None) None) (fn_5 (Name &n:1 Load) &i:1 &j:1 &coords:1 &area:1) (Assign (list (Name &area:1 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:1 Load))) nil) Div (Constant f2.0 None)) None) (Return (Name &area:1 Load))) nil None None) (FunctionDef &dist_sq:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgzLCAxMTMsIDExNywgOTcsIDExNCwgMTAxLCAxMDAsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCA5NywgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDk4XQ== None)) (Return (fn_2 &b:2 &a:2))) nil None None) (FunctionDef &triangle_area:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMTQsIDEwMSwgOTcsIDMyLCAxMTEsIDEwMiwgMzIsIDk3LCAzMiwgMTE2LCAxMTQsIDEwNSwgOTcsIDExMCwgMTAzLCAxMDgsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTgsIDEyMSwgMzIsIDExOCwgMTAxLCAxMTQsIDExNiwgMTA1LCA5OSwgMTAxLCAxMTUsIDMyLCA5NywgNDQsIDMyLCA5OCwgNDQsIDMyLCA5OV0= None)) (Assign (list (Name &side_a:3 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Name &b:3 Load)) (_starred_content (Name &c:3 Load))) nil))) nil) None) (Assign (list (Name &side_b:3 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &c:3 Load))) nil))) nil) None) (Assign (list (Name &side_c:3 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &b:3 Load))) nil))) nil) None) (Assign (list (Name &s:3 Store)) (BinOp (BinOp (BinOp (Name &side_a:3 Load) Add (Name &side_b:3 Load)) Add (Name &side_c:3 Load)) Div (Constant i2 None)) None) (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &s:3 Load) Mult (BinOp (Name &s:3 Load) Sub (Name &side_a:3 Load))) Mult (BinOp (Name &s:3 Load) Sub (Name &side_b:3 Load))) Mult (BinOp (Name &s:3 Load) Sub (Name &side_c:3 Load))))) nil))) nil None None) (FunctionDef &circle_area:0 (arguments nil (list (arg &radius:4 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMTQsIDEwMSwgOTcsIDMyLCAxMTEsIDEwMiwgMzIsIDk3LCAzMiwgOTksIDEwNSwgMTE0LCA5OSwgMTA4LCAxMDEsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDk4LCAxMjEsIDMyLCAxMTQsIDk3LCAxMDAsIDEwNSwgMTE3LCAxMTVd None)) (Return (fn_30 &radius:4))) nil None None) (/splice (fn_8 &cleaned_area:5 &main:0 (/choiceseq (/splice (fn_1 &py:5 &px:5 &n:5 &_:6 &polygon:5 (/choiceseq))) (Assign (list (Name &base_area:5 Store)) (Call (Name &shoelace_formula:0 Load) (list (_starred_content (Name &polygon:5 Load))) nil) None) (Assign (list (Name &min_dist_sq:5 Store)) (Constant None None) None) (Assign (list (Name &max_dist_sq:5 Store)) (Constant None None) None) (For (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:5 Load))) nil) (/seq (Assign (list (Name &cur_max_dist_sq:5 Store)) (Call (Name &dist_sq:0 Load) (list (_starred_content (Subscript (Name &polygon:5 Load) (_slice_content (Name &i:5 Load)) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load))) nil) None) (If (BoolOp Or (list (Compare (Name &max_dist_sq:5 Load) (list Is) (list (Constant None None))) (Compare (Name &cur_max_dist_sq:5 Load) (list Gt) (list (Name &max_dist_sq:5 Load))))) (/seq (Assign (list (Name &max_dist_sq:5 Store)) (Name &cur_max_dist_sq:5 Load) None)) (/seq)) (Assign (list (Name &j:5 Store)) (BinOp (BinOp (Name &i:5 Load) Add (Constant i1 None)) Mod (Name &n:5 Load)) None) (/splice (fn_19 (Subscript (Name &polygon:5 Load) (_slice_content (Name &j:5 Load)) Load) &i:5 &polygon:5 &ba:5 &py:5 &px:5 &pa:5)) (Assign (list (Name &dot:5 Store)) (fn_10 &pa:5 &ba:5) None) (Assign (list (Name &norm_ba:5 Store)) (fn_11 &ba:5) None) (If (BoolOp And (list (Compare (Name &dot:5 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &dot:5 Load) (list Lt) (list (Name &norm_ba:5 Load))))) (/seq (Assign (list (Name &triangle_area_:5 Store)) (Call (Name &triangle_area:0 Load) (list (_starred_content (Subscript (Name &polygon:5 Load) (_slice_content (Name &i:5 Load)) Load)) (_starred_content (Subscript (Name &polygon:5 Load) (_slice_content (Name &j:5 Load)) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load))) nil) None) (Assign (list (Name &height:5 Store)) (BinOp (BinOp (Constant i2 None) Mult (Name &triangle_area_:5 Load)) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &norm_ba:5 Load))) nil)) None) (Assign (list (Name &cur_min_dist_sq:5 Store)) (BinOp (Name &height:5 Load) Pow (Constant i2 None)) None)) (/seq (Assign (list (Name &cur_min_dist_sq:5 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Subscript (Name &polygon:5 Load) (_slice_content (Name &i:5 Load)) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load))) nil)) (_starred_content (Call (Name &dist_sq:0 Load) (list (_starred_content (Subscript (Name &polygon:5 Load) (_slice_content (Name &j:5 Load)) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load))) nil))) nil) None))) (If (BoolOp Or (list (Compare (Name &min_dist_sq:5 Load) (list Is) (list (Constant None None))) (Compare (Name &cur_min_dist_sq:5 Load) (list Lt) (list (Name &min_dist_sq:5 Load))))) (/seq (Assign (list (Name &min_dist_sq:5 Store)) (Name &cur_min_dist_sq:5 Load) None)) (/seq))) (/seq) None) (Assign (list (Name &min_radius:5 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &min_dist_sq:5 Load))) nil) None) (Assign (list (Name &max_radius:5 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &max_dist_sq:5 Load))) nil) None) (Assign (list (Name &cleaned_area:5 Store)) (BinOp (Call (Name &circle_area:0 Load) (list (_starred_content (Name &max_radius:5 Load))) nil) Sub (Call (Name &circle_area:0 Load) (list (_starred_content (Name &min_radius:5 Load))) nil)) None))))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (FunctionDef &area_of_polygon:0 (arguments nil (list (arg &polygon:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &polygon:2 Load))) nil) None) (Assign (list (Name &area:2 Store)) (Constant f0.0 None) None) (fn_5 (Name &n:2 Load) &i:2 &j:2 &polygon:2 &area:2) (Assign (list (Name &area:2 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:2 Load))) nil) Div (Constant i2 None)) None) (Return (Name &area:2 Load))) nil None None) (FunctionDef &distance_squared:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Return (fn_2 &b:3 &a:3))) nil None None) (/splice (fn_8 &cleared_area:4 &main:0 (/choiceseq (/splice (fn_1 &py:4 &px:4 &n:4 &_:5 &polygon:4 (/choiceseq))) (Assign (list (Name &original_area:4 Store)) (Call (Name &area_of_polygon:0 Load) (list (_starred_content (Name &polygon:4 Load))) nil) None) (Assign (list (Name &max_dist:4 Store)) (Constant i0 None) None) (For (Name &point:4 Store) (Name &polygon:4 Load) (/seq (Assign (list (Name &max_dist:4 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:4 Load)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &point:4 Load)) (_starred_content (Tuple (list (_starred_content (Name &px:4 Load)) (_starred_content (Name &py:4 Load))) Load))) nil))) nil) None)) (/seq) None) (Assign (list (Name &radius:4 Store)) (BinOp (Name &max_dist:4 Load) Pow (Constant f0.5 None)) None) (Assign (list (Name &cleared_area:4 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Name &radius:4 Load) Pow (Constant i2 None))) None))))) nil)",
            "(Module (/seq (FunctionDef &vector:0 (arguments nil (list (arg &x1:1 None None) (arg &y1:1 None None) (arg &x2:1 None None) (arg &y2:1 None None)) None nil nil None nil) (/seq (Return (Tuple (list (_starred_content (BinOp (Name &x2:1 Load) Sub (Name &x1:1 Load))) (_starred_content (BinOp (Name &y2:1 Load) Sub (Name &y1:1 Load)))) Load))) nil None None) (FunctionDef &cross_product:0 (arguments nil (list (arg &vec1:2 None None) (arg &vec2:2 None None)) None nil nil None nil) (/seq (Return (fn_21 &vec2:2 &vec1:2))) nil None None) (FunctionDef &dot_product:0 (arguments nil (list (arg &vec1:3 None None) (arg &vec2:3 None None)) None nil nil None nil) (/seq (Return (fn_10 &vec2:3 &vec1:3))) nil None None) (FunctionDef &magnitude:0 (arguments nil (list (arg &vec:4 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_11 &vec:4))) nil))) nil None None) (FunctionDef &distance_point_to_segment:0 (arguments nil (list (arg &px:5 None None) (arg &py:5 None None) (arg &x1:5 None None) (arg &y1:5 None None) (arg &x2:5 None None) (arg &y2:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &line_vec:5 Store)) (Call (Name &vector:0 Load) (list (_starred_content (Name &x1:5 Load)) (_starred_content (Name &y1:5 Load)) (_starred_content (Name &x2:5 Load)) (_starred_content (Name &y2:5 Load))) nil) None) (Assign (list (Name &p_vec:5 Store)) (Call (Name &vector:0 Load) (list (_starred_content (Name &x1:5 Load)) (_starred_content (Name &y1:5 Load)) (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) nil) None) (Assign (list (Name &line_len:5 Store)) (Call (Name &magnitude:0 Load) (list (_starred_content (Name &line_vec:5 Load))) nil) None) (Assign (list (Name &line_unitvec:5 Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &line_vec:5 Load) (_slice_content (Constant i0 None)) Load) Div (Name &line_len:5 Load))) (_starred_content (BinOp (Subscript (Name &line_vec:5 Load) (_slice_content (Constant i1 None)) Load) Div (Name &line_len:5 Load)))) Load) None) (Assign (list (Name &p_vec_scaled:5 Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &p_vec:5 Load) (_slice_content (Constant i0 None)) Load) Div (Name &line_len:5 Load))) (_starred_content (BinOp (Subscript (Name &p_vec:5 Load) (_slice_content (Constant i1 None)) Load) Div (Name &line_len:5 Load)))) Load) None) (Assign (list (Name &t:5 Store)) (Call (Name &dot_product:0 Load) (list (_starred_content (Name &line_unitvec:5 Load)) (_starred_content (Name &p_vec_scaled:5 Load))) nil) None) (If (Compare (Name &t:5 Load) (list Lt) (list (Constant f0.0 None))) (/seq (Assign (list (Name &t:5 Store)) (Constant f0.0 None) None)) (/seq (If (Compare (Name &t:5 Load) (list Gt) (list (Constant f1.0 None))) (/seq (Assign (list (Name &t:5 Store)) (Constant f1.0 None) None)) (/seq)))) (Assign (list (Name &nearest:5 Store)) (Tuple (list (_starred_content (BinOp (Subscript (Name &line_vec:5 Load) (_slice_content (Constant i0 None)) Load) Mult (Name &t:5 Load))) (_starred_content (BinOp (Subscript (Name &line_vec:5 Load) (_slice_content (Constant i1 None)) Load) Mult (Name &t:5 Load)))) Load) None) (Assign (list (Name &dist:5 Store)) (Call (Name &magnitude:0 Load) (list (_starred_content (Call (Name &vector:0 Load) (list (_starred_content (Subscript (Name &nearest:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &nearest:5 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &p_vec:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &p_vec:5 Load) (_slice_content (Constant i1 None)) Load))) nil))) nil) None) (Return (Name &dist:5 Load))) nil None None) (FunctionDef &polygon_area:0 (arguments nil (list (arg &vertices:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &area:6 Store)) (Constant i0 None) None) (fn_5 (Call (Name g_len Load) (list (_starred_content (Name &vertices:6 Load))) nil) &i:6 &j:6 &vertices:6 &area:6) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:6 Load))) nil) Div (Constant f2.0 None)))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:7 &vertices:0 (/choiceseq))) (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist_sq:0 Store)) (Constant i0 None) None) (fn_9 &i:0 &vertices:0 &y1:0 &x1:0 &n:0 &y2:0 &x2:0 (/choiceseq (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:0 Load)) (_starred_content (fn_6 &y1:0 &py:0 &x1:0 &px:0))) nil) None) (Assign (list (Name &max_dist_sq:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_sq:0 Load)) (_starred_content (fn_6 &y1:0 &py:0 &x1:0 &px:0))) nil) None) (Assign (list (Name &dist:0 Store)) (Call (Name &distance_point_to_segment:0 Load) (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load)) (_starred_content (Name &x1:0 Load)) (_starred_content (Name &y1:0 Load)) (_starred_content (Name &x2:0 Load)) (_starred_content (Name &y2:0 Load))) nil) None) (Assign (list (Name &min_dist_sq:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_sq:0 Load)) (_starred_content (BinOp (Name &dist:0 Load) Pow (Constant i2 None)))) nil) None))) (Assign (list (Name &area:0 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Name &max_dist_sq:0 Load) Sub (Name &min_dist_sq:0 Load))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &area:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &calculate_cleared_area:0 (arguments nil (list (arg &n:1 None None) (arg &p_x:1 None None) (arg &p_y:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (FunctionDef &distance:1 (arguments nil (list (arg &x1:2 None None) (arg &y1:2 None None) (arg &x2:2 None None) (arg &y2:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_6 &y2:2 &y1:2 &x2:2 &x1:2))) nil))) nil None None) (FunctionDef &point_to_segment_distance:1 (arguments nil (list (arg &px:3 None None) (arg &py:3 None None) (arg &x1:3 None None) (arg &y1:3 None None) (arg &x2:3 None None) (arg &y2:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &dist_to_start:3 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &x1:3 Load)) (_starred_content (Name &y1:3 Load))) nil) None) (Assign (list (Name &dist_to_end:3 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &x2:3 Load)) (_starred_content (Name &y2:3 Load))) nil) None) (Assign (list (Name &segment_length:3 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &x1:3 Load)) (_starred_content (Name &y1:3 Load)) (_starred_content (Name &x2:3 Load)) (_starred_content (Name &y2:3 Load))) nil) None) (Assign (list (Name &dot:3 Store)) (BinOp (fn_12 &y1:3 &y2:3 &py:3 &x1:3 &x2:3 &px:3) Div (BinOp (Name &segment_length:3 Load) Pow (Constant i2 None))) None) (If (BoolOp And (list (Compare (Name &dot:3 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &dot:3 Load) (list Lt) (list (Constant i1 None))))) (/seq (Assign (list (Name &proj_x:3 Store)) (BinOp (Name &x1:3 Load) Add (BinOp (Name &dot:3 Load) Mult (BinOp (Name &x2:3 Load) Sub (Name &x1:3 Load)))) None) (Assign (list (Name &proj_y:3 Store)) (BinOp (Name &y1:3 Load) Add (BinOp (Name &dot:3 Load) Mult (BinOp (Name &y2:3 Load) Sub (Name &y1:3 Load)))) None) (Return (Call (Name &distance:1 Load) (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &proj_x:3 Load)) (_starred_content (Name &proj_y:3 Load))) nil))) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Name &dist_to_start:3 Load)) (_starred_content (Name &dist_to_end:3 Load))) nil))))) nil None None) (/splice (fn_15 (fn_9 &i:1 &vertices:1 &y1:1 &x1:1 &n:1 &y2:1 &x2:1 (/choiceseq (Assign (list (Name &min_distance:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance:1 Load)) (_starred_content (Call (Name &point_to_segment_distance:1 Load) (list (_starred_content (Name &p_x:1 Load)) (_starred_content (Name &p_y:1 Load)) (_starred_content (Name &x1:1 Load)) (_starred_content (Name &y1:1 Load)) (_starred_content (Name &x2:1 Load)) (_starred_content (Name &y2:1 Load))) nil))) nil) None) (Assign (list (Name &max_distance:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:1 Load)) (_starred_content (Call (Name &distance:1 Load) (list (_starred_content (Name &p_x:1 Load)) (_starred_content (Name &p_y:1 Load)) (_starred_content (Name &x1:1 Load)) (_starred_content (Name &y1:1 Load))) nil)) (_starred_content (Call (Name &distance:1 Load) (list (_starred_content (Name &p_x:1 Load)) (_starred_content (Name &p_y:1 Load)) (_starred_content (Name &x2:1 Load)) (_starred_content (Name &y2:1 Load))) nil))) nil) None))) &min_distance:1 &max_distance:1 &cleared_area:1)) (Return (Name &cleared_area:1 Load))) nil None None) (/splice (fn_1 &p_y:0 &p_x:0 &n:0 &_:4 &vertices:0 (/choiceseq))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &calculate_cleared_area:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &p_x:0 Load)) (_starred_content (Name &p_y:0 Load)) (_starred_content (Name &vertices:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (/splice (fn_23 &a:2 &o:2 &b:2 &dot_product:0 &a:3 &b:3 &length_square:0)) (FunctionDef &distance_point_line:0 (arguments nil (list (arg &p:4 None None) (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &cross:4 Store)) (Call (Name &cross_product:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load)) (_starred_content (Name &p:4 Load))) nil) None) (Assign (list (Name &dist_square_ab:4 Store)) (Call (Name &length_square:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil) None) (If (Compare (Name &dist_square_ab:4 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &length_square:0 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &p:4 Load))) nil))) nil))) (/seq)) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &cross:4 Load))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &dist_square_ab:4 Load))) nil)))) nil None None) (FunctionDef &distance_point_segment:0 (arguments nil (list (arg &p:5 None None) (arg &a:5 None None) (arg &b:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &dot1:5 Store)) (Call (Name &dot_product:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load)) (_starred_content (Name &p:5 Load))) nil) None) (If (Compare (Name &dot1:5 Load) (list Gt) (list (Constant i0 None))) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &length_square:0 Load) (list (_starred_content (Name &b:5 Load)) (_starred_content (Name &p:5 Load))) nil))) nil))) (/seq)) (Assign (list (Name &dot2:5 Store)) (Call (Name &dot_product:0 Load) (list (_starred_content (Name &b:5 Load)) (_starred_content (Name &a:5 Load)) (_starred_content (Name &p:5 Load))) nil) None) (If (Compare (Name &dot2:5 Load) (list Gt) (list (Constant i0 None))) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &length_square:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &p:5 Load))) nil))) nil))) (/seq)) (Return (Call (Name &distance_point_line:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load))) nil))) nil None None) (/splice (fn_8 &area_cleaned:6 &main:0 (/choiceseq (/splice (fn_1 &py:6 &px:6 &n:6 &_:7 &vertices:6 (/choiceseq))) (Assign (list (Name &total_area:6 Store)) (Constant i0 None) None) (Assign (list (Name &min_dist:6 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist:6 Store)) (Constant i0 None) None) (fn_26 &n:6 &i:6 &vertices:6 &p2:6 &p1:6 (/choiceseq (Assign (list (Name &dist:6 Store)) (Call (Name &distance_point_segment:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &p1:6 Load)) (_starred_content (Name &p2:6 Load))) nil) None) (Assign (list (Name &min_dist:6 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:6 Load)) (_starred_content (Name &dist:6 Load))) nil) None) (Assign (list (Name &dist_vertex:6 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &length_square:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &p1:6 Load))) nil))) nil) None) (Assign (list (Name &max_dist:6 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:6 Load)) (_starred_content (Name &dist_vertex:6 Load))) nil) None) (Assign (list (Name &area:6 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross_product:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &p1:6 Load)) (_starred_content (Name &p2:6 Load))) nil))) nil) Div (Constant i2 None)) None) (AugAssign (Name &total_area:6 Store) Add (Name &area:6 Load)))) (Assign (list (Name &area_cleaned:6 Store)) (BinOp (fn_30 &max_dist:6) Sub (fn_30 &min_dist:6)) None))))) nil)",
            "(Module (/seq (FunctionDef &area_of_cleared_region:0 (arguments nil (list (arg &n:1 None None) (arg &p:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (FunctionDef &distance_to_vertex:1 (arguments nil (list (arg &p:2 None None) (arg &v:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &v:2 &p:2))) nil))) nil None None) (FunctionDef &distance_to_edge:1 (arguments nil (list (arg &p:3 None None) (arg &v1:3 None None) (arg &v2:3 None None)) None nil nil None nil) (/seq (fn_14 &v1:3 &v2:3 &edge_vec:3) (fn_14 &v1:3 &p:3 &vec_to_p:3) (Assign (list (Name &edge_length_squared:3 Store)) (fn_11 &edge_vec:3) None) (Assign (list (Name &proj_length_times_edge_length:3 Store)) (fn_10 &vec_to_p:3 &edge_vec:3) None) (If (Compare (Name &proj_length_times_edge_length:3 Load) (list LtE) (list (Constant i0 None))) (/seq (Return (Call (Name &distance_to_vertex:1 Load) (list (_starred_content (Name &p:3 Load)) (_starred_content (Name &v1:3 Load))) nil))) (/seq)) (If (Compare (Name &proj_length_times_edge_length:3 Load) (list GtE) (list (Name &edge_length_squared:3 Load))) (/seq (Return (Call (Name &distance_to_vertex:1 Load) (list (_starred_content (Name &p:3 Load)) (_starred_content (Name &v2:3 Load))) nil))) (/seq)) (Assign (list (Name &proj_length_ratio:3 Store)) (BinOp (Name &proj_length_times_edge_length:3 Load) Div (Name &edge_length_squared:3 Load)) None) (Assign (list (Name &closest_point:3 Store)) (fn_28 &edge_vec:3 &proj_length_ratio:3 &v1:3) None) (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &closest_point:3 &p:3))) nil))) nil None None) (Assign (list (Name &min_dist_to_edge:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist_to_vertex:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &dist_to_vertex:1 Store)) (Call (Name &distance_to_vertex:1 Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (Assign (list (Name &max_dist_to_vertex:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist_to_vertex:1 Load)) (_starred_content (Name &dist_to_vertex:1 Load))) nil) None) (Assign (list (Name &next_i:1 Store)) (BinOp (BinOp (Name &i:1 Load) Add (Constant i1 None)) Mod (Name &n:1 Load)) None) (Assign (list (Name &dist_to_edge:1 Store)) (Call (Name &distance_to_edge:1 Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &vertices:1 Load) (_slice_content (Name &next_i:1 Load)) Load))) nil) None) (Assign (list (Name &min_dist_to_edge:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist_to_edge:1 Load)) (_starred_content (Name &dist_to_edge:1 Load))) nil) None)) (/seq) None) (Assign (list (Name &outer_circle_area:1 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Name &max_dist_to_vertex:1 Load) Pow (Constant i2 None))) None) (Assign (list (Name &inner_circle_area:1 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Name &min_dist_to_edge:1 Load) Pow (Constant i2 None))) None) (Return (BinOp (Name &outer_circle_area:1 Load) Sub (Name &inner_circle_area:1 Load)))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:4 &vertices:0 (/choiceseq))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &area_of_cleared_region:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &vertices:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &first_line:2 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &P_x:2 Store)) (_starred_content (Name &P_y:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &first_line:2 Load) s_split Load) nil nil))) nil) None) (Assign (list (Name &vertices:2 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) nil i0))) None) (Return (Tuple (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &P_x:2 Load)) (_starred_content (Name &P_y:2 Load)) (_starred_content (Name &vertices:2 Load))) Load))) nil None None) (FunctionDef &find_area:0 (arguments nil (list (arg &n:1 None None) (arg &P_x:1 None None) (arg &P_y:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (FunctionDef &distance:1 (arguments nil (list (arg &x1:4 None None) (arg &y1:4 None None) (arg &x2:4 None None) (arg &y2:4 None None)) None nil nil None nil) (/seq (Return (Call (Name g_hypot Load) (list (_starred_content (BinOp (Name &x2:4 Load) Sub (Name &x1:4 Load))) (_starred_content (BinOp (Name &y2:4 Load) Sub (Name &y1:4 Load)))) nil))) nil None None) (Assign (list (Name &min_dist:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &vertex_dist:1 Store)) (Call (Name &distance:1 Load) (list (_starred_content (Name &P_x:1 Load)) (_starred_content (Name &P_y:1 Load)) (_starred_content (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:1 Load)) (_starred_content (Name &vertex_dist:1 Load))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &x1:1 Store)) (_starred_content (Name &y1:1 Store))) Store)) (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x2:1 Store)) (_starred_content (Name &y2:1 Store))) Store)) (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Constant i1 None)) Mod (Name &n:1 Load))) Load) None) (/splice (fn_25 (Call (Name g_hypot Load) (list (_starred_content (Name &A:1 Load)) (_starred_content (Name &B:1 Load))) nil) &y1:1 &y2:1 &A:1 &x2:1 &x1:1 &B:1 &C:1 &P_y:1 &P_x:1 &edge_dist:1 &dot_product:1)) (Assign (list (Name &len_squared:1 Store)) (fn_6 &y1:1 &y2:1 &x1:1 &x2:1) None) (If (Compare (Constant i0 None) (list LtE LtE) (list (Name &dot_product:1 Load) (Name &len_squared:1 Load))) (/seq (Assign (list (Name &min_dist:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:1 Load)) (_starred_content (Name &edge_dist:1 Load))) nil) None)) (/seq (Assign (list (Name &min_dist:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:1 Load)) (_starred_content (Name &vertex_dist:1 Load))) nil) None)))) (/seq) None) (Return (BinOp (fn_24 &min_dist:1 &max_dist:1) Mult (Name g_pi Load)))) nil None None) (/splice (fn_8 &area:3 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &P_x:3 Store)) (_starred_content (Name &P_y:3 Store)) (_starred_content (Name &vertices:3 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Name &area:3 Store)) (Call (Name &find_area:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &P_x:3 Load)) (_starred_content (Name &P_y:3 Load)) (_starred_content (Name &vertices:3 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &cross:0 (arguments nil (list (arg &o:1 None None) (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (Return (BinOp (fn_18 (Name &o:1 Load) &b:1 &o:1 &a:1) Sub (fn_18 (Name &o:1 Load) &a:1 &o:1 &b:1)))) nil None None) (FunctionDef &is_point_in_triangle:0 (arguments nil (list (arg &pt:2 None None) (arg &v1:2 None None) (arg &v2:2 None None) (arg &v3:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &b1:2 Store)) (Compare (Call (Name &cross:0 Load) (list (_starred_content (Name &pt:2 Load)) (_starred_content (Name &v1:2 Load)) (_starred_content (Name &v2:2 Load))) nil) (list Lt) (list (Constant f0.0 None))) None) (Assign (list (Name &b2:2 Store)) (Compare (Call (Name &cross:0 Load) (list (_starred_content (Name &pt:2 Load)) (_starred_content (Name &v2:2 Load)) (_starred_content (Name &v3:2 Load))) nil) (list Lt) (list (Constant f0.0 None))) None) (Assign (list (Name &b3:2 Store)) (Compare (Call (Name &cross:0 Load) (list (_starred_content (Name &pt:2 Load)) (_starred_content (Name &v3:2 Load)) (_starred_content (Name &v1:2 Load))) nil) (list Lt) (list (Constant f0.0 None))) None) (Return (BoolOp And (list (Compare (Name &b1:2 Load) (list Eq) (list (Name &b2:2 Load))) (Compare (Name &b2:2 Load) (list Eq) (list (Name &b3:2 Load))))))) nil None None) (FunctionDef &calculate_area_of_triangle:0 (arguments nil (list (arg &v1:3 None None) (arg &v2:3 None None) (arg &v3:3 None None)) None nil nil None nil) (/seq (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross:0 Load) (list (_starred_content (Name &v1:3 Load)) (_starred_content (Name &v2:3 Load)) (_starred_content (Name &v3:3 Load))) nil))) nil) Div (Constant f2.0 None)))) nil None None) (FunctionDef &distance_squared:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Return (fn_2 &b:4 &a:4))) nil None None) (FunctionDef &distance_from_point_to_segment:0 (arguments nil (list (arg &p:5 None None) (arg &v1:5 None None) (arg &v2:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &l2:5 Store)) (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &v1:5 Load)) (_starred_content (Name &v2:5 Load))) nil) None) (If (Compare (Name &l2:5 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &v1:5 Load))) nil))) nil))) (/seq)) (Assign (list (Name &t:5 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (fn_4 (Name &v1:5 Load) &v2:5 &v1:5 &p:5) Div (Name &l2:5 Load)))) nil))) nil) None) (Assign (list (Name &projection:5 Store)) (fn_7 &v1:5 &v2:5 &t:5) None) (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &p:5 Load)) (_starred_content (Name &projection:5 Load))) nil))) nil))) nil None None) (/splice (fn_8 &result:6 &main:0 (/choiceseq (/splice (fn_1 &py:6 &px:6 &n:6 &_:7 &vertices:6 (/choiceseq))) (Assign (list (Name &min_distance:6 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_distance:6 Store)) (Constant i0 None) None) (fn_13 &i:6 &vertices:6 &v1:6 &n:6 &v2:6 (/choiceseq (Assign (list (Name &min_distance:6 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance:6 Load)) (_starred_content (Call (Name &distance_from_point_to_segment:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &v1:6 Load)) (_starred_content (Name &v2:6 Load))) nil))) nil) None) (Assign (list (Name &max_distance:6 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:6 Load)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &v1:6 Load))) nil)) (_starred_content (Call (Name &distance_squared:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load)) (_starred_content (Name &v2:6 Load))) nil))) nil) None))) (Assign (list (Name &result:6 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_distance:6 Load) Sub (BinOp (Name &min_distance:6 Load) Pow (Constant i2 None)))) None))))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk5LCAxMTQsIDExMSwgMTE1LCAxMTUsIDMyLCAxMTIsIDExNCwgMTExLCAxMDAsIDExNywgOTksIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE4LCAxMDEsIDk5LCAxMTYsIDExMSwgMTE0LCAxMTUsIDMyLCAxMTEsIDk3LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTExLCA5OCwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)))) (FunctionDef &area_of_polygon:0 (arguments nil (list (arg &polygon:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTQsIDEwMSwgOTcsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTIsIDExMSwgMTA4LCAxMjEsIDEwMywgMTExLCAxMTAsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &polygon:2 Load))) nil) None) (Assign (list (Name &area:2 Store)) (Constant f0.0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (AugAssign (Name &area:2 Store) Add (fn_20 (Subscript (Name &polygon:2 Load) (_slice_content (BinOp (BinOp (Name &i:2 Load) Add (Constant i1 None)) Mod (Name &n:2 Load))) Load) &i:2 &polygon:2))) (/seq) None) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:2 Load))) nil) Div (Constant f2.0 None)))) nil None None) (FunctionDef &angle_between_vectors:0 (arguments nil (list (arg &o:3 None None) (arg &a:3 None None) (arg &b:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk3LCAxMTAsIDEwMywgMTA4LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExOCwgMTAxLCA5OSwgMTE2LCAxMTEsIDExNCwgMTE1LCAzMiwgMTExLCA5NywgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExMSwgOTgsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (fn_14 &o:3 &a:3 &oa:3) (fn_14 &o:3 &b:3 &ob:3) (Return (Call (Name g_atan2 Load) (list (_starred_content (fn_21 &ob:3 &oa:3)) (_starred_content (fn_10 &ob:3 &oa:3))) nil))) nil None None) (FunctionDef &total_swept_area:0 (arguments nil (list (arg &polygon:4 None None) (arg &center:4 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCA5NywgMTE0LCAxMDEsIDk3LCAzMiwgMTE1LCAxMTksIDEwMSwgMTEyLCAxMTYsIDMyLCA5OCwgMTIxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMiwgMTExLCAxMDgsIDEyMSwgMTAzLCAxMTEsIDExMCwgMzIsIDk3LCAxMTQsIDExMSwgMTE3LCAxMTAsIDEwMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCA5OSwgMTAxLCAxMTAsIDExNiwgMTAxLCAxMTQsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &total_area:4 Store)) (Constant f0.0 None) None) (For (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &polygon:4 Load))) nil))) nil) (/seq (Assign (list (Name &a:4 Store)) (Subscript (Name &polygon:4 Load) (_slice_content (Name &i:4 Load)) Load) None) (Assign (list (Name &b:4 Store)) (Subscript (Name &polygon:4 Load) (_slice_content (BinOp (BinOp (Name &i:4 Load) Add (Constant i1 None)) Mod (Call (Name g_len Load) (list (_starred_content (Name &polygon:4 Load))) nil))) Load) None) (Assign (list (Name &theta:4 Store)) (Call (Name g_abs Load) (list (_starred_content (Call (Name &angle_between_vectors:0 Load) (list (_starred_content (Name &center:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil))) nil) None) (Assign (list (Name &oa_dist:4 Store)) (BinOp (fn_2 &center:4 &a:4) Pow (Constant f0.5 None)) None) (Assign (list (Name &ob_dist:4 Store)) (BinOp (fn_2 &center:4 &b:4) Pow (Constant f0.5 None)) None) (Assign (list (Name &sector_area:4 Store)) (BinOp (BinOp (Constant f0.5 None) Mult (Name &theta:4 Load)) Mult (BinOp (Call (Name g_max Load) (list (_starred_content (Name &oa_dist:4 Load)) (_starred_content (Name &ob_dist:4 Load))) nil) Pow (Constant i2 None))) None) (Assign (list (Name &triangle_area:4 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Call (Name &cross_product:0 Load) (list (_starred_content (Name &center:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil))) nil) Div (Constant f2.0 None)) None) (AugAssign (Name &total_area:4 Store) Add (BinOp (Name &sector_area:4 Load) Sub (Name &triangle_area:4 Load)))) (/seq) None) (Return (Name &total_area:4 Load))) nil None None) (/splice (fn_1 &p_y:0 &p_x:0 &n:0 &_:5 &polygon:0 (/choiceseq))) (Assign (list (Name &static_area:0 Store)) (Call (Name &area_of_polygon:0 Load) (list (_starred_content (Name &polygon:0 Load))) nil) None) (Assign (list (Name &swept_area:0 Store)) (Call (Name &total_swept_area:0 Load) (list (_starred_content (Name &polygon:0 Load)) (_starred_content (Tuple (list (_starred_content (Name &p_x:0 Load)) (_starred_content (Name &p_y:0 Load))) Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &static_area:0 Load) Add (Name &swept_area:0 Load)))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_area:0 (arguments nil (list (arg &n:1 None None) (arg &px:1 None None) (arg &py:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (FunctionDef &angle:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &c:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &ang:2 Store)) (BinOp (Call (Name g_atan2 Load) (list (_starred_content (BinOp (Subscript (Name &c:2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &b:2 Load) (_slice_content (Constant i1 None)) Load))) (_starred_content (BinOp (Subscript (Name &c:2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &b:2 Load) (_slice_content (Constant i0 None)) Load)))) nil) Sub (Call (Name g_atan2 Load) (list (_starred_content (BinOp (Subscript (Name &a:2 Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Name &b:2 Load) (_slice_content (Constant i1 None)) Load))) (_starred_content (BinOp (Subscript (Name &a:2 Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Name &b:2 Load) (_slice_content (Constant i0 None)) Load)))) nil)) None) (Return (IfExp (Compare (Name &ang:2 Load) (list Lt) (list (Constant i0 None))) (BinOp (Name &ang:2 Load) Add (BinOp (Constant i2 None) Mult (Name g_pi Load))) (Name &ang:2 Load)))) nil None None) (Assign (list (Name &max_angle:1 Store)) (Constant i0 None) None) (Assign (list (Name &total_angle:1 Store)) (Constant i0 None) None) (fn_26 &n:1 &i:1 &vertices:1 &p2:1 &p1:1 (/choiceseq (Assign (list (Name &a:1 Store)) (Call (Name &angle:1 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:1 Load)) (_starred_content (Name &py:1 Load))) Load)) (_starred_content (Name &p1:1 Load)) (_starred_content (Name &p2:1 Load))) nil) None) (Assign (list (Name &max_angle:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_angle:1 Load)) (_starred_content (Name &a:1 Load))) nil) None) (AugAssign (Name &total_angle:1 Store) Add (Name &a:1 Load)))) (If (Compare (Name &max_angle:1 Load) (list LtE) (list (Name g_pi Load))) (/seq (Return (BinOp (BinOp (Name &total_angle:1 Load) Div (BinOp (Constant i2 None) Mult (Name g_pi Load))) Mult (BinOp (Name &max_angle:1 Load) Sub (Call (Name g_sin Load) (list (_starred_content (Name &max_angle:1 Load))) nil))))) (/seq (Return (BinOp (Constant i1 None) Sub (BinOp (BinOp (BinOp (Name &total_angle:1 Load) Sub (Name &max_angle:1 Load)) Div (BinOp (Constant i2 None) Mult (Name g_pi Load))) Mult (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name g_pi Load)) Sub (Name &max_angle:1 Load)) Add (Call (Name g_sin Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Mult (Name g_pi Load)) Sub (Name &max_angle:1 Load)))) nil)))))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n1:0 Store)) (_starred_content (Name &px1:0 Store)) (_starred_content (Name &py1:0 Store))) Store)) (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &vertices1:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_area:0 Load) (list (_starred_content (Name &n1:0 Load)) (_starred_content (Name &px1:0 Load)) (_starred_content (Name &py1:0 Load)) (_starred_content (Name &vertices1:0 Load))) nil))) nil)) (Assign (list (Tuple (list (_starred_content (Name &n2:0 Store)) (_starred_content (Name &px2:0 Store)) (_starred_content (Name &py2:0 Store))) Store)) (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) Load) None) (Assign (list (Name &vertices2:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_area:0 Load) (list (_starred_content (Name &n2:0 Load)) (_starred_content (Name &px2:0 Load)) (_starred_content (Name &py2:0 Load)) (_starred_content (Name &vertices2:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &polygon_area:0 (arguments nil (list (arg &points:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &area:1 Store)) (Constant i0 None) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &points:1 Load))) nil) None) (fn_5 (Name &n:1 Load) &i:1 &j:1 &points:1 &area:1) (Assign (list (Name &area:1 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:1 Load))) nil) Div (Constant f2.0 None)) None) (Return (Name &area:1 Load))) nil None None) (FunctionDef &distance:0 (arguments nil (list (arg &p1:2 None None) (arg &p2:2 None None)) None nil nil None nil) (/seq (Return (BinOp (fn_2 &p2:2 &p1:2) Pow (Constant f0.5 None)))) nil None None) (/splice (fn_1 &y0:0 &x0:0 &n:0 &_:3 &points:0 (/choiceseq))) (Assign (list (Name &radii:0 Store)) (ListComp (Call (Name &distance:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &x0:0 Load)) (_starred_content (Name &y0:0 Load))) Load)) (_starred_content (Name &p:4 Load))) nil) (list (comprehension (Name &p:4 Store) (Name &points:0 Load) nil i0))) None) (Assign (list (Name &area_cleared:0 Store)) (BinOp (Name g_pi Load) Mult (BinOp (Call (Name g_max Load) (list (_starred_content (Name &radii:0 Load))) nil) Pow (Constant i2 None))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &area_cleared:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &p_x:1 Store)) (_starred_content (Name &p_y:1 Store))) Store)) (fn_16) None) (Assign (list (Name &vertices:1 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &min_dist:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist:1 Store)) (Constant i0 None) None) (fn_13 &i:1 &vertices:1 &v1:1 &n:1 &v2:1 (/choiceseq (Assign (list (Name &dist_to_line:1 Store)) (Call (Name &distance_to_line_segment:0 Load) (list (_starred_content (Name &p_x:1 Load)) (_starred_content (Name &p_y:1 Load)) (_starred_content (Subscript (Name &v1:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &v1:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &v2:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &v2:1 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &min_dist:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:1 Load)) (_starred_content (Name &dist_to_line:1 Load))) nil) None) (Assign (list (Name &dist_to_vertex:1 Store)) (fn_22 (Name &v1:1 Load) &p_y:1 &p_x:1) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:1 Load)) (_starred_content (Name &dist_to_vertex:1 Load))) nil) None))) (Assign (list (Name &area:1 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (fn_24 &min_dist:1 &max_dist:1)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &area:1 Load))) nil))) nil None None) (FunctionDef &distance_to_line_segment:0 (arguments nil (list (arg &px:2 None None) (arg &py:2 None None) (arg &x1:2 None None) (arg &y1:2 None None) (arg &x2:2 None None) (arg &y2:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCAxMDIsIDExNCwgMTExLCAxMDksIDMyLCAxMTIsIDExMSwgMTA1LCAxMTAsIDExNiwgMzIsIDQwLCAxMTIsIDEyMCwgNDQsIDMyLCAxMTIsIDEyMSwgNDEsIDMyLCAxMTYsIDExMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDEwNSwgMTEwLCAxMDEsIDMyLCAxMTUsIDEwMSwgMTAzLCAxMDksIDEwMSwgMTEwLCAxMTYsIDMyLCAxMDAsIDEwMSwgMTAyLCAxMDUsIDExMCwgMTAxLCAxMDAsIDMyLCA5OCwgMTIxLCAzMiwgMTEyLCAxMTEsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDQwLCAxMjAsIDQ5LCA0NCwgMzIsIDEyMSwgNDksIDQxLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgNDAsIDEyMCwgNTAsIDQ0LCAzMiwgMTIxLCA1MCwgNDFd None)) (Assign (list (Name &length_square:2 Store)) (fn_6 &y1:2 &y2:2 &x1:2 &x2:2) None) (/splice (fn_27 (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_6 &y1:2 &py:2 &x1:2 &px:2))) nil) &length_square:2 &px:2 &x2:2 &x1:2 &py:2 &y2:2 &y1:2 &t:2 &projection_x:2 &projection_y:2)) (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_6 &projection_y:2 &py:2 &projection_x:2 &px:2))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_8 &corrected_area:1 &main:0 (/choiceseq (/splice (fn_1 &py:1 &px:1 &n:1 &_:2 &vertices:1 (/choiceseq))) (Expr (Call (Attribute (Name &vertices:1 Load) s_append Load) (list (_starred_content (Subscript (Name &vertices:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (Assign (list (Name &total_area:1 Store)) (Constant f0.0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (/splice (fn_19 (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) &i:1 &vertices:1 &v1:1 &py:1 &px:1 &v2:1)) (Assign (list (Name &distance_to_line:1 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (fn_21 &v2:1 &v1:1))) nil) Div (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_11 &v1:1))) nil)) None) (Assign (list (Name &distance_to_endpoint1:1 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_11 &v2:1))) nil) None) (Assign (list (Name &distance_to_endpoint2:1 Store)) (fn_22 (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) &py:1 &px:1) None) (Assign (list (Name &a:1 Store)) (Name &distance_to_endpoint1:1 Load) None) (Assign (list (Name &b:1 Store)) (Name &distance_to_endpoint2:1 Load) None) (Assign (list (Name &c:1 Store)) (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (BinOp (BinOp (BinOp (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load)) Pow (Constant i2 None)) Add (BinOp (BinOp (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load) Sub (Subscript (Subscript (Name &vertices:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load)) Pow (Constant i2 None))))) nil) None) (Assign (list (Name &angle:1 Store)) (Call (Attribute (Name g_math Load) s_acos Load) (list (_starred_content (BinOp (BinOp (fn_17 &b:1 &a:1) Sub (BinOp (Name &c:1 Load) Pow (Constant i2 None))) Div (BinOp (BinOp (Constant i2 None) Mult (Name &a:1 Load)) Mult (Name &b:1 Load))))) nil) None) (AugAssign (Name &total_area:1 Store) Add (BinOp (BinOp (BinOp (Constant f0.5 None) Mult (Name &a:1 Load)) Mult (Name &b:1 Load)) Mult (Call (Attribute (Name g_math Load) s_sin Load) (list (_starred_content (Name &angle:1 Load))) nil))) (AugAssign (Name &total_area:1 Store) Add (BinOp (Name &distance_to_line:1 Load) Mult (Name &c:1 Load)))) (/seq) None) (Assign (list (Name &corrected_area:1 Store)) (BinOp (Constant f0.5 None) Mult (Call (Name g_abs Load) (list (_starred_content (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (fn_20 (Subscript (Name &vertices:1 Load) (_slice_content (BinOp (Name &i:3 Load) Add (Constant i1 None))) Load) &i:3 &vertices:1) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))))) nil))) nil)) None))))) nil)",
            "(Module (/seq (FunctionDef &snow_blow_area:0 (arguments nil (list (arg &n:1 None None) (arg &px:1 None None) (arg &py:1 None None) (arg &vertices:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_dist:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist:1 Store)) (Constant i0 None) None) (FunctionDef &distance:1 (arguments nil (list (arg &x1:2 None None) (arg &y1:2 None None) (arg &x2:2 None None) (arg &y2:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_6 &y2:2 &y1:2 &x2:2 &x1:2))) nil))) nil None None) (FunctionDef &point_to_line:1 (arguments nil (list (arg &px:3 None None) (arg &py:3 None None) (arg &x1:3 None None) (arg &y1:3 None None) (arg &x2:3 None None) (arg &y2:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &length_squared:3 Store)) (fn_6 &y2:3 &y1:3 &x2:3 &x1:3) None) (/splice (fn_27 (Call (Name &distance:1 Load) (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &x1:3 Load)) (_starred_content (Name &y1:3 Load))) nil) &length_squared:3 &px:3 &x2:3 &x1:3 &py:3 &y2:3 &y1:3 &t:3 &proj_x:3 &proj_y:3)) (Return (Call (Name &distance:1 Load) (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load)) (_starred_content (Name &proj_x:3 Load)) (_starred_content (Name &proj_y:3 Load))) nil))) nil None None) (fn_9 &i:1 &vertices:1 &y1:1 &x1:1 &n:1 &y2:1 &x2:1 (/choiceseq (Assign (list (Name &dist_to_edge:1 Store)) (Call (Name &point_to_line:1 Load) (list (_starred_content (Name &px:1 Load)) (_starred_content (Name &py:1 Load)) (_starred_content (Name &x1:1 Load)) (_starred_content (Name &y1:1 Load)) (_starred_content (Name &x2:1 Load)) (_starred_content (Name &y2:1 Load))) nil) None) (Assign (list (Name &min_dist:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:1 Load)) (_starred_content (Name &dist_to_edge:1 Load))) nil) None) (Assign (list (Name &max_dist:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:1 Load)) (_starred_content (Call (Name &distance:1 Load) (list (_starred_content (Name &px:1 Load)) (_starred_content (Name &py:1 Load)) (_starred_content (Name &x1:1 Load)) (_starred_content (Name &y1:1 Load))) nil)) (_starred_content (Call (Name &distance:1 Load) (list (_starred_content (Name &px:1 Load)) (_starred_content (Name &py:1 Load)) (_starred_content (Name &x2:1 Load)) (_starred_content (Name &y2:1 Load))) nil))) nil) None))) (Return (BinOp (Name g_pi Load) Mult (fn_24 &min_dist:1 &max_dist:1)))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:4 &vertices:0 (/choiceseq))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &snow_blow_area:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load)) (_starred_content (Name &vertices:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &polygon_area:0 (arguments nil (list (arg &points:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTA1LCAxMDMsIDExMCwgMTAxLCAxMDAsIDMyLCA5NywgMTE0LCAxMDEsIDk3LCAzMiwgMTExLCAxMDIsIDMyLCA5NywgMTEwLCAzMiwgOTcsIDExNCwgOTgsIDEwNSwgMTE2LCAxMTQsIDk3LCAxMTQsIDEyMSwgMzIsIDExMiwgMTExLCAxMDgsIDEyMSwgMTAzLCAxMTEsIDExMCwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgMTA1LCAxMTYsIDExNSwgMzIsIDExOCwgMTAxLCAxMTQsIDExNiwgMTA1LCA5OSwgMTAxLCAxMTVd None)) (Assign (list (Name &area:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &points:1 Load))) nil) None) (fn_5 (Name &n:1 Load) &i:1 &j:1 &points:1 &area:1) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:1 Load))) nil) Div (Constant f2.0 None)))) nil None None) (FunctionDef &distance:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCA5NywgMTA4LCA5OSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDY5LCAxMTcsIDk5LCAxMDgsIDEwNSwgMTAwLCAxMDEsIDk3LCAxMTAsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCA5NywgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDk4XQ== None)) (Return (Call (Name g_sqrt Load) (list (_starred_content (fn_2 &b:2 &a:2))) nil))) nil None None) (/splice (fn_8 &cleared_area:3 &main:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &px:3 Store)) (_starred_content (Name &py:3 Store))) Store)) (fn_16) None) (Assign (list (Name &vertices:3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_16))) nil) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) nil i0))) None) (Assign (list (Name &area:3 Store)) (Call (Name &polygon_area:0 Load) (list (_starred_content (Name &vertices:3 Load))) nil) None) (Assign (list (Name &min_distance:3 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_distance:3 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) (/seq (Assign (list (Name &j:3 Store)) (BinOp (BinOp (Name &i:3 Load) Add (Constant i1 None)) Mod (Name &n:3 Load)) None) (Assign (list (Name &min_distance:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance:3 Load)) (_starred_content (Call (Name &distance:0 Load) (list (_starred_content (List (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load))) Load)) (_starred_content (Subscript (Name &vertices:3 Load) (_slice_content (Name &i:3 Load)) Load))) nil))) nil) None) (Assign (list (Name &max_distance:3 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance:3 Load)) (_starred_content (Call (Name &distance:0 Load) (list (_starred_content (List (list (_starred_content (Name &px:3 Load)) (_starred_content (Name &py:3 Load))) Load)) (_starred_content (Subscript (Name &vertices:3 Load) (_slice_content (Name &i:3 Load)) Load))) nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &x1:3 Store)) (_starred_content (Name &y1:3 Store))) Store)) (Subscript (Name &vertices:3 Load) (_slice_content (Name &i:3 Load)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x2:3 Store)) (_starred_content (Name &y2:3 Store))) Store)) (Subscript (Name &vertices:3 Load) (_slice_content (Name &j:3 Load)) Load) None) (/splice (fn_25 (Call (Name g_sqrt Load) (list (_starred_content (fn_17 &B:3 &A:3))) nil) &y1:3 &y2:3 &A:3 &x2:3 &x1:3 &B:3 &C:3 &py:3 &px:3 &dist:3 &dot1:3)) (Assign (list (Name &dot2:3 Store)) (fn_12 &y2:3 &y1:3 &py:3 &x2:3 &x1:3 &px:3) None) (If (BoolOp And (list (Compare (Name &dot1:3 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &dot2:3 Load) (list Gt) (list (Constant i0 None))))) (/seq (Assign (list (Name &min_distance:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance:3 Load)) (_starred_content (Name &dist:3 Load))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &cleared_area:3 Store)) (BinOp (Name g_pi Load) Mult (fn_24 &min_distance:3 &max_distance:3)) None))))) nil)",
            "(Module (/seq (FunctionDef &signed_area:0 (arguments nil (list (arg &polygon:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMDUsIDEwMywgMTEwLCAxMDEsIDEwMCwgMzIsIDk3LCAxMTQsIDEwMSwgOTcsIDMyLCAxMTEsIDEwMiwgMzIsIDk3LCAzMiwgMTEyLCAxMTEsIDEwOCwgMTIxLCAxMDMsIDExMSwgMTEwLCAzMiwgMTAzLCAxMDUsIDExOCwgMTAxLCAxMTAsIDMyLCA5OCwgMTIxLCAzMiwgOTcsIDMyLCAxMTUsIDEwMSwgMTEzLCAxMTcsIDEwMSwgMTEwLCA5OSwgMTAxLCAzMiwgMTExLCAxMDIsIDMyLCAxMTIsIDExMSwgMTA1LCAxMTAsIDExNiwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &area:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &polygon:1 Load))) nil) None) (fn_9 &i:1 &polygon:1 &y1:1 &x1:1 &n:1 &y2:1 &x2:1 (/choiceseq (AugAssign (Name &area:1 Store) Add (BinOp (BinOp (Name &x1:1 Load) Mult (Name &y2:1 Load)) Sub (BinOp (Name &x2:1 Load) Mult (Name &y1:1 Load)))))) (Return (BinOp (Name &area:1 Load) Div (Constant f2.0 None)))) nil None None) (FunctionDef &distance2:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTMsIDExNywgOTcsIDExNCwgMTAxLCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTAxLCAxMTcsIDk5LCAxMDgsIDEwNSwgMTAwLCAxMDEsIDk3LCAxMTAsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMTYsIDk3LCAxMTAsIDk5LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTYsIDExOSwgMTAxLCAxMDEsIDExMCwgMzIsIDExMiwgMTExLCAxMDUsIDExMCwgMTE2LCAxMTUsIDMyLCA5NywgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDk4LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Return (fn_2 &b:2 &a:2))) nil None None) (FunctionDef &circle_area:0 (arguments nil (list (arg &radius:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgOTcsIDExNCwgMTAxLCA5NywgMzIsIDExMSwgMTAyLCAzMiwgOTcsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgMTA1LCAxMTYsIDExNSwgMzIsIDExNCwgOTcsIDEwMCwgMTA1LCAxMTcsIDExNSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Return (fn_30 &radius:3))) nil None None) (/splice (fn_1 &py:0 &px:0 &n:0 &_:4 &polygon:0 (/choiceseq))) (Assign (list (Name &poly_area:0 Store)) (Call (Name g_abs Load) (list (_starred_content (Call (Name &signed_area:0 Load) (list (_starred_content (Name &polygon:0 Load))) nil))) nil) None) (Assign (list (Name &min_dist2:0 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_dist2:0 Store)) (Constant f0.0 None) None) (fn_13 &i:0 &polygon:0 &p1:0 &n:0 &p2:0 (/choiceseq (Assign (list (Name &dist2:0 Store)) (Call (Name &distance2:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &p1:0 Load))) nil) None) (Assign (list (Name &min_dist2:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist2:0 Load)) (_starred_content (Name &dist2:0 Load))) nil) None) (Assign (list (Name &max_dist2:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist2:0 Load)) (_starred_content (Name &dist2:0 Load))) nil) None) (fn_14 &p1:0 &p2:0 &line_vec:0) (Assign (list (Name &p_vec:0 Store)) (Tuple (list (_starred_content (BinOp (Name &px:0 Load) Sub (Subscript (Name &p1:0 Load) (_slice_content (Constant i0 None)) Load))) (_starred_content (BinOp (Name &py:0 Load) Sub (Subscript (Name &p1:0 Load) (_slice_content (Constant i1 None)) Load)))) Load) None) (Assign (list (Name &line_len2:0 Store)) (Call (Name &distance2:0 Load) (list (_starred_content (Name &p1:0 Load)) (_starred_content (Name &p2:0 Load))) nil) None) (Assign (list (Name &proj_len:0 Store)) (BinOp (fn_10 &line_vec:0 &p_vec:0) Div (Name &line_len2:0 Load)) None) (If (Compare (Constant i0 None) (list LtE LtE) (list (Name &proj_len:0 Load) (Constant i1 None))) (/seq (Assign (list (Name &closest_point:0 Store)) (fn_28 &line_vec:0 &proj_len:0 &p1:0) None) (Assign (list (Name &dist2:0 Store)) (Call (Name &distance2:0 Load) (list (_starred_content (Tuple (list (_starred_content (Name &px:0 Load)) (_starred_content (Name &py:0 Load))) Load)) (_starred_content (Name &closest_point:0 Load))) nil) None) (Assign (list (Name &min_dist2:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist2:0 Load)) (_starred_content (Name &dist2:0 Load))) nil) None)) (/seq)))) (Assign (list (Name &cleared_area:0 Store)) (BinOp (Call (Name &circle_area:0 Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &max_dist2:0 Load))) nil))) nil) Sub (Call (Name &circle_area:0 Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &min_dist2:0 Load))) nil))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cleared_area:0 Load))) nil))) nil)",
            "(Module (/seq (fn_3 &o:1 &b:1 &a:1 &cross_product:0 (/choiceseq)) (/splice (fn_23 &a:2 &o:2 &b:2 &dot_product:0 &a:3 &b:3 &distance_squared:0)) (FunctionDef &polygon_area:0 (arguments nil (list (arg &vertices:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &area:4 Store)) (Constant f0.0 None) None) (fn_5 (Call (Name g_len Load) (list (_starred_content (Name &vertices:4 Load))) nil) &i:4 &j:4 &vertices:4 &area:4) (Assign (list (Name &area:4 Store)) (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &area:4 Load))) nil) Div (Constant f2.0 None)) None) (Return (Name &area:4 Load))) nil None None) (/splice (fn_8 &donut_area:5 &main:0 (/choiceseq (/splice (fn_1 &py:5 &px:5 &n:5 &_:6 &vertices:5 (/choiceseq (Assign (list (Name &P:5 Store)) (Tuple (list (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) Load) None)))) (Assign (list (Name &min_distance_squared:5 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_distance_squared:5 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (fn_13 &i:5 &vertices:5 &A:5 &n:5 &B:5 (/choiceseq (Assign (list (Name &dist_squared_A:5 Store)) (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &P:5 Load)) (_starred_content (Name &A:5 Load))) nil) None) (Assign (list (Name &dist_squared_B:5 Store)) (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &P:5 Load)) (_starred_content (Name &B:5 Load))) nil) None) (Assign (list (Name &max_distance_squared:5 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance_squared:5 Load)) (_starred_content (Name &dist_squared_A:5 Load)) (_starred_content (Name &dist_squared_B:5 Load))) nil) None) (Assign (list (Name &dot_product_result:5 Store)) (Call (Name &dot_product:0 Load) (list (_starred_content (Name &A:5 Load)) (_starred_content (Name &B:5 Load)) (_starred_content (Name &P:5 Load))) nil) None) (If (Compare (Name &dot_product_result:5 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &cross_product_result:5 Store)) (Call (Name &cross_product:0 Load) (list (_starred_content (Name &A:5 Load)) (_starred_content (Name &B:5 Load)) (_starred_content (Name &P:5 Load))) nil) None) (Assign (list (Name &distance_to_segment_squared:5 Store)) (BinOp (BinOp (Name &cross_product_result:5 Load) Pow (Constant i2 None)) Div (Call (Name &distance_squared:0 Load) (list (_starred_content (Name &A:5 Load)) (_starred_content (Name &B:5 Load))) nil)) None) (Assign (list (Name &min_distance_squared:5 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance_squared:5 Load)) (_starred_content (Name &distance_to_segment_squared:5 Load))) nil) None)) (/seq (Assign (list (Name &min_distance_squared:5 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance_squared:5 Load)) (_starred_content (Name &dist_squared_A:5 Load)) (_starred_content (Name &dist_squared_B:5 Load))) nil) None))))) (Assign (list (Name &initial_area:5 Store)) (Call (Name &polygon_area:0 Load) (list (_starred_content (Name &vertices:5 Load))) nil) None) (Assign (list (Name &donut_area:5 Store)) (BinOp (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_distance_squared:5 Load) Sub (Name &min_distance_squared:5 Load))) Add (Name &initial_area:5 Load)) None))))) nil)",
            "(Module (/seq (FunctionDef &cross_product:0 (arguments nil (list (arg &ax:1 None None) (arg &ay:1 None None) (arg &bx:1 None None) (arg &by:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &ax:1 Load) Mult (Name &by:1 Load)) Sub (BinOp (Name &ay:1 Load) Mult (Name &bx:1 Load))))) nil None None) (FunctionDef &dot_product:0 (arguments nil (list (arg &ax:2 None None) (arg &ay:2 None None) (arg &bx:2 None None) (arg &by:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &ax:2 Load) Mult (Name &bx:2 Load)) Add (BinOp (Name &ay:2 Load) Mult (Name &by:2 Load))))) nil None None) (FunctionDef &vector_from_points:0 (arguments nil (list (arg &x1:3 None None) (arg &y1:3 None None) (arg &x2:3 None None) (arg &y2:3 None None)) None nil nil None nil) (/seq (Return (Tuple (list (_starred_content (BinOp (Name &x2:3 Load) Sub (Name &x1:3 Load))) (_starred_content (BinOp (Name &y2:3 Load) Sub (Name &y1:3 Load)))) Load))) nil None None) (FunctionDef &length_of_vector:0 (arguments nil (list (arg &x:4 None None) (arg &y:4 None None)) None nil nil None nil) (/seq (Return (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (fn_17 &y:4 &x:4))) nil))) nil None None) (FunctionDef &distance_to_segment:0 (arguments nil (list (arg &px:5 None None) (arg &py:5 None None) (arg &x1:5 None None) (arg &y1:5 None None) (arg &x2:5 None None) (arg &y2:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &a:5 Store)) (Call (Name &vector_from_points:0 Load) (list (_starred_content (Name &x1:5 Load)) (_starred_content (Name &y1:5 Load)) (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) nil) None) (Assign (list (Name &b:5 Store)) (Call (Name &vector_from_points:0 Load) (list (_starred_content (Name &x1:5 Load)) (_starred_content (Name &y1:5 Load)) (_starred_content (Name &x2:5 Load)) (_starred_content (Name &y2:5 Load))) nil) None) (Assign (list (Name &projection_length:5 Store)) (BinOp (Call (Name &dot_product:0 Load) (list (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i1 None)) Load))) nil) Div (Call (Name &length_of_vector:0 Load) (list (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i1 None)) Load))) nil)) None) (If (Compare (Name &projection_length:5 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Call (Name &length_of_vector:0 Load) (list (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq (If (Compare (Name &projection_length:5 Load) (list Gt) (list (Call (Name &length_of_vector:0 Load) (list (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq (Assign (list (Name &a:5 Store)) (Call (Name &vector_from_points:0 Load) (list (_starred_content (Name &x2:5 Load)) (_starred_content (Name &y2:5 Load)) (_starred_content (Name &px:5 Load)) (_starred_content (Name &py:5 Load))) nil) None) (Return (Call (Name &length_of_vector:0 Load) (list (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq (Assign (list (Name &cross:5 Store)) (Call (Name &cross_product:0 Load) (list (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &a:5 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Return (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &cross:5 Load))) nil) Div (Call (Name &length_of_vector:0 Load) (list (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &b:5 Load) (_slice_content (Constant i1 None)) Load))) nil)))))))) nil None None) (/splice (fn_8 &area_cleared:6 &main:0 (/choiceseq (/splice (fn_1 &py:6 &px:6 &n:6 &_:7 &polygon:6 (/choiceseq))) (Assign (list (Name &min_distance_sq:6 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (Assign (list (Name &max_distance_sq:6 Store)) (Constant i0 None) None) (fn_9 &i:6 &polygon:6 &y1:6 &x1:6 &n:6 &y2:6 &x2:6 (/choiceseq (Assign (list (Name &dist_to_edge:6 Store)) (Call (Name &distance_to_segment:0 Load) (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load)) (_starred_content (Name &x1:6 Load)) (_starred_content (Name &y1:6 Load)) (_starred_content (Name &x2:6 Load)) (_starred_content (Name &y2:6 Load))) nil) None) (Assign (list (Name &min_distance_sq:6 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_distance_sq:6 Load)) (_starred_content (BinOp (Name &dist_to_edge:6 Load) Pow (Constant i2 None)))) nil) None) (Assign (list (Name &dist_to_vertex:6 Store)) (Call (Name &length_of_vector:0 Load) (list (_starred_content (BinOp (Name &px:6 Load) Sub (Name &x1:6 Load))) (_starred_content (BinOp (Name &py:6 Load) Sub (Name &y1:6 Load)))) nil) None) (Assign (list (Name &max_distance_sq:6 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_distance_sq:6 Load)) (_starred_content (BinOp (Name &dist_to_vertex:6 Load) Pow (Constant i2 None)))) nil) None))) (Assign (list (Name &area_cleared:6 Store)) (BinOp (Attribute (Name g_math Load) s_pi Load) Mult (BinOp (Name &max_distance_sq:6 Load) Sub (Name &min_distance_sq:6 Load))) None))))) nil)",
            "(Module (/seq (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (fn_16))) nil))) nil None None) (FunctionDef &dist:0 (arguments nil (list (arg &points:1 None None) (arg &p:1 None None)) None nil nil None nil) (/seq (Return (BinOp (fn_2 &p:1 &points:1) Pow (Constant f0.5 None)))) nil None None) (fn_3 &a:2 &c:2 &b:2 &cross_product:0 (/choiceseq)) (FunctionDef &dot_product:0 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &c:3 None None)) None nil nil None nil) (/seq (Return (fn_4 (Name &b:3 Load) &a:3 &b:3 &c:3))) nil None None) (FunctionDef &point_line_distance:0 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None) (arg &p:4 None None)) None nil nil None nil) (/seq (/splice (fn_29 (BinOp (Call (Name &dot_product:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil) Div (BinOp (Name &line_len:4 Load) Pow (Constant i2 None))) &b:4 &a:4 &dist:0 &line_len:4 &p:4 &t:4)) (Assign (list (Name &projection:4 Store)) (fn_7 &a:4 &b:4 &t:4) None) (Return (Call (Name &dist:0 Load) (list (_starred_content (Name &p:4 Load)) (_starred_content (Name &projection:4 Load))) nil))) nil None None) (FunctionDef &point_segment_distance:0 (arguments nil (list (arg &a:5 None None) (arg &b:5 None None) (arg &p:5 None None)) None nil nil None nil) (/seq (If (BoolOp And (list (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load)) (_starred_content (Name &p:5 Load))) nil) (list Gt) (list (Constant i0 None))) (Compare (Call (Name &dot_product:0 Load) (list (_starred_content (Name &b:5 Load)) (_starred_content (Name &a:5 Load)) (_starred_content (Name &p:5 Load))) nil) (list Gt) (list (Constant i0 None))))) (/seq (Return (Call (Name g_abs Load) (list (_starred_content (BinOp (Call (Name &cross_product:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load)) (_starred_content (Name &p:5 Load))) nil) Div (Call (Name &dist:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &b:5 Load))) nil)))) nil))) (/seq (Return (Call (Name g_min Load) (list (_starred_content (Call (Name &dist:0 Load) (list (_starred_content (Name &a:5 Load)) (_starred_content (Name &p:5 Load))) nil)) (_starred_content (Call (Name &dist:0 Load) (list (_starred_content (Name &b:5 Load)) (_starred_content (Name &p:5 Load))) nil))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:6 Store)) (_starred_content (Name &px:6 Store)) (_starred_content (Name &py:6 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Assign (list (Name &vertices:6 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name &read_ints:0 Load) nil nil))) nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:6 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &vertices:6 Load) s_append Load) (list (_starred_content (Subscript (Name &vertices:6 Load) (_slice_content (Constant i0 None)) Load))) nil)) (/splice (fn_15 (For (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:6 Load))) nil) (/seq (Assign (list (Name &edge_dist:6 Store)) (Call (Name &point_segment_distance:0 Load) (list (_starred_content (Subscript (Name &vertices:6 Load) (_slice_content (Name &i:6 Load)) Load)) (_starred_content (Subscript (Name &vertices:6 Load) (_slice_content (BinOp (Name &i:6 Load) Add (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load))) nil) None) (Assign (list (Name &min_dist:6 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_dist:6 Load)) (_starred_content (Name &edge_dist:6 Load))) nil) None) (Assign (list (Name &vertex_dist:6 Store)) (Call (Name &dist:0 Load) (list (_starred_content (Subscript (Name &vertices:6 Load) (_slice_content (Name &i:6 Load)) Load)) (_starred_content (Tuple (list (_starred_content (Name &px:6 Load)) (_starred_content (Name &py:6 Load))) Load))) nil) None) (Assign (list (Name &max_dist:6 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_dist:6 Load)) (_starred_content (Name &vertex_dist:6 Load))) nil) None)) (/seq) None) &min_dist:6 &max_dist:6 &area:6)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &area:6 Load) i-1 (JoinedStr (list (Constant s_.20f None)))))))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)"
        ]
    },
    "943": {
        "abstractions": [
            {
                "body": "(/subseq (FunctionDef %5 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (UnaryOp USub (BinOp (Name %1 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name %1 Load)))) Load))) (/seq)) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name %2 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name %2 Load)))) Load))) (/seq)) ?0 (Return (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %9 Store)) (_starred_content (Name %8 Store))) Store)) (Call (Name %5 Load) (list (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %9 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %8 Load))) nil)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %5 (arguments nil (list (arg %1 None None) (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name %1 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name %1 Load)))) Load))) (/seq)) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (UnaryOp USub (BinOp (Name %2 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name %2 Load)))) Load))) (/seq)) ?0 (Return (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %9 Store)) (_starred_content (Name %8 Store))) Store)) (Call (Name %5 Load) (list (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %9 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %8 Load))) nil)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare #0 (list Eq) (list (Constant s_o None))) (/seq (AugAssign (Name %2 Store) Add (BinOp (Name %1 Load) Pow (Constant i2 None)))) (/seq (AugAssign (Name %2 Store) Sub (BinOp (Name %1 Load) Pow (Constant i2 None)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %5 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %4 Load))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (Assign (list (Name %2 Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name %2 Store) Add (Constant i1 None))) (/seq (AugAssign (Name %1 Store) Add (IfExp (Compare (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) (list Eq) (list (Constant s_o None))) (BinOp (Name %2 Load) Pow (Constant i2 None)) (UnaryOp USub (BinOp (Name %2 Load) Pow (Constant i2 None))))) (Assign (list (Name %2 Store)) (Constant i1 None) None)))) (/seq) None) (AugAssign (Name %1 Store) Add (IfExp (Compare (Subscript (Name %4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Constant s_o None))) (BinOp (Name %2 Load) Pow (Constant i2 None)) (UnaryOp USub (BinOp (Name %2 Load) Pow (Constant i2 None))))) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name %1 Load) (list (_starred_content #0)) nil) None) (If (Compare (Name %2 Load) (list Gt) (list (Name %3 Load))) (/seq (Assign (list (Name %3 Store)) (Name %2 Load) None) (Assign (list (Name %4 Store)) #0 None)) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %1 Load) FloorDiv #0) Add (IfExp (Compare (Name %2 Load) (list Lt) (list (BinOp (Name %1 Load) Mod #0))) (Constant i1 None) (Constant i0 None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (Assign (list (Name %2 Store)) (Constant i1 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name %2 Store) Add (Constant i1 None))) (/seq (fn_3 (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) %2 %1) (Assign (list (Name %2 Store)) (Constant i1 None) None)))) (/seq) None) (fn_3 (Subscript (Name %4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) %2 %1) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) None) (Assign (list (Name %4 Store)) (BinOp (Name %2 Load) Mod (Name %1 Load)) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %6 (arguments nil (list (arg %3 None None) (arg %5 None None)) None nil nil None nil) (/seq (If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (UnaryOp USub (BinOp (Name %5 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name %5 Load)))) Load))) (/seq (If (Compare (Name %5 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name %3 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name %3 Load)))) Load))) (/seq (Assign (list (Name %1 Store)) (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) None) (Assign (list (Name %2 Store)) (Constant s_ None) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %3 Load) Add (Constant i1 None)))) nil) #0 (/seq) None) (Return (Tuple (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) Load))))))) nil None None)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp #0 Add (Constant i1 None)) Pow (Constant i2 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i2 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (For (Name %2 Store) (Name %4 Load) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %3 Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq #0 (Assign (list (Name %1 Store)) (Constant i1 None) None) (Assign (list (Name %3 Store)) (Name %2 Load) None)))) (/seq) None) #0)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Constant s_x None) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name %1 Load) Pow (Constant i2 None)) (list (comprehension (Name %1 Store) #0 nil i0))))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (UnaryOp USub (BinOp (Name %1 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name %1 Load)))) Load))) (/seq)) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name %2 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name %2 Load)))) Load))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %6 (arguments nil (list (arg %2 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (Assign (list (Name %3 Store)) (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %4 Store)) (Constant i1 None) None) (For (Name %5 Store) (Subscript (Name %2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (If (Compare (Name %5 Load) (list Eq) (list (Name %3 Load))) (/seq (AugAssign (Name %4 Store) Add (Constant i1 None))) (/seq (fn_3 (Name %3 Load) %4 %1) ?0))) (/seq) None) (fn_3 (Name %3 Load) %4 %1) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (List (list (_starred_content (BinOp (Name %3 Load) Add (Constant i1 None)))) Load) Mult (Name %1 Load)) Add (BinOp (List (list (_starred_content (Name %3 Load))) Load) Mult (BinOp (Name %2 Load) Sub (Name %1 Load))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(AugAssign (Name %4 Store) Sub (BinOp (BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) Mult (BinOp (Name %1 Load) Pow (Constant i2 None))) Add (BinOp (Name %2 Load) Mult (fn_11 (Name %1 Load)))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Constant s_o None) Mult (BinOp #0 Add (Constant i1 None)))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (BinOp (Constant s_x None) Mult #0))) nil))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (IfExp (Compare (Name %2 Load) (list Lt) (list (Name %4 Load))) (BinOp (Name %3 Load) Add (Constant i1 None)) (Name %3 Load)) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If #0 (/seq (AugAssign (Name %2 Store) Add (fn_14 %1)) (AugAssign (Name %3 Store) Sub (fn_11 (Name %1 Load)))) (/seq (AugAssign (Name %2 Store) Add (BinOp (Constant s_x None) Mult (Name %1 Load))) (AugAssign (Name %3 Store) Sub (BinOp (Name %1 Load) Pow (Constant i2 None)))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (BinOp (Constant s_x None) Mult (fn_7 (Name %1 Load) %3 %2)) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Name %3 Load) Sub (Name %2 Load)) Mult (BinOp (Name %1 Load) Pow (Constant i2 None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Gt) (list (Name %2 Load))) (/seq (Assign (list (Name %2 Store)) (Name %1 Load) None) ?0) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (fn_7 #0 %2 %1) (list (comprehension (Name %1 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Constant s_o None) Mult (Name %1 Load)) Add (BinOp (Constant s_x None) Mult #0))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_19 &score:1 &arrangement:1 &current_char:1 &count:1 &char:1 &calculate_score:0 (/choiceseq (Assign (list (Name &count:1 Store)) (Constant i1 None) None) (Assign (list (Name &current_char:1 Store)) (Name &char:1 Load) None))) (FunctionDef &maximize_score:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &b:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name &a:2 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name &a:2 Load)))) Load))) (/seq (If (Compare (Name &a:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (UnaryOp USub (Constant i1 None)) Mult (BinOp (Name &b:2 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name &b:2 Load)))) Load))) (/seq (If (Compare (Name &a:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Constant i1 None) Sub (BinOp (Name &b:2 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_o None) Add (BinOp (Constant s_x None) Mult (Name &b:2 Load))))) Load))) (/seq (Assign (list (Name &best_score:2 Store)) (UnaryOp USub (BinOp (Constant i10 None) Pow (Constant i10 None))) None) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &x_count:2 Store) (fn_12 &b:2) (/seq (Assign (list (Name &possible_arrangement:2 Store)) (BinOp (BinOp (Constant s_o None) Add (BinOp (BinOp (BinOp (Constant s_x None) Mult (BinOp (Name &b:2 Load) FloorDiv (Name &x_count:2 Load))) Add (Constant s_o None)) Mult (BinOp (Name &x_count:2 Load) Sub (Constant i1 None)))) Add (BinOp (Constant s_x None) Mult (BinOp (Name &b:2 Load) Mod (Name &x_count:2 Load)))) None) (/splice (fn_6 (Name &possible_arrangement:2 Load) &calculate_score:0 &score:2 &best_score:2 &best_arrangement:2))) (/seq) None) (Return (Tuple (list (_starred_content (Name &best_score:2 Load)) (_starred_content (Name &best_arrangement:2 Load))) Load))))))))) nil None None) (/splice (fn_4 &b:0 &a:0 &maximize_score:0 &arrangement:0 &score:0))) nil)",
            "(Module (/seq (FunctionDef &maximize_score:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (FunctionDef &calculate_score:1 (arguments nil (list (arg &o_counts:2 None None) (arg &x_counts:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:2 Store)) (BinOp (fn_16 (Name &o_counts:2 Load) &o:7) Sub (fn_16 (Name &x_counts:2 Load) &x:8)) None) (Return (Name &score:2 Load))) nil None None) (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name &a:1 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name &a:1 Load)))) Load))) (/seq)) (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Tuple (list (_starred_content (UnaryOp USub (BinOp (Name &b:1 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name &b:1 Load)))) Load))) (/seq)) (fn_18 &best_score:1) (Assign (list (Name &best_arrangement:1 Store)) (Constant s_ None) None) (For (Name &x_blocks:1 Store) (fn_15 &b:1) (/seq (Assign (list (Name &o_blocks:1 Store)) (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None)) None) (/splice (fn_9 &x_blocks:1 &b:1 &x_per_block:1 &extra_x_blocks:1)) (Assign (list (Name &o_per_block:1 Store)) (BinOp (Name &a:1 Load) FloorDiv (Name &o_blocks:1 Load)) None) (Assign (list (Name &extra_o_blocks:1 Store)) (BinOp (Name &a:1 Load) Mod (Name &o_blocks:1 Load)) None) (Assign (list (Name &x_counts:1 Store)) (fn_24 &x_blocks:1 &i:4 &x_per_block:1 &extra_x_blocks:1) None) (Assign (list (Name &o_counts:1 Store)) (fn_24 &o_blocks:1 &i:5 &o_per_block:1 &extra_o_blocks:1) None) (Assign (list (Name &score:1 Store)) (Call (Name &calculate_score:1 Load) (list (_starred_content (Name &o_counts:1 Load)) (_starred_content (Name &x_counts:1 Load))) nil) None) (fn_28 &score:1 &best_score:1 (/choiceseq (Assign (list (Name &arrangement:1 Store)) (ListComp (BinOp (Constant s_x None) Mult (Name &count:6 Load)) (list (comprehension (Name &count:6 Store) (Name &x_counts:1 Load) nil i0))) None) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Constant s_o None) s_join Load) (list (_starred_content (Name &arrangement:1 Load))) nil) None) (AugAssign (Name &arrangement:1 Store) Add (BinOp (Constant s_o None) Mult (BinOp (Name &a:1 Load) Sub (Call (Name g_sum Load) (list (_starred_content (Name &o_counts:1 Load))) nil)))) (Assign (list (Name &best_arrangement:1 Store)) (Name &arrangement:1 Load) None)))) (/seq) None) (Return (Tuple (list (_starred_content (Name &best_score:1 Load)) (_starred_content (Name &best_arrangement:1 Load))) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 &b:3 &a:3 &maximize_score:0 &arrangement:3 &score:3))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &maximize_score:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (FunctionDef &calc_score:1 (arguments nil (list (arg &arrangement:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:2 Store)) (Constant i0 None) None) (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (Assign (list (Name &prev:2 Store)) (Subscript (Name &arrangement:2 Load) (_slice_content (Constant i0 None)) Load) None) (/splice (fn_13 (fn_3 (Name &prev:2 Load) &count:2 &score:2) &count:2 &c:2 &prev:2 &arrangement:2)) (Return (Name &score:2 Load))) nil None None) (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (JoinedStr (list (Constant s-WzQ1XQ== None) (FormattedValue (BinOp (Name &b:1 Load) Pow (Constant i2 None)) i-1 None) (Constant s-WzEwXQ== None) (FormattedValue (BinOp (Constant s_x None) Mult (Name &b:1 Load)) i-1 None))))) (/seq (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (JoinedStr (list (FormattedValue (BinOp (Name &a:1 Load) Pow (Constant i2 None)) i-1 None) (Constant s-WzEwXQ== None) (FormattedValue (BinOp (Constant s_o None) Mult (Name &a:1 Load)) i-1 None))))) (/seq (Assign (list (Name &max_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_arrangement:1 Store)) (Constant s_ None) None) (For (Name &spread:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &o_blocks:1 Store)) (List (list (_starred_content (BinOp (Constant s_o None) Mult (Name &a:1 Load)))) Load) None) (Assign (list (Name &x_blocks:1 Store)) (fn_26 &spread:1 &i:3 &b:1) None) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (ListComp (Name &val:4 Load) (list (comprehension (Name &pair:5 Store) (Call (Name g_zip Load) (list (_starred_content (Name &x_blocks:1 Load)) (_starred_content (BinOp (Name &o_blocks:1 Load) Add (List (list (_starred_content (Constant s_ None))) Load)))) nil) nil i0) (comprehension (Name &val:4 Store) (Name &pair:5 Load) nil i0))))) nil) s_rstrip Load) (list (_starred_content (Constant s_x None))) nil) None) (/splice (fn_6 (Name &arrangement:1 Load) &calc_score:1 &score:1 &max_score:1 &best_arrangement:1))) (/seq) None) (Return (JoinedStr (list (FormattedValue (Name &max_score:1 Load) i-1 None) (Constant s-WzEwXQ== None) (FormattedValue (Name &best_arrangement:1 Load) i-1 None))))))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &maximize_score:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &compute_score:0 (arguments nil (list (arg &arrangement:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &i:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) (/seq (Assign (list (Name &j:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) (Compare (Subscript (Name &arrangement:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Subscript (Name &arrangement:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &length:1 Store)) (BinOp (Name &j:1 Load) Sub (Name &i:1 Load)) None) (fn_3 (Subscript (Name &arrangement:1 Load) (_slice_content (Name &i:1 Load)) Load) &length:1 &score:1) (Assign (list (Name &i:1 Store)) (Name &j:1 Load) None)) (/seq)) (Return (Name &score:1 Load))) nil None None) (/splice (fn_1 &b:2 &a:2 &best_arrangement:2 &best_score:2 &best_arrangement:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (Assign (list (Name &best_score:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &o_blocks:2 Store) (fn_15 &a:2) (/seq (Assign (list (Name &current_arrangement:2 Store)) (Constant s_ None) None) (/splice (fn_9 &o_blocks:2 &a:2 &o_per_block:2 &extra_o:2)) (Assign (list (Name &x_blocks:2 Store)) (BinOp (Name &o_blocks:2 Load) Add (Constant i1 None)) None) (Assign (list (Name &x_per_block:2 Store)) (BinOp (Name &b:2 Load) FloorDiv (Name &x_blocks:2 Load)) None) (Assign (list (Name &extra_x:2 Store)) (BinOp (Name &b:2 Load) Mod (Name &x_blocks:2 Load)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &x_blocks:2 Load))) nil) (/seq (If (Compare (Name &i:2 Load) (list Lt) (list (Name &extra_x:2 Load))) (/seq (AugAssign (Name &current_arrangement:2 Store) Add (fn_14 &x_per_block:2))) (/seq (AugAssign (Name &current_arrangement:2 Store) Add (BinOp (Constant s_x None) Mult (Name &x_per_block:2 Load))))) (If (Compare (Name &i:2 Load) (list Lt) (list (Name &o_blocks:2 Load))) (/seq (If (Compare (Name &i:2 Load) (list Lt) (list (Name &extra_o:2 Load))) (/seq (AugAssign (Name &current_arrangement:2 Store) Add (fn_22 (Name &o_per_block:2 Load)))) (/seq (AugAssign (Name &current_arrangement:2 Store) Add (BinOp (Constant s_o None) Mult (Name &o_per_block:2 Load)))))) (/seq))) (/seq) None) (/splice (fn_6 (Name &current_arrangement:2 Load) &compute_score:0 &current_score:2 &best_score:2 &best_arrangement:2))) (/seq) None))))) nil)",
            "(Module (/seq (fn_8 &score:1 &count:1 &i:1 &arrangement:1 &calc_score:0) (/splice (fn_1 &b:2 &a:2 &best_arr:2 &max_score:2 &find_best_arrangement:0 &b:0 &a:0 &best_arrangement:0 &max_score:0 (/choiceseq (fn_18 &max_score:2) (Assign (list (Name &best_arr:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (fn_12 &b:2) (/seq (Assign (list (Name &x_blocks:2 Store)) (fn_26 &i:2 &j:3 &b:2) None) (Assign (list (Name &o_blocks_size:2 Store)) (BinOp (Name &a:2 Load) Sub (BinOp (Name &i:2 Load) Sub (Constant i1 None))) None) (If (Compare (Name &o_blocks_size:2 Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &o_blocks:2 Store)) (ListComp (BinOp (Constant s_o None) Mult (fn_7 (Name &i:2 Load) &o_blocks_size:2 &j:4)) (list (comprehension (Name &j:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:2 Load))) nil) nil i0))) None) (Assign (list (Name &arrangement:2 Store)) (BinOp (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (ListComp (BinOp (Name &o:5 Load) Add (Name &x:5 Load)) (list (comprehension (Tuple (list (_starred_content (Name &o:5 Store)) (_starred_content (Name &x:5 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &o_blocks:2 Load)) (_starred_content (Name &x_blocks:2 Load))) nil) nil i0))))) nil) Add (BinOp (Constant s_o None) Mult (IfExp (Compare (BinOp (Name &a:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None))) (BinOp (Name &a:2 Load) FloorDiv (Name &i:2 Load)) (Constant i0 None)))) None) (/splice (fn_6 (Name &arrangement:2 Load) &calc_score:0 &score:2 &max_score:2 &best_arr:2))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &calculate_score:0 (arguments nil (list (arg &deck:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &current_char:1 Store)) (Constant None None) None) (Assign (list (Name &current_length:1 Store)) (Constant i0 None) None) (For (Name &c:1 Store) (Name &deck:1 Load) (/seq (If (Compare (Name &c:1 Load) (list NotEq) (list (Name &current_char:1 Load))) (/seq (If (Compare (Name &current_char:1 Load) (list IsNot) (list (Constant None None))) (/seq (Assign (list (Name &add:1 Store)) (BinOp (Name &current_length:1 Load) Pow (Constant i2 None)) None) (AugAssign (Name &score:1 Store) Add (IfExp (Compare (Name &current_char:1 Load) (list Eq) (list (Constant s_o None))) (Name &add:1 Load) (UnaryOp USub (Name &add:1 Load))))) (/seq)) (Assign (list (Name &current_char:1 Store)) (Name &c:1 Load) None) (Assign (list (Name &current_length:1 Store)) (Constant i1 None) None)) (/seq (AugAssign (Name &current_length:1 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &add:1 Store)) (BinOp (Name &current_length:1 Load) Pow (Constant i2 None)) None) (AugAssign (Name &score:1 Store) Add (IfExp (Compare (Name &current_char:1 Load) (list Eq) (list (Constant s_o None))) (Name &add:1 Load) (UnaryOp USub (Name &add:1 Load)))) (Return (Name &score:1 Load))) nil None None) (fn_10 (/seq (Assign (list (Name &temp_b:2 Store)) (Name &b:2 Load) None) (Assign (list (Name &blocks:2 Store)) (BinOp (List (list (_starred_content (Constant s_o None))) Load) Mult (Name &parts:2 Load)) None) (Assign (list (Name &breaks:2 Store)) (BinOp (Name &parts:2 Load) Add (Constant i1 None)) None) (/splice (fn_9 &breaks:2 &temp_b:2 &min_x_per_break:2 &remaining_x:2)) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &blocks:2 Load))) nil))) nil) (/seq (Assign (list (Name &extra_x:2 Store)) (IfExp (Compare (Name &i:2 Load) (list Lt) (list (Name &remaining_x:2 Load))) (Constant i1 None) (Constant i0 None)) None) (Assign (list (Subscript (Name &blocks:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (BinOp (Constant s_x None) Mult (BinOp (Name &min_x_per_break:2 Load) Add (Name &extra_x:2 Load))) Add (Subscript (Name &blocks:2 Load) (_slice_content (Name &i:2 Load)) Load)) None)) (/seq) None) (fn_23 (Name &min_x_per_break:2 Load) &blocks:2) (/splice (fn_6 (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &blocks:2 Load))) nil) &calculate_score:0 &current_score:2 &best_score:2 &best_arrangement:2))) &best_score:2 &best_arrangement:2 &a:2 &parts:2 &b:2 &maximize_score:0) (/splice (fn_4 &b:0 &a:0 &maximize_score:0 &arrangement:0 &score:0))) nil)",
            "(Module (/seq (FunctionDef &maximize_score:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (FunctionDef &calculate_score:1 (arguments nil (list (arg &arrangement:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:2 Store)) (Constant i0 None) None) (Assign (list (Name &current_char:2 Store)) (Constant None None) None) (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (For (Name &card:2 Store) (BinOp (Name &arrangement:2 Load) Add (Constant s-WzMyXQ== None)) (/seq (If (Compare (Name &card:2 Load) (list Eq) (list (Name &current_char:2 Load))) (/seq (AugAssign (Name &count:2 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &current_char:2 Load) (list IsNot) (list (Constant None None))) (/seq (AugAssign (Name &score:2 Store) Add (IfExp (Compare (Name &current_char:2 Load) (list Eq) (list (Constant s_o None))) (BinOp (Name &count:2 Load) Pow (Constant i2 None)) (UnaryOp USub (BinOp (Name &count:2 Load) Pow (Constant i2 None)))))) (/seq)) (Assign (list (Name &count:2 Store)) (Constant i1 None) None) (Assign (list (Name &current_char:2 Store)) (Name &card:2 Load) None)))) (/seq) None) (Return (Name &score:2 Load))) nil None None) (FunctionDef &generate_arrangements:1 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &arrangement:3 None None)) None nil nil None (list (Constant s_ None))) (/seq (If (BoolOp And (list (Compare (Name &a:3 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &b:3 Load) (list Eq) (list (Constant i0 None))))) (/seq (Return (List (list (_starred_content (Name &arrangement:3 Load))) Load))) (/seq)) (Assign (list (Name &arrangements:3 Store)) (List nil Load) None) (If (Compare (Name &a:3 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &arrangements:3 Store) Add (Call (Name &generate_arrangements:1 Load) (list (_starred_content (BinOp (Name &a:3 Load) Sub (Constant i1 None))) (_starred_content (Name &b:3 Load)) (_starred_content (BinOp (Name &arrangement:3 Load) Add (Constant s_o None)))) nil))) (/seq)) (If (Compare (Name &b:3 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &arrangements:3 Store) Add (Call (Name &generate_arrangements:1 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (BinOp (Name &b:3 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &arrangement:3 Load) Add (Constant s_x None)))) nil))) (/seq)) (Return (Name &arrangements:3 Load))) nil None None) (FunctionDef &find_max_arrangement:1 (arguments nil (list (arg &a:4 None None) (arg &b:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_score:4 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &max_arrangement:4 Store)) (Constant s_ None) None) (For (Name &arrangement:4 Store) (Call (Name &generate_arrangements:1 Load) (list (_starred_content (Name &a:4 Load)) (_starred_content (Name &b:4 Load))) nil) (/seq (/splice (fn_6 (Name &arrangement:4 Load) &calculate_score:1 &score:4 &max_score:4 &max_arrangement:4))) (/seq) None) (Return (Tuple (list (_starred_content (Name &max_score:4 Load)) (_starred_content (Name &max_arrangement:4 Load))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &max_score:1 Store)) (_starred_content (Name &max_arrangement:1 Store))) Store)) (Call (Name &find_max_arrangement:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (Return (Tuple (list (_starred_content (Name &max_score:1 Load)) (_starred_content (Name &max_arrangement:1 Load))) Load))) nil None None) (/splice (fn_4 &b:0 &a:0 &maximize_score:0 &max_arrangement:0 &max_score:0))) nil)",
            "(Module (/seq (FunctionDef &max_score:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 &b:1 &a:1)) (fn_18 &best_score:1) (Assign (list (Name &best_arrangement:1 Store)) (Constant s_ None) None) (For (Name &o_blocks:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) Add (Constant i2 None)))) nil) (/seq (Assign (list (Name &blocks:1 Store)) (BinOp (List (list (_starred_content (Constant s_o None))) Load) Mult (Name &o_blocks:1 Load)) None) (Assign (list (Name &o_left:1 Store)) (BinOp (Name &a:1 Load) Sub (Name &o_blocks:1 Load)) None) (/splice (fn_9 &o_blocks:1 &b:1 &x_blocks:1 &x_extra:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &o_blocks:1 Load))) nil) (/seq (AugAssign (Subscript (Name &blocks:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (BinOp (Constant s_x None) Mult (Name &x_blocks:1 Load))) (If (Compare (Name &i:1 Load) (list Lt) (list (Name &x_extra:1 Load))) (/seq (AugAssign (Subscript (Name &blocks:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant s_x None))) (/seq))) (/seq) None) (If (Compare (Name &o_left:1 Load) (list Gt) (list (Constant i0 None))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &o_blocks:1 Load))) nil) (/seq (If (Compare (Name &o_left:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (AugAssign (Subscript (Name &blocks:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant s_o None)) (AugAssign (Name &o_left:1 Store) Sub (Constant i1 None))) (/seq) None)) (/seq)) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &blocks:1 Load))) nil) None) (Assign (list (Name &score:1 Store)) (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (BinOp (Call (Attribute (Name &s:3 Load) s_count Load) (list (_starred_content (Constant s_o None))) nil) Pow (Constant i2 None)) Sub (BinOp (Call (Attribute (Name &s:3 Load) s_count Load) (list (_starred_content (Constant s_x None))) nil) Pow (Constant i2 None))) (list (comprehension (Name &s:3 Store) (Call (Attribute (Name &arrangement:1 Load) s_split Load) (list (_starred_content (BinOp (Constant s_x None) Mult (Name &x_blocks:1 Load)))) nil) nil i0))))) nil) None) (fn_28 &score:1 &best_score:1 (/choiceseq (Assign (list (Name &best_arrangement:1 Store)) (Name &arrangement:1 Load) None)))) (/seq) None) (Return (Tuple (list (_starred_content (Name &best_score:1 Load)) (_starred_content (Name &best_arrangement:1 Load))) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 &b:2 &a:2 &max_score:0 &arrangement:2 &score:2))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &arrangement_str:1 &best_score:1 &max_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &best_score:1 Store)) (_starred_content (Name &best_arrangement:1 Store))) Store)) (Tuple (list (_starred_content (Constant None None)) (_starred_content (Constant None None))) Load) None) (For (Name &cuts:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) Add (Constant i2 None)))) nil) (/seq (/splice (fn_9 &cuts:1 &b:1 &full_blocks:1 &extra_blocks:1)) (Assign (list (Name &score:1 Store)) (BinOp (BinOp (Name &cuts:1 Load) Mult (BinOp (BinOp (Name &a:1 Load) FloorDiv (Name &cuts:1 Load)) Pow (Constant i2 None))) Add (BinOp (BinOp (Name &a:1 Load) Mod (Name &cuts:1 Load)) Mult (fn_11 (BinOp (Name &a:1 Load) FloorDiv (Name &cuts:1 Load))))) None) (fn_21 &full_blocks:1 &extra_blocks:1 &cuts:1 &score:1) (If (BoolOp Or (list (Compare (Name &best_score:1 Load) (list Is) (list (Constant None None))) (Compare (Name &score:1 Load) (list Gt) (list (Name &best_score:1 Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &best_score:1 Store)) (_starred_content (Name &best_arrangement:1 Store))) Store)) (Tuple (list (_starred_content (Name &score:1 Load)) (_starred_content (Tuple (list (_starred_content (Name &cuts:1 Load)) (_starred_content (BinOp (Name &a:1 Load) FloorDiv (Name &cuts:1 Load))) (_starred_content (BinOp (Name &a:1 Load) Mod (Name &cuts:1 Load))) (_starred_content (Name &full_blocks:1 Load)) (_starred_content (Name &extra_blocks:1 Load))) Load))) Load) None)) (/seq))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &arrangement:1 Store)) (_starred_content (Name &num_o_blocks:1 Store)) (_starred_content (Name &o_block_size:1 Store)) (_starred_content (Name &remaining_o_blocks:1 Store)) (_starred_content (Name &num_x_blocks:1 Store)) (_starred_content (Name &extra_x_blocks:1 Store))) Store)) (Name &best_arrangement:1 Load) None) (Assign (list (Name &arrangement_str:1 Store)) (Constant s_ None) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &num_o_blocks:1 Load) Sub (Name &remaining_o_blocks:1 Load)))) nil) (/seq (AugAssign (Name &arrangement_str:1 Store) Add (fn_30 (BinOp (Name &num_x_blocks:1 Load) Add (IfExp (Compare (Name &extra_x_blocks:1 Load) (list Gt) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None))) &o_block_size:1)) (AugAssign (Name &extra_x_blocks:1 Store) Sub (Constant i1 None))) (/seq) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &remaining_o_blocks:1 Load))) nil) (/seq (AugAssign (Name &arrangement_str:1 Store) Add (BinOp (fn_22 (Name &o_block_size:1 Load)) Add (BinOp (Constant s_x None) Mult (BinOp (Name &num_x_blocks:1 Load) Add (IfExp (Compare (Name &extra_x_blocks:1 Load) (list Gt) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None)))))) (AugAssign (Name &extra_x_blocks:1 Store) Sub (Constant i1 None))) (/seq) None) (Assign (list (Name &arrangement_str:1 Store)) (Subscript (Name &arrangement_str:1 Load) (_slice_slice (Slice None (BinOp (UnaryOp USub (Name &num_x_blocks:1 Load)) Sub (IfExp (Compare (Name &extra_x_blocks:1 Load) (list Lt) (list (Constant i0 None))) (Constant i1 None) (Constant i0 None))) None)) Load) None))))) nil)",
            "(Module (/seq (FunctionDef &calculate_score:0 (arguments nil (list (arg &arrangement:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (Assign (list (Name &previous:1 Store)) (Constant s_ None) None) (/splice (fn_13 (If (Compare (Name &previous:1 Load) (list Eq) (list (Constant s_o None))) (/seq (AugAssign (Name &score:1 Store) Add (BinOp (Name &count:1 Load) Pow (Constant i2 None)))) (/seq (If (Compare (Name &previous:1 Load) (list Eq) (list (Constant s_x None))) (/seq (AugAssign (Name &score:1 Store) Sub (BinOp (Name &count:1 Load) Pow (Constant i2 None)))) (/seq)))) &count:1 &char:1 &previous:1 &arrangement:1)) (Return (Name &score:1 Load))) nil None None) (FunctionDef &maximize_score:0 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (List (list (_starred_content (UnaryOp USub (BinOp (Name &b:2 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (Constant s_x None) Mult (Name &b:2 Load)))) Load))) (/seq)) (If (Compare (Name &b:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (List (list (_starred_content (BinOp (Name &a:2 Load) Pow (Constant i2 None))) (_starred_content (BinOp (Constant s_o None) Mult (Name &a:2 Load)))) Load))) (/seq)) (fn_18 &max_score:2) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &x_blocks:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &b:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &a:2 Load) Add (Constant i2 None)))) nil))) nil) (/seq (Assign (list (Name &o_blocks:2 Store)) (BinOp (Name &x_blocks:2 Load) Add (Constant i1 None)) None) (/splice (fn_9 &x_blocks:2 &b:2 &base_xs_per_block:2 &extra_xs:2)) (Assign (list (Name &score:2 Store)) (Constant i0 None) None) (Assign (list (Name &arrangement:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &o_blocks:2 Load))) nil) (/seq (If (Compare (Name &i:2 Load) (list Gt) (list (Constant i0 None))) (/seq (fn_25 (Compare (Name &i:2 Load) (list LtE) (list (Name &extra_xs:2 Load))) &base_xs_per_block:2 &arrangement:2 &score:2)) (/seq)) (If (Compare (Name &i:2 Load) (list Lt) (list (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load)))) (/seq (AugAssign (Name &arrangement:2 Store) Add (Constant s_o None)) (AugAssign (Name &score:2 Store) Add (BinOp (Constant i1 None) Pow (Constant i2 None)))) (/seq (If (BoolOp And (list (Compare (Name &i:2 Load) (list Eq) (list (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load)))) (Compare (BinOp (Name &a:2 Load) Mod (Name &o_blocks:2 Load)) (list Gt) (list (Constant i0 None))))) (/seq (AugAssign (Name &arrangement:2 Store) Add (fn_22 (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load)))) (AugAssign (Name &score:2 Store) Add (fn_11 (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load))))) (/seq (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_o None) Mult (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load)))) (AugAssign (Name &score:2 Store) Add (BinOp (BinOp (Name &a:2 Load) FloorDiv (Name &o_blocks:2 Load)) Pow (Constant i2 None)))))))) (/seq) None) (fn_28 &score:2 &max_score:2 (/choiceseq (Assign (list (Name &best_arrangement:2 Store)) (Name &arrangement:2 Load) None)))) (/seq) None) (Return (List (list (_starred_content (Name &max_score:2 Load)) (_starred_content (Name &best_arrangement:2 Load))) Load))) nil None None) (/splice (fn_4 &b:0 &a:0 &maximize_score:0 &arrangement:0 &score:0))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &best_config:1 &best_score:1 &maximize_score:0 &b:0 &a:0 &config:0 &score:0 (/choiceseq (Assign (list (Name &best_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_config:1 Store)) (Constant s_ None) None) (For (Name &x_blocks:1 Store) (fn_12 &b:1) (/seq (/splice (fn_9 &x_blocks:1 &b:1 &min_x_block_size:1 &extra_x:1)) (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (AugAssign (Name &score:1 Store) Add (fn_27 &min_x_block_size:1 &extra_x:1 &x_blocks:1)) (AugAssign (Name &score:1 Store) Add (BinOp (Name &extra_x:1 Load) Mult (fn_11 (Name &min_x_block_size:1 Load)))) (AugAssign (Name &score:1 Store) Add (BinOp (Name &a:1 Load) Pow (Constant i2 None))) (AugAssign (Name &score:1 Store) Sub (BinOp (BinOp (BinOp (Name &a:1 Load) FloorDiv (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None))) Pow (Constant i2 None)) Mult (BinOp (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None)) Sub (BinOp (Name &a:1 Load) Mod (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None)))))) (AugAssign (Name &score:1 Store) Sub (BinOp (fn_11 (BinOp (Name &a:1 Load) FloorDiv (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None)))) Mult (BinOp (Name &a:1 Load) Mod (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None))))) (fn_28 &score:1 &best_score:1 (/choiceseq (Assign (list (Name &config:1 Store)) (BinOp (BinOp (List (list (_starred_content (Constant s_x None))) Load) Mult (Name &b:1 Load)) Add (BinOp (List (list (_starred_content (Constant s_o None))) Load) Mult (Name &a:1 Load))) None) (Assign (list (Name &o_positions:1 Store)) (BinOp (List (list (_starred_content (BinOp (Name &a:1 Load) FloorDiv (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None))))) Load) Mult (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None))) None) (Assign (list (Name &o_extra:1 Store)) (BinOp (Name &a:1 Load) Mod (BinOp (Name &x_blocks:1 Load) Add (Constant i1 None))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &o_extra:1 Load))) nil) (/seq (AugAssign (Subscript (Name &o_positions:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &config_pos:1 Store)) (Constant i0 None) None) (For (Name &block:1 Store) (Name &o_positions:1 Load) (/seq (AugAssign (Name &config_pos:1 Store) Add (BinOp (Name &min_x_block_size:1 Load) Add (IfExp (Compare (BinOp (Name &config_pos:1 Load) FloorDiv (Name &min_x_block_size:1 Load)) (list Lt) (list (Name &extra_x:1 Load))) (Constant i1 None) (Constant i0 None)))) (Assign (list (Subscript (Name &config:1 Load) (_slice_slice (Slice (Name &config_pos:1 Load) (Name &config_pos:1 Load) None)) Store)) (BinOp (List (list (_starred_content (Constant s_o None))) Load) Mult (Name &block:1 Load)) None) (AugAssign (Name &config_pos:1 Store) Add (BinOp (Name &block:1 Load) Add (Constant i1 None)))) (/seq) None) (Assign (list (Name &best_config:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Subscript (Name &config:1 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &config:1 Load))) nil) Sub (Constant i1 None)) None)) Load))) nil) None)))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &max_score:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (UnaryOp USub (Name &b:1 Load)) Mult (Name &b:1 Load)))) (/seq)) (If (Compare (Name &b:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Name &a:1 Load) Mult (Name &a:1 Load)))) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &max_v:1 Store)) (_starred_content (Name &max_config:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant s_ None))) Load) None) (For (Name &x:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &parts_o:1 Store)) (BinOp (Name &x:1 Load) Add (Constant i1 None)) None) (Assign (list (Tuple (list (_starred_content (Name &base:1 Store)) (_starred_content (Name &extra:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &parts_o:1 Load))) nil) None) (Assign (list (Name &score_o:1 Store)) (BinOp (BinOp (fn_11 (Name &base:1 Load)) Mult (Name &extra:1 Load)) Add (BinOp (BinOp (Name &base:1 Load) Pow (Constant i2 None)) Mult (BinOp (Name &parts_o:1 Load) Sub (Name &extra:1 Load)))) None) (Assign (list (Name &parts_x:1 Store)) (Name &x:1 Load) None) (Assign (list (Tuple (list (_starred_content (Name &base:1 Store)) (_starred_content (Name &extra:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &parts_x:1 Load))) nil) None) (Assign (list (Name &score_x:1 Store)) (BinOp (BinOp (fn_11 (Name &base:1 Load)) Mult (Name &extra:1 Load)) Add (BinOp (BinOp (Name &base:1 Load) Pow (Constant i2 None)) Mult (BinOp (Name &parts_x:1 Load) Sub (Name &extra:1 Load)))) None) (If (Compare (BinOp (Name &score_o:1 Load) Sub (Name &score_x:1 Load)) (list Gt) (list (Name &max_v:1 Load))) (/seq (Assign (list (Name &max_v:1 Store)) (BinOp (Name &score_o:1 Load) Sub (Name &score_x:1 Load)) None) (Assign (list (Name &o_blocks:1 Store)) (fn_20 &extra:1 &parts_o:1 &base:1) None) (Assign (list (Name &x_blocks:1 Store)) (fn_20 &extra:1 &parts_x:1 &base:1) None) (Assign (list (Name &config:1 Store)) (Constant s_ None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load))) nil) (/seq (AugAssign (Name &config:1 Store) Add (BinOp (BinOp (Constant s_x None) Mult (Subscript (Name &x_blocks:1 Load) (_slice_content (Name &i:1 Load)) Load)) Add (BinOp (Constant s_o None) Mult (Subscript (Name &o_blocks:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq) None) (AugAssign (Name &config:1 Store) Add (BinOp (Constant s_o None) Mult (Subscript (Name &o_blocks:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (Assign (list (Name &max_config:1 Store)) (Name &config:1 Load) None)) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Name &max_v:1 Load)) (_starred_content (Name &max_config:1 Load))) Load))) nil None None) (/splice (fn_4 &b:0 &a:0 &max_score:0 &deck:0 &score:0))) nil)",
            "(Module (/seq (FunctionDef &calc_score:0 (arguments nil (list (arg &arrangement:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &count:1 Store)) (Constant i1 None) None) (Assign (list (Name &prev:1 Store)) (Subscript (Name &arrangement:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &arrangement:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &prev:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq (fn_3 (Name &prev:1 Load) &count:1 &score:1) (Assign (list (Name &count:1 Store)) (Constant i1 None) None) (Assign (list (Name &prev:1 Store)) (Subscript (Name &arrangement:1 Load) (_slice_content (Name &i:1 Load)) Load) None)))) (/seq) None) (fn_3 (Name &prev:1 Load) &count:1 &score:1) (Return (Name &score:1 Load))) nil None None) (/splice (fn_2 &a:2 &b:2 &best_arrangement:2 &max_score:2 &maximize_score:0 &b:0 &a:0 &best_arrangement:0 &max_score:0 (/choiceseq (fn_18 &max_score:2) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (fn_15 &a:2) (/seq (Assign (list (Name &base_x_blocks:2 Store)) (BinOp (Name &b:2 Load) FloorDiv (BinOp (Name &i:2 Load) Add (Constant i1 None))) None) (Assign (list (Name &extra_x_blocks:2 Store)) (BinOp (Name &b:2 Load) Mod (BinOp (Name &i:2 Load) Add (Constant i1 None))) None) (Assign (list (Name &arrangement:2 Store)) (Constant s_ None) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &j:2 Load) (list Lt) (list (Name &extra_x_blocks:2 Load))) (/seq (AugAssign (Name &arrangement:2 Store) Add (fn_14 &base_x_blocks:2))) (/seq (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_x None) Mult (Name &base_x_blocks:2 Load))))) (If (Compare (Name &j:2 Load) (list NotEq) (list (Name &i:2 Load))) (/seq (AugAssign (Name &arrangement:2 Store) Add (Constant s_o None))) (/seq))) (/seq) None) (Assign (list (Name &o_blocks:2 Store)) (ListComp (Call (Name g_len Load) (list (_starred_content (Name &block:3 Load))) nil) (list (comprehension (Name &block:3 Store) (Call (Attribute (Name &arrangement:2 Load) s_split Load) (list (_starred_content (Constant s_x None))) nil) (list (Name &block:3 Load)) i0))) None) (Assign (list (Name &score:2 Store)) (BinOp (fn_16 (Name &o_blocks:2 Load) &block:5) Sub (fn_16 (BinOp (BinOp (Name &base_x_blocks:2 Load) Mult (List (list (_starred_content (Name &base_x_blocks:2 Load))) Load)) Add (BinOp (Name &extra_x_blocks:2 Load) Mult (List (list (_starred_content (BinOp (Name &base_x_blocks:2 Load) Add (Constant i1 None)))) Load))) &block:6)) None) (fn_28 &score:2 &max_score:2 (/choiceseq (Assign (list (Name &best_arrangement:2 Store)) (Call (Attribute (Name &arrangement:2 Load) s_replace Load) (list (_starred_content (Constant s_o None)) (_starred_content (BinOp (Constant s_o None) Mult (BinOp (Name &a:2 Load) FloorDiv (Name &i:2 Load)))) (_starred_content (Constant i1 None))) nil) None) (Assign (list (Name &remaining_os:2 Store)) (BinOp (Name &a:2 Load) Sub (BinOp (Name &a:2 Load) FloorDiv (Name &i:2 Load))) None) (Assign (list (Name &o_indices:2 Store)) (ListComp (Call (Attribute (Name &m:4 Load) s_start Load) nil nil) (list (comprehension (Name &m:4 Store) (Call (Attribute (Name g_re Load) s_finditer Load) (list (_starred_content (Constant s_o None)) (_starred_content (Name &best_arrangement:2 Load))) nil) nil i0))) None) (For (Name &o_index:2 Store) (Subscript (Name &o_indices:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) (/seq (Assign (list (Name &insert_count:2 Store)) (BoolOp Or (list (BinOp (Name &remaining_os:2 Load) FloorDiv (BinOp (Call (Name g_len Load) (list (_starred_content (Name &o_indices:2 Load))) nil) Sub (Constant i1 None))) (Constant i1 None))) None) (Assign (list (Name &best_arrangement:2 Store)) (BinOp (BinOp (Subscript (Name &best_arrangement:2 Load) (_slice_slice (Slice None (Name &o_index:2 Load) None)) Load) Add (BinOp (Constant s_o None) Mult (Name &insert_count:2 Load))) Add (Subscript (Name &best_arrangement:2 Load) (_slice_slice (Slice (BinOp (Name &o_index:2 Load) Add (Constant i1 None)) None None)) Load)) None) (AugAssign (Name &remaining_os:2 Store) Sub (Name &insert_count:2 Load))) (/seq) None)))) (/seq) None))))) nil)",
            "(Module (/seq (fn_19 &score:1 &deck:1 &current_char:1 &count:1 &char:1 &calculate_score:0 (/choiceseq (Assign (list (Name &current_char:1 Store)) (Name &char:1 Load) None) (Assign (list (Name &count:1 Store)) (Constant i1 None) None))) (/splice (fn_2 &a:2 &b:2 &best_deck:2 &max_score:2 &maximize_score:0 &b:0 &a:0 &deck:0 &score:0 (/choiceseq (If (Compare (Name &a:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Tuple (list (_starred_content (BinOp (Constant i1 None) Sub (BinOp (Name &b:2 Load) Pow (Constant i2 None)))) (_starred_content (BinOp (BinOp (BinOp (Constant s_x None) Mult (BinOp (Name &b:2 Load) FloorDiv (Constant i2 None))) Add (Constant s_o None)) Add (BinOp (Constant s_x None) Mult (BinOp (Name &b:2 Load) Sub (BinOp (Name &b:2 Load) FloorDiv (Constant i2 None))))))) Load))) (/seq)) (fn_18 &max_score:2) (Assign (list (Name &best_deck:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (fn_15 &a:2) (/seq (Assign (list (Name &parts:2 Store)) (BinOp (List (list (_starred_content (BinOp (Name &b:2 Load) FloorDiv (Name &i:2 Load)))) Load) Mult (Name &i:2 Load)) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &b:2 Load) Mod (Name &i:2 Load)))) nil) (/seq (AugAssign (Subscript (Name &parts:2 Load) (_slice_content (Name &j:2 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &deck:2 Store)) (Constant s_ None) None) (For (Name &part:2 Store) (Subscript (Name &parts:2 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) (/seq (AugAssign (Name &deck:2 Store) Add (BinOp (BinOp (Constant s_x None) Mult (Name &part:2 Load)) Add (Constant s_o None)))) (/seq) None) (AugAssign (Name &deck:2 Store) Add (BinOp (BinOp (Constant s_x None) Mult (Subscript (Name &parts:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Add (fn_22 (BinOp (Name &a:2 Load) Sub (Name &i:2 Load))))) (/splice (fn_6 (Name &deck:2 Load) &calculate_score:0 &score:2 &max_score:2 &best_deck:2))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &best_pattern:1 &max_score:1 &solve:0 &b:0 &a:0 &pattern:0 &score:0 (/choiceseq (Assign (list (Name &max_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_pattern:1 Store)) (Constant s_ None) None) (For (Name &blocks:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &o_blocks:1 Store)) (Name &blocks:1 Load) None) (Assign (list (Name &x_blocks:1 Store)) (BinOp (Name &blocks:1 Load) Sub (Constant i1 None)) None) (/splice (fn_9 &o_blocks:1 &a:1 &o_per_block:1 &extra_o:1)) (AugAssign (Name &score:1 Store) Add (fn_27 &o_per_block:1 &extra_o:1 &o_blocks:1)) (AugAssign (Name &score:1 Store) Add (BinOp (Name &extra_o:1 Load) Mult (fn_11 (Name &o_per_block:1 Load)))) (Assign (list (Name &x_per_block:1 Store)) (IfExp (Compare (Name &x_blocks:1 Load) (list Gt) (list (Constant i0 None))) (BinOp (Name &b:1 Load) FloorDiv (Name &x_blocks:1 Load)) (Constant i0 None)) None) (Assign (list (Name &extra_x:1 Store)) (IfExp (Compare (Name &x_blocks:1 Load) (list Gt) (list (Constant i0 None))) (BinOp (Name &b:1 Load) Mod (Name &x_blocks:1 Load)) (Constant i0 None)) None) (AugAssign (Name &score:1 Store) Sub (fn_27 &x_per_block:1 &extra_x:1 &x_blocks:1)) (AugAssign (Name &score:1 Store) Sub (BinOp (Name &extra_x:1 Load) Mult (fn_11 (Name &x_per_block:1 Load)))) (fn_28 &score:1 &max_score:1 (/choiceseq (If (Compare (Name &extra_o:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &pattern:1 Store)) (BinOp (BinOp (fn_30 (Name &x_per_block:1 Load) &o_per_block:1) Mult (BinOp (Name &blocks:1 Load) Sub (Constant i1 None))) Add (BinOp (Constant s_o None) Mult (Name &o_per_block:1 Load))) None) (If (Compare (Name &extra_x:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &pattern:1 Store) Add (fn_14 &x_per_block:1))) (/seq))) (/seq (Assign (list (Name &pattern:1 Store)) (BinOp (fn_30 (Name &x_per_block:1 Load) &o_per_block:1) Mult (BinOp (Name &blocks:1 Load) Sub (Constant i1 None))) None) (AugAssign (Name &pattern:1 Store) Add (fn_22 (Name &o_per_block:1 Load))) (If (Compare (Name &blocks:1 Load) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &pattern:1 Store) Add (BinOp (BinOp (BinOp (Constant s_x None) Mult (Name &x_per_block:1 Load)) Add (fn_22 (Name &o_per_block:1 Load))) Mult (BinOp (Name &extra_o:1 Load) Sub (Constant i1 None))))) (/seq)) (If (Compare (Name &extra_x:1 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &pattern:1 Store) Add (fn_14 &x_per_block:1))) (/seq)) (AugAssign (Name &pattern:1 Store) Add (BinOp (BinOp (Constant s_o None) Mult (Name &o_per_block:1 Load)) Mult (BinOp (BinOp (Name &o_blocks:1 Load) Sub (Name &extra_o:1 Load)) Sub (Call (Name g_max Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &extra_o:1 Load))) nil)))))) (If (Compare (Name &extra_x:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &pattern:1 Store)) (BinOp (Subscript (Call (Attribute (Name &pattern:1 Load) s_rsplit Load) (list (_starred_content (Constant s_x None)) (_starred_content (Constant i1 None))) nil) (_slice_content (Constant i0 None)) Load) Add (fn_14 &x_per_block:1)) None)) (/seq)) (Assign (list (Name &best_pattern:1 Store)) (Name &pattern:1 Load) None)))) (/seq) None))))) nil)",
            "(Module (/seq (fn_5 &score:1 &count:1 &i:1 &deck:1 &calculate_score:0) (/splice (fn_1 &b:2 &a:2 &best_sol:2 &best_score:2 &maximize_score:0 &b:0 &a:0 &deck:0 &score:0 (/choiceseq (fn_18 &best_score:2) (Assign (list (Name &best_sol:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (fn_12 &b:2) (/seq (Assign (list (Name &xs:2 Store)) (fn_26 &i:2 &j:3 &b:2) None) (Assign (list (Name &os:2 Store)) (BinOp (List (list (_starred_content (Constant s_o None))) Load) Mult (Name &a:2 Load)) None) (Assign (list (Name &deck:2 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &xs:2 Load)) (_starred_content (Name &os:2 Load))) nil)) (_starred_content (Tuple nil Load))) nil) Add (Call (Name g_tuple Load) (list (_starred_content (Subscript (Name &xs:2 Load) (_slice_slice (Slice (Name &a:2 Load) None None)) Load))) nil)))) nil) None) (/splice (fn_6 (Name &deck:2 Load) &calculate_score:0 &score:2 &best_score:2 &best_sol:2))) (/seq) None))))) nil)",
            "(Module (/seq (fn_8 &score:1 &count:1 &i:1 &configuration:1 &calculate_score:0) (/splice (fn_1 &b:2 &a:2 &best_configuration:2 &max_score:2 &generate_optimal_deck:0 &b:0 &a:0 &configuration:0 &score:0 (/choiceseq (Assign (list (Name &max_score:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_configuration:2 Store)) (Constant s_ None) None) (For (Name &x_block_count:2 Store) (fn_12 &b:2) (/seq (/splice (fn_9 &x_block_count:2 &b:2 &block_size:2 &remainder:2)) (Assign (list (Name &configuration:2 Store)) (Constant s_o None) None) (Assign (list (Name &score:2 Store)) (BinOp (Name &a:2 Load) Pow (Constant i2 None)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &x_block_count:2 Load))) nil) (/seq (fn_25 (Compare (Name &i:2 Load) (list Lt) (list (Name &remainder:2 Load))) &block_size:2 &configuration:2 &score:2) (AugAssign (Name &configuration:2 Store) Add (Constant s_o None))) (/seq) None) (AugAssign (Name &score:2 Store) Sub (BinOp (Name &a:2 Load) Pow (Constant i2 None))) (AugAssign (Name &score:2 Store) Add (BinOp (BinOp (BinOp (Name &a:2 Load) FloorDiv (BinOp (Name &x_block_count:2 Load) Add (Constant i1 None))) Pow (Constant i2 None)) Mult (BinOp (Name &x_block_count:2 Load) Add (Constant i1 None)))) (Assign (list (Name &extra:2 Store)) (BinOp (Name &a:2 Load) Mod (BinOp (Name &x_block_count:2 Load) Add (Constant i1 None))) None) (For (Name &i:2 Store) (fn_15 &extra:2) (/seq (AugAssign (Name &score:2 Store) Add (BinOp (BinOp (Constant i2 None) Mult (BinOp (Name &a:2 Load) FloorDiv (BinOp (Name &x_block_count:2 Load) Add (Constant i1 None)))) Add (Constant i1 None)))) (/seq) None) (fn_28 &score:2 &max_score:2 (/choiceseq (Assign (list (Name &best_configuration:2 Store)) (Subscript (Name &configuration:2 Load) (_slice_slice (Slice None (UnaryOp USub (Constant i1 None)) None)) Load) None)))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &best_pattern:1 &max_score:1 &calculate_max_score:0 &b:0 &a:0 &best_pattern:0 &max_score:0 (/choiceseq (fn_18 &max_score:1) (Assign (list (Name &best_pattern:1 Store)) (Constant s_ None) None) (For (Name &i:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &min_o_blocks:1 Store)) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None) (Assign (list (Name &equal_o_in_each_block:1 Store)) (BinOp (BinOp (Name &a:1 Load) Sub (Name &min_o_blocks:1 Load)) FloorDiv (Name &i:1 Load)) None) (Assign (list (Name &extra_o_for_first_few:1 Store)) (BinOp (BinOp (Name &a:1 Load) Sub (Name &min_o_blocks:1 Load)) Mod (Name &i:1 Load)) None) (/splice (fn_9 &i:1 &b:1 &equal_x_in_each_block:1 &extra_x_for_first_few:1)) (Assign (list (Name &score_x_blocks:1 Store)) (BinOp (Name &i:1 Load) Mult (BinOp (Name &equal_x_in_each_block:1 Load) Pow (Constant i2 None))) None) (For (Name &j:1 Store) (fn_15 &extra_x_for_first_few:1) (/seq (AugAssign (Name &score_x_blocks:1 Store) Add (BinOp (Constant i2 None) Mult (Name &equal_x_in_each_block:1 Load)))) (/seq) None) (Assign (list (Name &score_o_blocks:1 Store)) (BinOp (Name &i:1 Load) Mult (BinOp (Name &equal_o_in_each_block:1 Load) Pow (Constant i2 None))) None) (For (Name &j:1 Store) (fn_15 &extra_o_for_first_few:1) (/seq (AugAssign (Name &score_o_blocks:1 Store) Add (BinOp (BinOp (Constant i2 None) Mult (Name &equal_o_in_each_block:1 Load)) Add (Constant i1 None)))) (/seq) None) (Assign (list (Name &current_score:1 Store)) (BinOp (Name &score_o_blocks:1 Load) Sub (Name &score_x_blocks:1 Load)) None) (fn_28 &current_score:1 &max_score:1 (/choiceseq (Assign (list (Name &pattern:1 Store)) (BinOp (BinOp (fn_22 (Name &equal_o_in_each_block:1 Load)) Mult (Name &extra_o_for_first_few:1 Load)) Add (BinOp (BinOp (Constant s_o None) Mult (Name &equal_o_in_each_block:1 Load)) Mult (BinOp (Name &i:1 Load) Sub (Name &extra_o_for_first_few:1 Load)))) None) (AugAssign (Name &pattern:1 Store) Add (BinOp (BinOp (fn_14 &equal_x_in_each_block:1) Mult (Name &extra_x_for_first_few:1 Load)) Add (BinOp (BinOp (Constant s_x None) Mult (Name &equal_x_in_each_block:1 Load)) Mult (BinOp (Name &i:1 Load) Sub (Name &extra_x_for_first_few:1 Load))))) (Assign (list (Name &best_pattern:1 Store)) (Name &pattern:1 Load) None)))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &arrangement:1 &best_score:1 &max_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (FunctionDef &calculate_score:1 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &q:2 Store)) (_starred_content (Name &r:2 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (BinOp (Name &x:2 Load) Add (Constant i1 None)))) nil) None) (Return (BinOp (BinOp (BinOp (Name &a:1 Load) Pow (Constant i2 None)) Sub (fn_27 &q:2 &r:2 &x:2)) Sub (BinOp (Name &r:2 Load) Mult (fn_11 (Name &q:2 Load)))))) nil None None) (Assign (list (Name &best_blocks:1 Store)) (Constant i1 None) None) (Assign (list (Name &best_score:1 Store)) (Call (Name &calculate_score:1 Load) (list (_starred_content (Constant i1 None))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &a:1 Load) Add (Constant i1 None)))) nil) (/seq (/splice (fn_6 (Name &i:1 Load) &calculate_score:1 &current_score:1 &best_score:1 &best_blocks:1))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &q:1 Store)) (_starred_content (Name &r:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (BinOp (Name &best_blocks:1 Load) Add (Constant i1 None)))) nil) None) (Assign (list (Name &blocks:1 Store)) (BinOp (List (list (_starred_content (BinOp (Constant s_x None) Mult (Name &q:1 Load)))) Load) Mult (BinOp (Name &best_blocks:1 Load) Add (Constant i1 None))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &r:1 Load))) nil) (/seq (AugAssign (Subscript (Name &blocks:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant s_x None))) (/seq) None) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Constant s_o None) s_join Load) (list (_starred_content (Name &blocks:1 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &calculate_score:0 (arguments nil (list (arg &arrangement:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &current_char:1 Store)) (Subscript (Name &arrangement:1 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &count:1 Store)) (Constant i1 None) None) (For (Name &char:1 Store) (BinOp (Subscript (Name &arrangement:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) Add (Constant s-WzMyXQ== None)) (/seq (If (Compare (Name &char:1 Load) (list Eq) (list (Name &current_char:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq (fn_3 (Name &current_char:1 Load) &count:1 &score:1) (Assign (list (Name &current_char:1 Store)) (Name &char:1 Load) None) (Assign (list (Name &count:1 Store)) (Constant i1 None) None)))) (/seq) None) (Return (Name &score:1 Load))) nil None None) (/splice (fn_1 &b:2 &a:2 &best_arrangement:2 &best_score:2 &maximize_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (fn_18 &best_score:2) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &x:2 Store) (fn_12 &b:2) (/seq (Assign (list (Name &arrangement:2 Store)) (Constant s_ None) None) (Assign (list (Name &o_parts:2 Store)) (fn_29 (Name &x:2 Load) &i:3 &a:2) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &x:2 Load) Sub (Constant i1 None)))) nil) (/seq (AugAssign (Name &arrangement:2 Store) Add (BinOp (BinOp (Constant s_o None) Mult (Subscript (Name &o_parts:2 Load) (_slice_content (Name &i:2 Load)) Load)) Add (Constant s_x None)))) (/seq) None) (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_o None) Mult (Subscript (Name &o_parts:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_x None) Mult (BinOp (Name &b:2 Load) Sub (BinOp (Name &x:2 Load) Sub (Constant i1 None))))) (/splice (fn_6 (Name &arrangement:2 Load) &calculate_score:0 &score:2 &best_score:2 &best_arrangement:2))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_2 &a:1 &b:1 &best_deck:1 &max_score:1 &calculate_score:0 &b:0 &a:0 &deck:0 &score:0 (/choiceseq (Assign (list (Name &max_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_deck:1 Store)) (Constant s_ None) None) (For (Name &blocks:1 Store) (fn_15 &b:1) (/seq (Assign (list (Name &temp_score:1 Store)) (Constant i0 None) None) (Assign (list (Name &deck:1 Store)) (List nil Load) None) (/splice (fn_9 &blocks:1 &b:1 &min_x_per_block:1 &extra_x:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &blocks:1 Load))) nil) (/seq (If (Compare (Name &i:1 Load) (list Lt) (list (Name &extra_x:1 Load))) (/seq (AugAssign (Name &temp_score:1 Store) Sub (fn_11 (Name &min_x_per_block:1 Load))) (Expr (Call (Attribute (Name &deck:1 Load) s_append Load) (list (_starred_content (fn_14 &min_x_per_block:1))) nil))) (/seq (AugAssign (Name &temp_score:1 Store) Sub (BinOp (Name &min_x_per_block:1 Load) Pow (Constant i2 None))) (fn_23 (Name &min_x_per_block:1 Load) &deck:1)))) (/seq) None) (AugAssign (Name &temp_score:1 Store) Add (BinOp (BinOp (Name &a:1 Load) Add (Name &blocks:1 Load)) Pow (Constant i2 None))) (AugAssign (Name &temp_score:1 Store) Sub (Name &blocks:1 Load)) (fn_28 &temp_score:1 &max_score:1 (/choiceseq (Assign (list (Name &best_deck:1 Store)) (Call (Attribute (Constant s_o None) s_join Load) (list (_starred_content (Name &deck:1 Load))) nil) None) (Assign (list (Name &best_deck:1 Store)) (BinOp (BinOp (Constant s_o None) Add (Name &best_deck:1 Load)) Add (BinOp (Constant s_o None) Mult (BinOp (Name &a:1 Load) Sub (Constant i1 None)))) None)))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &best_config:1 &best_score:1 &maximize_score:0 &b:0 &a:0 &configuration:0 &max_score:0 (/choiceseq (Assign (list (Name &best_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_config:1 Store)) (Constant s_ None) None) (For (Name &blocks:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &o_block:1 Store)) (BinOp (BinOp (Name &a:1 Load) Add (Constant i1 None)) Sub (Name &blocks:1 Load)) None) (If (Compare (Name &o_block:1 Load) (list LtE) (list (Constant i0 None))) (/seq Continue) (/seq)) (Assign (list (Name &score:1 Store)) (BinOp (Name &o_block:1 Load) Pow (Constant i2 None)) None) (Assign (list (Tuple (list (_starred_content (Name &x_per_block:1 Store)) (_starred_content (Name &extra_x:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &blocks:1 Load))) nil) None) (fn_21 &x_per_block:1 &extra_x:1 &blocks:1 &score:1) (fn_28 &score:1 &best_score:1 (/choiceseq (Assign (list (Name &config_parts:1 Store)) (List (list (_starred_content (BinOp (Constant s_o None) Mult (Name &o_block:1 Load)))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &blocks:1 Load))) nil) (/seq (If (Compare (Name &i:1 Load) (list Lt) (list (Name &extra_x:1 Load))) (/seq (Expr (Call (Attribute (Name &config_parts:1 Load) s_append Load) (list (_starred_content (fn_14 &x_per_block:1))) nil))) (/seq (fn_23 (Name &x_per_block:1 Load) &config_parts:1)))) (/seq) None) (Assign (list (Name &best_config:1 Store)) (Call (Attribute (Constant s_x None) s_join Load) (list (_starred_content (Name &config_parts:1 Load))) nil) None)))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_2 &a:1 &b:1 &best_arrangement:1 &best_score:1 &maximize_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (FunctionDef &calculate_score:1 (arguments nil (list (arg &blocks:2 None None)) None nil nil None nil) (/seq (Return (BinOp (fn_16 (Name &blocks:2 Load) &x:3) Sub (BinOp (BinOp (Name &b:1 Load) Sub (Call (Name g_sum Load) (list (_starred_content (Name &blocks:2 Load))) nil)) Pow (Constant i2 None))))) nil None None) (Assign (list (Name &best_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_arrangement:1 Store)) (Constant s_ None) None) (For (Name &blocks:1 Store) (fn_15 &a:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &o_per_block:1 Store)) (_starred_content (Name &extra_o:1 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &blocks:1 Load))) nil) None) (Assign (list (Name &blocks_configuration:1 Store)) (fn_20 &extra_o:1 &blocks:1 &o_per_block:1) None) (If (Compare (Name &blocks:1 Load) (list LtE) (list (BinOp (Name &b:1 Load) Add (Constant i1 None)))) (/seq (Assign (list (Name &gaps_for_x:1 Store)) (BinOp (Name &blocks:1 Load) Add (Constant i1 None)) None) (Assign (list (Name &score:1 Store)) (Call (Name &calculate_score:1 Load) (list (_starred_content (Name &blocks_configuration:1 Load))) nil) None) (fn_28 &score:1 &best_score:1 (/choiceseq (Assign (list (Name &x_blocks:1 Store)) (BinOp (List (list (_starred_content (Constant s_x None))) Load) Mult (Name &gaps_for_x:1 Load)) None) (Assign (list (Name &best_arrangement:1 Store)) (BinOp (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (IfExp (Name &o:4 Load) (JoinedStr (list (FormattedValue (Call (Attribute (Name &x_blocks:1 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil) i-1 None) (FormattedValue (BinOp (Name &o:4 Load) Mult (Constant s_o None)) i-1 None))) (Call (Attribute (Name &x_blocks:1 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil)) (list (comprehension (Name &o:4 Store) (Name &blocks_configuration:1 Load) nil i0))))) nil) Add (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &x_blocks:1 Load))) nil)) None)))) (/seq))) (/seq) None))))) nil)",
            "(Module (/seq (fn_5 &score:1 &count:1 &i:1 &arrangement:1 &calculate_score:0) (/splice (fn_2 &a:2 &b:2 &best_arrangement:2 &best_score:2 &maximize_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (fn_18 &best_score:2) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &x_blocks:2 Store) (fn_15 &b:2) (/seq (Assign (list (Name &x_per_block:2 Store)) (fn_29 (Name &x_blocks:2 Load) &i:3 &b:2) None) (Assign (list (Name &o_per_gap:2 Store)) (fn_29 (BinOp (Name &x_blocks:2 Load) Add (Constant i1 None)) &i:4 &a:2) None) (Assign (list (Name &arrangement:2 Store)) (BinOp (Constant s_o None) Mult (Subscript (Name &o_per_gap:2 Load) (_slice_content (Constant i0 None)) Load)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &x_blocks:2 Load))) nil) (/seq (AugAssign (Name &arrangement:2 Store) Add (BinOp (BinOp (Constant s_x None) Mult (Subscript (Name &x_per_block:2 Load) (_slice_content (Name &i:2 Load)) Load)) Add (BinOp (Constant s_o None) Mult (Subscript (Name &o_per_gap:2 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load))))) (/seq) None) (/splice (fn_6 (Name &arrangement:2 Load) &calculate_score:0 &score:2 &best_score:2 &best_arrangement:2))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_2 &a:1 &b:1 &best_arrangement:1 &max_v:1 &max_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (Assign (list (Name &max_v:1 Store)) (UnaryOp USub (Constant f1000000000.0 None)) None) (Assign (list (Name &best_arrangement:1 Store)) (Constant s_ None) None) (For (Name &i:1 Store) (fn_12 &a:1) (/seq (Assign (list (Name &parts_o:1 Store)) (Name &i:1 Load) None) (Assign (list (Name &min_size_x:1 Store)) (BinOp (Name &b:1 Load) FloorDiv (Name &parts_o:1 Load)) None) (Assign (list (Name &extra_x:1 Store)) (BinOp (Name &b:1 Load) Mod (Name &parts_o:1 Load)) None) (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (AugAssign (Name &score:1 Store) Sub (fn_27 &min_size_x:1 &extra_x:1 &parts_o:1)) (AugAssign (Name &score:1 Store) Sub (BinOp (Name &extra_x:1 Load) Mult (fn_11 (Name &min_size_x:1 Load)))) (Assign (list (Name &parts_o:1 Store)) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None) (If (Compare (Name &parts_o:1 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_9 &parts_o:1 &a:1 &min_size_o:1 &extra_o:1)) (AugAssign (Name &score:1 Store) Add (BinOp (Name &parts_o:1 Load) Mult (BinOp (Name &min_size_o:1 Load) Pow (Constant i2 None)))) (AugAssign (Name &score:1 Store) Add (BinOp (BinOp (BinOp (Name &extra_o:1 Load) Mult (Constant i2 None)) Mult (Name &min_size_o:1 Load)) Add (Constant i1 None)))) (/seq (AugAssign (Name &score:1 Store) Add (BinOp (Name &a:1 Load) Pow (Constant i2 None))))) (fn_28 &score:1 &max_v:1 (/choiceseq (Assign (list (Name &arrangement:1 Store)) (Constant s_ None) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &parts_o:1 Load) Sub (Name &extra_x:1 Load)))) nil) (/seq (AugAssign (Name &arrangement:1 Store) Add (BinOp (BinOp (Constant s_x None) Mult (Name &min_size_x:1 Load)) Add (Constant s_o None)))) (/seq) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &extra_x:1 Load))) nil) (/seq (AugAssign (Name &arrangement:1 Store) Add (BinOp (fn_14 &min_size_x:1) Add (Constant s_o None)))) (/seq) None) (AugAssign (Name &arrangement:1 Store) Add (BinOp (Constant s_o None) Mult (BinOp (Name &a:1 Load) Sub (Name &parts_o:1 Load)))) (Assign (list (Name &best_arrangement:1 Store)) (Call (Attribute (Name &arrangement:1 Load) s_rstrip Load) (list (_starred_content (Constant s_o None))) nil) None)))) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_2 &a:1 &b:1 &arrangement:1 &max_score:1 &max_score:0 &b:0 &a:0 &arrangement:0 &result_score:0 (/choiceseq (FunctionDef &calc_score:1 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &o_blocks:2 Store)) (Name &x:2 Load) None) (Assign (list (Name &x_blocks:2 Store)) (BinOp (Name &x:2 Load) Add (Constant i1 None)) None) (/splice (fn_9 &o_blocks:2 &a:1 &o_per_block:2 &extra_o:2)) (Assign (list (Name &score:2 Store)) (BinOp (BinOp (Name &o_blocks:2 Load) Mult (BinOp (Name &o_per_block:2 Load) Pow (Constant i2 None))) Add (BinOp (Name &extra_o:2 Load) Mult (BinOp (BinOp (Constant i2 None) Mult (Name &o_per_block:2 Load)) Add (Constant i1 None)))) None) (Assign (list (Name &x_per_block:2 Store)) (BinOp (Name &b:1 Load) FloorDiv (Name &x_blocks:2 Load)) None) (Assign (list (Name &extra_x:2 Store)) (BinOp (Name &b:1 Load) Mod (Name &x_blocks:2 Load)) None) (fn_21 &x_per_block:2 &extra_x:2 &x_blocks:2 &score:2) (Return (Name &score:2 Load))) nil None None) (Assign (list (Name &left:1 Store)) (Constant i1 None) None) (Assign (list (Name &right:1 Store)) (Name &a:1 Load) None) (Assign (list (Name &max_score:1 Store)) (Call (Name &calc_score:1 Load) (list (_starred_content (Name &left:1 Load))) nil) None) (Assign (list (Name &best_blocks:1 Store)) (Name &left:1 Load) None) (While (Compare (Name &left:1 Load) (list LtE) (list (Name &right:1 Load))) (/seq (Assign (list (Name &mid:1 Store)) (BinOp (BinOp (Name &left:1 Load) Add (Name &right:1 Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &current_score:1 Store)) (Call (Name &calc_score:1 Load) (list (_starred_content (Name &mid:1 Load))) nil) None) (If (Compare (Name &current_score:1 Load) (list Gt) (list (Name &max_score:1 Load))) (/seq (Assign (list (Name &max_score:1 Store)) (Name &current_score:1 Load) None) (Assign (list (Name &best_blocks:1 Store)) (Name &mid:1 Load) None)) (/seq (If (Compare (Name &current_score:1 Load) (list Eq) (list (Name &max_score:1 Load))) (/seq (Assign (list (Name &best_blocks:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &best_blocks:1 Load)) (_starred_content (Name &mid:1 Load))) nil) None)) (/seq)))) (If (Compare (BinOp (Name &a:1 Load) FloorDiv (Name &mid:1 Load)) (list Eq) (list (BinOp (Name &a:1 Load) FloorDiv (BinOp (Name &mid:1 Load) Add (Constant i1 None))))) (/seq (Assign (list (Name &left:1 Store)) (BinOp (Name &mid:1 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &right:1 Store)) (BinOp (Name &mid:1 Load) Sub (Constant i1 None)) None)))) (/seq)) (Assign (list (Name &o_per_block:1 Store)) (BinOp (Name &a:1 Load) FloorDiv (Name &best_blocks:1 Load)) None) (Assign (list (Name &extra_o:1 Store)) (BinOp (Name &a:1 Load) Mod (Name &best_blocks:1 Load)) None) (Assign (list (Name &x_blocks:1 Store)) (BinOp (Name &best_blocks:1 Load) Add (Constant i1 None)) None) (Assign (list (Name &x_per_block:1 Store)) (BinOp (Name &b:1 Load) FloorDiv (Name &x_blocks:1 Load)) None) (Assign (list (Name &extra_x:1 Store)) (BinOp (Name &b:1 Load) Mod (Name &x_blocks:1 Load)) None) (Assign (list (Name &arrangement:1 Store)) (List nil Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &best_blocks:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &arrangement:1 Load) s_append Load) (list (_starred_content (BinOp (Constant s_o None) Mult (BinOp (Name &o_per_block:1 Load) Add (Compare (Name &extra_o:1 Load) (list Gt) (list (Constant i0 None))))))) nil)) (AugAssign (Name &extra_o:1 Store) Sub (Constant i1 None)) (fn_23 (BinOp (Name &x_per_block:1 Load) Add (Compare (Name &extra_x:1 Load) (list Gt) (list (Constant i0 None)))) &arrangement:1) (AugAssign (Name &extra_x:1 Store) Sub (Constant i1 None))) (/seq) None) (fn_23 (Name &x_per_block:1 Load) &arrangement:1) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &arrangement:1 Load))) nil) s_rstrip Load) (list (_starred_content (Constant s_x None))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &calc_score:0 (arguments nil (list (arg &arrangement:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &i:1 Store)) (Constant i0 None) None) (While (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) (/seq (Assign (list (Name &start:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) (Compare (Subscript (Name &arrangement:1 Load) (_slice_content (Name &start:1 Load)) Load) (list Eq) (list (Subscript (Name &arrangement:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq (AugAssign (Name &i:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &length:1 Store)) (BinOp (Name &i:1 Load) Sub (Name &start:1 Load)) None) (fn_3 (Subscript (Name &arrangement:1 Load) (_slice_content (Name &start:1 Load)) Load) &length:1 &score:1)) (/seq)) (Return (Name &score:1 Load))) nil None None) (/splice (fn_1 &b:2 &a:2 &best_arrangement:2 &best_score:2 &best_arrangement:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (Assign (list (Name &best_score:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_arrangement:2 Store)) (Constant s_ None) None) (For (Name &i:2 Store) (fn_15 &a:2) (/seq (Assign (list (Name &arrangement:2 Store)) (BinOp (Constant s_o None) Mult (Name &i:2 Load)) None) (Assign (list (Name &o_rem:2 Store)) (BinOp (Name &a:2 Load) Sub (Name &i:2 Load)) None) (Assign (list (Tuple (list (_starred_content (Name &div:2 Store)) (_starred_content (Name &mod:2 Store))) Store)) (Call (Name g_divmod Load) (list (_starred_content (Name &b:2 Load)) (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil) None) (AugAssign (Name &arrangement:2 Store) Add (BinOp (fn_14 &div:2) Mult (Name &mod:2 Load))) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &i:2 Load) Add (Constant i1 None)) Sub (Name &mod:2 Load)))) nil) (/seq (AugAssign (Name &arrangement:2 Store) Add (Constant s_o None)) (AugAssign (Name &o_rem:2 Store) Sub (Constant i1 None)) (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_x None) Mult (Name &div:2 Load)))) (/seq) None) (AugAssign (Name &arrangement:2 Store) Add (BinOp (Constant s_o None) Mult (Name &o_rem:2 Load))) (/splice (fn_6 (Name &arrangement:2 Load) &calc_score:0 &score:2 &best_score:2 &best_arrangement:2))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &optimize_deck:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (FunctionDef &compute_score:1 (arguments nil (list (arg &o_blocks:2 None None) (arg &x_blocks:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:2 Store)) (BinOp (fn_16 (Name &o_blocks:2 Load) &block:5) Sub (fn_16 (Name &x_blocks:2 Load) &block:6)) None) (Return (Name &score:2 Load))) nil None None) (/splice (fn_17 &b:1 &a:1)) (Assign (list (Name &max_score:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &best_deck:1 Store)) (Constant s_ None) None) (For (Name &x_blocks:1 Store) (fn_15 &b:1) (/seq (Assign (list (Name &o_blocks:1 Store)) (BinOp (Name &a:1 Load) Add (Constant i1 None)) None) (/splice (fn_9 &x_blocks:1 &b:1 &x_per_block:1 &extra_x:1)) (Assign (list (Name &o_distribution:1 Store)) (fn_29 (Name &o_blocks:1 Load) &i:3 &a:1) None) (Assign (list (Name &x_distribution:1 Store)) (fn_24 &x_blocks:1 &i:4 &x_per_block:1 &extra_x:1) None) (Assign (list (Name &current_score:1 Store)) (Call (Name &compute_score:1 Load) (list (_starred_content (Name &o_distribution:1 Load)) (_starred_content (Name &x_distribution:1 Load))) nil) None) (fn_28 &current_score:1 &max_score:1 (/choiceseq (Assign (list (Name &deck_parts:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x_blocks:1 Load))) nil) (/seq (If (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &o_distribution:1 Load))) nil))) (/seq (Expr (Call (Attribute (Name &deck_parts:1 Load) s_append Load) (list (_starred_content (BinOp (Constant s_o None) Mult (Subscript (Name &o_distribution:1 Load) (_slice_content (Name &i:1 Load)) Load)))) nil))) (/seq)) (fn_23 (Subscript (Name &x_distribution:1 Load) (_slice_content (Name &i:1 Load)) Load) &deck_parts:1)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &o_distribution:1 Load))) nil) Sub (Name &x_blocks:1 Load)))) nil) (/seq (Expr (Call (Attribute (Name &deck_parts:1 Load) s_append Load) (list (_starred_content (BinOp (Constant s_o None) Mult (Subscript (Name &o_distribution:1 Load) (_slice_content (BinOp (Name &x_blocks:1 Load) Add (Name &i:1 Load))) Load)))) nil))) (/seq) None) (Assign (list (Name &best_deck:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &deck_parts:1 Load))) nil) None)))) (/seq) None) (Return (Tuple (list (_starred_content (Name &max_score:1 Load)) (_starred_content (Name &best_deck:1 Load))) Load))) nil None None) (/splice (fn_4 &b:0 &a:0 &optimize_deck:0 &deck:0 &score:0))) nil)",
            "(Module (/seq (FunctionDef &calc_score:0 (arguments nil (list (arg &deck:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &score:1 Store)) (Constant i0 None) None) (Assign (list (Name &current_char:1 Store)) (Constant None None) None) (Assign (list (Name &current_count:1 Store)) (Constant i0 None) None) (For (Name &c:1 Store) (Name &deck:1 Load) (/seq (If (Compare (Name &c:1 Load) (list Eq) (list (Name &current_char:1 Load))) (/seq (AugAssign (Name &current_count:1 Store) Add (Constant i1 None))) (/seq (If (Name &current_char:1 Load) (/seq (fn_3 (Name &current_char:1 Load) &current_count:1 &score:1)) (/seq)) (Assign (list (Name &current_char:1 Store)) (Name &c:1 Load) None) (Assign (list (Name &current_count:1 Store)) (Constant i1 None) None)))) (/seq) None) (If (Name &current_char:1 Load) (/seq (fn_3 (Name &current_char:1 Load) &current_count:1 &score:1)) (/seq)) (Return (Name &score:1 Load))) nil None None) (fn_10 (/seq (Assign (list (Name &arrangement:2 Store)) (BinOp (fn_30 (Name &b:2 Load) &i:2) Add (BinOp (Constant s_o None) Mult (BinOp (Name &a:2 Load) Sub (Name &i:2 Load)))) None) (/splice (fn_6 (Name &arrangement:2 Load) &calc_score:0 &score:2 &best_score:2 &best_arrangement:2))) &best_score:2 &best_arrangement:2 &a:2 &i:2 &b:2 &maximize_score:0) (/splice (fn_4 &b:0 &a:0 &maximize_score:0 &arrangement:0 &score:0))) nil)",
            "(Module (/seq (/splice (fn_1 &b:1 &a:1 &arrangement:1 &max_v:1 &max_score:0 &b:0 &a:0 &arrangement:0 &score:0 (/choiceseq (FunctionDef &score:1 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &num_o_blocks:2 Store)) (BinOp (BinOp (Name &b:1 Load) FloorDiv (Name &x:2 Load)) Add (Constant i1 None)) None) (/splice (fn_9 &num_o_blocks:2 &a:1 &base_o_block_size:2 &extra_o:2)) (Assign (list (Name &score:2 Store)) (Constant i0 None) None) (AugAssign (Name &score:2 Store) Sub (BinOp (BinOp (BinOp (Name &b:1 Load) Mod (Name &x:2 Load)) Mult (fn_11 (BinOp (Name &b:1 Load) FloorDiv (Name &x:2 Load)))) Add (BinOp (BinOp (Name &x:2 Load) Sub (BinOp (Name &b:1 Load) Mod (Name &x:2 Load))) Mult (BinOp (BinOp (Name &b:1 Load) FloorDiv (Name &x:2 Load)) Pow (Constant i2 None))))) (AugAssign (Name &score:2 Store) Add (BinOp (BinOp (Name &extra_o:2 Load) Mult (fn_11 (Name &base_o_block_size:2 Load))) Add (fn_27 &base_o_block_size:2 &extra_o:2 &num_o_blocks:2))) (Return (Name &score:2 Load))) nil None None) (Assign (list (Name &max_v:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (Assign (list (Name &arrangement:1 Store)) (Constant s_ None) None) (For (Name &x:1 Store) (fn_12 &b:1) (/seq (Assign (list (Name &current_score:1 Store)) (Call (Name &score:1 Load) (list (_starred_content (Name &x:1 Load))) nil) None) (fn_28 &current_score:1 &max_v:1 (/choiceseq (Assign (list (Name &num_o_blocks:1 Store)) (BinOp (BinOp (Name &b:1 Load) FloorDiv (Name &x:1 Load)) Add (Constant i1 None)) None) (/splice (fn_9 &num_o_blocks:1 &a:1 &base_o_block_size:1 &extra_o:1)) (Assign (list (Name &arrangement:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &extra_o:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &arrangement:1 Load) s_append Load) (list (_starred_content (fn_22 (Name &base_o_block_size:1 Load)))) nil)) (If (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Name &b:1 Load) Mod (Name &x:1 Load)))) (/seq (fn_23 (BinOp (BinOp (Name &b:1 Load) FloorDiv (Name &x:1 Load)) Add (Constant i1 None)) &arrangement:1)) (/seq (fn_23 (BinOp (Name &b:1 Load) FloorDiv (Name &x:1 Load)) &arrangement:1)))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &extra_o:1 Load)) (_starred_content (Name &num_o_blocks:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &arrangement:1 Load) s_append Load) (list (_starred_content (BinOp (Constant s_o None) Mult (Name &base_o_block_size:1 Load)))) nil)) (If (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Name &b:1 Load) Mod (Name &x:1 Load)))) (/seq (fn_23 (BinOp (BinOp (Name &b:1 Load) FloorDiv (Name &x:1 Load)) Add (Constant i1 None)) &arrangement:1)) (/seq (fn_23 (BinOp (Name &b:1 Load) FloorDiv (Name &x:1 Load)) &arrangement:1)))) (/seq) None) (Assign (list (Name &arrangement:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (BinOp (Subscript (Name &arrangement:1 Load) (_slice_slice (Slice (Name &right:3 Load) None None)) Load) Add (Subscript (Name &arrangement:1 Load) (_slice_slice (Slice None (Name &right:3 Load) None)) Load)) (list (comprehension (Name &right:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &arrangement:1 Load))) nil))) nil) nil i0))))) nil) None)))) (/seq) None))))) nil)"
        ]
    },
    "663": {
        "abstractions": [
            {
                "body": "(/subseq (FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Name %5 Store)) (Constant i3 None) None) (Assign (list (Name %6 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) Load))) Load) None) (Assign (list (Name %7 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %4 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %6 Load)) (_starred_content (Name %7 Load))) nil))) nil)))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %5 Load) (/seq (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Name %4 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %2 Load))) Load))) nil))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name %5 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %5 Load))) nil))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript #0 (_slice_content (Name %3 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript #0 (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %3 Load)) (_starred_content (Name %1 Load))) Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %12 (arguments nil (list (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (DictComp (Name %2 Load) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Store)) (Constant i0 None) None) (Assign (list (Name %5 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name %4 Load))) Load))) Load) None) (While (Name %5 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name %5 Load))) nil) None) (If (Compare (Name %7 Load) (list Gt) (list (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name %10 Store)) (_starred_content (Name %8 Store))) Store) (Subscript (Name %11 Load) (_slice_content (Name %6 Load)) Load) (/seq (Assign (list (Name %9 Store)) (BinOp (Name %7 Load) Add (Name %8 Load)) None) (If (Compare (Name %9 Load) (list Lt) (list (Subscript (Name %3 Load) (_slice_content (Name %10 Load)) Load))) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %10 Load)) Store)) (Name %9 Load) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name %5 Load)) (_starred_content (Tuple (list (_starred_content (Name %9 Load)) (_starred_content (Name %10 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %3 Load))) nil None None) (Assign (list (Name %13 Store)) (Constant i0 None) None) (For (Name %14 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) #0 (/seq) None) (Return (Name %13 Load)))",
                "sym_arity": 14,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name %5 Store)) (DictComp (BinOp (Name %4 Load) Add (Constant i1 None)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %6 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %5 Load))) nil))) nil))) (/seq))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Subscript (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %11 (arguments nil (list (arg %1 None None) (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (DictComp (Name %2 Load) (Call (Name g_float Load) (list (_starred_content (Constant s_infinity None))) nil) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))) None) (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Store)) (Constant i0 None) None) (Assign (list (Name %5 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name %4 Load))) Load))) Load) None) (While (Name %5 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (_starred_content (Name %5 Load))) nil) None) (If (Compare (Name %7 Load) (list Gt) (list (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name %10 Store)) (_starred_content (Name %8 Store))) Store) #0 (/seq (Assign (list (Name %9 Store)) (BinOp (Name %7 Load) Add (Name %8 Load)) None) (If (Compare (Name %9 Load) (list Lt) (list (Subscript (Name %3 Load) (_slice_content (Name %10 Load)) Load))) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %10 Load)) Store)) (Name %9 Load) None) (Expr (Call (Attribute (Name g_heapq Load) s_heappush Load) (list (_starred_content (Name %5 Load)) (_starred_content (Tuple (list (_starred_content (Name %9 Load)) (_starred_content (Name %10 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %3 Load))) nil None None)",
                "sym_arity": 11,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content #0)) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute #0 s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name %5 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute #0 s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %3 Store)) (ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Subscript #0 (_slice_content (Constant i1 None)) Load) Sub (Subscript #0 (_slice_content (Constant i0 None)) Load))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None))) (_starred_content (Name %1 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %3 Load) Sub (Constant i1 None))) (_starred_content (Name %1 Load))) Load))) nil)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name %3 Load) (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) None) (Return (Name %5 Load)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %2 (arguments nil nil None nil nil None nil) (/seq ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Name %1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Subscript (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Subscript (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (While (Name %1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name %1 Load))) nil) None) (If (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Store)) (Constant True None) None) (AugAssign (Name %5 Store) Add (Name %3 Load)) (For (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %8 Store))) Store) (Subscript (Name %7 Load) (_slice_content (Name %2 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name %4 Load) (_slice_content (Name %6 Load)) Load)) #0 (/seq))) (/seq) None)) (/seq)) (Return (Name %5 Load)))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %9 Store))) Store) (Subscript (Name %8 Load) (_slice_content (Name %3 Load)) Load) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (Call (Name %4 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load))) nil) None) (AugAssign (Name %7 Store) Add (Name %6 Load)) ?0) (/seq) None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (List (list (_starred_content (Constant False None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Name %2 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name %3 Store) Add (BinOp (UnaryOp USub (Name %2 Load)) Mult (Name %1 Load)))) #0)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (/splice (fn_5 (/seq (If (Compare (fn_18 &i:1 &armies:1) (list Lt) (list (fn_19 &i:1 &armies:1))) (/seq (Assign (list (Name &min_dist:1 Store)) (Call (Name &dijkstra:1 Load) (list (_starred_content (Name &i:1 Load))) nil) None) (For (Name &j:1 Store) (fn_11 &n:1) (/seq (If (Compare (fn_18 &j:1 &armies:1) (list Gt) (list (fn_19 &j:1 &armies:1))) (/seq (Assign (list (Name &needed:1 Store)) (fn_14 (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) None) (Assign (list (Name &available:1 Store)) (fn_7 &j:1 &armies:1) None) (Assign (list (Name &moved:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &needed:1 Load)) (_starred_content (Name &available:1 Load))) nil) None) (AugAssign (Name &total_cost:1 Store) Add (BinOp (Name &moved:1 Load) Mult (Subscript (Name &min_dist:1 Load) (_slice_content (Name &j:1 Load)) Load))) (AugAssign (Subscript (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Store) Add (Name &moved:1 Load)) (AugAssign (Subscript (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Store) Sub (Name &moved:1 Load))) (/seq))) (/seq) None)) (/seq))) &n:1 &i:3 &min_dist:2 &start:2 &pq:2 &current_node:2 &current_dist:2 &weight:2 &distance:2 &neighbor:2 &graph:1 &dijkstra:1 &total_cost:1 &i:1))) &armies:1 &routes:1 &n:1 &min_cost_to_move_armies:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &extra_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_7 &node:2 &armies:1))) Load) None) (fn_21 &parent:2 &child:2 &node:2 &dfs:1 &child_extra:2 &child_cost:2 &total_cost:2 &graph:1 &cost:2 (/choiceseq (fn_24 (/seq) &cost:2 &child_extra:2 &total_cost:2) (AugAssign (Name &extra_armies:2 Store) Add (Name &child_extra:2 Load)))) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Name &extra_armies:2 Load))) Load))) nil None None) (Return (Subscript (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) nil) (_slice_content (Constant i0 None)) Load))) &armies:1 &routes:1 &n:1 &min_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (FunctionDef &min_cost_to_move_armies:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None) (arg &armies:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &edges:1)) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &needed_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_19 &node:2 &armies:1))) Load) None) (For (Tuple (list (_starred_content (Name &child:2 Store)) (_starred_content (Name &cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &child:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &child_cost:2 Store)) (_starred_content (Name &child_needed:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &child:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (Name &child_cost:2 Load)) (Assign (list (Name &surplus_armies:2 Store)) (BinOp (fn_18 &child:2 &armies:1) Sub (Name &child_needed:2 Load)) None) (If (Compare (Name &surplus_armies:2 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:2 Store) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &surplus_armies:2 Load))) nil) Mult (Name &cost:2 Load)))) (/seq)) (AugAssign (Name &needed_armies:2 Store) Sub (Name &surplus_armies:2 Load))) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &needed_armies:2 Load))) nil))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:1 Store)) (_starred_content (Name &_:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) nil) None) (Return (Name &total_cost:1 Load))) nil None None) (/splice (fn_3 (Name g_input Load) &n:0 &_:3 &edges:0 &_:4 &armies:0 &min_cost_to_move_armies:0))) nil)",
            "(Module (/seq (fn_8 (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load) s_items Load) nil nil) &graph:1 &vertex:3 &distances:1 &start:1 &pq:1 &current_vertex:1 &current_distance:1 &weight:1 &distance:1 &neighbor:1 &dijkstra:0) (/splice (fn_1 (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_dict Load))) nil) None) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store)) (_starred_content (Name &c:2 Store))) Store) (Name &connections:2 Load) (/seq (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &u:2 Load)) Load) (_slice_content (Name &v:2 Load)) Store)) (Name &c:2 Load) None) (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &v:2 Load)) Load) (_slice_content (Name &u:2 Load)) Store)) (Name &c:2 Load) None)) (/seq) None) (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (fn_11 &n:2) (/seq (Assign (list (Tuple (list (_starred_content (Name &x_i:2 Store)) (_starred_content (Name &y_i:2 Store))) Store)) (Subscript (Name &armies_info:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) None) (If (Compare (Name &x_i:2 Load) (list Lt) (list (Name &y_i:2 Load))) (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (For (Name &j:2 Store) (fn_11 &n:2) (/seq (If (Compare (Name &i:2 Load) (list NotEq) (list (Name &j:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &x_j:2 Store)) (_starred_content (Name &y_j:2 Store))) Store)) (Subscript (Name &armies_info:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Constant i1 None))) Load) None) (If (Compare (Name &x_j:2 Load) (list Gt) (list (Name &y_j:2 Load))) (/seq (Assign (list (Name &move_armies:2 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Name &x_j:2 Load) Sub (Name &y_j:2 Load))) (_starred_content (BinOp (Name &y_i:2 Load) Sub (Name &x_i:2 Load)))) nil) None) (AugAssign (Name &x_i:2 Store) Add (Name &move_armies:2 Load)) (AugAssign (Name &x_j:2 Store) Sub (Name &move_armies:2 Load)) (AugAssign (Name &total_cost:2 Store) Add (BinOp (Subscript (Name &distances:2 Load) (_slice_content (Name &j:2 Load)) Load) Mult (Name &move_armies:2 Load))) (If (Compare (Name &x_i:2 Load) (list GtE) (list (Name &y_i:2 Load))) (/seq Break) (/seq))) (/seq))) (/seq))) (/seq) None)) (/seq))) (/seq) None) (Return (Name &total_cost:2 Load))) &armies_info:2 &connections:2 &n:2 &min_move_cost:0 &n:0 &connections:0 &armies_info:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (FunctionDef &prim:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_cost:2 Store)) (Constant i0 None) None) (Assign (list (Name &visited:2 Store)) (fn_23 &n:1) None) (Assign (list (Name &min_heap:2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &start:2 Load))) Load))) Load) None) (/splice (fn_20 (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &min_heap:2 Load)) (_starred_content (Tuple (list (_starred_content (Name &w:2 Load)) (_starred_content (Name &v:2 Load))) Load))) nil))) &min_heap:2 &u:2 &cost:2 &visited:2 &min_cost:2 &v:2 &graph:1 &w:2))) nil None None) (Assign (list (Name &total_movements:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &y:3 Load) Sub (Name &x:3 Load)))) nil) (list (comprehension (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &y:3 Store))) Store) (Name &armies:1 Load) nil i0))))) nil) None) (Assign (list (Name &total_cost:1 Store)) (BinOp (Call (Name &prim:1 Load) (list (_starred_content (Constant i1 None))) nil) Mult (Name &total_movements:1 Load)) None) (Return (Name &total_cost:1 Load))) &armies:1 &routes:1 &n:1 &min_move_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_17 &total_cost:1 &main:0 (/choiceseq (Assign (list (Name &input:1 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:1 Load) nil nil))) nil) None) (Assign (list (Name &adj:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Name &_:1 Store) (fn_22 &n:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (fn_12 (Name &input:1 Load)) None) (/splice (fn_15 &c:1 &v:1 &u:1 &adj:1))) (/seq) None) (Assign (list (Name &total_cost:1 Store)) (Constant i0 None) None) (Assign (list (Name &armies_needed:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &armies_present:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (fn_12 (Name &input:1 Load)) None) (Assign (list (Subscript (Name &armies_present:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &x:1 Load) None) (Assign (list (Subscript (Name &armies_needed:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &y:1 Load) None)) (/seq) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Nonlocal (list s_total_cost)) (Assign (list (Tuple (list (_starred_content (Name &cost:2 Store)) (_starred_content (Name &extra_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Subscript (Name &armies_present:1 Load) (_slice_content (Name &node:2 Load)) Load) Sub (Subscript (Name &armies_needed:1 Load) (_slice_content (Name &node:2 Load)) Load)))) Load) None) (For (Tuple (list (_starred_content (Name &next_node:2 Store)) (_starred_content (Name &c:2 Store))) Store) (Subscript (Name &adj:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &next_node:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &extra_next:2 Store)) (_starred_content (Name &next_cost:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &next_node:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (If (Compare (Name &extra_next:2 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:1 Store) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &extra_next:2 Load))) nil) Mult (Name &c:2 Load))) (AugAssign (Name &extra_armies:2 Store) Add (Name &extra_next:2 Load))) (/seq (AugAssign (Name &cost:2 Store) Add (Name &next_cost:2 Load))))) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Name &extra_armies:2 Load)) (_starred_content (BinOp (Name &cost:2 Load) Add (Call (Name g_abs Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &extra_armies:2 Load)) (_starred_content (Constant i0 None))) nil))) nil)))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &min_cost:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) None) (AugAssign (Name &total_cost:1 Store) Add (Name &min_cost:1 Load)))))) nil)",
            "(Module (/seq (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &dfs:0 (arguments nil (list (arg &node:1 None None) (arg &parent:1 None None)) None nil nil None nil) (/seq (Global (list s_total_cost)) (Assign (list (Tuple (list (_starred_content (Name &needed:1 Store)) (_starred_content (Name &has:1 Store))) Store)) (Subscript (Name &hw:0 Load) (_slice_content (Name &node:1 Load)) Load) None) (For (Tuple (list (_starred_content (Name &child:1 Store)) (_starred_content (Name &cost:1 Store))) Store) (Subscript (Name &adj:0 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (Compare (Name &child:1 Load) (list NotEq) (list (Name &parent:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &needed_child:1 Store)) (_starred_content (Name &has_child:1 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &child:1 Load)) (_starred_content (Name &node:1 Load))) nil) None) (Assign (list (Name &cur_needed:1 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &needed_child:1 Load) Sub (Name &has_child:1 Load)))) nil) None) (AugAssign (Name g_total_cost Store) Add (BinOp (BinOp (Name &cur_needed:1 Load) Mult (Name &cost:1 Load)) Mult (Constant i2 None))) (AugAssign (Name &has:1 Store) Add (BinOp (Name &has_child:1 Load) Sub (Name &cur_needed:1 Load))) (AugAssign (Name &needed:1 Store) Add (Name &needed_child:1 Load))) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Name &needed:1 Load)) (_starred_content (Name &has:1 Load))) Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load) nil nil))) nil) None) (fn_13 &n:0 &_:2 &adj:0) (Assign (list (Name &hw:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (fn_22 &n:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (fn_12 (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load)) None) (/splice (fn_4 (Name &adj:0 Load) &c:0 &v:0 &u:0))) (/seq) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Expr (Call (Attribute (Name &hw:0 Load) s_append Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (fn_12 (Attribute (Call (Name &input:0 Load) nil nil) s_strip Load)))) nil))) nil))) (/seq) None) (Assign (list (Name &total_cost:0 Store)) (Constant i0 None) None) (Expr (Call (Name &dfs:0 Load) (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &total_cost:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (fn_9 &n:1 &current:1) (fn_9 &n:1 &required:1) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &armies:1 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &current:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &x:1 Load) None) (Assign (list (Subscript (Name &required:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &y:1 Load) None)) (/seq) None) (/splice (fn_16 (/seq (Assign (list (Name &cost:2 Store)) (Constant i0 None) None) (Assign (list (Name &extra:2 Store)) (BinOp (Subscript (Name &current:1 Load) (_slice_content (Name &node:2 Load)) Load) Sub (Subscript (Name &required:1 Load) (_slice_content (Name &node:2 Load)) Load)) None) (fn_21 &parent:2 &nei:2 &node:2 &dfs:1 &child_extra:2 &child_cost:2 &cost:2 &graph:1 &c:2 (/choiceseq (If (Compare (Name &child_extra:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &cost:2 Store) Add (BinOp (Name &child_extra:2 Load) Mult (Name &c:2 Load))) (AugAssign (Name &extra:2 Store) Add (Name &child_extra:2 Load))) (/seq)))) (Return (Tuple (list (_starred_content (Name &cost:2 Load)) (_starred_content (Name &extra:2 Load))) Load))) &parent:2 &node:2 &dfs:1 &_:1 &total_cost:1))) &armies:1 &routes:1 &n:1 &min_move_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (fn_12 (Attribute (Call (Name g_input Load) nil nil) s_strip Load)))) nil))) nil None None) (ClassDef &Graph:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:4 None None) (arg &vertices:4 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:4 Load) s_V Store)) (Name &vertices:4 Load) None) (Assign (list (Attribute (Name &self:4 Load) s_graph Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None)) nil None None) (FunctionDef &add_edge:1 (arguments nil (list (arg &self:5 None None) (arg &u:5 None None) (arg &v:5 None None) (arg &w:5 None None)) None nil nil None nil) (/seq (/splice (fn_4 (Attribute (Name &self:5 Load) s_graph Load) &w:5 &v:5 &u:5))) nil None None)) nil) (FunctionDef &dfs:0 (arguments nil (list (arg &graph:2 None None) (arg &u:2 None None) (arg &parent:2 None None) (arg &army_needs:2 None None) (arg &army_current:2 None None) (arg &costs:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (Assign (list (Name &extra_army:2 Store)) (BinOp (Subscript (Name &army_current:2 Load) (_slice_content (Name &u:2 Load)) Load) Sub (Subscript (Name &army_needs:2 Load) (_slice_content (Name &u:2 Load)) Load)) None) (For (Tuple (list (_starred_content (Name &v:2 Store)) (_starred_content (Name &cost:2 Store))) Store) (Subscript (Attribute (Name &graph:2 Load) s_graph Load) (_slice_content (Name &u:2 Load)) Load) (/seq (If (Compare (Name &v:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &child_cost:2 Store)) (_starred_content (Name &child_extra:2 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &v:2 Load)) (_starred_content (Name &u:2 Load)) (_starred_content (Name &army_needs:2 Load)) (_starred_content (Name &army_current:2 Load)) (_starred_content (Name &costs:2 Load))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (Name &child_cost:2 Load)) (fn_24 (/seq (AugAssign (Name &extra_army:2 Store) Add (Name &child_extra:2 Load))) &cost:2 &child_extra:2 &total_cost:2)) (/seq) None) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Name &extra_army:2 Load))) Load))) nil None None) (/splice (fn_17 &total_cost:3 &main:0 (/choiceseq (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name &graph:3 Store)) (Call (Name &Graph:0 Load) (list (_starred_content (Name &n:3 Load))) nil) None) (For (Name &_:3 Store) (fn_22 &n:3) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store)) (_starred_content (Name &c:3 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Expr (Call (Attribute (Name &graph:3 Load) s_add_edge Load) (list (_starred_content (BinOp (Name &u:3 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &v:3 Load) Sub (Constant i1 None))) (_starred_content (Name &c:3 Load))) nil))) (/seq) None) (Assign (list (Name &army_current:3 Store)) (List nil Load) None) (Assign (list (Name &army_needs:3 Store)) (List nil Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &y:3 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Expr (Call (Attribute (Name &army_current:3 Load) s_append Load) (list (_starred_content (Name &x:3 Load))) nil)) (Expr (Call (Attribute (Name &army_needs:3 Load) s_append Load) (list (_starred_content (Name &y:3 Load))) nil))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:3 Store)) (_starred_content (Name &_:3 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name &army_needs:3 Load)) (_starred_content (Name &army_current:3 Load)) (_starred_content (Dict nil nil))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None) (arg &nations:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &edges:1)) (/splice (fn_16 (/seq (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (Assign (list (Name &extra_armies:2 Store)) (fn_7 &node:2 &nations:1) None) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &cost_to_move:2 Store)) (_starred_content (Name &remaining:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (Name &cost_to_move:2 Load)) (If (Compare (Name &remaining:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:2 Store) Add (BinOp (Name &remaining:2 Load) Mult (Name &cost:2 Load))) (AugAssign (Name &extra_armies:2 Store) Add (Name &remaining:2 Load))) (/seq (If (Compare (Name &remaining:2 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:2 Store) Sub (BinOp (Name &remaining:2 Load) Mult (Name &cost:2 Load)))) (/seq))))) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Name &extra_armies:2 Load))) Load))) &parent:2 &node:2 &dfs:1 &_:1 &min_cost:1))) nil None None) (/splice (fn_3 (Name g_input Load) &n:0 &_:3 &edges:0 &_:4 &nations:0 &solve:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (Assign (list (Name &total_cost:1 Store)) (Constant i0 None) None) (fn_9 &n:1 &flow_needed:1) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &armies:1 Load)) (_starred_content (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &flow_needed:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &y:1 Load) Sub (Name &x:1 Load)) None)) (/seq) None) (FunctionDef &dfs_min_cost:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Nonlocal (list s_total_cost)) (For (Tuple (list (_starred_content (Name &child:2 Store)) (_starred_content (Name &cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &child:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Expr (Call (Name &dfs_min_cost:1 Load) (list (_starred_content (Name &child:2 Load)) (_starred_content (Name &node:2 Load))) nil)) (AugAssign (Name &total_cost:1 Store) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Subscript (Name &flow_needed:1 Load) (_slice_content (Name &child:2 Load)) Load))) nil) Mult (Name &cost:2 Load))) (AugAssign (Subscript (Name &flow_needed:1 Load) (_slice_content (Name &node:2 Load)) Store) Add (Subscript (Name &flow_needed:1 Load) (_slice_content (Name &child:2 Load)) Load))) (/seq))) (/seq) None)) nil None None) (Expr (Call (Name &dfs_min_cost:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)) (Return (Name &total_cost:1 Load))) &armies:1 &routes:1 &n:1 &min_cost_to_move_armies:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (Assign (list (Name &graph:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Name &routes:1 Load) (/seq (/splice (fn_15 &c:1 &v:1 &u:1 &graph:1))) (/seq) None) (FunctionDef &dfs:1 (arguments nil (list (arg &u:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &total_extra_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &x_u:2 Store)) (_starred_content (Name &y_u:2 Store))) Store)) (Subscript (Name &armies:1 Load) (_slice_content (Name &u:2 Load)) Load) None) (fn_21 &parent:2 &v:2 &u:2 &dfs:1 &extra_armies:2 &cost:2 &total_cost:2 &graph:1 &c:2 (/choiceseq (If (Compare (Name &extra_armies:2 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:2 Store) Add (BinOp (Name &extra_armies:2 Load) Mult (Name &c:2 Load)))) (/seq)) (AugAssign (Name &total_extra_armies:2 Store) Add (Name &extra_armies:2 Load)))) (AugAssign (Name &total_extra_armies:2 Store) Add (BinOp (Name &x_u:2 Load) Sub (Name &y_u:2 Load))) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Name &total_extra_armies:2 Load))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:1 Store)) (_starred_content (Name &_:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) None) (Return (Name &total_cost:1 Load))) &armies:1 &routes:1 &n:1 &min_cost_to_move_armies:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (fn_8 (Subscript (Name &graph:1 Load) (_slice_content (Name &current_node:1 Load)) Load) &graph:1 &node:4 &dist:1 &start:1 &pq:1 &current_node:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &dijkstra:0) (FunctionDef &build_graph:0 (arguments nil (list (arg &n:2 None None) (arg &edges:2 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:2 &c:2 &v:2 &u:2 &edges:2)) (Return (Name &graph:2 Load))) nil None None) (FunctionDef &min_cost_to_move_armies:0 (arguments nil (list (arg &n:3 None None) (arg &edges:3 None None) (arg &armies:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:3 Store)) (Call (Name &build_graph:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &edges:3 Load))) nil) None) (fn_9 &n:3 &army_positions:3) (fn_9 &n:3 &army_needs:3) (For (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Tuple (list (_starred_content (Name &x_i:3 Store)) (_starred_content (Name &y_i:3 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &armies:3 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &army_positions:3 Load) (_slice_content (Name &i:3 Load)) Store)) (Name &x_i:3 Load) None) (Assign (list (Subscript (Name &army_needs:3 Load) (_slice_content (Name &i:3 Load)) Store)) (Name &y_i:3 Load) None)) (/seq) None) (Assign (list (Name &total_cost:3 Store)) (Constant i0 None) None) (For (Name &i:3 Store) (fn_11 &n:3) (/seq (If (Compare (Subscript (Name &army_positions:3 Load) (_slice_content (Name &i:3 Load)) Load) (list Lt) (list (Subscript (Name &army_needs:3 Load) (_slice_content (Name &i:3 Load)) Load))) (/seq (Assign (list (Name &dist:3 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &i:3 Load))) nil) None) (For (Name &j:3 Store) (fn_11 &n:3) (/seq (If (Compare (Subscript (Name &army_positions:3 Load) (_slice_content (Name &j:3 Load)) Load) (list Gt) (list (Subscript (Name &army_needs:3 Load) (_slice_content (Name &j:3 Load)) Load))) (/seq (Assign (list (Name &extra_armies:3 Store)) (BinOp (Subscript (Name &army_positions:3 Load) (_slice_content (Name &j:3 Load)) Load) Sub (Subscript (Name &army_needs:3 Load) (_slice_content (Name &j:3 Load)) Load)) None) (Assign (list (Name &moved_armies:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &extra_armies:3 Load)) (_starred_content (BinOp (Subscript (Name &army_needs:3 Load) (_slice_content (Name &i:3 Load)) Load) Sub (Subscript (Name &army_positions:3 Load) (_slice_content (Name &i:3 Load)) Load)))) nil) None) (AugAssign (Name &total_cost:3 Store) Add (BinOp (Subscript (Name &dist:3 Load) (_slice_content (Name &j:3 Load)) Load) Mult (Name &moved_armies:3 Load))) (AugAssign (Subscript (Name &army_positions:3 Load) (_slice_content (Name &i:3 Load)) Store) Add (Name &moved_armies:3 Load)) (AugAssign (Subscript (Name &army_positions:3 Load) (_slice_content (Name &j:3 Load)) Store) Sub (Name &moved_armies:3 Load))) (/seq))) (/seq) None)) (/seq))) (/seq) None) (Return (Name &total_cost:3 Load))) nil None None) (/splice (fn_3 (Name g_input Load) &n:0 &_:5 &edges:0 &_:6 &armies:0 &min_cost_to_move_armies:0))) nil)",
            "(Module (/seq (FunctionDef &find:0 (arguments nil (list (arg &parent:1 None None) (arg &i:1 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Name &parent:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &i:1 Load))) (/seq (Return (Name &i:1 Load))) (/seq)) (Return (Call (Name &find:0 Load) (list (_starred_content (Name &parent:1 Load)) (_starred_content (Subscript (Name &parent:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil))) nil None None) (FunctionDef &union:0 (arguments nil (list (arg &parent:2 None None) (arg &rank:2 None None) (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &xroot:2 Store)) (_starred_content (Name &yroot:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Lambda (arguments nil (list (arg &i:10 None None)) None nil nil None nil) (Call (Name &find:0 Load) (list (_starred_content (Name &parent:2 Load)) (_starred_content (Name &i:10 Load))) nil))) (_starred_content (Tuple (list (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load))) Load))) nil) None) (If (Compare (Subscript (Name &rank:2 Load) (_slice_content (Name &xroot:2 Load)) Load) (list Lt) (list (Subscript (Name &rank:2 Load) (_slice_content (Name &yroot:2 Load)) Load))) (/seq (Assign (list (Subscript (Name &parent:2 Load) (_slice_content (Name &xroot:2 Load)) Store)) (Name &yroot:2 Load) None)) (/seq (If (Compare (Subscript (Name &rank:2 Load) (_slice_content (Name &xroot:2 Load)) Load) (list Gt) (list (Subscript (Name &rank:2 Load) (_slice_content (Name &yroot:2 Load)) Load))) (/seq (Assign (list (Subscript (Name &parent:2 Load) (_slice_content (Name &yroot:2 Load)) Store)) (Name &xroot:2 Load) None)) (/seq (Assign (list (Subscript (Name &parent:2 Load) (_slice_content (Name &yroot:2 Load)) Store)) (Name &xroot:2 Load) None) (AugAssign (Subscript (Name &rank:2 Load) (_slice_content (Name &xroot:2 Load)) Store) Add (Constant i1 None))))))) nil None None) (FunctionDef &kruskal:0 (arguments nil (list (arg &graph:3 None None) (arg &V:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &result:3 Store)) (List nil Load) None) (Assign (list (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Name &e:3 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (Assign (list (Name &graph:3 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &graph:3 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg &item:12 None None)) None nil nil None nil) (Subscript (Name &item:12 Load) (_slice_content (Constant i2 None)) Load))))) None) (Assign (list (Tuple (list (_starred_content (Name &parent:3 Store)) (_starred_content (Name &rank:3 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &V:3 Load))) nil))) nil)) (_starred_content (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &V:3 Load)))) Load) None) (While (Compare (Name &e:3 Load) (list Lt) (list (BinOp (Name &V:3 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store)) (_starred_content (Name &w:3 Store))) Store)) (Subscript (Name &graph:3 Load) (_slice_content (Name &i:3 Load)) Load) None) (AugAssign (Name &i:3 Store) Add (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &y:3 Store))) Store)) (Tuple (list (_starred_content (Call (Name &find:0 Load) (list (_starred_content (Name &parent:3 Load)) (_starred_content (Name &u:3 Load))) nil)) (_starred_content (Call (Name &find:0 Load) (list (_starred_content (Name &parent:3 Load)) (_starred_content (Name &v:3 Load))) nil))) Load) None) (If (Compare (Name &x:3 Load) (list NotEq) (list (Name &y:3 Load))) (/seq (AugAssign (Name &e:3 Store) Add (Constant i1 None)) (Expr (Call (Attribute (Name &result:3 Load) s_append Load) (list (_starred_content (List (list (_starred_content (Name &u:3 Load)) (_starred_content (Name &v:3 Load)) (_starred_content (Name &w:3 Load))) Load))) nil)) (Expr (Call (Name &union:0 Load) (list (_starred_content (Name &parent:3 Load)) (_starred_content (Name &rank:3 Load)) (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load))) nil))) (/seq))) (/seq)) (Return (Name &result:3 Load))) nil None None) (FunctionDef &make_tree:0 (arguments nil (list (arg &edges:4 None None) (arg &n:4 None None)) None nil nil None nil) (/seq (/splice (fn_2 &tree:4 &w:4 &v:4 &u:4 &edges:4)) (Return (Name &tree:4 Load))) nil None None) (FunctionDef &dfs:0 (arguments nil (list (arg &tree:5 None None) (arg &node:5 None None) (arg &parent:5 None None) (arg &current_cost:5 None None) (arg &extra:5 None None) (arg &need:5 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_cost:5 Store)) (Constant i0 None) None) (Assign (list (Name &current_extra:5 Store)) (Subscript (Name &extra:5 Load) (_slice_content (Name &node:5 Load)) Load) None) (Assign (list (Name &current_need:5 Store)) (Subscript (Name &need:5 Load) (_slice_content (Name &node:5 Load)) Load) None) (For (Tuple (list (_starred_content (Name &child:5 Store)) (_starred_content (Name &cost:5 Store))) Store) (Call (Attribute (Name &tree:5 Load) s_get Load) (list (_starred_content (Name &node:5 Load)) (_starred_content (List nil Load))) nil) (/seq (If (Compare (Name &child:5 Load) (list NotEq) (list (Name &parent:5 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &child_cost:5 Store)) (_starred_content (Name &child_extra:5 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &tree:5 Load)) (_starred_content (Name &child:5 Load)) (_starred_content (Name &node:5 Load)) (_starred_content (Name &cost:5 Load)) (_starred_content (Name &extra:5 Load)) (_starred_content (Name &need:5 Load))) nil) None) (AugAssign (Name &total_cost:5 Store) Add (Name &child_cost:5 Load)) (AugAssign (Name &current_extra:5 Store) Add (Name &child_extra:5 Load))) (/seq))) (/seq) None) (Assign (list (Name &to_move:5 Store)) (Call (Name g_min Load) (list (_starred_content (Name &current_extra:5 Load)) (_starred_content (Name &current_need:5 Load))) nil) None) (AugAssign (Name &current_extra:5 Store) Sub (Name &to_move:5 Load)) (AugAssign (Name &current_need:5 Store) Sub (Name &to_move:5 Load)) (AugAssign (Name &total_cost:5 Store) Add (BinOp (BinOp (Constant i2 None) Mult (Name &current_cost:5 Load)) Mult (Name &current_need:5 Load))) (Return (Tuple (list (_starred_content (Name &total_cost:5 Load)) (_starred_content (Name &current_extra:5 Load))) Load))) nil None None) (FunctionDef &minimize_army_movement:0 (arguments nil (list (arg &n:6 None None) (arg &routes:6 None None) (arg &armies:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:6 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &u:6 Store)) (_starred_content (Name &v:6 Store)) (_starred_content (Name &c:6 Store))) Store) (Name &routes:6 Load) (/seq (Expr (Call (Attribute (Name &graph:6 Load) s_append Load) (list (_starred_content (List (list (_starred_content (BinOp (Name &u:6 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &v:6 Load) Sub (Constant i1 None))) (_starred_content (Name &c:6 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &final_edges:6 Store)) (Call (Name &kruskal:0 Load) (list (_starred_content (Name &graph:6 Load)) (_starred_content (Name &n:6 Load))) nil) None) (Assign (list (Name &tree:6 Store)) (Call (Name &make_tree:0 Load) (list (_starred_content (Name &final_edges:6 Load)) (_starred_content (Name &n:6 Load))) nil) None) (Assign (list (Name &extra:6 Store)) (ListComp (BinOp (Name &x:9 Load) Sub (Name &y:9 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:9 Store)) (_starred_content (Name &y:9 Store))) Store) (Name &armies:6 Load) nil i0))) None) (Assign (list (Name &need:6 Store)) (ListComp (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &y:11 Load) Sub (Name &x:11 Load)))) nil) (list (comprehension (Tuple (list (_starred_content (Name &x:11 Store)) (_starred_content (Name &y:11 Store))) Store) (Name &armies:6 Load) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:6 Store)) (_starred_content (Name &_:6 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &tree:6 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (Name &extra:6 Load)) (_starred_content (Name &need:6 Load))) nil) None) (Return (Name &total_cost:6 Load))) nil None None) (/splice (fn_10 (Call (Name g_input Load) nil nil) &n:0 &_:7 &routes:0 &_:8 &armies:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &minimize_army_movement:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &routes:0 Load)) (_starred_content (Name &armies:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_10 (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) &n:1 &_:5 &routes:1 &_:6 &armies:1)) (Return (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &routes:1 Load)) (_starred_content (Name &armies:1 Load))) Load))) nil None None) (FunctionDef &create_graph:0 (arguments nil (list (arg &n:2 None None) (arg &routes:2 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:2 &c:2 &v:2 &u:2 &routes:2)) (Return (Name &graph:2 Load))) nil None None) (FunctionDef &move_armies:0 (arguments nil (list (arg &n:3 None None) (arg &routes:3 None None) (arg &armies:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:3 Store)) (Call (Name &create_graph:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &routes:3 Load))) nil) None) (fn_9 &n:3 &min_costs:3) (Assign (list (Name &queue:3 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Constant i1 None))) Load))) nil) None) (Assign (list (Name &visited:3 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Constant i1 None))) Load))) nil) None) (While (Name &queue:3 Load) (/seq (Assign (list (Name &node:3 Store)) (Call (Attribute (Name &queue:3 Load) s_popleft Load) nil nil) None) (Assign (list (Name &curr_armies:3 Store)) (fn_18 &node:3 &armies:3) None) (Assign (list (Name &required_armies:3 Store)) (fn_19 &node:3 &armies:3) None) (For (Tuple (list (_starred_content (Name &neighbor:3 Store)) (_starred_content (Name &cost:3 Store))) Store) (Subscript (Name &graph:3 Load) (_slice_content (Name &node:3 Load)) Load) (/seq (If (Compare (Name &neighbor:3 Load) (list NotIn) (list (Name &visited:3 Load))) (/seq (Assign (list (Name &extra_armies:3 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &curr_armies:3 Load) Sub (Name &required_armies:3 Load)))) nil) None) (Assign (list (Name &move_cost:3 Store)) (BinOp (Name &extra_armies:3 Load) Mult (Name &cost:3 Load)) None) (AugAssign (Subscript (Name &min_costs:3 Load) (_slice_content (Name &neighbor:3 Load)) Store) Add (Name &move_cost:3 Load)) (AugAssign (Subscript (Subscript (Name &armies:3 Load) (_slice_content (BinOp (Name &neighbor:3 Load) Sub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Store) Add (Name &extra_armies:3 Load)) (Expr (Call (Attribute (Name &visited:3 Load) s_add Load) (list (_starred_content (Name &neighbor:3 Load))) nil)) (Expr (Call (Attribute (Name &queue:3 Load) s_append Load) (list (_starred_content (Name &neighbor:3 Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Call (Name g_sum Load) (list (_starred_content (Name &min_costs:3 Load))) nil))) nil None None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &routes:4 Store)) (_starred_content (Name &armies:4 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Name &result:4 Store)) (Call (Name &move_armies:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &routes:4 Load)) (_starred_content (Name &armies:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:4 Load))) nil))) nil None None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None) (arg &cost:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &armies_needed:2 Store)) (_starred_content (Name &armies_available:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_19 &node:2 &armies:1)) (_starred_content (fn_18 &node:2 &armies:1))) Load) None) (For (Tuple (list (_starred_content (Name &child:2 Store)) (_starred_content (Name &move_cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &child:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &child_cost:2 Store)) (_starred_content (Name &child_needed:2 Store)) (_starred_content (Name &child_available:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &child:2 Load)) (_starred_content (Name &node:2 Load)) (_starred_content (Name &move_cost:2 Load))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (Name &child_cost:2 Load)) (AugAssign (Name &armies_needed:2 Store) Add (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &child_needed:2 Load) Sub (Name &child_available:2 Load)))) nil)) (AugAssign (Name &armies_available:2 Store) Add (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &child_available:2 Load) Sub (Name &child_needed:2 Load)))) nil))) (/seq))) (/seq) None) (If (Compare (Name &parent:2 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Return (Tuple (list (_starred_content (BinOp (Name &total_cost:2 Load) Add (BinOp (BinOp (Constant i2 None) Mult (Name &cost:2 Load)) Mult (Name &armies_needed:2 Load)))) (_starred_content (Name &armies_needed:2 Load)) (_starred_content (Name &armies_available:2 Load))) Load))) (/seq (Return (Name &total_cost:2 Load))))) nil None None) (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (Return (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Constant i0 None))) nil))) &armies:1 &routes:1 &n:1 &min_cost_to_move_armies:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (FunctionDef &min_cost:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None) (arg &armies:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &edges:1)) (Assign (list (Name &total_cost:1 Store)) (Constant i0 None) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Nonlocal (list s_total_cost)) (Assign (list (Tuple (list (_starred_content (Name &extra_armies:2 Store)) (_starred_content (Name &need_armies:2 Store))) Store)) (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &node:2 Load) Sub (Constant i1 None))) Load) None) (For (Tuple (list (_starred_content (Name &child:2 Store)) (_starred_content (Name &cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &child:2 Load) (list NotEq) (list (Name &parent:2 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &child_extra:2 Store)) (_starred_content (Name &cost_to_move:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &child:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &extra_armies:2 Store) Add (Name &child_extra:2 Load)) (AugAssign (Name &total_cost:1 Store) Add (BinOp (Name &cost_to_move:2 Load) Mult (Name &cost:2 Load)))) (/seq))) (/seq) None) (AugAssign (Name &extra_armies:2 Store) Sub (Name &need_armies:2 Load)) (Return (Tuple (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &extra_armies:2 Load)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Name g_abs Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &extra_armies:2 Load)) (_starred_content (Constant i0 None))) nil))) nil))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &_:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) None) (Return (Name &total_cost:1 Load))) nil None None) (/splice (fn_3 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &_:3 &edges:0 &_:4 &armies:0 &min_cost:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (Assign (list (Name &graph:1 Store)) (DictComp (Name &i:2 Load) (List nil Load) (list (comprehension (Name &i:2 Store) (fn_11 &n:1) nil i0))) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Name &connections:1 Load) (/seq (/splice (fn_4 (Name &graph:1 Load) &c:1 &v:1 &u:1))) (/seq) None) (/splice (fn_5 (/seq (Assign (list (Tuple (list (_starred_content (Name &x_i:1 Store)) (_starred_content (Name &y_i:1 Store))) Store)) (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None) (If (Compare (Name &x_i:1 Load) (list Gt) (list (Name &y_i:1 Load))) (/seq (Assign (list (Name &move_armies:1 Store)) (BinOp (Name &x_i:1 Load) Sub (Name &y_i:1 Load)) None) (Assign (list (Name &distances:1 Store)) (Call (Name &dijkstra:1 Load) (list (_starred_content (Name &i:1 Load))) nil) None) (For (Name &j:1 Store) (fn_11 &n:1) (/seq (If (Compare (Name &i:1 Load) (list NotEq) (list (Name &j:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &x_j:1 Store)) (_starred_content (Name &y_j:1 Store))) Store)) (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) None) (If (Compare (Name &x_j:1 Load) (list Lt) (list (Name &y_j:1 Load))) (/seq (Assign (list (Name &needed_armies:1 Store)) (BinOp (Name &y_j:1 Load) Sub (Name &x_j:1 Load)) None) (Assign (list (Name &move:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &move_armies:1 Load)) (_starred_content (Name &needed_armies:1 Load))) nil) None) (AugAssign (Name &total_cost:1 Store) Add (BinOp (Name &move:1 Load) Mult (Subscript (Name &distances:1 Load) (_slice_content (Name &j:1 Load)) Load))) (AugAssign (Name &move_armies:1 Store) Sub (Name &move:1 Load)) (Assign (list (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Store)) (Tuple (list (_starred_content (BinOp (Name &x_j:1 Load) Add (Name &move:1 Load))) (_starred_content (Name &y_j:1 Load))) Load) None) (If (Compare (Name &move_armies:1 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq))) (/seq))) (/seq))) (/seq) None)) (/seq))) &n:1 &i:4 &min_dist:3 &start:3 &heap:3 &current_node:3 &current_dist:3 &weight:3 &distance:3 &neighbor:3 &graph:1 &dijkstra:1 &total_cost:1 &i:1))) &armies:1 &connections:1 &n:1 &min_cost_to_move_armies:0 &n:0 &connections:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_13 &n:1 &_:3 &graph:1) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Name &routes:1 Load) (/seq (/splice (fn_4 (Name &graph:1 Load) &c:1 &v:1 &u:1))) (/seq) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &cost:2 Store)) (_starred_content (Name &excess:2 Store)) (_starred_content (Name &need:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &route_cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &sub_cost:2 Store)) (_starred_content (Name &sub_excess:2 Store)) (_starred_content (Name &sub_need:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &cost:2 Store) Add (Name &sub_cost:2 Load)) (If (Compare (Name &sub_excess:2 Load) (list Gt) (list (Name &sub_need:2 Load))) (/seq (AugAssign (Name &excess:2 Store) Add (BinOp (Name &sub_excess:2 Load) Sub (Name &sub_need:2 Load)))) (/seq (AugAssign (Name &cost:2 Store) Add (BinOp (BinOp (Name &sub_need:2 Load) Sub (Name &sub_excess:2 Load)) Mult (Name &route_cost:2 Load))) (AugAssign (Name &need:2 Store) Add (BinOp (Name &sub_need:2 Load) Sub (Name &sub_excess:2 Load)))))) (/seq) None) (Assign (list (Name &current_need:2 Store)) (fn_14 (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &node:2 Load) Sub (Constant i1 None))) Load)) None) (If (Compare (Name &current_need:2 Load) (list Lt) (list (Constant i0 None))) (/seq (AugAssign (Name &excess:2 Store) Add (UnaryOp USub (Name &current_need:2 Load)))) (/seq (AugAssign (Name &need:2 Store) Add (Name &current_need:2 Load)))) (Return (Tuple (list (_starred_content (Name &cost:2 Load)) (_starred_content (Name &excess:2 Load)) (_starred_content (Name &need:2 Load))) Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:1 Store)) (_starred_content (Name &_:1 Store)) (_starred_content (Name &_:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) nil) None) (Return (Name &total_cost:1 Load))) &armies:1 &routes:1 &n:1 &minimum_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &current:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &surplus:2 Store)) (_starred_content (Name &cost:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (fn_21 &parent:2 &child:2 &current:2 &dfs:1 &child_cost:2 &child_surplus:2 &surplus:2 &graph:1 &move_cost:2 (/choiceseq (AugAssign (Name &cost:2 Store) Add (BinOp (Name &child_cost:2 Load) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &child_surplus:2 Load))) nil) Mult (Name &move_cost:2 Load)))))) (Return (Tuple (list (_starred_content (BinOp (BinOp (Name &surplus:2 Load) Add (fn_18 &current:2 &armies:1)) Sub (fn_19 &current:2 &armies:1))) (_starred_content (Name &cost:2 Load))) Load))) nil None None) (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &total_cost:1 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) nil) None) (Return (Name &total_cost:1 Load))) &armies:1 &routes:1 &n:1 &min_move_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (fn_13 &n:1 &_:2 &graph:1) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Name &edges:1 Load) (/seq (/splice (fn_4 (Name &graph:1 Load) &c:1 &v:1 &u:1))) (/seq) None) (fn_9 &n:1 &min_armies:1) (fn_9 &n:1 &extra_armies:1) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &armies:1 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &min_armies:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &y:1 Load) None) (Assign (list (Subscript (Name &extra_armies:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &x:1 Load) Sub (Name &y:1 Load)) None)) (/seq) None) (Assign (list (Name &min_cost:1 Store)) (Constant i0 None) None) (Assign (list (Name &visited:1 Store)) (fn_23 &n:1) None) (Assign (list (Name &queue:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (/splice (fn_20 (/seq (Assign (list (Name &effective_cost:1 Store)) (Name &edge_cost:1 Load) None) (If (Compare (Subscript (Name &extra_armies:1 Load) (_slice_content (Name &node:1 Load)) Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &transferable_armies:1 Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &min_armies:1 Load) (_slice_content (Name &neighbor:1 Load)) Load)) (_starred_content (Subscript (Name &extra_armies:1 Load) (_slice_content (Name &node:1 Load)) Load))) nil) None) (AugAssign (Subscript (Name &min_armies:1 Load) (_slice_content (Name &neighbor:1 Load)) Store) Sub (Name &transferable_armies:1 Load)) (AugAssign (Subscript (Name &extra_armies:1 Load) (_slice_content (Name &node:1 Load)) Store) Sub (Name &transferable_armies:1 Load)) (AugAssign (Name &effective_cost:1 Store) Mult (Name &transferable_armies:1 Load))) (/seq (AugAssign (Name &effective_cost:1 Store) Mult (Subscript (Name &min_armies:1 Load) (_slice_content (Name &neighbor:1 Load)) Load)))) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (Name &effective_cost:1 Load)) (_starred_content (Name &neighbor:1 Load))) Load))) nil))) &queue:1 &node:1 &cost:1 &visited:1 &min_cost:1 &neighbor:1 &graph:1 &edge_cost:1))) &armies:1 &edges:1 &n:1 &min_cost_to_move_armies:0 &n:0 &edges:0 &armies:0))) nil)",
            "(Module (/seq (FunctionDef &min_move_cost:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None) (arg &nations:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &edges:1)) (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Name &start:2 Load)) (_starred_content (Constant i0 None))) Load))) Load))) nil) None) (Assign (list (Name &visited:2 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Name &start:2 Load))) Load))) nil) None) (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (While (Name &queue:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current:2 Store)) (_starred_content (Name &cost:2 Store))) Store)) (Call (Attribute (Name &queue:2 Load) s_popleft Load) nil nil) None) (Assign (list (Name &extra_armies:2 Store)) (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (fn_14 (Subscript (Name &nations:1 Load) (_slice_content (Name &current:2 Load)) Load)))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (BinOp (Name &extra_armies:2 Load) Mult (Name &cost:2 Load))) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &edge_cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &current:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list NotIn) (list (Name &visited:2 Load))) (/seq (Expr (Call (Attribute (Name &visited:2 Load) s_add Load) (list (_starred_content (Name &neighbor:2 Load))) nil)) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (BinOp (Name &cost:2 Load) Add (Name &edge_cost:2 Load)))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name &total_cost:2 Load))) nil None None) (Return (Call (Name &bfs:1 Load) (list (_starred_content (Constant i1 None))) nil))) nil None None) (fn_6 &n:0 &_:3 &edges:0 &i:4 &nations:0 &min_move_cost:0)) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &edges:1)) (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None) (arg &extra_armies_needed:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &visited:2 Store)) (fn_23 &n:1) None) (Assign (list (Subscript (Name &visited:2 Load) (_slice_content (Name &start:2 Load)) Store)) (Constant True None) None) (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Name &start:2 Load)) (_starred_content (Constant i0 None))) Load))) Load))) nil) None) (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (While (Name &queue:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current:2 Store)) (_starred_content (Name &cost:2 Store))) Store)) (Call (Attribute (Name &queue:2 Load) s_popleft Load) nil nil) None) (If (Compare (Subscript (Name &extra_armies_needed:2 Load) (_slice_content (Name &current:2 Load)) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (BinOp (Name &total_cost:2 Load) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Subscript (Name &extra_armies_needed:2 Load) (_slice_content (Name &current:2 Load)) Load))) nil) Mult (Name &cost:2 Load))))) (/seq)) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &neighbor_cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &current:2 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name &visited:2 Load) (_slice_content (Name &neighbor:2 Load)) Load)) (/seq (Assign (list (Subscript (Name &visited:2 Load) (_slice_content (Name &neighbor:2 Load)) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (BinOp (Name &cost:2 Load) Add (Name &neighbor_cost:2 Load)))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name &total_cost:2 Load))) nil None None) (fn_9 &n:1 &extra_armies_needed:1) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &armies:1 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &extra_armies_needed:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &x:1 Load) Sub (Name &y:1 Load)) None)) (/seq) None) (Assign (list (Name &total_cost:1 Store)) (Constant i0 None) None) (For (Name &start_node:1 Store) (fn_11 &n:1) (/seq (If (Compare (Subscript (Name &extra_armies_needed:1 Load) (_slice_content (Name &start_node:1 Load)) Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &cost:1 Store)) (Call (Name &bfs:1 Load) (list (_starred_content (Name &start_node:1 Load)) (_starred_content (Name &extra_armies_needed:1 Load))) nil) None) (AugAssign (Name &total_cost:1 Store) Add (Name &cost:1 Load))) (/seq))) (/seq) None) (Return (Name &total_cost:1 Load))) &armies:1 &edges:1 &n:1 &min_cost_to_move_armies:0 &n:0 &edges:0 &armies:0))) nil)",
            "(Module (/seq (ClassDef &Graph:0 nil nil (/seq (FunctionDef &__init__:1 (arguments nil (list (arg &self:2 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:2 Load) s_graph Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None)) nil None None) (FunctionDef &addEdge:1 (arguments nil (list (arg &self:3 None None) (arg &u:3 None None) (arg &v:3 None None) (arg &cost:3 None None)) None nil nil None nil) (/seq (/splice (fn_4 (Attribute (Name &self:3 Load) s_graph Load) &cost:3 &v:3 &u:3))) nil None None) (FunctionDef &dfs:1 (arguments nil (list (arg &self:4 None None) (arg &node:4 None None) (arg &parent:4 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:4 Store)) (_starred_content (Name &extra_armies:4 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Tuple (list (_starred_content (Name &neighbor:4 Store)) (_starred_content (Name &cost:4 Store))) Store) (Subscript (Attribute (Name &self:4 Load) s_graph Load) (_slice_content (Name &node:4 Load)) Load) (/seq (If (Compare (Name &neighbor:4 Load) (list Eq) (list (Name &parent:4 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &cost_to_move:4 Store)) (_starred_content (Name &armies_remain:4 Store))) Store)) (Call (Attribute (Name &self:4 Load) s_dfs Load) (list (_starred_content (Name &neighbor:4 Load)) (_starred_content (Name &node:4 Load))) nil) None) (AugAssign (Name &total_cost:4 Store) Add (Name &cost_to_move:4 Load)) (If (Compare (Name &armies_remain:4 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &total_cost:4 Store) Add (BinOp (Name &armies_remain:4 Load) Mult (Name &cost:4 Load)))) (/seq)) (AugAssign (Name &extra_armies:4 Store) Add (Name &armies_remain:4 Load))) (/seq) None) (Assign (list (Name &armies_needed:4 Store)) (BinOp (Subscript (Name &y:0 Load) (_slice_content (BinOp (Name &node:4 Load) Sub (Constant i1 None))) Load) Sub (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &node:4 Load) Sub (Constant i1 None))) Load)) None) (AugAssign (Name &extra_armies:4 Store) Add (Name &armies_needed:4 Load)) (Return (Tuple (list (_starred_content (Name &total_cost:4 Load)) (_starred_content (Name &extra_armies:4 Load))) Load))) nil None None)) nil) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &graph:0 Store)) (Call (Name &Graph:0 Load) nil nil) None) (For (Name &_:0 Store) (fn_22 &n:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (fn_12 (Name g_input Load)) None) (Expr (Call (Attribute (Name &graph:0 Load) s_addEdge Load) (list (_starred_content (Name &u:0 Load)) (_starred_content (Name &v:0 Load)) (_starred_content (Name &c:0 Load))) nil))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load))) Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &xi:0 Store)) (_starred_content (Name &yi:0 Store))) Store)) (fn_12 (Name g_input Load)) None) (Expr (Call (Attribute (Name &x:0 Load) s_append Load) (list (_starred_content (Name &xi:0 Load))) nil)) (Expr (Call (Attribute (Name &y:0 Load) s_append Load) (list (_starred_content (Name &yi:0 Load))) nil))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &total_cost:0 Store)) (_starred_content (Name &_:0 Store))) Store)) (Call (Attribute (Name &graph:0 Load) s_dfs Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &total_cost:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &dfs:0 (arguments nil (list (arg &node:1 None None) (arg &parent:1 None None) (arg &graph:1 None None) (arg &armies:1 None None) (arg &needs:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &surplus:1 Store)) (_starred_content (Name &cost:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) (For (Tuple (list (_starred_content (Name &child:1 Store)) (_starred_content (Name &weight:1 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (If (Compare (Name &child:1 Load) (list NotEq) (list (Name &parent:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &child_surplus:1 Store)) (_starred_content (Name &child_cost:1 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Name &child:1 Load)) (_starred_content (Name &node:1 Load)) (_starred_content (Name &graph:1 Load)) (_starred_content (Name &armies:1 Load)) (_starred_content (Name &needs:1 Load))) nil) None) (AugAssign (Name &cost:1 Store) Add (Name &child_cost:1 Load)) (AugAssign (Name &surplus:1 Store) Add (Name &child_surplus:1 Load)) (fn_24 (/seq (AugAssign (Name &surplus:1 Store) Add (Name &child_surplus:1 Load))) &weight:1 &child_surplus:1 &cost:1)) (/seq))) (/seq) None) (AugAssign (Name &surplus:1 Store) Add (BinOp (Subscript (Name &armies:1 Load) (_slice_content (BinOp (Name &node:1 Load) Sub (Constant i1 None))) Load) Sub (Subscript (Name &needs:1 Load) (_slice_content (BinOp (Name &node:1 Load) Sub (Constant i1 None))) Load))) (Return (Tuple (list (_starred_content (Name &surplus:1 Load)) (_starred_content (Name &cost:1 Load))) Load))) nil None None) (/splice (fn_17 &total_cost:2 &main:0 (/choiceseq (Assign (list (Name &n:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (fn_13 &n:2 &_:3 &graph:2) (For (Name &_:2 Store) (fn_22 &n:2) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store)) (_starred_content (Name &c:2 Store))) Store)) (fn_12 (Name g_input Load)) None) (/splice (fn_4 (Name &graph:2 Load) &c:2 &v:2 &u:2))) (/seq) None) (Assign (list (Name &armies:2 Store)) (List nil Load) None) (Assign (list (Name &needs:2 Store)) (List nil Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store)) (fn_12 (Name g_input Load)) None) (Expr (Call (Attribute (Name &armies:2 Load) s_append Load) (list (_starred_content (Name &x:2 Load))) nil)) (Expr (Call (Attribute (Name &needs:2 Load) s_append Load) (list (_starred_content (Name &y:2 Load))) nil))) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &_:2 Store)) (_starred_content (Name &total_cost:2 Store))) Store)) (Call (Name &dfs:0 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &armies:2 Load)) (_starred_content (Name &needs:2 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &min_movement_cost:0 (arguments nil (list (arg &n:1 None None) (arg &routes:1 None None) (arg &nations:1 None None)) None nil nil None nil) (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None) (arg &parent:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &total_armies:2 Store)) (_starred_content (Name &needed_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_18 &node:2 &nations:1)) (_starred_content (fn_19 &node:2 &nations:1))) Load) None) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &cost_per_army:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &cost:2 Store)) (_starred_content (Name &surplus:2 Store)) (_starred_content (Name &required:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (Assign (list (Name &move_armies:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &surplus:2 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &needed_armies:2 Load) Sub (Name &total_armies:2 Load)))) nil))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (BinOp (Name &cost:2 Load) Add (BinOp (Name &move_armies:2 Load) Mult (Name &cost_per_army:2 Load)))) (AugAssign (Name &total_armies:2 Store) Add (Name &move_armies:2 Load)) (AugAssign (Name &needed_armies:2 Store) Add (Name &required:2 Load))) (/seq) None) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (BinOp (Name &total_armies:2 Load) Sub (Name &needed_armies:2 Load))) (_starred_content (Name &needed_armies:2 Load))) Load))) nil None None) (Return (Subscript (Call (Name &dfs:1 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant None None))) nil) (_slice_content (Constant i0 None)) Load))) nil None None) (Assign (list (Name &n:0 Store)) (Constant i3 None) None) (Assign (list (Name &routes:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None))) Load)) (_starred_content (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None))) Load))) Load) None) (Assign (list (Name &nations:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (List (list (_starred_content (Constant i5 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_movement_cost:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &routes:0 Load)) (_starred_content (Name &nations:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &dijkstra:0 (arguments nil (list (arg &start:1 None None) (arg &adj:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTA0LCAxMTEsIDExNCwgMTE2LCAxMDEsIDExNSwgMTE2LCAzMiwgMTEyLCA5NywgMTE2LCAxMDQsIDExNSwgMzIsIDEwMiwgMTE0LCAxMTEsIDEwOSwgMzIsIDExNSwgMTE2LCA5NywgMTE0LCAxMTYsIDMyLCAxMTAsIDExMSwgMTAwLCAxMDEsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAxMDgsIDEwOCwgMzIsIDExMSwgMTE2LCAxMDQsIDEwMSwgMTE0LCAzMiwgMTEwLCAxMTEsIDEwMCwgMTAxLCAxMTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDMsIDExNCwgOTcsIDExMiwgMTA0LCA0Nl0= None)) (Assign (list (Name &dist:1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (BinOp (Name &n:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dist:1 Load) (_slice_content (Name &start:1 Load)) Store)) (Constant i0 None) None) (Assign (list (Name &queue:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &start:1 Load))) Load))) Load) None) (While (Name &queue:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &u:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &queue:1 Load))) nil) None) (If (Compare (Name &current_dist:1 Load) (list Gt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &u:1 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name &v:1 Store)) (_starred_content (Name &w:1 Store))) Store) (Subscript (Name &adj:1 Load) (_slice_content (Name &u:1 Load)) Load) (/seq (If (Compare (BinOp (Subscript (Name &dist:1 Load) (_slice_content (Name &u:1 Load)) Load) Add (Name &w:1 Load)) (list Lt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Load))) (/seq (Assign (list (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Store)) (BinOp (Subscript (Name &dist:1 Load) (_slice_content (Name &u:1 Load)) Load) Add (Name &w:1 Load)) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Load)) (_starred_content (Name &v:1 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &min_cost_to_move_armies:0 (arguments nil (list (arg &n:2 None None) (arg &edges:2 None None) (arg &armies:2 None None)) None nil nil None nil) (/seq (fn_13 &n:2 &_:3 &adj:2) (For (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store)) (_starred_content (Name &w:2 Store))) Store) (Name &edges:2 Load) (/seq (/splice (fn_4 (Name &adj:2 Load) &w:2 &v:2 &u:2))) (/seq) None) (Assign (list (Name &target_nation:2 Store)) (Call (Name g_max Load) (list (_starred_content (fn_11 &n:2))) (list (keyword s_key (Lambda (arguments nil (list (arg &i:6 None None)) None nil nil None nil) (Subscript (Subscript (Name &armies:2 Load) (_slice_content (Name &i:6 Load)) Load) (_slice_content (Constant i1 None)) Load))))) None) (Assign (list (Name &min_distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &target_nation:2 Load)) (_starred_content (Name &adj:2 Load)) (_starred_content (Name &n:2 Load))) nil) None) (Assign (list (Name &total_cost:2 Store)) (Constant i0 None) None) (For (Name &nation:2 Store) (fn_11 &n:2) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store)) (Subscript (Name &armies:2 Load) (_slice_content (Name &nation:2 Load)) Load) None) (If (Compare (Name &x:2 Load) (list Lt) (list (Name &y:2 Load))) (/seq (AugAssign (Name &total_cost:2 Store) Add (BinOp (BinOp (Name &y:2 Load) Sub (Name &x:2 Load)) Mult (Subscript (Name &min_distances:2 Load) (_slice_content (Name &nation:2 Load)) Load)))) (/seq))) (/seq) None) (Return (Name &total_cost:2 Load))) nil None None) (fn_6 &n:0 &_:4 &edges:0 &i:5 &armies:0 &min_cost_to_move_armies:0)) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &c:1 Store))) Store) (Name &routes:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Name &u:1 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:1 Load)) (_starred_content (Name &v:1 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Name &v:1 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:1 Load)) (_starred_content (Name &u:1 Load))) Load))) nil))) (/seq) None) (/splice (fn_16 (/seq (Assign (list (Tuple (list (_starred_content (Name &total_cost:2 Store)) (_starred_content (Name &excess_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (fn_7 &node:2 &armies:1))) nil))) Load) None) (For (Tuple (list (_starred_content (Name &cost:2 Store)) (_starred_content (Name &child:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &child:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &child_cost:2 Store)) (_starred_content (Name &child_excess:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &child:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &total_cost:2 Store) Add (BinOp (Name &child_cost:2 Load) Add (BinOp (Name &cost:2 Load) Mult (Call (Name g_abs Load) (list (_starred_content (Name &child_excess:2 Load))) nil)))) (AugAssign (Name &excess_armies:2 Store) Add (Name &child_excess:2 Load))) (/seq) None) (Return (Tuple (list (_starred_content (Name &total_cost:2 Load)) (_starred_content (Name &excess_armies:2 Load))) Load))) &parent:2 &node:2 &dfs:1 &_:1 &total_cost:1))) &armies:1 &routes:1 &n:1 &min_move_cost:0 &n:0 &routes:0 &armies:0))) nil)",
            "(Module (/seq (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (FunctionDef &find:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Subscript (Name &parent:0 Load) (_slice_content (Name &x:1 Load)) Load) (list NotEq) (list (Name &x:1 Load))) (/seq (Assign (list (Subscript (Name &parent:0 Load) (_slice_content (Name &x:1 Load)) Store)) (Call (Name &find:0 Load) (list (_starred_content (Subscript (Name &parent:0 Load) (_slice_content (Name &x:1 Load)) Load))) nil) None)) (/seq)) (Return (Subscript (Name &parent:0 Load) (_slice_content (Name &x:1 Load)) Load))) nil None None) (FunctionDef &merge:0 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store)) (Tuple (list (_starred_content (Call (Name &find:0 Load) (list (_starred_content (Name &x:2 Load))) nil)) (_starred_content (Call (Name &find:0 Load) (list (_starred_content (Name &y:2 Load))) nil))) Load) None) (If (Compare (Name &x:2 Load) (list NotEq) (list (Name &y:2 Load))) (/seq (If (Compare (Subscript (Name &rank:0 Load) (_slice_content (Name &x:2 Load)) Load) (list Gt) (list (Subscript (Name &rank:0 Load) (_slice_content (Name &y:2 Load)) Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &y:2 Store))) Store)) (Tuple (list (_starred_content (Name &y:2 Load)) (_starred_content (Name &x:2 Load))) Load) None)) (/seq)) (Assign (list (Subscript (Name &parent:0 Load) (_slice_content (Name &x:2 Load)) Store)) (Name &y:2 Load) None) (If (Compare (Subscript (Name &rank:0 Load) (_slice_content (Name &x:2 Load)) Load) (list Eq) (list (Subscript (Name &rank:0 Load) (_slice_content (Name &y:2 Load)) Load))) (/seq (AugAssign (Subscript (Name &rank:0 Load) (_slice_content (Name &y:2 Load)) Store) Add (Constant i1 None))) (/seq))) (/seq))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &adj:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &parent:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil))) nil) None) (Assign (list (Name &rank:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &edges:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (fn_22 &n:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (fn_12 (Name &input:0 Load)) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (Expr (Call (Attribute (Name &edges:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &u:0 Load)) (_starred_content (Name &v:0 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &adj:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &v:0 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &adj:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &c:0 Load)) (_starred_content (Name &u:0 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &required:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &available:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &available:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &required:0 Load) (_slice_content (Name &i:0 Load)) Store))) Store)) (fn_12 (Name &input:0 Load)) None)) (/seq) None) (Assign (list (Name &pq:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &available:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Gt) (list (Subscript (Name &required:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &pq:0 Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Subscript (Name &required:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Name &i:0 Load))) Load))) nil))) (/seq (If (Compare (Subscript (Name &available:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Lt) (list (Subscript (Name &required:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &pq:0 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Subscript (Name &required:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &available:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Name &i:0 Load))) Load))) nil))) (/seq))))) (/seq) None) (Assign (list (Name &cost:0 Store)) (Constant i0 None) None) (While (Name &pq:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &nation:0 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:0 Load))) nil) None) (If (Compare (Name &c:0 Load) (list Gt) (list (Constant i0 None))) (/seq (For (Tuple (list (_starred_content (Name &weight:0 Store)) (_starred_content (Name &adj_nation:0 Store))) Store) (Subscript (Name &adj:0 Load) (_slice_content (Name &nation:0 Load)) Load) (/seq (If (Compare (Subscript (Name &available:0 Load) (_slice_content (Name &nation:0 Load)) Load) (list Lt) (list (Subscript (Name &required:0 Load) (_slice_content (Name &nation:0 Load)) Load))) (/seq (Assign (list (Name &transfer:0 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Subscript (Name &required:0 Load) (_slice_content (Name &nation:0 Load)) Load) Sub (Subscript (Name &available:0 Load) (_slice_content (Name &nation:0 Load)) Load))) (_starred_content (Subscript (Name &available:0 Load) (_slice_content (Name &adj_nation:0 Load)) Load))) nil) None) (AugAssign (Subscript (Name &available:0 Load) (_slice_content (Name &nation:0 Load)) Store) Add (Name &transfer:0 Load)) (AugAssign (Subscript (Name &available:0 Load) (_slice_content (Name &adj_nation:0 Load)) Store) Sub (Name &transfer:0 Load)) (AugAssign (Name &cost:0 Store) Add (BinOp (Name &transfer:0 Load) Mult (Name &weight:0 Load))) (If (Compare (Subscript (Name &available:0 Load) (_slice_content (Name &nation:0 Load)) Load) (list Eq) (list (Subscript (Name &required:0 Load) (_slice_content (Name &nation:0 Load)) Load))) (/seq Break) (/seq))) (/seq))) (/seq) None)) (/seq (AugAssign (Subscript (Name &available:0 Load) (_slice_content (Name &nation:0 Load)) Store) Sub (Subscript (Name &required:0 Load) (_slice_content (Name &nation:0 Load)) Load))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &cost:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_1 (/seq (/splice (fn_2 &graph:1 &c:1 &v:1 &u:1 &routes:1)) (/splice (fn_16 (/seq (Assign (list (Tuple (list (_starred_content (Name &cost:2 Store)) (_starred_content (Name &extra_armies:2 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (fn_7 &node:2 &armies:1))) Load) None) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &move_cost:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list Eq) (list (Name &parent:2 Load))) (/seq Continue) (/seq)) (Assign (list (Tuple (list (_starred_content (Name &child_cost:2 Store)) (_starred_content (Name &child_extra:2 Store))) Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load)) (_starred_content (Name &node:2 Load))) nil) None) (AugAssign (Name &cost:2 Store) Add (BinOp (Name &child_cost:2 Load) Add (BinOp (Call (Name g_abs Load) (list (_starred_content (Name &child_extra:2 Load))) nil) Mult (Name &move_cost:2 Load)))) (AugAssign (Name &extra_armies:2 Store) Add (Name &child_extra:2 Load))) (/seq) None) (Return (Tuple (list (_starred_content (Name &cost:2 Load)) (_starred_content (Name &extra_armies:2 Load))) Load))) &parent:2 &node:2 &dfs:1 &_:1 &min_cost:1))) &armies:1 &routes:1 &n:1 &min_cost_to_move_armies:0 &n:0 &routes:0 &armies:0))) nil)"
        ]
    },
    "765": {
        "abstractions": [
            {
                "body": "(/seq (FunctionDef %7 (arguments nil (list (arg %6 None None) (arg %5 None None) (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %12 Store)) (_starred_content (Name %11 Store)) (_starred_content (Name %10 Store)) (_starred_content (Name %9 Store)) (_starred_content (Name %8 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %13 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Name %12 Load)) (_starred_content (Name %11 Load)) (_starred_content (Name %10 Load)) (_starred_content (Name %9 Load)) (_starred_content (Name %8 Load)) (_starred_content (Name %13 Load))) nil))) nil)))",
                "sym_arity": 13,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BoolOp Or (list (BoolOp And (list (Compare (Name %4 Load) (list GtE) (list (Name %1 Load))) (Compare (Name %2 Load) (list GtE) (list (Name %3 Load))))) (BoolOp And (list (Compare (Name %4 Load) (list GtE) (list (Name %3 Load))) (Compare (Name %2 Load) (list GtE) (list (Name %1 Load)))))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (FunctionDef %7 (arguments nil (list (arg %6 None None) (arg %5 None None) (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i2 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Constant i5 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %7 Load) (list (_starred_content (Constant i3 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None))) Load))) nil))) nil)))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %6 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %8 Store)) (Call (Name %7 Load) (list (_starred_content (Name %5 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load)) (_starred_content (Name %6 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name %8 Load))) nil)))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) ?0 (Return (IfExp (Compare (Name %2 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Name %2 Load) (UnaryOp USub (Constant i1 None)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (BoolOp Or (list (BoolOp And (list (Compare (Name %4 Load) (list LtE) (list (Name %1 Load))) (Compare (Name %2 Load) (list LtE) (list (Name %3 Load))))) (BoolOp And (list (Compare (Name %4 Load) (list LtE) (list (Name %3 Load))) (Compare (Name %2 Load) (list LtE) (list (Name %1 Load))))))) (/seq (Return #0)) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None))))) ?0 (Return (UnaryOp USub (Constant i1 None))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(IfExp (Compare (Name %1 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (UnaryOp USub (Constant i1 None)) (Name %1 Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %4 None None) (arg %2 None None) (arg %1 None None) (arg %3 None None) (arg %7 None None) (arg %6 None None)) None nil nil None nil) (/seq (If (fn_2 %4 %3 %2 %1) (/seq (Return (Constant i0 None))) (/seq)) (/splice (fn_5 %6 %5 (/choiceseq (Assign (list (Name %5 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) #0)))) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %2 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (BoolOp And (list (Compare (Name %4 Load) (list GtE) (list (Name %3 Load))) (Compare (Name %2 Load) (list GtE) (list (Name %1 Load))))) (/seq (Return #0)) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) Load) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Assign (list (Name %2 Store)) (Call (Name g_min Load) (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) None) Break)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (If (Compare #0 (list In) (list (Name %1 Load))) (/seq Continue) (/seq)) (Expr (Call (Attribute (Name %1 Load) s_add Load) (list (_starred_content #0)) nil)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (fn_1 (/seq (/splice (fn_5 &extensions:1 &res:1 (/choiceseq (FunctionDef &min_extensions:1 (arguments nil (list (arg &req_a:2 None None) (arg &req_b:2 None None)) None nil nil None nil) (/seq (fn_13 (Constant i0 None) &req_b:2 &w:1 &req_a:2 &h:1) (If (BoolOp And (list (Compare (Name &h:1 Load) (list Lt) (list (Name &req_a:2 Load))) (Compare (Name &w:1 Load) (list Lt) (list (Name &req_b:2 Load))))) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq)) (Assign (list (Name &pq:2 Store)) (List nil Load) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &pq:2 Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) nil)) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Name &ext:2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &extensions:1 Load)) (_starred_content (Constant i1 None))) nil) (/seq (Assign (list (Name &new_pq:2 Store)) (List nil Load) None) (While (Name &pq:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &used:2 Store)) (_starred_content (Name &cur_h:2 Store)) (_starred_content (Name &cur_w:2 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:2 Load))) nil) None) (fn_13 (UnaryOp USub (Name &used:2 Load)) &req_b:2 &cur_w:2 &req_a:2 &cur_h:2) (If (Compare (Name &cur_h:2 Load) (list Lt) (list (Name &req_a:2 Load))) (/seq (Assign (list (Name &next_h:2 Store)) (BinOp (Name &cur_h:2 Load) Mult (Name &ext:2 Load)) None) (fn_13 (Name &i:2 Load) &req_b:2 &cur_w:2 &req_a:2 &next_h:2) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &new_pq:2 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &used:2 Load) Sub (Constant i1 None))) (_starred_content (Name &next_h:2 Load)) (_starred_content (Name &cur_w:2 Load))) Load))) nil))) (/seq)) (If (Compare (Name &cur_w:2 Load) (list Lt) (list (Name &req_b:2 Load))) (/seq (Assign (list (Name &next_w:2 Store)) (BinOp (Name &cur_w:2 Load) Mult (Name &ext:2 Load)) None) (fn_13 (Name &i:2 Load) &req_b:2 &next_w:2 &req_a:2 &cur_h:2) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &new_pq:2 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &used:2 Load) Sub (Constant i1 None))) (_starred_content (Name &cur_h:2 Load)) (_starred_content (Name &next_w:2 Load))) Load))) nil))) (/seq))) (/seq)) (Assign (list (Name &pq:2 Store)) (Name &new_pq:2 Load) None)) (/seq) None) (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) nil None None) (Assign (list (Name &res:1 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &min_extensions:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)) (_starred_content (Call (Name &min_extensions:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) nil))) nil) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (/seq (fn_10 (For (Name &perm:1 Store) (Call (Name g_permutations Load) (list (_starred_content (Name &extensions:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &new_h:1 Store)) (_starred_content (Name &new_w:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (Assign (list (Name &used:1 Store)) (Constant i0 None) None) (For (Name &extension:1 Store) (Name &perm:1 Load) (/seq (If (BoolOp And (list (Compare (Name &new_h:1 Load) (list GtE) (list (Name &a:1 Load))) (Compare (Name &new_w:1 Load) (list GtE) (list (Name &b:1 Load))))) (/seq Break) (/seq)) (If (BoolOp And (list (Compare (Name &new_h:1 Load) (list Lt) (list (Name &a:1 Load))) (BoolOp Or (list (Compare (BinOp (Name &new_h:1 Load) Mult (Name &extension:1 Load)) (list GtE) (list (Name &a:1 Load))) (Compare (Name &new_w:1 Load) (list Lt) (list (Name &b:1 Load))))))) (/seq (AugAssign (Name &new_h:1 Store) Mult (Name &extension:1 Load))) (/seq (If (Compare (Name &new_w:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq (AugAssign (Name &new_w:1 Store) Mult (Name &extension:1 Load))) (/seq Break)))) (AugAssign (Name &used:1 Store) Add (Constant i1 None)) (If (fn_2 &a:1 &new_w:1 &b:1 &new_h:1) (/seq (Assign (list (Name &result:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &result:1 Load)) (_starred_content (Name &used:1 Load))) nil) None) Break) (/seq))) (/seq) None)) (/seq) None) &h:1 &b:1 &w:1 &a:1 &result:1 &extensions:1 &n:1 &min_extensions:0) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &min_extensions:0 &result:0))) nil)",
            "(Module (fn_1 (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &helper:1 (arguments nil (list (arg &h:2 None None) (arg &w:2 None None) (arg &idx:2 None None)) None nil nil None nil) (/seq (fn_13 (Constant i0 None) &b:1 &w:2 &a:1 &h:2) (fn_11 &extensions:1 &idx:2) (Return (BinOp (Call (Name g_min Load) (list (_starred_content (Call (Name &helper:1 Load) (list (_starred_content (BinOp (Name &h:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (Name &w:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil)) (_starred_content (Call (Name &helper:1 Load) (list (_starred_content (Name &h:2 Load)) (_starred_content (BinOp (Name &w:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil))) nil) Add (Constant i1 None)))) nil None None) (Assign (list (Name &result:1 Store)) (Call (Name &helper:1 Load) (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) nil) None) (If (Compare (Name &result:1 Load) (list Lt) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Return (Name &result:1 Load))) (/seq)) (Assign (list (Name &result:1 Store)) (Call (Name &helper:1 Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Constant i0 None))) nil) None) (If (Compare (Name &result:1 Load) (list Lt) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Return (Name &result:1 Load))) (/seq)))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_1 (/seq (fn_6 (Constant i0 None) &h:1 &b:1 &w:1 &a:1) (/splice (fn_7 &mult:1 (/choiceseq (FunctionDef &attempt:1 (arguments nil (list (arg &use_h:2 None None) (arg &left:2 None None) (arg &right:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &height:2 Store)) (Name &h:1 Load) None) (Assign (list (Name &width:2 Store)) (Name &w:1 Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &use_h:2 Load))) nil) (/seq (AugAssign (Name &height:2 Store) Mult (Subscript (Name &mult:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &use_h:2 Load)) (_starred_content (BinOp (Name &use_h:2 Load) Add (Name &left:2 Load)))) nil) (/seq (AugAssign (Name &width:2 Store) Mult (Subscript (Name &mult:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq) None) (fn_6 (Constant True None) &height:2 &b:1 &width:2 &a:1) (Return (Constant False None))) nil None None) (For (Name &h_used:1 Store) (fn_17 &n:1) (/seq (For (Name &w_used:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:1 Load) Add (Constant i1 None)) Sub (Name &h_used:1 Load)))) nil) (/seq (If (Compare (BinOp (Name &h_used:1 Load) Add (Name &w_used:1 Load)) (list Gt) (list (Name &n:1 Load))) (/seq Break) (/seq)) (If (Call (Name &attempt:1 Load) (list (_starred_content (Name &h_used:1 Load)) (_starred_content (Name &w_used:1 Load)) (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &h_used:1 Load)) Sub (Name &w_used:1 Load)))) nil) (/seq (Return (BinOp (Name &h_used:1 Load) Add (Name &w_used:1 Load)))) (/seq))) (/seq) None)) (/seq) None))))) &mult:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0 &n:0 &w:0 &h:0 &b:0 &a:0 &mult:0) nil)",
            "(Module (fn_3 (/seq (If (fn_2 &a:1 &w:1 &b:1 &h:1) (/seq (Return (Constant i0 None))) (/seq)) (fn_12 &extensions:1) (Assign (list (Name &min_ext:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &order:1 Store) (Call (Name g_permutations Load) (list (_starred_content (Name &extensions:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &temp_h:1 Store)) (_starred_content (Name &temp_w:1 Store)) (_starred_content (Name &used_ext:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) Load) None) (For (Name &extension:1 Store) (Name &order:1 Load) (/seq (If (BoolOp And (list (BoolOp Or (list (Compare (Name &temp_h:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &temp_h:1 Load) (list Lt) (list (Name &b:1 Load))))) (BoolOp Or (list (Compare (Name &temp_w:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &temp_w:1 Load) (list Lt) (list (Name &b:1 Load))))))) (/seq (If (BoolOp And (list (Compare (Call (Name g_max Load) (list (_starred_content (BinOp (Name &temp_h:1 Load) Mult (Name &extension:1 Load))) (_starred_content (Name &temp_w:1 Load))) nil) (list GtE) (list (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (Compare (Call (Name g_min Load) (list (_starred_content (BinOp (Name &temp_h:1 Load) Mult (Name &extension:1 Load))) (_starred_content (Name &temp_w:1 Load))) nil) (list GtE) (list (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))))) (/seq (AugAssign (Name &temp_h:1 Store) Mult (Name &extension:1 Load))) (/seq (If (BoolOp And (list (Compare (Call (Name g_max Load) (list (_starred_content (BinOp (Name &temp_w:1 Load) Mult (Name &extension:1 Load))) (_starred_content (Name &temp_h:1 Load))) nil) (list GtE) (list (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) (Compare (Call (Name g_min Load) (list (_starred_content (BinOp (Name &temp_w:1 Load) Mult (Name &extension:1 Load))) (_starred_content (Name &temp_h:1 Load))) nil) (list GtE) (list (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))))) (/seq (AugAssign (Name &temp_w:1 Store) Mult (Name &extension:1 Load))) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &temp_h:1 Load) Sub (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)))) nil) (list GtE) (list (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &temp_w:1 Load) Sub (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil)))) nil))) (/seq (AugAssign (Name &temp_h:1 Store) Mult (Name &extension:1 Load))) (/seq (AugAssign (Name &temp_w:1 Store) Mult (Name &extension:1 Load))))))))) (/seq (If (BoolOp Or (list (Compare (Name &temp_h:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &temp_h:1 Load) (list Lt) (list (Name &b:1 Load))))) (/seq (AugAssign (Name &temp_h:1 Store) Mult (Name &extension:1 Load))) (/seq (If (BoolOp Or (list (Compare (Name &temp_w:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &temp_w:1 Load) (list Lt) (list (Name &b:1 Load))))) (/seq (AugAssign (Name &temp_w:1 Store) Mult (Name &extension:1 Load))) (/seq)))))) (AugAssign (Name &used_ext:1 Store) Add (Constant i1 None)) (If (fn_2 &a:1 &temp_w:1 &b:1 &temp_h:1) (/seq (Assign (list (Name &min_ext:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_ext:1 Load)) (_starred_content (Name &used_ext:1 Load))) nil) None) Break) (/seq))) (/seq) None) (If (Compare (Name &min_ext:1 Load) (list Lt) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq Break) (/seq))) (/seq) None) (Return (fn_9 &min_ext:1))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0) nil)",
            "(Module (fn_1 (/seq (fn_14 &b:1 &a:1) (fn_12 &extensions:1) (FunctionDef &min_extensions_needed:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None) (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (fn_13 (Constant i0 None) &b:2 &y:2 &a:2 &x:2) (For (Name &i:2 Store) (fn_17 &n:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_x:2 Store)) (_starred_content (Name &current_y:2 Store))) Store)) (Tuple (list (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load))) Load) None) (For (Name &extension:2 Store) (Call (Name g_nlargest Load) (list (_starred_content (Name &i:2 Load)) (_starred_content (Name &extensions:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &current_x:2 Load) (list Lt) (list (Name &a:2 Load))) (BoolOp Or (list (Compare (Name &current_x:2 Load) (list LtE) (list (Name &current_y:2 Load))) (Compare (Name &current_y:2 Load) (list GtE) (list (Name &b:2 Load))))))) (/seq (AugAssign (Name &current_x:2 Store) Mult (Name &extension:2 Load))) (/seq (AugAssign (Name &current_y:2 Store) Mult (Name &extension:2 Load)))) (fn_13 (Name &i:2 Load) &b:2 &current_y:2 &a:2 &current_x:2)) (/seq) None)) (/seq) None) (Return (UnaryOp USub (Constant i1 None)))) nil None None) (Assign (list (Name &ans1:1 Store)) (Call (Name &min_extensions_needed:1 Load) (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil) None) (Assign (list (Name &ans2:1 Store)) (Call (Name &min_extensions_needed:1 Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) nil) None) (If (Compare (Name &ans1:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Return (Name &ans2:1 Load))) (/seq)) (If (Compare (Name &ans2:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Return (Name &ans1:1 Load))) (/seq)) (Return (Call (Name g_min Load) (list (_starred_content (Name &ans1:1 Load)) (_starred_content (Name &ans2:1 Load))) nil))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (/seq (FunctionDef &min_extensions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (fn_12 &extensions:1) (fn_6 (Constant i0 None) &h:1 &b:1 &w:1 &a:1) (For (Name &goal:1 Store) (List (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load))) Load) (/seq (Assign (list (Name &needed:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &side:1 Store)) (_starred_content (Name &length:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &goal:1 Load)) (_starred_content (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) nil) (/seq (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &length:1 Load) (list Lt) (list (Name &side:1 Load))) (Compare (Name &count:1 Load) (list Lt) (list (Name &n:1 Load))))) (/seq (For (Name &extension:1 Store) (Name &extensions:1 Load) (/seq (AugAssign (Name &length:1 Store) Mult (Name &extension:1 Load)) (AugAssign (Name &count:1 Store) Add (Constant i1 None)) (If (Compare (Name &length:1 Load) (list GtE) (list (Name &side:1 Load))) (/seq Break) (/seq))) (/seq) None)) (/seq)) (If (Compare (Name &length:1 Load) (list Lt) (list (Name &side:1 Load))) (/seq (Assign (list (Name &count:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None)) (/seq)) (Expr (Call (Attribute (Name &needed:1 Load) s_append Load) (list (_starred_content (Name &count:1 Load))) nil))) (/seq) None) (Expr (Yield (Call (Name g_min Load) (list (_starred_content (Name &needed:1 Load))) nil)))) (/seq) None)) nil None None) (/splice (fn_16 (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &h:2 Store)) (_starred_content (Name &w:2 Store)) (_starred_content (Name &n:2 Store))) Store)) (fn_8) None) (Assign (list (Name &extensions:2 Store)) (Call (Name g_list Load) (list (_starred_content (fn_8))) nil) None) (Assign (list (Name &result:2 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &min_extensions:0 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &h:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &n:2 Load)) (_starred_content (Name &extensions:2 Load))) nil))) (list (keyword s_default (UnaryOp USub (Constant i1 None))))) None) (If (Compare (Name &result:2 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &minimum_extensions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &is_enough:1 (arguments nil (list (arg &exts:2 None None) (arg &target_a:2 None None) (arg &target_b:2 None None) (arg &size_a:2 None None) (arg &size_b:2 None None)) None nil nil None nil) (/seq (For (Name &ext:2 Store) (Name &exts:2 Load) (/seq (If (Compare (Name &size_a:2 Load) (list Lt) (list (Name &target_a:2 Load))) (/seq (AugAssign (Name &size_a:2 Store) Mult (Name &ext:2 Load))) (/seq (If (Compare (Name &size_b:2 Load) (list Lt) (list (Name &target_b:2 Load))) (/seq (AugAssign (Name &size_b:2 Store) Mult (Name &ext:2 Load))) (/seq Break))))) (/seq) None) (Return (BoolOp And (list (Compare (Name &size_a:2 Load) (list GtE) (list (Name &target_a:2 Load))) (Compare (Name &size_b:2 Load) (list GtE) (list (Name &target_b:2 Load))))))) nil None None) (For (Name &i:1 Store) (fn_17 &n:1) (/seq (If (BoolOp Or (list (Call (Name &is_enough:1 Load) (list (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Name &i:1 Load) None)) Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) nil) (Call (Name &is_enough:1 Load) (list (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Name &i:1 Load) None)) Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) nil))) (/seq (Return (Name &i:1 Load))) (/seq))) (/seq) None))))) nil None None) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &minimum_extensions:0 &min_exts_required:0))) nil)",
            "(Module (fn_1 (/seq (/splice (fn_7 &extensions:1 (/choiceseq (Assign (list (Name &possibilities:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) Load) None) (For (Name &extension:1 Store) (Name &extensions:1 Load) (/seq (Assign (list (Name &new_possibilities:1 Store)) (Call (Name g_set Load) (list (_starred_content (Name &possibilities:1 Load))) nil) None) (For (Tuple (list (_starred_content (Name &used:1 Store)) (_starred_content (Name &height:1 Store)) (_starred_content (Name &width:1 Store))) Store) (Name &possibilities:1 Load) (/seq (Assign (list (Name &new_height:1 Store)) (BinOp (Name &height:1 Load) Mult (Name &extension:1 Load)) None) (If (fn_2 &a:1 &width:1 &b:1 &new_height:1) (/seq (Return (BinOp (Name &used:1 Load) Add (Constant i1 None)))) (/seq)) (Expr (Call (Attribute (Name &new_possibilities:1 Load) s_add Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &used:1 Load) Add (Constant i1 None))) (_starred_content (Name &new_height:1 Load)) (_starred_content (Name &width:1 Load))) Load))) nil)) (Assign (list (Name &new_width:1 Store)) (BinOp (Name &width:1 Load) Mult (Name &extension:1 Load)) None) (If (fn_2 &a:1 &new_width:1 &b:1 &height:1) (/seq (Return (BinOp (Name &used:1 Load) Add (Constant i1 None)))) (/seq)) (Expr (Call (Attribute (Name &new_possibilities:1 Load) s_add Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &used:1 Load) Add (Constant i1 None))) (_starred_content (Name &height:1 Load)) (_starred_content (Name &new_width:1 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &possibilities:1 Store)) (Call (Name g_list Load) (list (_starred_content (Name &new_possibilities:1 Load))) nil) None)) (/seq) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_1 (/seq (If (fn_2 &a:1 &w:1 &b:1 &h:1) (/seq (Return (Constant i0 None))) (/seq)) (fn_12 &extensions:1) (FunctionDef &bfs_target:1 (arguments nil (list (arg &h:2 None None) (arg &w:2 None None) (arg &a:2 None None) (arg &b:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &visited:2 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &heap:2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name &h:2 Load)) (_starred_content (Name &w:2 Load))) Load))) Load) None) (While (Name &heap:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &extensions_used:2 Store)) (_starred_content (Name &cur_h:2 Store)) (_starred_content (Name &cur_w:2 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &heap:2 Load))) nil) None) (If (fn_2 &a:2 &cur_w:2 &b:2 &cur_h:2) (/seq (Return (UnaryOp USub (Name &extensions_used:2 Load)))) (/seq)) (/splice (fn_19 (Tuple (list (_starred_content (Name &cur_h:2 Load)) (_starred_content (Name &cur_w:2 Load))) Load) &visited:2)) (If (Compare (UnaryOp USub (Name &extensions_used:2 Load)) (list Lt) (list (Name &n:1 Load))) (/seq (For (Name &ext:2 Store) (Subscript (Name &extensions:1 Load) (_slice_slice (Slice (BinOp (UnaryOp USub (Name &extensions_used:2 Load)) Sub (Constant i1 None)) None None)) Load) (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &heap:2 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &extensions_used:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &cur_h:2 Load) Mult (Name &ext:2 Load))) (_starred_content (Name &cur_w:2 Load))) Load))) nil)) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &heap:2 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &extensions_used:2 Load) Sub (Constant i1 None))) (_starred_content (Name &cur_h:2 Load)) (_starred_content (BinOp (Name &cur_w:2 Load) Mult (Name &ext:2 Load)))) Load))) nil))) (/seq) None)) (/seq))) (/seq)) (Return (UnaryOp USub (Constant i1 None)))) nil None None) (Return (Call (Name &bfs_target:1 Load) (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) nil))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_1 (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &can_fit:1 (arguments nil (list (arg &used_extensions:2 None None)) None nil nil None nil) (/seq (For (Name &axis_extensions:2 Store) (Call (Name g_combinations Load) (list (_starred_content (Name &extensions:1 Load)) (_starred_content (Name &used_extensions:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &new_h:2 Store)) (_starred_content (Name &new_w:2 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &ext:2 Store) (Name &axis_extensions:2 Load) (/seq (If (BoolOp And (list (Compare (Name &new_h:2 Load) (list Lt) (list (Name &a:1 Load))) (Compare (BinOp (BinOp (BinOp (Name &a:1 Load) Add (Name &new_w:2 Load)) Sub (Constant i1 None)) FloorDiv (Name &new_w:2 Load)) (list GtE) (list (BinOp (BinOp (BinOp (Name &a:1 Load) Add (BinOp (Name &new_h:2 Load) Mult (Name &ext:2 Load))) Sub (Constant i1 None)) FloorDiv (BinOp (Name &new_h:2 Load) Mult (Name &ext:2 Load))))))) (/seq (AugAssign (Name &new_h:2 Store) Mult (Name &ext:2 Load))) (/seq (If (Compare (Name &new_w:2 Load) (list Lt) (list (Name &b:1 Load))) (/seq (AugAssign (Name &new_w:2 Store) Mult (Name &ext:2 Load))) (/seq (If (Compare (Name &new_h:2 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &new_h:2 Store) Mult (Name &ext:2 Load))) (/seq Break))))))) (/seq) None) (If (fn_2 &a:1 &new_w:2 &b:1 &new_h:2) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (For (Name &used_extensions:1 Store) (fn_17 &n:1) (/seq (If (Call (Name &can_fit:1 Load) (list (_starred_content (Name &used_extensions:1 Load))) nil) (/seq (Return (Name &used_extensions:1 Load))) (/seq))) (/seq) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions_to_fit_rectangle:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (/seq (FunctionDef &min_extensions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &can_fit_with_extensions:1 (arguments nil (list (arg &target_a:2 None None) (arg &target_b:2 None None) (arg &available_extensions:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_a:2 Store)) (_starred_content (Name &current_b:2 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &ext:2 Store) (Name &available_extensions:2 Load) (/seq (fn_13 (Constant True None) &target_b:2 &current_b:2 &target_a:2 &current_a:2) (If (BoolOp And (list (Compare (Name &current_a:2 Load) (list Lt) (list (Name &target_a:2 Load))) (BoolOp Or (list (Compare (Name &current_b:2 Load) (list GtE) (list (Name &target_b:2 Load))) (Compare (BinOp (Name &current_a:2 Load) Mult (Name &ext:2 Load)) (list LtE) (list (Name &current_b:2 Load))))))) (/seq (AugAssign (Name &current_a:2 Store) Mult (Name &ext:2 Load))) (/seq (AugAssign (Name &current_b:2 Store) Mult (Name &ext:2 Load))))) (/seq) None) (Return (BoolOp And (list (Compare (Name &current_a:2 Load) (list GtE) (list (Name &target_a:2 Load))) (Compare (Name &current_b:2 Load) (list GtE) (list (Name &target_b:2 Load))))))) nil None None) (For (Name &extensions_used:1 Store) (fn_17 &n:1) (/seq (If (BoolOp Or (list (Call (Name &can_fit_with_extensions:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Name &extensions_used:1 Load) None)) Load))) nil) (Call (Name &can_fit_with_extensions:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Name &extensions_used:1 Load) None)) Load))) nil))) (/seq (Return (Name &extensions_used:1 Load))) (/seq))) (/seq) None))))) nil None None) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &min_extensions:0 &result:0))) nil)",
            "(Module (fn_1 (/seq (fn_6 (Constant i0 None) &h:1 &b:1 &w:1 &a:1) (Assign (list (Name &extension:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &extension:1 Load))) (list (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &answer:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &flip:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &width:1 Store)) (_starred_content (Name &height:1 Store))) Store)) (Tuple (list (_starred_content (Name &w:1 Load)) (_starred_content (Name &h:1 Load))) Load) None) (If (Name &flip:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &width:1 Store)) (_starred_content (Name &height:1 Store))) Store)) (Tuple (list (_starred_content (Name &height:1 Load)) (_starred_content (Name &width:1 Load))) Load) None)) (/seq)) (For (Name &ext_count:1 Store) (fn_17 &n:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_width:1 Store)) (_starred_content (Name &current_height:1 Store))) Store)) (Tuple (list (_starred_content (Name &width:1 Load)) (_starred_content (Name &height:1 Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &ext_count:1 Load))) nil) (/seq (If (Compare (Name &current_width:1 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &current_width:1 Store) Mult (Subscript (Name &extension:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (AugAssign (Name &current_height:1 Store) Mult (Subscript (Name &extension:1 Load) (_slice_content (Name &i:1 Load)) Load)))) (If (fn_2 &a:1 &current_height:1 &b:1 &current_width:1) (fn_18 &ext_count:1 &answer:1) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Tuple (list (_starred_content (Name &width:1 Store)) (_starred_content (Name &height:1 Store))) Store)) (Tuple (list (_starred_content (Name &height:1 Load)) (_starred_content (Name &width:1 Load))) Load) None)) (/seq) None) (Return (IfExp (Compare (Name &answer:1 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Name &answer:1 Load) (UnaryOp USub (Constant i1 None))))) &extension:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extension:0) nil)",
            "(Module (fn_1 (/seq (/splice (fn_5 &extensions:1 &min_extensions:1 (/choiceseq (Assign (list (Name &goal:1 Store)) (List (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) Load) None) (FunctionDef &dfs:1 (arguments nil (list (arg &i:2 None None) (arg &width:2 None None) (arg &height:2 None None) (arg &cnt:2 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (BoolOp And (list (Compare (Name &width:2 Load) (list GtE) (list (Subscript (Name &goal:1 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Name &height:2 Load) (list GtE) (list (Subscript (Name &goal:1 Load) (_slice_content (Constant i1 None)) Load))))) (BoolOp And (list (Compare (Name &width:2 Load) (list GtE) (list (Subscript (Name &goal:1 Load) (_slice_content (Constant i1 None)) Load))) (Compare (Name &height:2 Load) (list GtE) (list (Subscript (Name &goal:1 Load) (_slice_content (Constant i0 None)) Load))))))) (/seq (Return (Name &cnt:2 Load))) (/seq)) (fn_11 &extensions:1 &i:2) (Return (Call (Name g_min Load) (list (_starred_content (Call (Name &dfs:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &width:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (_starred_content (Name &height:2 Load)) (_starred_content (BinOp (Name &cnt:2 Load) Add (Constant i1 None)))) nil)) (_starred_content (Call (Name &dfs:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) (_starred_content (Name &width:2 Load)) (_starred_content (BinOp (Name &height:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (_starred_content (BinOp (Name &cnt:2 Load) Add (Constant i1 None)))) nil)) (_starred_content (Call (Name &dfs:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) (_starred_content (Name &width:2 Load)) (_starred_content (Name &height:2 Load)) (_starred_content (Name &cnt:2 Load))) nil))) nil))) nil None None) (Assign (list (Name &min_extensions:1 Store)) (Call (Name &dfs:1 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Constant i0 None))) nil) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions_to_fit:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_7 &extensions:1 (/choiceseq (Assign (list (Name &queue:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) Load) None) (Assign (list (Name &seen:1 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) Load))) nil) None) (For (Name &extension:1 Store) (Name &extensions:1 Load) (/seq (Assign (list (Name &new_states:1 Store)) (List nil Load) None) (While (Name &queue:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &steps:1 Store)) (_starred_content (Name &h:1 Store)) (_starred_content (Name &w:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &queue:1 Load))) nil) None) (fn_6 (Name &steps:1 Load) &h:1 &b:1 &w:1 &a:1) (For (Name &new_dim:1 Store) (List (list (_starred_content (BinOp (Name &h:1 Load) Mult (Name &extension:1 Load))) (_starred_content (BinOp (Name &w:1 Load) Mult (Name &extension:1 Load)))) Load) (/seq (Assign (list (Name &new_h_w:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (List (list (_starred_content (BinOp (Name &new_dim:1 Load) FloorDiv (Name &extension:1 Load))) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) nil))) Load))) nil) None) (Assign (list (Name &new_w_h:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (List (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) nil)) (_starred_content (BinOp (Name &new_dim:1 Load) FloorDiv (Name &extension:1 Load)))) Load))) nil) None) (If (BoolOp And (list (Compare (Call (Name g_tuple Load) (list (_starred_content (Name &new_h_w:1 Load))) nil) (list NotIn) (list (Name &seen:1 Load))) (Compare (Subscript (Name &new_h_w:1 Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &new_dim:1 Load))))) (/seq (Expr (Call (Attribute (Name &seen:1 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &new_h_w:1 Load))) nil))) nil)) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &steps:1 Load) Add (Constant i1 None))) (_starred_content (Subscript (Name &new_h_w:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &new_h_w:1 Load) (_slice_content (Constant i1 None)) Load))) Load))) nil))) (/seq)) (If (BoolOp And (list (Compare (Call (Name g_tuple Load) (list (_starred_content (Name &new_w_h:1 Load))) nil) (list NotIn) (list (Name &seen:1 Load))) (Compare (Subscript (Name &new_w_h:1 Load) (_slice_content (Constant i1 None)) Load) (list LtE) (list (Name &new_dim:1 Load))))) (/seq (Expr (Call (Attribute (Name &seen:1 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &new_w_h:1 Load))) nil))) nil)) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &steps:1 Load) Add (Constant i1 None))) (_starred_content (Subscript (Name &new_w_h:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &new_w_h:1 Load) (_slice_content (Constant i1 None)) Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq))) (/seq) None))))) nil None None) (/splice (fn_16 (/seq (/splice (fn_4 &n:2 &w:2 &h:2 &b:2 &a:2 &extensions:2 &solve:0 &result:2))) &main:0))) nil)",
            "(Module (fn_3 (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &can_place:1 (arguments nil (list (arg &am:2 None None) (arg &bm:2 None None) (arg &steps:2 None None) (arg &idx:2 None None)) None nil nil None nil) (/seq (fn_6 (Constant True None) &h:1 &bm:2 &w:1 &am:2) (If (BoolOp Or (list (Compare (Name &steps:2 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &idx:2 Load) (list GtE) (list (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil))))) (/seq (Return (Constant False None))) (/seq)) (Return (BoolOp Or (list (Call (Name &can_place:1 Load) (list (_starred_content (Name &am:2 Load)) (_starred_content (Name &bm:2 Load)) (_starred_content (BinOp (Name &steps:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil) (Call (Name &can_place:1 Load) (list (_starred_content (IfExp (BoolOp And (list (Compare (Name &am:2 Load) (list Gt) (list (Name &h:1 Load))) (Compare (Name &am:2 Load) (list Gt) (list (Name &w:1 Load))))) (BinOp (Name &am:2 Load) FloorDiv (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load)) (Name &am:2 Load))) (_starred_content (IfExp (BoolOp And (list (Compare (Name &bm:2 Load) (list Gt) (list (Name &w:1 Load))) (Compare (Name &bm:2 Load) (list Gt) (list (Name &h:1 Load))))) (BinOp (Name &bm:2 Load) FloorDiv (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load)) (Name &bm:2 Load))) (_starred_content (BinOp (Name &steps:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil))))) nil None None) (If (Call (Name &can_place:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) nil) (/seq (Return (Constant i0 None))) (/seq)) (For (Name &steps:1 Store) (fn_15 (Name &n:1 Load)) (/seq (If (Call (Name &can_place:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &steps:1 Load)) (_starred_content (Constant i0 None))) nil) (/seq (Return (Name &steps:1 Load))) (/seq))) (/seq) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0) nil)",
            "(Module (/seq (FunctionDef &min_extensions_to_fit_rectangle:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (If (fn_2 &a:1 &w:1 &b:1 &h:1) (/seq (Return (Constant i0 None))) (/seq)) (/splice (fn_7 &extensions:1 (/choiceseq (For (Name &used_ext:1 Store) (fn_15 (Name &n:1 Load)) (/seq (For (Name &perm:1 Store) (Call (Name g_permutations Load) (list (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Name &used_ext:1 Load) None)) Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &h_temp:1 Store)) (_starred_content (Name &w_temp:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &ext:1 Store) (Name &perm:1 Load) (/seq (If (BoolOp Or (list (Compare (Name &h_temp:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &w_temp:1 Load) (list Lt) (list (Name &b:1 Load))))) (/seq (If (Compare (Name &h_temp:1 Load) (list Lt) (list (Name &w_temp:1 Load))) (/seq (AugAssign (Name &h_temp:1 Store) Mult (Name &ext:1 Load))) (/seq (AugAssign (Name &w_temp:1 Store) Mult (Name &ext:1 Load))))) (/seq Break))) (/seq) None) (If (fn_2 &a:1 &w_temp:1 &b:1 &h_temp:1) (/seq (Return (Name &used_ext:1 Load))) (/seq))) (/seq) None)) (/seq) None))))) nil None None) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &min_extensions_to_fit_rectangle:0 &result:0))) nil)",
            "(Module (fn_3 (/seq (fn_12 &extensions:1) (FunctionDef &try_fit:1 (arguments nil (list (arg &target_h:2 None None) (arg &target_w:2 None None) (arg &idx:2 None None) (arg &used_extensions:2 None None)) None nil nil None nil) (/seq (fn_11 &extensions:1 &idx:2) (If (BoolOp And (list (Compare (Name &target_h:2 Load) (list LtE) (list (Name &h:1 Load))) (Compare (Name &target_w:2 Load) (list LtE) (list (Name &w:1 Load))))) (/seq (Return (Name &used_extensions:2 Load))) (/seq)) (Return (Call (Name g_min Load) (list (_starred_content (Call (Name &try_fit:1 Load) (list (_starred_content (Name &target_h:2 Load)) (_starred_content (Name &target_w:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None))) (_starred_content (Name &used_extensions:2 Load))) nil)) (_starred_content (Call (Name &try_fit:1 Load) (list (_starred_content (BinOp (Name &target_h:2 Load) FloorDiv (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (Name &target_w:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &used_extensions:2 Load) Add (Constant i1 None)))) nil)) (_starred_content (Call (Name &try_fit:1 Load) (list (_starred_content (Name &target_h:2 Load)) (_starred_content (BinOp (Name &target_w:2 Load) FloorDiv (Subscript (Name &extensions:1 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &used_extensions:2 Load) Add (Constant i1 None)))) nil))) nil))) nil None None) (Assign (list (Name &needed_extensions:1 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &try_fit:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Name &try_fit:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) nil))) nil) None) (Return (fn_9 &needed_extensions:1))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0) nil)",
            "(Module (/seq (FunctionDef &min_extensions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &is_possible:1 (arguments nil (list (arg &a:3 None None) (arg &b:3 None None) (arg &h:3 None None) (arg &w:3 None None) (arg &used_extensions:3 None None)) None nil nil None nil) (/seq (fn_13 (Constant True None) &b:3 &w:3 &a:3 &h:3) (If (Compare (Name &used_extensions:3 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil))) (/seq (Return (Constant False None))) (/seq)) (Return (BoolOp Or (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &b:3 Load)) (_starred_content (BinOp (Name &h:3 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &used_extensions:3 Load)) Load))) (_starred_content (Name &w:3 Load)) (_starred_content (BinOp (Name &used_extensions:3 Load) Add (Constant i1 None)))) nil) (Call (Name &is_possible:1 Load) (list (_starred_content (Name &a:3 Load)) (_starred_content (Name &b:3 Load)) (_starred_content (Name &h:3 Load)) (_starred_content (BinOp (Name &w:3 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &used_extensions:3 Load)) Load))) (_starred_content (BinOp (Name &used_extensions:3 Load) Add (Constant i1 None)))) nil))))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil) Add (Constant i1 None)))) nil) (/seq (If (BoolOp Or (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) nil) (Call (Name &is_possible:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) nil))) (/seq (Return (Name &i:1 Load))) (/seq)) (If (Compare (Name &i:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil))) (/seq (Assign (list (Name &h:1 Store)) (IfExp (Compare (Name &h:1 Load) (list Lt) (list (Name &w:1 Load))) (BinOp (Name &h:1 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Name &h:1 Load)) None) (Assign (list (Name &w:1 Store)) (IfExp (Compare (Name &w:1 Load) (list LtE) (list (Name &h:1 Load))) (BinOp (Name &w:1 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Name &w:1 Load)) None)) (/seq))) (/seq) None))))) nil None None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &params:2 Store)) (Call (Name g_list Load) (list (_starred_content (fn_8))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &h:2 Store)) (_starred_content (Name &w:2 Store)) (_starred_content (Name &n:2 Store))) Store)) (Subscript (Name &params:2 Load) (_slice_slice (Slice (Constant i0 None) (Constant i5 None) None)) Load) None) (Assign (list (Name &extensions:2 Store)) (Call (Name g_list Load) (list (_starred_content (fn_8))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_extensions:0 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &h:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &n:2 Load)) (_starred_content (Name &extensions:2 Load))) nil))) nil))) nil None None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
            "(Module (/seq (fn_10 (For (Name &first_pick:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Name &extensions_copy:1 Store)) (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None None None)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &h_current:1 Store)) (_starred_content (Name &w_current:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (If (Compare (Name &first_pick:1 Load) (list Eq) (list (Constant i0 None))) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &extension:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &extensions_copy:1 Load))) nil) (/seq (If (Compare (Name &h_current:1 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &h_current:1 Store) Mult (Name &extension:1 Load)) (Expr (Call (Attribute (Name &extensions_copy:1 Load) s_pop Load) (list (_starred_content (Name &i:1 Load))) nil)) (If (Compare (Name &h_current:1 Load) (list GtE) (list (Name &a:1 Load))) (/seq Break) (/seq))) (/seq Break))) (/seq) None)) (/seq (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &extension:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &extensions_copy:1 Load))) nil) (/seq (If (Compare (Name &w_current:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq (AugAssign (Name &w_current:1 Store) Mult (Name &extension:1 Load)) (Expr (Call (Attribute (Name &extensions_copy:1 Load) s_pop Load) (list (_starred_content (Name &i:1 Load))) nil)) (If (Compare (Name &w_current:1 Load) (list GtE) (list (Name &b:1 Load))) (/seq Break) (/seq))) (/seq Break))) (/seq) None))) (If (fn_2 &a:1 &w_current:1 &b:1 &h_current:1) (/seq (Assign (list (Name &result:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &result:1 Load)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil) Sub (Call (Name g_len Load) (list (_starred_content (Name &extensions_copy:1 Load))) nil)))) nil) None) Break) (/seq)) (For (Name &second_pick:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (Assign (list (Name &extensions_second_copy:1 Store)) (Subscript (Name &extensions_copy:1 Load) (_slice_slice (Slice None None None)) Load) None) (Assign (list (Tuple (list (_starred_content (Name &h_second:1 Store)) (_starred_content (Name &w_second:1 Store))) Store)) (Tuple (list (_starred_content (Name &h_current:1 Load)) (_starred_content (Name &w_current:1 Load))) Load) None) (If (Compare (Name &second_pick:1 Load) (list Eq) (list (Constant i0 None))) (/seq (For (Name &extension:1 Store) (Name &extensions_second_copy:1 Load) (/seq (If (Compare (Name &h_second:1 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &h_second:1 Store) Mult (Name &extension:1 Load)) (If (Compare (Name &h_second:1 Load) (list GtE) (list (Name &a:1 Load))) (/seq Break) (/seq))) (/seq Break))) (/seq) None)) (/seq (For (Name &extension:1 Store) (Name &extensions_second_copy:1 Load) (/seq (If (Compare (Name &w_second:1 Load) (list Lt) (list (Name &b:1 Load))) (/seq (AugAssign (Name &w_second:1 Store) Mult (Name &extension:1 Load)) (If (Compare (Name &w_second:1 Load) (list GtE) (list (Name &b:1 Load))) (/seq Break) (/seq))) (/seq Break))) (/seq) None))) (If (fn_2 &a:1 &w_second:1 &b:1 &h_second:1) (/seq (Assign (list (Name &result:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &result:1 Load)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &extensions:1 Load))) nil) Sub (Call (Name g_len Load) (list (_starred_content (Name &extensions_second_copy:1 Load))) nil)))) nil) None) Break) (/seq))) (/seq) None)) (/seq) None) &h:1 &b:1 &w:1 &a:1 &result:1 &extensions:1 &n:1 &min_extensions:0) (/splice (fn_16 (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &h:2 Store)) (_starred_content (Name &w:2 Store)) (_starred_content (Name &n:2 Store))) Store)) (fn_8) None) (Assign (list (Name &extensions:2 Store)) (Call (Name g_list Load) (list (_starred_content (fn_8))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_extensions:0 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &h:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &n:2 Load)) (_starred_content (Name &extensions:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (fn_1 (/seq (/splice (fn_7 &extensions:1 (/choiceseq (Assign (list (Name &queue:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load))) Load) None) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) nil nil) None) (While (Name &queue:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &num_used:1 Store)) (_starred_content (Name &cur_h:1 Store)) (_starred_content (Name &cur_w:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &queue:1 Load))) nil) None) (If (fn_2 &a:1 &cur_w:1 &b:1 &cur_h:1) (/seq (Return (Name &num_used:1 Load))) (/seq)) (/splice (fn_19 (Tuple (list (_starred_content (Name &cur_h:1 Load)) (_starred_content (Name &cur_w:1 Load))) Load) &visited:1)) (If (Compare (Name &num_used:1 Load) (list Lt) (list (Name &n:1 Load))) (/seq (Assign (list (Name &next_extension:1 Store)) (Subscript (Name &extensions:1 Load) (_slice_content (Name &num_used:1 Load)) Load) None) (If (BoolOp Or (list (Compare (BinOp (Name &cur_h:1 Load) Mult (Name &next_extension:1 Load)) (list LtE) (list (BinOp (Name &a:1 Load) Mult (Name &next_extension:1 Load)))) (Compare (BinOp (Name &cur_w:1 Load) Mult (Name &next_extension:1 Load)) (list LtE) (list (BinOp (Name &b:1 Load) Mult (Name &next_extension:1 Load)))))) (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &num_used:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &cur_h:1 Load) Mult (Name &next_extension:1 Load))) (_starred_content (Name &cur_w:1 Load))) Load))) nil))) (/seq)) (If (BoolOp Or (list (Compare (BinOp (Name &cur_w:1 Load) Mult (Name &next_extension:1 Load)) (list LtE) (list (BinOp (Name &b:1 Load) Mult (Name &next_extension:1 Load)))) (Compare (BinOp (Name &cur_h:1 Load) Mult (Name &next_extension:1 Load)) (list LtE) (list (BinOp (Name &a:1 Load) Mult (Name &next_extension:1 Load)))))) (/seq (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Name &num_used:1 Load) Add (Constant i1 None))) (_starred_content (Name &cur_h:1 Load)) (_starred_content (BinOp (Name &cur_w:1 Load) Mult (Name &next_extension:1 Load)))) Load))) nil))) (/seq))) (/seq))) (/seq)))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (/seq (FunctionDef &min_extensions:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (fn_12 &extensions:1) (FunctionDef &helper:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &h:2 None None) (arg &w:2 None None) (arg &extensions:2 None None) (arg &idx:2 None None)) None nil nil None nil) (/seq (fn_13 (Constant i0 None) &b:2 &w:2 &a:2 &h:2) (fn_11 &extensions:2 &idx:2) (Assign (list (Name &result:2 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (If (Compare (Name &h:2 Load) (list Lt) (list (Name &a:2 Load))) (/seq (Assign (list (Name &result:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &result:2 Load)) (_starred_content (BinOp (Constant i1 None) Add (Call (Name &helper:1 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (BinOp (Name &h:2 Load) Mult (Subscript (Name &extensions:2 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (Name &w:2 Load)) (_starred_content (Name &extensions:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil)))) nil) None)) (/seq)) (If (Compare (Name &w:2 Load) (list Lt) (list (Name &b:2 Load))) (/seq (Assign (list (Name &result:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &result:2 Load)) (_starred_content (BinOp (Constant i1 None) Add (Call (Name &helper:1 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &h:2 Load)) (_starred_content (BinOp (Name &w:2 Load) Mult (Subscript (Name &extensions:2 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (Name &extensions:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None)))) nil)))) nil) None)) (/seq)) (Return (Name &result:2 Load))) nil None None) (Assign (list (Name &res:1 Store)) (Call (Name &helper:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &extensions:1 Load)) (_starred_content (Constant i0 None))) nil) None) (If (Compare (Name &res:1 Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Assign (list (Name &res:1 Store)) (Call (Name &helper:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &extensions:1 Load)) (_starred_content (Constant i0 None))) nil) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (fn_9 &res:1))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store)) (_starred_content (Name &n:0 Store))) Store)) (fn_8) None) (Assign (list (Name &extensions:0 Store)) (Call (Name g_list Load) (list (_starred_content (fn_8))) nil) None) (Expr (Call (Name &min_extensions:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &h:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &n:0 Load)) (_starred_content (Name &extensions:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &extensions:1 &ans:1 (/choiceseq (Assign (list (Name &ans:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &perm:1 Store) (Call (Name g_permutations Load) (list (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) nil) (/seq (For (Name &i:1 Store) (fn_15 (Name &n:1 Load)) (/seq (Assign (list (Tuple (list (_starred_content (Name &ah:1 Store)) (_starred_content (Name &aw:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load))) nil) (/seq (If (Compare (Subscript (Name &perm:1 Load) (_slice_content (BinOp (Name &j:1 Load) Mod (Constant i2 None))) Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &ah:1 Store) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (AugAssign (Name &aw:1 Store) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &j:1 Load)) Load)))) (If (fn_2 &a:1 &aw:1 &b:1 &ah:1) (fn_18 &j:1 &ans:1) (/seq))) (/seq) None)) (/seq) None)) (/seq) None))))) nil None None) (Assign (list (Name &examples:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i4 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i2 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None))) Load))) Load))) Load) None) (For (Name &example:0 Store) (Name &examples:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &h:0 Store)) (_starred_content (Name &w:0 Store)) (_starred_content (Name &n:0 Store)) (_starred_content (Name &extensions:0 Store))) Store)) (Name &example:0 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load)) (_starred_content (Name &h:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &n:0 Load)) (_starred_content (Name &extensions:0 Load))) nil))) nil))) (/seq) None)) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None) (arg &h:1 None None) (arg &w:1 None None) (arg &n:1 None None) (arg &extensions:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 &extensions:1 &min_extensions:1 (/choiceseq (Assign (list (Name &rectangle_area:1 Store)) (BinOp (Name &a:1 Load) Mult (Name &b:1 Load)) None) (Assign (list (Name &field_areas:1 Store)) (List (list (_starred_content (BinOp (Name &h:1 Load) Mult (Name &w:1 Load)))) Load) None) (Assign (list (Name &min_extensions:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (If (fn_2 &a:1 &w:1 &b:1 &h:1) (/seq (Return (Constant i0 None))) (/seq)) (For (Name &extension_count:1 Store) (fn_15 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i40 None))) nil)) (/seq (For (Name &extension_combination:1 Store) (Call (Name g_combinations Load) (list (_starred_content (Name &extensions:1 Load)) (_starred_content (Name &extension_count:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &new_h:1 Store)) (_starred_content (Name &new_w:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &extension:1 Store) (Name &extension_combination:1 Load) (/seq (If (BoolOp Or (list (Compare (Name &new_h:1 Load) (list Lt) (list (Name &a:1 Load))) (BoolOp And (list (Compare (Name &new_h:1 Load) (list Lt) (list (Name &b:1 Load))) (Compare (Name &new_w:1 Load) (list GtE) (list (Name &a:1 Load))))))) (/seq (AugAssign (Name &new_h:1 Store) Mult (Name &extension:1 Load))) (/seq (AugAssign (Name &new_w:1 Store) Mult (Name &extension:1 Load)))) (If (fn_2 &a:1 &new_w:1 &b:1 &new_h:1) (/seq (Assign (list (Name &min_extensions:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_extensions:1 Load)) (_starred_content (Name &extension_count:1 Load))) nil) None) Break) (/seq))) (/seq) None) (If (Compare (Name &min_extensions:1 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq Break) (/seq))) (/seq) None) (If (Compare (Name &min_extensions:1 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq Break) (/seq))) (/seq) None))))) nil None None) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &solve:0 &answer:0))) nil)",
            "(Module (fn_1 (/seq (ImportFrom s_itertools (list (alias &combinations:1 None)) i0) (fn_14 &b:1 &a:1) (fn_14 &w:1 &h:1) (If (BoolOp And (list (Compare (Name &a:1 Load) (list LtE) (list (Name &h:1 Load))) (Compare (Name &b:1 Load) (list LtE) (list (Name &w:1 Load))))) (/seq (Return (Constant i0 None))) (/seq)) (/splice (fn_7 &extensions:1 (/choiceseq (FunctionDef &is_possible:1 (arguments nil (list (arg &target_size:2 None None) (arg &current_size:2 None None) (arg &selected_extensions:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgOTcsIDExNCwgMTAzLCAxMDEsIDExNiwgMzIsIDExNSwgMTA1LCAxMjIsIDEwMSwgMzIsIDk5LCA5NywgMTEwLCAzMiwgOTgsIDEwMSwgMzIsIDk3LCA5OSwgMTA0LCAxMDUsIDEwMSwgMTE4LCAxMDEsIDEwMCwgNDZd None)) (For (Name &ext:2 Store) (Name &selected_extensions:2 Load) (/seq (AugAssign (Name &current_size:2 Store) Mult (Name &ext:2 Load)) (If (Compare (Name &current_size:2 Load) (list GtE) (list (Name &target_size:2 Load))) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (For (Name &i:1 Store) (fn_15 (Name &n:1 Load)) (/seq (For (Name &combo:1 Store) (Call (Name &combinations:1 Load) (list (_starred_content (Name &extensions:1 Load)) (_starred_content (Name &i:1 Load))) nil) (/seq (If (BoolOp And (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &combo:1 Load))) nil) (Compare (Name &b:1 Load) (list LtE) (list (Name &w:1 Load))))) (/seq (Return (Name &i:1 Load))) (/seq)) (If (BoolOp And (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &combo:1 Load))) nil) (Compare (Name &b:1 Load) (list LtE) (list (Name &h:1 Load))))) (/seq (Return (Name &i:1 Load))) (/seq)) (If (BoolOp And (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &combo:1 Load))) nil) (Compare (Name &a:1 Load) (list LtE) (list (Name &w:1 Load))))) (/seq (Return (Name &i:1 Load))) (/seq)) (If (BoolOp And (list (Call (Name &is_possible:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Name &combo:1 Load))) nil) (Compare (Name &a:1 Load) (list LtE) (list (Name &h:1 Load))))) (/seq (Return (Name &i:1 Load))) (/seq))) (/seq) None)) (/seq) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions_needed:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_3 (/seq (fn_12 &extensions:1) (FunctionDef &dfs:1 (arguments nil (list (arg &a:2 None None) (arg &b:2 None None) (arg &h:2 None None) (arg &w:2 None None) (arg &i:2 None None)) None nil nil None nil) (/seq (If (BoolOp And (list (Compare (Name &a:2 Load) (list LtE) (list (Name &h:2 Load))) (Compare (Name &b:2 Load) (list LtE) (list (Name &w:2 Load))))) (/seq (Return (Constant i0 None))) (/seq)) (fn_11 &extensions:1 &i:2) (Assign (list (Name &cost_h:2 Store)) (BinOp (Call (Name &dfs:1 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (BinOp (Name &h:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (_starred_content (Name &w:2 Load)) (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil) Add (Constant i1 None)) None) (Assign (list (Name &cost_w:2 Store)) (BinOp (Call (Name &dfs:1 Load) (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load)) (_starred_content (Name &h:2 Load)) (_starred_content (BinOp (Name &w:2 Load) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (_starred_content (BinOp (Name &i:2 Load) Add (Constant i1 None)))) nil) Add (Constant i1 None)) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &cost_h:2 Load)) (_starred_content (Name &cost_w:2 Load))) nil))) nil None None) (Assign (list (Name &answer:1 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &dfs:1 Load) (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Name &dfs:1 Load) (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None))) nil))) nil) None) (Return (fn_9 &answer:1))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0) nil)",
            "(Module (fn_1 (/seq (/splice (fn_5 &extensions:1 &min_ext:1 (/choiceseq (FunctionDef &can_fit:1 (arguments nil (list (arg &rect:2 None None) (arg &field_size:2 None None) (arg &exts:2 None None) (arg &idx:2 None None) (arg &used:2 None None)) None nil nil None (list (Constant i0 None) (Constant i0 None))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &rect:2 Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Subscript (Name &field_size:2 Load) (_slice_content (Constant i0 None)) Load))) (Compare (Subscript (Name &rect:2 Load) (_slice_content (Constant i1 None)) Load) (list LtE) (list (Subscript (Name &field_size:2 Load) (_slice_content (Constant i1 None)) Load))))) (/seq (Return (Name &used:2 Load))) (/seq)) (If (Compare (Name &idx:2 Load) (list GtE) (list (Call (Name g_len Load) (list (_starred_content (Name &exts:2 Load))) nil))) (/seq (Return (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq)) (Assign (list (Name &extend_w:2 Store)) (Call (Name &can_fit:1 Load) (list (_starred_content (Name &rect:2 Load)) (_starred_content (Tuple (list (_starred_content (BinOp (Subscript (Name &field_size:2 Load) (_slice_content (Constant i0 None)) Load) Mult (Subscript (Name &exts:2 Load) (_slice_content (Name &idx:2 Load)) Load))) (_starred_content (Subscript (Name &field_size:2 Load) (_slice_content (Constant i1 None)) Load))) Load)) (_starred_content (Name &exts:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &used:2 Load) Add (Constant i1 None)))) nil) None) (Assign (list (Name &extend_h:2 Store)) (Call (Name &can_fit:1 Load) (list (_starred_content (Name &rect:2 Load)) (_starred_content (Tuple (list (_starred_content (Subscript (Name &field_size:2 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (BinOp (Subscript (Name &field_size:2 Load) (_slice_content (Constant i1 None)) Load) Mult (Subscript (Name &exts:2 Load) (_slice_content (Name &idx:2 Load)) Load)))) Load)) (_starred_content (Name &exts:2 Load)) (_starred_content (BinOp (Name &idx:2 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &used:2 Load) Add (Constant i1 None)))) nil) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &extend_w:2 Load)) (_starred_content (Name &extend_h:2 Load))) nil))) nil None None) (Assign (list (Name &min_ext:1 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name &can_fit:1 Load) (list (_starred_content (Tuple (list (_starred_content (Name &a:1 Load)) (_starred_content (Name &b:1 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load)) (_starred_content (Name &extensions:1 Load))) nil)) (_starred_content (Call (Name &can_fit:1 Load) (list (_starred_content (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load)) (_starred_content (Name &extensions:1 Load))) nil))) nil) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions_needed:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_1 (/seq (If (Compare (Name &a:1 Load) (list Gt) (list (Name &b:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:1 Store)) (_starred_content (Name &b:1 Store))) Store)) (Tuple (list (_starred_content (Name &b:1 Load)) (_starred_content (Name &a:1 Load))) Load) None)) (/seq)) (If (Compare (Name &h:1 Load) (list Gt) (list (Name &w:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &h:1 Store)) (_starred_content (Name &w:1 Store))) Store)) (Tuple (list (_starred_content (Name &w:1 Load)) (_starred_content (Name &h:1 Load))) Load) None)) (/seq)) (fn_6 (Constant i0 None) &h:1 &b:1 &w:1 &a:1) (/splice (fn_7 &extensions:1 (/choiceseq (For (Name &i:1 Store) (fn_15 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i32 None))) nil)) (/seq (For (Name &combo:1 Store) (Call (Name g_combinations Load) (list (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Constant i32 None) None)) Load)) (_starred_content (Name &i:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &new_h:1 Store)) (_starred_content (Name &new_w:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &mult:1 Store) (Name &combo:1 Load) (/seq (If (Compare (Name &new_h:1 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &new_h:1 Store) Mult (Name &mult:1 Load))) (/seq (AugAssign (Name &new_w:1 Store) Mult (Name &mult:1 Load))))) (/seq) None) (If (fn_2 &a:1 &new_w:1 &b:1 &new_h:1) (/seq (Return (Name &i:1 Load))) (/seq))) (/seq) None)) (/seq) None) (For (Name &i:1 Store) (fn_15 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i32 None))) nil)) (/seq (For (Name &combo:1 Store) (Call (Name g_combinations Load) (list (_starred_content (Subscript (Name &extensions:1 Load) (_slice_slice (Slice None (Constant i32 None) None)) Load)) (_starred_content (Name &i:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &new_h:1 Store)) (_starred_content (Name &new_w:1 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &mult:1 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &combo:1 Load))) (list (keyword s_reverse (Constant True None)))) (/seq (If (Compare (Name &new_h:1 Load) (list Lt) (list (Name &new_w:1 Load))) (/seq (AugAssign (Name &new_h:1 Store) Mult (Name &mult:1 Load))) (/seq (AugAssign (Name &new_w:1 Store) Mult (Name &mult:1 Load))))) (/seq) None) (fn_13 (Name &i:1 Load) &b:1 &new_w:1 &a:1 &new_h:1)) (/seq) None)) (/seq) None))))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &min_extensions:0 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0) nil)",
            "(Module (fn_3 (/seq (fn_12 &extensions:1) (FunctionDef &is_possible:1 (arguments nil (list (arg &extensions_needed:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &hh:2 Store)) (_starred_content (Name &ww:2 Store))) Store)) (Tuple (list (_starred_content (Name &h:1 Load)) (_starred_content (Name &w:1 Load))) Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &extensions_needed:2 Load))) nil) (/seq (If (Compare (Name &hh:2 Load) (list Lt) (list (Name &a:1 Load))) (/seq (AugAssign (Name &hh:2 Store) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq (If (Compare (Name &ww:2 Load) (list Lt) (list (Name &b:1 Load))) (/seq (AugAssign (Name &ww:2 Store) Mult (Subscript (Name &extensions:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq (fn_13 (Constant True None) &b:1 &ww:2 &a:1 &hh:2)))))) (/seq) None) (Return (BoolOp And (list (Compare (Name &hh:2 Load) (list GtE) (list (Name &a:1 Load))) (Compare (Name &ww:2 Load) (list GtE) (list (Name &b:1 Load))))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &left:1 Store)) (_starred_content (Name &right:1 Store))) Store)) (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) Load) None) (While (Compare (Name &left:1 Load) (list Lt) (list (Name &right:1 Load))) (/seq (Assign (list (Name &middle:1 Store)) (BinOp (BinOp (Name &left:1 Load) Add (Name &right:1 Load)) FloorDiv (Constant i2 None)) None) (If (Call (Name &is_possible:1 Load) (list (_starred_content (Name &middle:1 Load))) nil) (/seq (Assign (list (Name &right:1 Store)) (Name &middle:1 Load) None)) (/seq (Assign (list (Name &left:1 Store)) (BinOp (Name &middle:1 Load) Add (Constant i1 None)) None)))) (/seq)) (If (Compare (Name &left:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (Return (UnaryOp USub (Constant i1 None)))) (/seq)) (Return (Name &left:1 Load))) &extensions:1 &n:1 &w:1 &h:1 &b:1 &a:1 &solve:0) nil)",
            "(Module (/seq (fn_10 (For (Name &perm:1 Store) (Call (Name g_permutations Load) (list (_starred_content (Name &extensions:1 Load))) nil) (/seq (Assign (list (Name &ext_h:1 Store)) (Name &h:1 Load) None) (Assign (list (Name &ext_w:1 Store)) (Name &w:1 Load) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &ext:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &perm:1 Load))) nil) (/seq (If (BoolOp Or (list (Compare (Name &ext_h:1 Load) (list Lt) (list (Name &a:1 Load))) (Compare (Name &ext_w:1 Load) (list Lt) (list (Name &b:1 Load))))) (/seq (If (Compare (BinOp (Name &a:1 Load) Div (Name &ext_h:1 Load)) (list Lt) (list (BinOp (Name &b:1 Load) Div (Name &ext_w:1 Load)))) (/seq (AugAssign (Name &ext_h:1 Store) Mult (Name &ext:1 Load))) (/seq (AugAssign (Name &ext_w:1 Store) Mult (Name &ext:1 Load))))) (/seq (Assign (list (Name &min_ext:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &min_ext:1 Load)) (_starred_content (Name &i:1 Load))) nil) None) Break)) (If (fn_2 &a:1 &ext_w:1 &b:1 &ext_h:1) (fn_18 &i:1 &min_ext:1) (/seq))) (/seq) None)) (/seq) None) &h:1 &b:1 &w:1 &a:1 &min_ext:1 &extensions:1 &n:1 &min_extensions:0) (/splice (fn_4 &n:0 &w:0 &h:0 &b:0 &a:0 &extensions:0 &min_extensions:0 &result:0))) nil)"
        ]
    },
    "800": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) #0 (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name %6 Load)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (_slice_content (Name %4 Load)) Store)) #0 None)) (/seq) None)) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Subscript (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (Name %5 Load)) Load) Sub (Subscript (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name %5 Load)) Load)) Sub (Subscript (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Add (Subscript (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %12 (arguments nil (list (arg %11 None None) (arg %1 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) ?0 (Assign (list (Name %3 Store)) (Constant i0 None) None) (/splice (fn_2 (/seq (Assign (list (Name %8 Store)) (Constant i0 None) None) (For (Name %10 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load)) (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %9 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load)) (_starred_content (BinOp (Name %6 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name %8 Store) Add (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (BinOp (Name %10 Load) Sub (Constant i1 None))) Load))) nil) Mult (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (BinOp (Name %9 Load) Sub (Constant i1 None))) Load))) nil)))) (/seq) None)) (/seq) None) (If (Compare (Name %8 Load) (list Eq) (list (Name %11 Load))) (/seq (AugAssign (Name %3 Store) Add (Constant i1 None))) (/seq))) %2 %7 %6 %5 %4 %3))) nil None None)",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Subscript (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name %1 Load)) Load) Add (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Sub (Subscript (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Add #0)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %4 None None) (arg %1 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) (Assign (list (Name %1 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %3 Load))) nil) (list (comprehension (Name %3 Store) (Name %1 Load) nil i0))) None) ?0) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %2 Load))) nil) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))) None) (Assign (list (Name %4 Store)) (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) None) (Assign (list (Name %6 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %4 Load)) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) None) (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) (/seq (For (Name %7 Store) (Call (Name g_range Load) (list (_starred_content (Name %8 Load)) (_starred_content (Name %4 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name %6 Load) (_slice_content (Name %8 Load)) Load) (_slice_content (Name %7 Load)) Store)) (BinOp (Subscript (Name %3 Load) (_slice_content (Name %8 Load)) Load) Mult (Subscript (Name %3 Load) (_slice_content (Name %7 Load)) Load)) None) ?0) (/seq) None)) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %2 Load) Add (Constant i1 None))) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (BinOp (Name %4 Load) Add (Constant i1 None))) Store)) (BinOp (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load) Add #0) None)) (/seq) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) #0 (/seq) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %3 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) Add #0) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(fn_10 (/seq (fn_10 (/seq (Assign (list (Name %7 Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name %6 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name %4 Load) Add (Constant i1 None))) Load) Sub (Subscript (Subscript (Name %6 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (BinOp (Name %4 Load) Add (Constant i1 None))) Load)) Sub (Subscript (Subscript (Name %6 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load) (_slice_content (Name %5 Load)) Load)) Add (Subscript (Subscript (Name %6 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Name %5 Load)) Load)) None) (If (Compare (Name %7 Load) (list Eq) (list (Name %9 Load))) (/seq (AugAssign (Name %8 Store) Add (Constant i1 None))) (/seq))) %3 %5 %4)) %3 %2 %1)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Add (Constant i1 None))) Load) Sub (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %2 Load))) nil) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))) None) (Assign (list (Name %4 Store)) (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) None) (Assign (list (Name %7 Store)) (ListComp (ListComp (Constant i0 None) (list (comprehension (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) nil i0))) None) (fn_10 (/seq (Assign (list (Subscript (Subscript (Name %7 Load) (_slice_content (Name %9 Load)) Load) (_slice_content (Name %8 Load)) Store)) (IfExp (Compare (Name %9 Load) (list NotEq) (list (Name %8 Load))) (BinOp (Subscript (Name %3 Load) (_slice_content (Name %9 Load)) Load) Mult (Subscript (Name %3 Load) (_slice_content (Name %8 Load)) Load)) (BinOp (Subscript (Name %3 Load) (_slice_content (Name %9 Load)) Load) Pow (Constant i2 None))) None) ?0) %4 %9 %8))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Subscript (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name %3 Store) (Name %2 Load) (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add #0))) nil))) (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) (/seq #0) (/seq) None) (If (Compare (Name %1 Load) (list Eq) (list (Name %6 Load))) (/seq (AugAssign (Name %5 Store) Add (Constant i1 None))) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %9 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content #0) (_starred_content (BinOp (Name %9 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load)) (_starred_content (BinOp (Name %9 Load) Add (Constant i1 None)))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load)) (_starred_content (BinOp (Name %9 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name %6 Store)) (fn_4 %5 %4 %3 %2 %1) None) (If (Compare (Name %6 Load) (list Eq) (list (Name %8 Load))) (/seq (AugAssign (Name %7 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call #0 nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/choiceseq (If (Compare (Name %2 Load) (list NotEq) (list (Name %1 Load))) (/seq (Assign (list (Subscript (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Name %2 Load)) Store)) (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Name %1 Load)) Load) None)) (/seq)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) Mult (Subscript (Name %1 Load) (_slice_content (BinOp #0 Sub (Constant i1 None))) Load))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (BinOp (Subscript (Subscript (Name %1 Load) (_slice_content (Name %5 Load)) Load) (_slice_content (Name %4 Load)) Load) Sub (Subscript (Subscript (Name %1 Load) (_slice_content (Name %5 Load)) Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)) Sub (Subscript (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name %4 Load)) Load)) Add (fn_16 %3 %2 %1))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(ListComp (ListComp (Constant i0 None) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) nil i0))) (list (comprehension (Name %1 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(fn_10 (/seq (Assign (list (Subscript #0 (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Store)) (BinOp (Subscript #0 (_slice_content (Name %1 Load)) Load) Add (BinOp (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) Mult (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Load))) None)) %3 %2 %1)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil) (/seq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil) #0 (/seq) None)) (/seq) None) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (BinOp #0 Add (Subscript (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name %3 Load)) Load)) Add (Subscript (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)) Sub (fn_16 %3 %2 %1))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(ListComp (fn_15 %1) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare #0 (list Eq) (list (Name %2 Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Call (Name g_int Load) (list (_starred_content (Name %2 Load))) nil) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &s:1 Load))) nil))) nil) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) None) (Assign (list (Name &b:1 Store)) (fn_24 (Name &n:1 Load) &_:2 &_:3) None) (fn_10 (/seq (If (Compare (Name &i:1 Load) (list Eq) (list (Name &j:1 Load))) (/seq (Assign (list (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (BinOp (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) Pow (Constant i2 None)) None)) (/seq (Assign (list (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (BinOp (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) Mult (Subscript (Name &digits:1 Load) (_slice_content (Name &j:1 Load)) Load)) None) (Assign (list (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load) None)))) &n:1 &i:1 &j:1) (Assign (list (Name &ans:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &z:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &rect_sum:1 Store)) (Constant i0 None) None) (For (Name &y:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &t:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &rect_sum:1 Store) Add (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &y:1 Load)) Load) (_slice_content (Name &t:1 Load)) Load)) (fn_29 (Name &rect_sum:1 Load) &ans:1 &a:1) (If (Compare (Name &rect_sum:1 Load) (list Gt) (list (Name &a:1 Load))) (/seq Break) (/seq))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name &ans:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_5 &s:1 &n:1 &count:1 &y:1 &x:1 &t:1 &z:1 &sum_of_rectangle:1 &j:1 &i:1 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &prefix_sums:1 Store)) (fn_15 &n:1) None) (fn_11 (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) nil) &i:1 &prefix_sums:1 &n:1))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &ch:2 &a:1 &find_rectangles:0 (/choiceseq (Assign (list (Name &pre_sum:1 Store)) (fn_15 &n:1) None) (fn_11 (Subscript (Name &s:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) &i:1 &pre_sum:1 &n:1) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (Assign (list (Name &sum_now:1 Store)) (Constant i0 None) None) (For (Name &top:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &start:1 Load)) (_starred_content (BinOp (Name &end:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &bottom:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &top:1 Load)) (_starred_content (BinOp (Name &end:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &digit_product:1 Store)) (BinOp (Subscript (Name &s:1 Load) (_slice_content (Name &top:1 Load)) Load) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &bottom:1 Load)) Load)) None) (AugAssign (Name &sum_now:1 Store) Add (Name &digit_product:1 Load)) (If (Compare (Name &sum_now:1 Load) (list Eq) (list (Name &a:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &sum_now:1 Load) (list Gt) (list (Name &a:1 Load))) (/seq Break) (/seq))))) (/seq) None)) (/seq) None)) &n:1 &start:1 &end:1) (Return (Name &count:1 Load)))) (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &answer:0 Store)) (Call (Name &find_rectangles:0 Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &s:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &s:1 &d:2 &digits:1 &n:1 &_:3 &_:5 &products:1 &j:1 &i:1 (/choiceseq))) (Assign (list (Name &answer:1 Store)) (Constant i0 None) None) (Assign (list (Name &prefix_sums:1 Store)) (fn_24 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &_:4 &_:6) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (fn_6 (fn_16 &j:1 &i:1 &products:1) &j:1 &i:1 &prefix_sums:1) None)) (/seq) None)) (/seq) None) (fn_19 (Constant i1 None) &t:1 &y:1 &prefix_sums:1 &x:1 &z:1 &rectangle_sum:1 &answer:1 &a:1 &n:1) (Return (Name &answer:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 (Call (Name g_int Load) (list (_starred_content (Name &digit:1 Load))) nil) &prefix_sums:1 &s:1 &digit:1)) (/splice (fn_26 (/seq (fn_29 (BinOp (fn_13 &i:1 &prefix_sums:1 &j:1) Mult (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil)) &count:1 &a:1)) &count:1 &s:1 &i:1 &j:1))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &x:2 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (Assign (list (Name &prefix_sums:1 Store)) (fn_28 &n:1 &_:3) None) (fn_25 (Subscript (Name &prefix_sums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) &j:1 &i:1 &n:1 &s:1) (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &z:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &z:1 Load)) Add (Constant i1 None)))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &z:1 Load)) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &y:1 Store)) (BinOp (Name &x:1 Load) Add (Name &i:1 Load)) None) (Assign (list (Name &t:1 Store)) (BinOp (Name &z:1 Load) Add (Name &j:1 Load)) None) (Assign (list (Name &rect_sum:1 Store)) (fn_23 &prefix_sums:1 &x:1 &z:1 &t:1 &y:1) None) (fn_29 (Name &rect_sum:1 Load) &count:1 &a:1)) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name &count:1 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 (Call (Name g_int Load) (list (_starred_content (Name &digit:1 Load))) nil) &prefix_sums:1 &s:1 &digit:1)) (FunctionDef &get_sum:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Return (fn_13 &x:2 &prefix_sums:1 &y:2))) nil None None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &answer:1 Store)) (Constant i0 None) None) (fn_10 (/seq (For (Name &z:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &y:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &t:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (fn_29 (BinOp (Call (Name &get_sum:1 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) nil) Mult (Call (Name &get_sum:1 Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (Name &t:1 Load))) nil)) &answer:1 &a:1)) (/seq) None)) (/seq) None)) &n:1 &x:1 &y:1) (Return (Name &answer:1 Load))) nil None None) (/splice (fn_20 (Name g_input Load) &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (fn_30 &s:1 &d:2) None) (/splice (fn_9 (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) &digits:1 &n:1 &prefix_sums:1 &i:1)) (Assign (list (Name &answer:1 Store)) (Constant i0 None) None) (For (Name &start:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &end:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &start:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &rect_sum:1 Store)) (BinOp (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &end:1 Load)) Load) Sub (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &start:1 Load)) Load)) None) (fn_29 (Name &rect_sum:1 Load) &answer:1 &a:1)) (/seq) None)) (/seq) None) (Return (Name &answer:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_8 &s:1 &d:2 &digits:1 &n:1 &_:3 &products:1 &j:1 &i:1 (fn_21 &j:1 &i:1 &products:1))) (Assign (list (Name &rectangle_count:1 Store)) (Constant i0 None) None) (/splice (fn_3 (fn_6 (fn_16 &j:1 &i:1 &products:1) &j:1 &i:1 &prefix_sums:1) &n:1 &_:4 &prefix_sums:1 &j:1 &i:1)) (fn_12 &y:1 &x:1 &n:1 &t:1 &z:1 &prefix_sums:1 &rectangle_sum:1 &rectangle_count:1 &a:1) (Return (Name &rectangle_count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_5 &s:1 &n:1 &total_rectangles:1 &j:1 &i:1 &l:1 &k:1 &sum_rect:1 &y:1 &x:1 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &pref_sum:1 Store)) (fn_15 &n:1) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &pref_sum:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Store)) (BinOp (Subscript (Name &pref_sum:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil)) None)) (/seq) None))) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &x:2 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &prefix_products:1 Store)) (fn_28 &n:1 &_:3) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &prefix_products:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name &prefix_products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load) Add (Subscript (Subscript (Name &prefix_products:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:1 Load)) Load)) Sub (Subscript (Subscript (Name &prefix_products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) Add (BinOp (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load))) None)) (/seq) None)) (/seq) None) (Assign (list (Name &rectangle_count:1 Store)) (Constant i0 None) None) (fn_12 &y:1 &x:1 &n:1 &t:1 &z:1 &prefix_products:1 &rect_sum:1 &rectangle_count:1 &a:1) (Return (Name &rectangle_count:1 Load)))) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &digits:1 Store)) (fn_30 &s:1 &d:2) None) (/splice (fn_17 (BinOp (Name &digit:1 Load) Pow (Constant i2 None)) &prefix_sums:1 &digits:1 &digit:1)) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (Assign (list (Name &rect_sum:1 Store)) (fn_13 &start:1 &prefix_sums:1 &end:1) None) (If (Compare (Name &rect_sum:1 Load) (list GtE) (list (Name &a:1 Load))) (/seq (If (Compare (Name &rect_sum:1 Load) (list Eq) (list (Name &a:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (BinOp (Name &n:1 Load) Sub (Name &end:1 Load)))) (/seq)) Break) (/seq)) (For (Name &back:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &start:1 Load))) nil) (/seq (AugAssign (Name &rect_sum:1 Store) Add (BinOp (Subscript (Name &digits:1 Load) (_slice_content (Name &back:1 Load)) Load) Pow (Constant i2 None))) (If (Compare (Name &rect_sum:1 Load) (list GtE) (list (Name &a:1 Load))) (/seq (If (Compare (Name &rect_sum:1 Load) (list Eq) (list (Name &a:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (BinOp (Name &n:1 Load) Sub (Name &end:1 Load)))) (/seq)) Break) (/seq))) (/seq) None)) &n:1 &start:1 &end:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &s:1 Load))) nil))) nil) None) (Assign (list (Name &csum:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) Add (Constant i1 None))) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &csum:1 Load))) nil))) nil) (/seq (Assign (list (Subscript (Name &csum:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &csum:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Add (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) None)) (/seq) None) (/splice (fn_26 (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &start:1 Load)) (_starred_content (BinOp (Name &end:1 Load) Add (Constant i1 None)))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (BinOp (Name &end:1 Load) Add (Constant i1 None)))) nil) (/seq (fn_29 (BinOp (fn_13 &i:1 &csum:1 &j:1) Mult (BinOp (BinOp (Name &j:1 Load) Sub (Name &i:1 Load)) Add (Constant i1 None))) &result:1 &a:1)) (/seq) None)) (/seq) None)) &result:1 &digits:1 &start:1 &end:1))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &c:2 &a:1 &count_rectangles:0 (/choiceseq (/splice (fn_3 (fn_6 (fn_22 (Name &j:1 Load) &s:1 &i:1) &j:1 &i:1 &prefix_sums:1) &n:1 &_:3 &prefix_sums:1 &j:1 &i:1)) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (/splice (fn_2 (/seq (Assign (list (Name &rect_sum:1 Store)) (fn_4 &y:1 &x:1 &prefix_sums:1 &z:1 &t:1) None) (fn_29 (Name &rect_sum:1 Load) &count:1 &a:1)) &n:1 &y:1 &t:1 &x:1 &z:1 &count:1)))) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &char:2 &a:1 &count_rectangles:0 (/choiceseq (/splice (fn_3 (BinOp (BinOp (BinOp (fn_22 (Name &j:1 Load) &s:1 &i:1) Add (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load)) Add (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &j:1 Load)) Load)) Sub (fn_16 &j:1 &i:1 &prefix_sums:1)) &n:1 &_:3 &prefix_sums:1 &j:1 &i:1)) (Assign (list (Name &rectangles_count:1 Store)) (Constant i0 None) None) (/splice (fn_2 (/seq (Assign (list (Name &rectangle_sum:1 Store)) (fn_4 &z:1 &x:1 &prefix_sums:1 &y:1 &t:1) None) (fn_29 (Name &rectangle_sum:1 Load) &rectangles_count:1 &a:1)) &n:1 &z:1 &t:1 &x:1 &y:1 &rectangles_count:1)))) (/splice (fn_20 (Name g_input Load) &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &x:2 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &prefix_sums:1 Store)) (fn_28 &n:1 &_:3) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load)) Add (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load)) Add (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:1 Load)) Load)) Sub (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) None)) (/seq) None)) (/seq) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_19 (Name &x:1 Load) &t:1 &y:1 &prefix_sums:1 &x:1 &z:1 &rect_sum:1 &count:1 &a:1 &n:1) (Return (Name &count:1 Load)))) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_5 &s:1 &n:1 &count:1 &y:1 &x:1 &t:1 &z:1 &rect_sum:1 &j:1 &i:1 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &prefix_sums:1 Store)) (List (list (_starred_content (Constant i0 None))) Load) None) (For (Name &digit:1 Store) (Name &s:1 Load) (/seq (Expr (Call (Attribute (Name &prefix_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &prefix_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Call (Name g_int Load) (list (_starred_content (Name &digit:1 Load))) nil)))) nil))) (/seq) None))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles_with_sum_a:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_9 (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) &s:1 &n:1 &prefix_sums:1 &i:1)) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (fn_10 (/seq (fn_29 (BinOp (fn_13 &i:1 &prefix_sums:1 &j:1) Mult (fn_13 &x:1 &prefix_sums:1 &y:1)) &count:1 &a:1)) &n:1 &x:1 &y:1)) &n:1 &i:1 &j:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles_with_sum_a:0))) nil)",
            "(Module (/seq (FunctionDef &num_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_8 &s:1 &d:2 &digits:1 &n:1 &_:3 &products:1 &j:1 &i:1 (fn_21 &j:1 &i:1 &products:1))) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &z:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &y:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &t:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (/splice (fn_18 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (BinOp (Name &t:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &rect_sum:1 Store) Add (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load))) (/seq) None) &rect_sum:1 &y:1 &x:1 &i:1 &count:1 &a:1))) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &num_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &digits:1 Store)) (fn_30 &s:1 &d:2) None) (Assign (list (Name &b:1 Store)) (ListComp (ListComp (BinOp (Subscript (Name &digits:1 Load) (_slice_content (Name &i:3 Load)) Load) Mult (Subscript (Name &digits:1 Load) (_slice_content (Name &j:5 Load)) Load)) (list (comprehension (Name &j:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (/splice (fn_3 (fn_27 (fn_16 &j:1 &i:1 &b:1) &prefix_sum:1 &i:1 &j:1) &n:1 &_:4 &prefix_sum:1 &j:1 &i:1)) (/splice (fn_2 (/seq (Assign (list (Name &rect_sum:1 Store)) (fn_4 &z:1 &x:1 &prefix_sum:1 &y:1 &t:1) None) (fn_29 (Name &rect_sum:1 Load) &count:1 &a:1)) &n:1 &z:1 &t:1 &x:1 &y:1 &count:1))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &s:1 Load))) nil))) nil) None) (/splice (fn_17 (Name &digit:1 Load) &prefix_sums:1 &digits:1 &digit:1)) (/splice (fn_26 (/seq (Assign (list (Name &segment_sum:1 Store)) (fn_13 &start:1 &prefix_sums:1 &end:1) None) (If (Compare (Name &segment_sum:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &rectangles:1 Store) Add (BinOp (BinOp (BinOp (Name &end:1 Load) Sub (Name &start:1 Load)) Add (Constant i1 None)) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) Sub (Name &end:1 Load))))) (/seq))) (/seq (If (Compare (BinOp (Name &a:1 Load) Mod (Name &segment_sum:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &factor:1 Store)) (BinOp (Name &a:1 Load) FloorDiv (Name &segment_sum:1 Load)) None) (For (Name &middle:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &end:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &middle:1 Load) Sub (Constant i1 None))) Load) (list NotEq) (list (Constant i0 None))) (Compare (BinOp (Name &factor:1 Load) Mod (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &middle:1 Load) Sub (Constant i1 None))) Load)) (list Eq) (list (Constant i0 None))))) (/seq (AugAssign (Name &factor:1 Store) FloorDiv (Subscript (Name &digits:1 Load) (_slice_content (BinOp (Name &middle:1 Load) Sub (Constant i1 None))) Load)) (If (Compare (Name &factor:1 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &rectangles:1 Store) Add (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) Sub (Name &middle:1 Load)) Add (Constant i1 None))) Break) (/seq))) (/seq))) (/seq) None)) (/seq))))) &rectangles:1 &digits:1 &start:1 &end:1))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &ch:2 &a:1 &count_rectangles:0 (/choiceseq (/splice (fn_3 (fn_27 (fn_22 (Name &j:1 Load) &s:1 &i:1) &prefix_sums:1 &i:1 &j:1) &n:1 &_:3 &prefix_sums:1 &j:1 &i:1)) (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None) (/splice (fn_2 (/seq (fn_29 (fn_23 &prefix_sums:1 &x:1 &z:1 &t:1 &y:1) &cnt:1 &a:1)) &n:1 &z:1 &t:1 &x:1 &y:1 &cnt:1)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:1 Store)) (fn_30 &s:1 &x:2) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (Assign (list (Name &products:1 Store)) (fn_24 (Name &n:1 Load) &_:3 &_:4) None) (fn_10 (/seq (If (Compare (Name &i:1 Load) (list Eq) (list (Name &j:1 Load))) (/seq (Assign (list (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (BinOp (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load)) None)) (/seq (Assign (list (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (BinOp (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) Add (BinOp (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &i:1 Load)) Load))) None)))) &n:1 &i:1 &j:1) (fn_10 (/seq (/splice (fn_18 (AugAssign (Name &rectangle_sum:1 Store) Add (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) &rectangle_sum:1 &j:1 &i:1 &k:1 &count:1 &a:1)) (For (Name &l:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &rectangle_sum:1 Store) Add (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &l:1 Load)) Load)) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &j:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &rectangle_sum:1 Store) Add (Subscript (Subscript (Name &products:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &l:1 Load)) Load))) (/seq) None) (fn_29 (Name &rectangle_sum:1 Load) &count:1 &a:1)) (/seq) None)) &n:1 &i:1 &j:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &find_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &s:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &s:1 Load))) nil))) nil) None) (Assign (list (Name &prefix_sum:1 Store)) (fn_15 &n:1) None) (fn_11 (fn_22 (Name &i:1 Load) &s:1 &i:1) &i:1 &prefix_sum:1 &n:1) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (Assign (list (Name &rect_sum:1 Store)) (fn_13 &i:1 &prefix_sum:1 &j:1) None) (fn_29 (Name &rect_sum:1 Load) &count:1 &a:1)) &n:1 &i:1 &j:1) (Return (Name &count:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_1 &a:0 &s:0 &find_rectangles:0))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (FunctionDef &sum_of_product_substrings:1 (arguments nil (list (arg &s:2 None None)) None nil nil None nil) (/seq (/splice (fn_9 (Call (Name g_int Load) (list (_starred_content (Subscript (Name &s:2 Load) (_slice_content (Name &i:2 Load)) Load))) nil) &s:2 &n:2 &sum_prod:2 &i:2)) (Return (Name &sum_prod:2 Load))) nil None None) (Assign (list (Name &sum_prod:1 Store)) (Call (Name &sum_of_product_substrings:1 Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &s:1 Load))) nil) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (Assign (list (Name &product:1 Store)) (BinOp (fn_13 &x:1 &sum_prod:1 &z:1) Pow (Constant i2 None)) None) (If (Compare (Name &product:1 Load) (list Eq) (list (Name &a:1 Load))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None))) (/seq (If (Compare (Name &product:1 Load) (list Gt) (list (Name &a:1 Load))) (/seq Break) (/seq))))) &n:1 &x:1 &z:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (fn_30 &s:1 &digit:2) None) (/splice (fn_9 (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) &digits:1 &n:1 &prefix_sums:1 &i:1)) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (fn_10 (/seq (/splice (fn_18 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (BinOp (Name &t:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &rectangle_sum:1 Store) Add (BinOp (Subscript (Name &digits:1 Load) (_slice_content (Name &i:1 Load)) Load) Mult (Subscript (Name &digits:1 Load) (_slice_content (Name &j:1 Load)) Load)))) (/seq) None) &rectangle_sum:1 &y:1 &x:1 &i:1 &count:1 &a:1))) &n:1 &z:1 &t:1)) &n:1 &x:1 &y:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (fn_7 &s:1 &n:1 &x:2 &a:1 &count_rectangles:0 (/choiceseq (Assign (list (Name &prefix_sums:1 Store)) (fn_15 &n:1) None) (fn_11 (BinOp (Subscript (Name &s:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Pow (Constant i2 None)) &i:1 &prefix_sums:1 &n:1) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (/splice (fn_18 (AugAssign (Name &rectangle_sum:1 Store) Add (BinOp (fn_13 &start:1 &prefix_sums:1 &j:1) Mult (Subscript (Name &s:1 Load) (_slice_content (Name &j:1 Load)) Load))) &rectangle_sum:1 &end:1 &start:1 &j:1 &count:1 &a:1))) &n:1 &start:1 &end:1) (Return (Name &count:1 Load)))) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &digits:1 Store)) (fn_30 &s:1 &ch:2) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &digits:1 Load))) nil) None) (Assign (list (Name &prefix_sums:1 Store)) (ListComp (fn_15 &n:1) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (fn_25 (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) &j:1 &i:1 &n:1 &digits:1) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &z:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &y:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &t:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &z:1 Load)) (_starred_content (Name &n:1 Load))) nil) (/seq (fn_29 (BinOp (BinOp (BinOp (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &x:1 Load)) Load) (_slice_content (BinOp (Name &y:1 Load) Add (Constant i1 None))) Load) Sub (IfExp (Compare (Name &y:1 Load) (list NotEq) (list (Name &x:1 Load))) (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &x:1 Load)) Load) (_slice_content (Name &y:1 Load)) Load) (Constant i0 None))) Add (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &z:1 Load)) Load) (_slice_content (BinOp (Name &t:1 Load) Add (Constant i1 None))) Load)) Sub (IfExp (Compare (Name &t:1 Load) (list NotEq) (list (Name &z:1 Load))) (Subscript (Subscript (Name &prefix_sums:1 Load) (_slice_content (Name &z:1 Load)) Load) (_slice_content (Name &t:1 Load)) Load) (Constant i0 None))) &count:1 &a:1)) (/seq) None)) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name &count:1 Load))) nil None None) (/splice (fn_20 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &s:1 &c:2 &digits:1 &n:1 &_:3 &_:4 &b:1 &j:1 &i:1 (fn_21 &j:1 &i:1 &b:1))) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_10 (/seq (fn_10 (/seq (/splice (fn_18 (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &y:1 Load)) (_starred_content (BinOp (Name &t:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Name &rectangle_sum:1 Store) Add (Subscript (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load))) (/seq) None) &rectangle_sum:1 &z:1 &x:1 &i:1 &count:1 &a:1))) &n:1 &y:1 &t:1)) &n:1 &x:1 &z:1) (Return (Name &count:1 Load))) nil None None) (/splice (fn_20 (Name g_input Load) &a:0 &s:0 &count_rectangles:0))) nil)",
            "(Module (/seq (FunctionDef &count_rectangles:0 (arguments nil (list (arg &a:1 None None) (arg &s:1 None None)) None nil nil None nil) (/seq (/splice (fn_8 &s:1 &d:2 &digits:1 &n:1 &_:3 &products:1 &j:1 &i:1 (/choiceseq))) (/splice (fn_3 (fn_6 (fn_16 &j:1 &i:1 &products:1) &j:1 &i:1 &prefix_sums:1) &n:1 &_:4 &prefix_sums:1 &j:1 &i:1)) (Assign (list (Name &cnt:1 Store)) (Constant i0 None) None) (/splice (fn_2 (/seq (fn_29 (fn_4 &z:1 &x:1 &prefix_sums:1 &y:1 &t:1) &cnt:1 &a:1)) &n:1 &z:1 &t:1 &x:1 &y:1 &cnt:1))) nil None None) (/splice (fn_1 &a:0 &s:0 &count_rectangles:0))) nil)"
        ]
    },
    "886": {
        "abstractions": [
            {
                "body": "(/subseq (If (Compare (Name %1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Return (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))) (/seq)) (AugAssign (Name %1 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil)) (If (Compare (Name %1 Load) (list LtE) (list (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load))) #0 (/seq)) (AugAssign (Name %1 Store) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)) (If (Compare (Name %1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name %5 Load))) nil))) (/seq (Return (Subscript (Name %5 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))) (/seq)) (AugAssign (Name %1 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name %5 Load))) nil)) (If (Compare (Name %1 Load) (list LtE) (list (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load))) #0 (/seq)) (AugAssign (Name %1 Store) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List nil Load) None) ?0 (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name %1 Load))) nil))) nil)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Return (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))) #0)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Return (IfExp (Compare (Name %1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (Constant s_. None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (If (Compare (Name %4 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) Add (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Call (Name %6 Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name %4 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil)))) nil))) (/seq (If (Compare (Name %4 Load) (list LtE) (list (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) Add (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Add (Call (Name g_len Load) (list (_starred_content (Name %5 Load))) nil)))) (/seq (Return (Subscript (Name %5 Load) (_slice_content (BinOp (BinOp (BinOp (Name %4 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil)) Sub (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Sub (Constant i1 None))) Load))) (/seq #0)))))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (fn_3 (/seq) %2 %1) (AugAssign (Name %2 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil)) (If (Compare (Name %2 Load) (list LtE) (list #0)) (/seq (Return (Call (Name %4 Load) (list (_starred_content (BinOp (Name %3 Load) Sub (Constant i1 None))) (_starred_content (Name %2 Load))) nil))) (/seq)) (AugAssign (Name %2 Store) Sub #0) (fn_3 (/seq) %2 %5) (AugAssign (Name %2 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name %5 Load))) nil)) (If (Compare (Name %2 Load) (list LtE) (list #0)) (/seq (Return (Call (Name %4 Load) (list (_starred_content (BinOp (Name %3 Load) Sub (Constant i1 None))) (_starred_content (Name %2 Load))) nil))) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %3 Store)) (ListComp (Call #0 (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (BinOp (BinOp (Constant i2 None) Mult #0) Add (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (If (Compare (Name %5 Load) (list LtE) (list (BinOp (BinOp (Name %4 Load) Add (BinOp (Constant i2 None) Mult (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load))) Add (Name %1 Load)))) (/seq (Return (Call (Name %7 Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name %5 Load) Sub (Name %4 Load)) Sub (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) Sub (Name %1 Load)))) nil))) (/seq (If (Compare (Name %5 Load) (list LtE) (list (BinOp (BinOp (BinOp (Name %4 Load) Add (BinOp (Constant i2 None) Mult (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load))) Add (Name %1 Load)) Add (Name %6 Load)))) (/seq (Return (Subscript #0 (_slice_content (BinOp (BinOp (BinOp (BinOp (Name %5 Load) Sub (Name %4 Load)) Sub (BinOp (Constant i2 None) Mult (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load))) Sub (Name %1 Load)) Sub (Constant i1 None))) Load))) (/seq (Return (Constant s_. None)))))))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) Add #0) Add (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (IfExp (Compare (Name %1 Load) (list LtE) (list #0)) (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) (Constant s_. None)))) (/seq))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name %2 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name %3 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name %4 Store)) (Constant s-WzM0LCA2M10= None) None) ?0 (Assign (list (Name %5 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) Load) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Constant i2 None) Mult (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name %2 Load))) nil))) nil)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Constant i2 None) Mult (Subscript (Name %1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(List (list (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1825 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i75 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i530 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1829 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i1651 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i187 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i584 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i255 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i774 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i474 None))) Load))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp #0 Sub (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load)) Sub (Constant i1 None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq (If (Compare (Name %3 Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq (Return (Constant s_. None))) (/seq)) (If (Compare (Name %1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load))) (/seq)) ?0) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(fn_3 (fn_5 (If (Compare (Name %2 Load) (list LtE) (list (fn_10 (fn_15 %6 %5) %4 %1))) (/seq (Return (Call (Name %3 Load) (list (_starred_content (BinOp (Name %6 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil)) Sub (Subscript (Name %5 Load) (_slice_content (BinOp (Name %6 Load) Sub (Constant i1 None))) Load)) Sub (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil)))) nil))) (/seq #0)) %6 %5 %1 %2 %4 %3) %2 %1)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name %2 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name %3 Store)) (Constant s-WzM0LCA2M10= None) None) ?0 (Assign (list (Name %4 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) (Assign (list (Name %5 Store)) (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) None) (Assign (list (Name %6 Store)) (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil) None))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (If (Compare (Name %3 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 %2 %1)) (/seq)) ?0) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (If (Compare (Name %2 Load) (list LtE) (list (BinOp (Name %1 Load) Add (Subscript (Name %5 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Call (Name %4 Load) (list (_starred_content (BinOp (Name %3 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name %2 Load) Sub (Name %1 Load)))) nil))) (/seq #0)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(While (Compare (Name %3 Load) (list Gt) (list (Constant i0 None))) (/seq (fn_3 (/seq (If (Compare (Name %2 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) Add (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load)))) (/seq (AugAssign (Name %2 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil)) (AugAssign (Name %3 Store) Sub (Constant i1 None))) (/seq #0))) %2 %1)) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list LtE) (list (Name %3 Load))) (/seq (Return (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))) #0)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i69 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i194 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i139 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i47 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i66 None))) Load))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (fn_10 #0 %3 %2) Add #0) Add (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &get_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &lengths:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name g_f0 Load))) nil))) (/seq (Return (Subscript (Name g_f0 Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))) (/seq (Return (Constant s_. None))))) (/seq)) (Assign (list (Name &part_1:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzJd None) None) (Assign (list (Name &part_2:1 Store)) (Constant s-WzYzLCAzMiwgNjUsIDExNCwgMTAxLCAzMiwgMTIxLCAxMTEsIDExNywgMzIsIDk4LCAxMTcsIDExNSwgMTIxLCA2MywgMzIsIDg3LCAxMDUsIDEwOCwgMTA4LCAzMiwgMTIxLCAxMTEsIDExNywgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMzJd None) None) (Assign (list (Name &part_3:1 Store)) (Constant s-WzYzXQ== None) None) (/splice (fn_1 (/seq (Return (Call (Name &get_char:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &k:1 Load)) (_starred_content (Name &lengths:1 Load))) nil))) &k:1 &part_1:1 &n:1 &lengths:1 &part_2:1)) (fn_3 (/seq) &k:1 &part_3:1) (Return (Constant s_. None))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (fn_23 &q:2) (fn_7 (Name g_tuple Load) &q:2 &_:3 &queries:2) (Assign (list (Name &f0:2 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &max_n:2 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Name &n:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:2 Load) nil i0))))) nil) None) (Assign (list (Name &lengths:2 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f0:2 Load))) nil))) Load) None) (For (Name &i:2 Store) (fn_13 &max_n:2) (/seq (Expr (Call (Attribute (Name &lengths:2 Load) s_append Load) (list (_starred_content (BinOp (fn_17 &lengths:2) Add (Constant i75 None)))) nil))) (/seq) None) (Assign (list (Name &answers:2 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store) (Name &queries:2 Load) (/seq (Expr (Call (Attribute (Name &answers:2 Load) s_append Load) (list (_starred_content (Call (Name &get_char:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &k:2 Load)) (_starred_content (Name &lengths:2 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &answers:2 Load))) nil))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (fn_24 &f_0:1 &k:1 &n:1 &find_char:0 (/choiceseq (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil))) Load) None) (Assign (list (Name &added_length_each_step:1 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0LCAzNCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCAxMDEsIDExMCwgMTAwLCAzMiwgMzQsIDM0LCA2M10= None))) nil) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &next_length:1 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (fn_17 &lengths:1) Add (Name &added_length_each_step:1 Load))) (_starred_content (BinOp (Constant i10 None) Pow (Constant i20 None)))) nil) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &next_length:1 Load))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (Constant i34 None))) (/seq (Return (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (Constant i34 None) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)))) (/seq (AugAssign (Name &k:1 Store) Sub (Constant i34 None))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (BinOp (Constant i34 None) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) Add (Constant i32 None)))) (/seq (Return (Subscript (Constant s-WzMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCAxMDEsIDExMCwgMTAwLCAzMiwgMzRd None) (_slice_content (fn_19 (BinOp (Name &k:1 Load) Sub (Constant i34 None)) &i:1 &lengths:1)) Load))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (BinOp (Constant i34 None) Add (fn_15 &i:1 &lengths:1)) Add (Constant i32 None)))) (/seq (AugAssign (Name &k:1 Store) Sub (BinOp (BinOp (Constant i34 None) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) Add (Constant i32 None)))) (/seq (Return (Subscript (Constant s-WzM0LCA2M10= None) (_slice_content (BinOp (BinOp (BinOp (BinOp (Name &k:1 Load) Sub (Constant i34 None)) Sub (fn_15 &i:1 &lengths:1)) Sub (Constant i32 None)) Sub (Constant i1 None))) Load))))))))))) (/seq) None) (fn_4 &k:1 &f_0:1))) (fn_11 &q:0) (fn_7 (Name g_list Load) &q:0 &_:2 &queries:0) (Assign (list (Name &answers:0 Store)) (ListComp (Call (Name &find_char:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &k:3 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &k:3 Store))) Store) (Name &queries:0 Load) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &answers:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &prefixes:1 Store)) (List (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzJd None)) (_starred_content (Constant s-WzY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyXQ== None))) Load) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzYzXQ== None) None) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:1 &f_0:1)) (/seq)) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil))) Load) None) (Assign (list (Name &total_length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &total_length:1 Store)) (BinOp (BinOp (BinOp (Constant i2 None) Mult (Name &total_length:1 Load)) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil) (list (comprehension (Name &s:3 Store) (Name &prefixes:1 Load) nil i0))))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name &suffix:1 Load))) nil)) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &total_length:1 Load))) nil))) (/seq) None) (While (Compare (Name &n:1 Load) (list Gt) (list (Constant i0 None))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i0 None)) Load))) nil))) (/seq (Return (Subscript (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))) (/seq)) (AugAssign (Name &k:1 Store) Sub (Call (Name g_len Load) (list (_starred_content (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (If (Compare (Name &k:1 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name &n:1 Store) Sub (Constant i1 None)) Continue) (/seq)) (AugAssign (Name &k:1 Store) Sub (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load)) (If (Compare (Name &k:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq (Return (Subscript (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))) (/seq)) (AugAssign (Name &k:1 Store) Sub (Call (Name g_len Load) (list (_starred_content (Subscript (Name &prefixes:1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (If (Compare (Name &k:1 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Name &n:1 Store) Sub (Constant i1 None)) Continue) (/seq)) (AugAssign (Name &k:1 Store) Sub (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load)) (fn_3 (/seq) &k:1 &suffix:1) (Return (Constant s_. None))) (/seq)) (Return (IfExp (Compare (Name &k:1 Load) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil))) (Constant s_. None) (Subscript (Name &f_0:1 Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load)))) nil None None) (FunctionDef &solve_queries:0 (arguments nil (list (arg &queries:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &answers:2 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &k:2 Store))) Store) (Name &queries:2 Load) (/seq (Expr (Call (Attribute (Name &answers:2 Load) s_append Load) (list (_starred_content (Call (Name &find_char:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &k:2 Load))) nil))) nil))) (/seq) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &answers:2 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (fn_11 &q:0) (Assign (list (Name &queries:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_29) None) (Expr (Call (Attribute (Name &queries:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve_queries:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &base:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (fn_4 &k:1 &base:1)) (/seq)) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &postfix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &len_f0:1 Store)) (Constant i75 None) None) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Name &len_f0:1 Load))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &cur_len:1 Store)) (BinOp (fn_10 (Call (Name g_len Load) (list (_starred_content (Name &suffix:1 Load))) nil) &postfix:1 &prefix:1) Add (fn_17 &lengths:1)) None) (If (Compare (Name &cur_len:1 Load) (list GtE) (list (Name &k:1 Load))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &cur_len:1 Load))) nil))) (/seq) None) (While (Name &n:1 Load) (/seq (/splice (fn_1 (/seq (AugAssign (Name &n:1 Store) Sub (Constant i1 None)) Continue) &k:1 &prefix:1 &n:1 &lengths:1 &suffix:1)) (fn_3 (/seq) &k:1 &postfix:1) (Return (Constant s_. None))) (/seq)) (Return (Call (Name &find_char:0 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_23 &q:0) (/splice (fn_2 &result:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_nth_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &prefix_lengths:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &base_message:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &message_prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &message_suffix:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &message_postfix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:1 &base_message:1)) (/seq)) (/splice (fn_1 (/seq (Return (Call (Name &find_nth_character:0 Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) (_starred_content (Name &k:1 Load)) (_starred_content (Name &prefix_lengths:1 Load))) nil))) &k:1 &message_prefix:1 &n:1 &prefix_lengths:1 &message_suffix:1)) (fn_3 (/seq) &k:1 &message_postfix:1) (Return (Constant s_. None))) nil None None) (Assign (list (Name &max_n:0 Store)) (BinOp (Constant i10 None) Pow (Constant i5 None)) None) (Assign (list (Name &length_limit:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i18 None)) Add (Constant i1 None)) None) (Assign (list (Name &prefix_lengths:0 Store)) (List (list (_starred_content (Constant i75 None))) Load) None) (For (Name &_:0 Store) (fn_13 &max_n:0) (/seq (If (Compare (Subscript (Name &prefix_lengths:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Gt) (list (BinOp (Name &length_limit:0 Load) Div (Constant i2 None)))) (/seq (Expr (Call (Attribute (Name &prefix_lengths:0 Load) s_append Load) (list (_starred_content (Name &length_limit:0 Load))) nil))) (/seq (Expr (Call (Attribute (Name &prefix_lengths:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &prefix_lengths:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Mult (Constant i2 None)) Add (Constant i68 None)))) nil))))) (/seq) None) (/splice (fn_16 &q:0 &results:0 &k:0 &n:0 &_:0 (/choiceseq (Expr (Call (Attribute (Name &results:0 Load) s_append Load) (list (_starred_content (Call (Name &find_nth_character:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &prefix_lengths:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &gen_f:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &k:1 Load) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil))) (/seq (Return (Constant s_. None))) (/seq (Return (Subscript (Name &f0:1 Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))))) (/seq)) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (BinOp (fn_15 &i:1 &lengths:1) Add (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name &suffix:1 Load))) nil)) Add (Constant i2 None)))) nil)) (If (Compare (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Gt) (list (Name &k:1 Load))) (/seq Break) (/seq))) (/seq) None) (fn_26 (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &suffix:1 &prefix:1) Add (Constant i2 None)))) (/seq (If (BoolOp Or (list (Compare (Name &k:1 Load) (list Eq) (list (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load)) Add (Constant i1 None)))) (Compare (Name &k:1 Load) (list Eq) (list (BinOp (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &suffix:1 &prefix:1) Add (Constant i2 None)))))) (/seq (Return (Constant s-WzM0XQ== None))) (/seq (Return (Subscript (Name &suffix:1 Load) (_slice_content (fn_19 (BinOp (Name &k:1 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil)) &n:1 &lengths:1)) Load))))) (/seq (AugAssign (Name &k:1 Store) Sub (BinOp (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &suffix:1 &prefix:1) Add (Constant i2 None))) (AugAssign (Name &n:1 Store) Sub (Constant i1 None)))) &prefix:1 &k:1 &n:1 &lengths:1) (If (Compare (Name &k:1 Load) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil))) (/seq (Return (Constant s_. None))) (/seq (Return (Subscript (Name &f0:1 Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))))) nil None None) (FunctionDef &answer_queries:0 (arguments nil (list (arg &queries:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &answers:2 Store)) (ListComp (Call (Name &gen_f:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:2 Load) nil i0))) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &answers:2 Load))) nil))) nil None None) (fn_23 &q:0) (fn_7 (Name g_list Load) &q:0 &_:3 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &answer_queries:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve_queries:0 (arguments nil (list (arg &q:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &prefix:1 &postfix:1 &postfix_end:1 &lengths:1 (/choiceseq (Assign (list (Name &threshold:1 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)))) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i1 None)))) nil) (/seq (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &threshold:1 Load)) (_starred_content (fn_8 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &postfix_end:1 &postfix:1 &prefix:1))) nil))) nil))) (/seq) None) (FunctionDef &get_char:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:2 Load) (list Gt) (list (Subscript (Name &lengths:1 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq (Return (Constant s_. None))) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Subscript (Name &f_0:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load))) (/seq (/splice (fn_1 (/seq (Return (Call (Name &get_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &prefix:1 &n:2 &lengths:1 &postfix:1)) (fn_3 (/seq) &k:2 &postfix_end:1) (Return (Constant s_. None))))))) nil None None) (Assign (list (Name &result:1 Store)) (Constant s_ None) None) (For (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store) (Name &queries:1 Load) (/seq (AugAssign (Name &result:1 Store) Add (Call (Name &get_char:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) (/seq) None) (Return (Name &result:1 Load))) nil None None) (fn_11 &q:0) (Assign (list (Name &queries:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_29))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) nil i0))) None) (Assign (list (Name &output:0 Store)) (Call (Name &solve_queries:0 Load) (list (_starred_content (Name &q:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &output:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_kth_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &beginning:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &middle:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &end:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &f0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (FunctionDef &length_of_fi:1 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil))) (/seq)) (Return (fn_8 (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Sub (Constant i1 None)))) nil) &end:1 &middle:1 &beginning:1))) nil None None) (Assign (list (Name &length_memo:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil))) Load) None) (FunctionDef &get_char:1 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &length_memo:1 Load))) nil) (list LtE) (list (Name &n:3 Load))) (/seq (Expr (Call (Attribute (Name &length_memo:1 Load) s_append Load) (list (_starred_content (fn_8 (Subscript (Name &length_memo:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &end:1 &middle:1 &beginning:1))) nil))) (/seq)) (If (Compare (Subscript (Name &length_memo:1 Load) (_slice_content (Name &n:3 Load)) Load) (list Lt) (list (Name &k:3 Load))) (/seq (Return (Constant s_. None))) (/seq)) (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Subscript (Name &f0:1 Load) (_slice_content (BinOp (Name &k:3 Load) Sub (Constant i1 None))) Load))) (/seq)) (fn_21 (Return (Subscript (Name &end:1 Load) (_slice_content (BinOp (BinOp (BinOp (BinOp (Name &k:3 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &beginning:1 Load))) nil)) Sub (fn_15 &n:3 &length_memo:1)) Sub (Call (Name g_len Load) (list (_starred_content (Name &middle:1 Load))) nil)) Sub (Constant i1 None))) Load)) &beginning:1 &k:3 &get_char:1 &middle:1 &length_memo:1 &n:3)) nil None None) (Return (Name &get_char:1 Load))) nil None None) (fn_11 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &get_char_func:0 &q:0 &_:0 (/choiceseq (Assign (list (Name &get_char_func:0 Store)) (Call (Name &find_kth_character:0 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &query_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &length:1 Store)) (List (list (_starred_content (Constant i75 None))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &current_length:1 Store)) (BinOp (fn_15 &i:1 &length:1) Add (Constant i68 None)) None) (If (Compare (Name &current_length:1 Load) (list GtE) (list (BinOp (Constant i10 None) Pow (Constant i18 None)))) (/seq (Assign (list (Name &current_length:1 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)) (/seq)) (Expr (Call (Attribute (Name &length:1 Load) s_append Load) (list (_starred_content (Name &current_length:1 Load))) nil))) (/seq) None) (FunctionDef &helper:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (fn_12 (Subscript (Name &length:1 Load) (_slice_content (Constant i0 None)) Load) &k:2 &f_0:0 &n:2) (Assign (list (Tuple (list (_starred_content (Name &prefix:2 Store)) (_starred_content (Name &middle:2 Store)) (_starred_content (Name &suffix:2 Store))) Store)) (Tuple (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None)) (_starred_content (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None)) (_starred_content (Constant s-WzM0LCA2M10= None))) Load) None) (/splice (fn_1 (/seq (Return (Call (Name &helper:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &prefix:2 &n:2 &length:1 &middle:2)) (fn_3 (/seq) &k:2 &suffix:2) (Return (Constant s_. None))) nil None None) (Return (Call (Name &helper:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_23 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &query_char:0 &q:0 &_:0 (/choiceseq (Assign (list (Name &f_0:0 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None))))) nil)",
            "(Module (/seq (FunctionDef &find_kth_character:0 (arguments nil (list (arg &queries:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &start:1 &mid:1 &end:1 &lengths:1 (/choiceseq))) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i100001 None))) nil) (/seq (Assign (list (Name &l:1 Store)) (BinOp (BinOp (BinOp (BinOp (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Mult (Constant i2 None)) Add (Call (Name g_len Load) (list (_starred_content (Name &start:1 Load))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name &mid:1 Load))) nil)) Add (Call (Name g_len Load) (list (_starred_content (Name &end:1 Load))) nil)) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &l:1 Load)) (_starred_content (BinOp (Constant i2 None) Pow (Constant i63 None)))) nil))) nil))) (/seq) None) (FunctionDef &get_char:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:2 &f_0:1)) (/seq (fn_21 (If (Compare (Name &k:2 Load) (list LtE) (list (BinOp (fn_10 (fn_15 &n:2 &lengths:1) &mid:1 &start:1) Add (Call (Name g_len Load) (list (_starred_content (Name &end:1 Load))) nil)))) (/seq (Return (Subscript (Name &end:1 Load) (_slice_content (BinOp (BinOp (BinOp (BinOp (Name &k:2 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &start:1 Load))) nil)) Sub (fn_15 &n:2 &lengths:1)) Sub (Call (Name g_len Load) (list (_starred_content (Name &mid:1 Load))) nil)) Sub (Constant i1 None))) Load))) (/seq (Return (Constant s_. None)))) &start:1 &k:2 &get_char:1 &mid:1 &lengths:1 &n:2)))) nil None None) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name &get_char:1 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:1 Load) nil i0))))) nil) None) (Return (Name &answer:1 Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (fn_23 &q:0) (fn_7 (Name g_tuple Load) &q:0 &_:3 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &prefix:1 &mid:1 &suffix:1 &lengths:1 (/choiceseq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:1 &f_0:1)) (/seq))))) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &new_length:1 Store)) (fn_8 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &suffix:1 &mid:1 &prefix:1) None) (If (Compare (Name &new_length:1 Load) (list GtE) (list (BinOp (Constant i10 None) Pow (Constant i20 None)))) (/seq (Assign (list (Name &new_length:1 Store)) (BinOp (Constant i10 None) Pow (Constant i20 None)) None)) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &new_length:1 Load))) nil))) (/seq) None) (While (Compare (Name &n:1 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_1 (/seq (AugAssign (Name &n:1 Store) Sub (Constant i1 None)) Continue) &k:1 &prefix:1 &n:1 &lengths:1 &mid:1)) (fn_3 (/seq) &k:1 &suffix:1) (Return (Constant s_. None))) (/seq)) (fn_4 &k:1 &f_0:1)) nil None None) (/splice (fn_16 &q:0 &answers:0 &k:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &answer:0 Store)) (Call (Name &find_character:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (Expr (Call (Attribute (Name &answers:0 Load) s_append Load) (list (_starred_content (Name &answer:0 Load))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &query_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0_length:1 Store)) (Constant i75 None) None) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &k:1 Load) (list Gt) (list (Name &f_0_length:1 Load))) (/seq (Return (Constant s_. None))) (/seq)) (Return (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load))) (/seq)) (Assign (list (Name &prefix_length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None))) nil) None) (Assign (list (Name &infix_length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None))) nil) None) (Assign (list (Name &suffix_length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-WzM0LCA2M10= None))) nil) None) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Name &f_0_length:1 Load))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &next_length:1 Store)) (BinOp (BinOp (BinOp (fn_17 &lengths:1) Add (Name &prefix_length:1 Load)) Add (Name &infix_length:1 Load)) Add (Name &suffix_length:1 Load)) None) (If (Compare (Name &next_length:1 Load) (list Gt) (list (BinOp (Constant i2 None) Pow (Constant i63 None)))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &next_length:1 Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) nil)) (FunctionDef &find_character:1 (arguments nil (list (arg &level:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &level:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name &query_character:0 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &k:2 Load))) nil))) (/seq)) (If (Compare (Name &k:2 Load) (list LtE) (list (Name &prefix_length:1 Load))) (/seq (Return (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load))) (fn_25 (If (Compare (Name &k:2 Load) (list LtE) (list (BinOp (BinOp (Name &prefix_length:1 Load) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &level:2 Load) Sub (Constant i1 None))) Load)) Add (Name &infix_length:1 Load)))) (/seq (Return (Subscript (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) (_slice_content (fn_19 (BinOp (Name &k:2 Load) Sub (Name &prefix_length:1 Load)) &level:2 &lengths:1)) Load))) (fn_9 (Constant s-WzM0LCA2M10= None) &infix_length:1 &level:2 &lengths:1 &prefix_length:1 &k:2 &suffix_length:1 &find_character:1)) &prefix_length:1 &k:2 &level:2 &find_character:1 &lengths:1))) nil None None) (Return (Call (Name &find_character:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_23 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &query_character:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (fn_24 &base:1 &k:1 &n:1 &find_character:0 (/choiceseq (Assign (list (Name &pref:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &suff:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &end:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &base:1 Load))) nil))) Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &new_length:1 Store)) (fn_8 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &end:1 &suff:1 &pref:1) None) (If (Compare (Name &new_length:1 Load) (list Gt) (list (Constant f1e+18 None))) (/seq (Assign (list (Name &new_length:1 Store)) (Call (Name g_int Load) (list (_starred_content (Constant f1e+18 None))) nil) None)) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &new_length:1 Load))) nil))) (/seq) None) (FunctionDef &recursive_find:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:2 &base:1)) (/seq (If (Compare (Name &k:2 Load) (list Gt) (list (Subscript (Name &lengths:1 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq (Return (Constant s_. None))) (/seq (fn_3 (/seq (If (Compare (Name &k:2 Load) (list Gt) (list (BinOp (Subscript (Name &lengths:1 Load) (_slice_content (Name &n:2 Load)) Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &end:1 Load))) nil)))) (/seq (Return (Subscript (Name &end:1 Load) (_slice_content (BinOp (BinOp (Name &k:2 Load) Sub (BinOp (Subscript (Name &lengths:1 Load) (_slice_content (Name &n:2 Load)) Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &end:1 Load))) nil))) Sub (Constant i1 None))) Load))) (fn_5 (Return (Call (Name &recursive_find:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name &k:2 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &pref:1 Load))) nil)) Sub (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)) Sub (Call (Name g_len Load) (list (_starred_content (Name &suff:1 Load))) nil)))) nil)) &n:2 &lengths:1 &pref:1 &k:2 &suff:1 &recursive_find:1))) &k:2 &pref:1)))))) nil None None) (Return (Call (Name &recursive_find:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil)))) (fn_11 &q:0) (fn_7 (Name g_tuple Load) &q:0 &_:3 &queries:0) (Assign (list (Name &result:0 Store)) (ListComp (Call (Name &find_character:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:0 Load) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &result:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve_queries:0 (arguments nil (list (arg &queries:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &mid:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &f_0_len:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil) None) (Assign (list (Name &cache:1 Store)) (Dict (list (Constant i0 None)) (list (Name &f_0_len:1 Load))) None) (FunctionDef &get_length:1 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list In) (list (Name &cache:1 Load))) (/seq (Return (Subscript (Name &cache:1 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq)) (If (Compare (BinOp (Name &n:2 Load) Sub (Constant i1 None)) (list NotIn) (list (Name &cache:1 Load))) (/seq (Expr (Call (Name &get_length:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None)))) nil))) (/seq)) (Assign (list (Subscript (Name &cache:1 Load) (_slice_content (Name &n:2 Load)) Store)) (fn_8 (Subscript (Name &cache:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load) &suffix:1 &mid:1 &prefix:1) None) (Return (Subscript (Name &cache:1 Load) (_slice_content (Name &n:2 Load)) Load))) nil None None) (FunctionDef &get_char:1 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (fn_12 (Name &f_0_len:1 Load) &k:3 &f_0:1 &n:3) (Assign (list (Name &len_pre:3 Store)) (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil) None) (Assign (list (Name &len_mid:3 Store)) (Call (Name g_len Load) (list (_starred_content (Name &mid:1 Load))) nil) None) (Assign (list (Name &len_f_n_1:3 Store)) (Call (Name &get_length:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) None) (Assign (list (Name &total_mid:3 Store)) (BinOp (BinOp (Name &len_pre:3 Load) Add (Name &len_f_n_1:3 Load)) Add (Name &len_mid:3 Load)) None) (fn_27 (/seq (If (Compare (Name &k:3 Load) (list LtE) (list (BinOp (Name &len_pre:3 Load) Add (Name &len_f_n_1:3 Load)))) (/seq (Return (Call (Name &get_char:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:3 Load) Sub (Name &len_pre:3 Load)))) nil))) (/seq (If (Compare (Name &k:3 Load) (list LtE) (list (Name &total_mid:3 Load))) (/seq (Return (Subscript (Name &mid:1 Load) (_slice_content (BinOp (BinOp (BinOp (Name &k:3 Load) Sub (Name &total_mid:3 Load)) Add (Call (Name g_len Load) (list (_starred_content (Name &mid:1 Load))) nil)) Sub (Constant i1 None))) Load))) (/seq (If (Compare (Name &k:3 Load) (list LtE) (list (BinOp (Name &total_mid:3 Load) Add (Name &len_f_n_1:3 Load)))) (/seq (Return (Call (Name &get_char:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:3 Load) Sub (Name &total_mid:3 Load)))) nil))) (/seq (If (Compare (Name &k:3 Load) (list LtE) (list (BinOp (BinOp (Name &total_mid:3 Load) Add (Name &len_f_n_1:3 Load)) Add (Call (Name g_len Load) (list (_starred_content (Name &suffix:1 Load))) nil)))) (/seq (Return (Subscript (Name &suffix:1 Load) (_slice_content (BinOp (BinOp (Name &k:3 Load) Sub (BinOp (Name &total_mid:3 Load) Add (Name &len_f_n_1:3 Load))) Sub (Constant i1 None))) Load))) (/seq (Return (Constant s_. None))))))))))) &k:3 &prefix:1 &len_pre:3)) nil None None) (Assign (list (Name &result:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store) (Name &queries:1 Load) (/seq (Expr (Call (Name &get_length:1 Load) (list (_starred_content (Name &n:1 Load))) nil)) (Expr (Call (Attribute (Name &result:1 Load) s_append Load) (list (_starred_content (Call (Name &get_char:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil))) (/seq) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &result:1 Load))) nil))) nil None None) (fn_11 &q:0) (fn_7 (Name g_tuple Load) &q:0 &_:4 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve_queries:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve_queries:0 (arguments nil (list (arg &queries:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &infix:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &f_0_length:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil) None) (Assign (list (Name &length_cache:1 Store)) (List (list (_starred_content (Name &f_0_length:1 Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i100001 None))) nil) (/seq (Assign (list (Name &new_length:1 Store)) (fn_30 (Subscript (Name &length_cache:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) &suffix:1 &prefix:1 &infix:1) None) (If (Compare (Name &new_length:1 Load) (list GtE) (list (BinOp (Constant i2 None) Pow (Constant i63 None)))) (/seq (Expr (Call (Attribute (Name &length_cache:1 Load) s_append Load) (list (_starred_content (BinOp (Constant i2 None) Pow (Constant i63 None)))) nil))) (/seq (Expr (Call (Attribute (Name &length_cache:1 Load) s_append Load) (list (_starred_content (Name &new_length:1 Load))) nil))))) (/seq) None) (FunctionDef &find_char:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (fn_12 (Name &f_0_length:1 Load) &k:2 &f_0:1 &n:2) (/splice (fn_1 (/seq (Return (Call (Name &find_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &prefix:1 &n:2 &length_cache:1 &infix:1)) (fn_3 (/seq) &k:2 &suffix:1) (Return (Constant s_. None))) nil None None) (Assign (list (Name &result:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name &find_char:1 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:1 Load) nil i0))))) nil) None) (Return (Name &result:1 Load))) nil None None) (fn_23 &q:0) (fn_7 (Name g_tuple Load) &q:0 &_:3 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve_queries:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_24 &f_0:1 &k:1 &n:1 &get_char:0 (/choiceseq (/splice (fn_22 &prefix:1 &middle:1 &suffix:1 &prefix_len:1 &middle_len:1 &suffix_len:1 (/choiceseq))) (Assign (list (Name &f_lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (If (Compare (Subscript (Name &f_lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Gt) (list (Name &k:1 Load))) (/seq (Expr (Call (Attribute (Name &f_lengths:1 Load) s_append Load) (list (_starred_content (Subscript (Name &f_lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (/seq (Assign (list (Name &new_length:1 Store)) (BinOp (BinOp (BinOp (fn_17 &f_lengths:1) Add (Name &prefix_len:1 Load)) Add (Name &middle_len:1 Load)) Add (Name &suffix_len:1 Load)) None) (Expr (Call (Attribute (Name &f_lengths:1 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &new_length:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil))))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_reversed Load) (list (_starred_content (fn_13 &n:1))) nil) (/seq (fn_27 (fn_25 (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (BinOp (Name &prefix_len:1 Load) Add (Name &middle_len:1 Load)) Add (Subscript (Name &f_lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Subscript (Name &middle:1 Load) (_slice_content (fn_19 (BinOp (Name &k:1 Load) Sub (Name &prefix_len:1 Load)) &i:1 &f_lengths:1)) Load))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (BinOp (Name &prefix_len:1 Load) Add (Name &middle_len:1 Load)) Add (fn_15 &i:1 &f_lengths:1)))) (/seq (Return (Call (Name &get_char:0 Load) (list (_starred_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name &k:1 Load) Sub (Name &prefix_len:1 Load)) Sub (Name &middle_len:1 Load)) Sub (Subscript (Name &f_lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)))) nil))) (/seq (Return (Subscript (Name &suffix:1 Load) (_slice_content (BinOp (BinOp (BinOp (BinOp (Name &k:1 Load) Sub (Name &prefix_len:1 Load)) Sub (Name &middle_len:1 Load)) Sub (fn_15 &i:1 &f_lengths:1)) Sub (Constant i1 None))) Load)))))) &prefix_len:1 &k:1 &i:1 &get_char:0 &f_lengths:1) &k:1 &prefix:1 &prefix_len:1)) (/seq) None) (Return (Constant s_. None)))) (fn_23 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &get_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_kth_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &add_left:1 &add_right:1 &add_end:1 &lengths:1 (/choiceseq (Assign (list (Name &max_length:1 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)))) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &next_len:1 Store)) (fn_8 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &add_end:1 &add_right:1 &add_left:1) None) (If (Compare (Name &next_len:1 Load) (list Gt) (list (Name &max_length:1 Load))) (/seq (Assign (list (Name &next_len:1 Store)) (Name &max_length:1 Load) None)) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &next_len:1 Load))) nil))) (/seq) None) (fn_20 &n:2 &lengths:1 &k:2 &f_0:1 &get_char:1 (/choiceseq (/splice (fn_1 (/seq (Return (Call (Name &get_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &add_left:1 &n:2 &lengths:1 &add_right:1)) (Return (Subscript (Name &add_end:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load)))) (Return (Name &get_char:1 Load))) nil None None) (/splice (fn_16 &q:0 &answers:0 &k:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &char:0 Store)) (Call (Name &find_kth_character:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (Expr (Call (Attribute (Name &answers:0 Load) s_append Load) (list (_starred_content (Call (Name &char:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &find_kth_character:0 (arguments nil (list (arg &q:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f0:1 &prefix:1 &middle:1 &suffix:1 &cache:1 (/choiceseq))) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Constant i100001 None)) (_starred_content (BinOp (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Name &n:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &_:4 Store))) Store) (Name &queries:1 Load) nil i0))))) nil) Add (Constant i1 None)))) nil))) nil) (/seq (Expr (Call (Attribute (Name &cache:1 Load) s_append Load) (list (_starred_content (fn_30 (Subscript (Name &cache:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &suffix:1 &prefix:1 &middle:1))) nil))) (/seq) None) (fn_20 &n:2 &cache:1 &k:2 &f0:1 &get_char:1 (/choiceseq (/splice (fn_1 (/seq (Return (Call (Name &get_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &prefix:1 &n:2 &cache:1 &middle:1)) (fn_4 &k:2 &suffix:1))) (Assign (list (Name &results:1 Store)) (ListComp (Call (Name &get_char:1 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &k:3 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &k:3 Store))) Store) (Name &queries:1 Load) nil i0))) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &results:1 Load))) nil))) nil None None) (Assign (list (Name &q1:0 Store)) (Constant i3 None) None) (Assign (list (Name &queries1:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i111111111111 None))) Load))) Load) None) (Assign (list (Name &q2:0 Store)) (Constant i5 None) None) (Assign (list (Name &queries2:0 Store)) (fn_28) None) (Assign (list (Name &q3:0 Store)) (Constant i10 None) None) (Assign (list (Name &queries3:0 Store)) (fn_18) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Name &q1:0 Load)) (_starred_content (Name &queries1:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Name &q2:0 Load)) (_starred_content (Name &queries2:0 Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Name &q3:0 Load)) (_starred_content (Name &queries3:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &query:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &base:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &length:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &base:1 Load))) nil))) Load) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &infix:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &postfix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (Assign (list (Name &additional_length:1 Store)) (fn_10 (Call (Name g_len Load) (list (_starred_content (Name &infix:1 Load))) nil) &postfix:1 &prefix:1) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &next_length:1 Store)) (BinOp (fn_15 &i:1 &length:1) Add (Name &additional_length:1 Load)) None) (If (Compare (Name &next_length:1 Load) (list Gt) (list (Name &k:1 Load))) (/seq (Expr (Call (Attribute (Name &length:1 Load) s_append Load) (list (_starred_content (Name &next_length:1 Load))) nil))) (/seq (Expr (Call (Attribute (Name &length:1 Load) s_append Load) (list (_starred_content (Name &k:1 Load))) nil)) Break))) (/seq) None) (FunctionDef &find_char:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (fn_12 (Subscript (Name &length:1 Load) (_slice_content (Constant i0 None)) Load) &k:2 &base:1 &n:2) (If (Compare (Name &k:2 Load) (list Gt) (list (Subscript (Name &length:1 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq (Return (Constant s_. None))) (/seq)) (/splice (fn_1 (/seq (Return (Call (Name &find_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) &k:2 &prefix:1 &n:2 &length:1 &infix:1)) (Return (Subscript (Name &postfix:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load))) nil None None) (Return (Call (Name &find_char:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_11 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &query:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f0_len:1 Store)) (Constant i75 None) None) (Assign (list (Name &add_len:1 Store)) (Constant i34 None) None) (Assign (list (Name &cache:1 Store)) (Dict (list (Constant i0 None)) (list (Name &f0_len:1 Load))) None) (FunctionDef &len_fn:1 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &i:2 Load) (list In) (list (Name &cache:1 Load))) (/seq (Return (Subscript (Name &cache:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq)) (Assign (list (Subscript (Name &cache:1 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (BinOp (Constant i2 None) Mult (Call (Name &len_fn:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Sub (Constant i1 None)))) nil)) Add (Name &add_len:1 Load)) None) (If (Compare (Subscript (Name &cache:1 Load) (_slice_content (Name &i:2 Load)) Load) (list Gt) (list (BinOp (Constant i2 None) Pow (Constant i63 None)))) (/seq (Assign (list (Subscript (Name &cache:1 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (Constant i2 None) Pow (Constant i63 None)) None)) (/seq)) (Return (Subscript (Name &cache:1 Load) (_slice_content (Name &i:2 Load)) Load))) nil None None) (FunctionDef &query:1 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:3 Load) (list Gt) (list (Call (Name &len_fn:1 Load) (list (_starred_content (Name &n:3 Load))) nil))) (/seq (Return (Constant s_. None))) (/seq)) (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) (_slice_content (BinOp (Name &k:3 Load) Sub (Constant i1 None))) Load))) (/seq)) (Assign (list (Name &left_expansion:3 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &middle_expansion:3 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &right_expansion:3 Store)) (Constant s-WzM0LCA2M10= None) None) (/splice (fn_6 (Call (Name &len_fn:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) &left_expansion:3 &k:3 &n:3 &query:1 &middle_expansion:3)) (AugAssign (Name &k:3 Store) Sub (Call (Name &len_fn:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)) (fn_3 (/seq) &k:3 &right_expansion:3) (Return (Constant s_. None))) nil None None) (Return (Call (Name &query:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_11 &q:0) (/splice (fn_2 &answers:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &base_string:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (fn_4 &k:1 &base_string:1)) (/seq)) (Assign (list (Name &pre_length:1 Store)) (List (list (_starred_content (Constant i75 None))) Load) None) (Assign (list (Name &total_length:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None))) nil))) Load) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name &total_length:1 Load))) nil) (list LtE) (list (Name &n:1 Load))) (/seq (Assign (list (Name &next_len:1 Store)) (BinOp (BinOp (fn_17 &total_length:1) Add (Subscript (Name &pre_length:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Add (Constant i68 None)) None) (Expr (Call (Attribute (Name &total_length:1 Load) s_append Load) (list (_starred_content (Name &next_len:1 Load))) nil)) (Expr (Call (Attribute (Name &pre_length:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &pre_length:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Constant i68 None)))) nil))) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (Subscript (Name &pre_length:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq (Return (IfExp (Compare (Name &k:1 Load) (list LtE) (list (Constant i34 None))) (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzJd None) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load) (Subscript (Constant s-WzY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyXQ== None) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i35 None))) Load)))) (/seq (If (Compare (Name &k:1 Load) (list Gt) (list (BinOp (Subscript (Name &total_length:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &pre_length:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)))) (/seq (AugAssign (Name &k:1 Store) Sub (BinOp (Subscript (Name &total_length:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &pre_length:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (Return (IfExp (Compare (Name &k:1 Load) (list LtE) (list (Constant i32 None))) (Subscript (Constant s-WzY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyXQ== None) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load) (Constant s_. None)))) (/seq (AugAssign (Name &k:1 Store) Sub (Subscript (Name &pre_length:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))))))) (/seq) None) (Return (Call (Name &find_char:0 Load) (list (_starred_content (Constant i0 None)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_23 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (/splice (fn_22 &p1:1 &p2:1 &p3:1 &len_p1:1 &len_p2:1 &len_p3:1 (/choiceseq (Assign (list (Name &len_f0:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &f0:1 Load))) nil) None)))) (FunctionDef &length_of_fi:1 (arguments nil (list (arg &i:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &i:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &len_f0:1 Load))) (/seq)) (If (Compare (Name &i:2 Load) (list In) (list (Name &length_cache:1 Load))) (/seq (Return (Subscript (Name &length_cache:1 Load) (_slice_content (Name &i:2 Load)) Load))) (/seq)) (Assign (list (Name &length:2 Store)) (BinOp (BinOp (BinOp (Name &len_p1:1 Load) Add (Name &len_p2:1 Load)) Add (Name &len_p3:1 Load)) Add (BinOp (Constant i2 None) Mult (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &i:2 Load) Sub (Constant i1 None)))) nil))) None) (Assign (list (Subscript (Name &length_cache:1 Load) (_slice_content (Name &i:2 Load)) Store)) (Name &length:2 Load) None) (Return (Name &length:2 Load))) nil None None) (Assign (list (Name &length_cache:1 Store)) (Dict (list (Constant i0 None)) (list (Name &len_f0:1 Load))) None) (FunctionDef &query:1 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:3 Load) (list Gt) (list (Call (Name &length_of_fi:1 Load) (list (_starred_content (Name &n:3 Load))) nil))) (/seq (Return (Constant s_. None))) (/seq)) (While (Compare (Name &n:3 Load) (list Gt) (list (Constant i0 None))) (/seq (fn_27 (/seq) &k:3 &p1:1 &len_p1:1) (AugAssign (Name &k:3 Store) Sub (Name &len_p1:1 Load)) (If (Compare (Name &k:3 Load) (list LtE) (list (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil))) (/seq (AugAssign (Name &n:3 Store) Sub (Constant i1 None)) Continue) (/seq)) (AugAssign (Name &k:3 Store) Sub (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)) (fn_27 (/seq) &k:3 &p2:1 &len_p2:1) (AugAssign (Name &k:3 Store) Sub (Name &len_p2:1 Load)) (If (Compare (Name &k:3 Load) (list LtE) (list (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil))) (/seq (AugAssign (Name &n:3 Store) Sub (Constant i1 None)) Continue) (/seq)) (Return (Subscript (Name &p3:1 Load) (_slice_content (BinOp (BinOp (Name &k:3 Load) Sub (Call (Name &length_of_fi:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)) Sub (Constant i1 None))) Load))) (/seq)) (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Subscript (Name &f0:1 Load) (_slice_content (BinOp (Name &k:3 Load) Sub (Constant i1 None))) Load))) (/seq))) nil None None) (Return (Call (Name &query:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_11 &q:0) (Assign (list (Name &answers:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (fn_29) None) (Expr (Call (Attribute (Name &answers:0 Load) s_append Load) (list (_starred_content (Call (Name &find_char:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &answers:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (/splice (fn_22 &prefix:1 &middle:1 &suffix:1 &len_prefix:1 &len_middle:1 &len_suffix:1 (/choiceseq (Assign (list (Name &len_f_0:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil) None)))) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Name &len_f_0:1 Load))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &new_length:1 Store)) (BinOp (BinOp (BinOp (fn_17 &lengths:1) Add (Name &len_prefix:1 Load)) Add (Name &len_middle:1 Load)) Add (Name &len_suffix:1 Load)) None) (If (Compare (Name &new_length:1 Load) (list Gt) (list (Name &k:1 Load))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &new_length:1 Load))) nil))) (/seq) None) (FunctionDef &query:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (IfExp (Compare (Name &k:2 Load) (list LtE) (list (Name &len_f_0:1 Load))) (Subscript (Name &f_0:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load) (Constant s_. None)))) (/seq (fn_27 (fn_25 (If (Compare (Name &k:2 Load) (list LtE) (list (BinOp (BinOp (Name &len_prefix:1 Load) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)) Add (Name &len_middle:1 Load)))) (/seq (Return (Subscript (Name &middle:1 Load) (_slice_content (fn_19 (BinOp (Name &k:2 Load) Sub (Name &len_prefix:1 Load)) &n:2 &lengths:1)) Load))) (fn_9 (Name &suffix:1 Load) &len_middle:1 &n:2 &lengths:1 &len_prefix:1 &k:2 &len_suffix:1 &query:1)) &len_prefix:1 &k:2 &n:2 &query:1 &lengths:1) &k:2 &prefix:1 &len_prefix:1)))) nil None None) (Return (Call (Name &query:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) nil None None) (fn_23 &q:0) (/splice (fn_2 &answers:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &generate_sequence:0 (arguments nil (list (arg &length:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &F:1 Store)) (List (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None))) Load) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &middle:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &length:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &F:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (Name &prefix:1 Load) Add (Subscript (Name &F:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) Add (Name &middle:1 Load)) Add (Subscript (Name &F:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) Add (Name &suffix:1 Load)))) nil))) (/seq) None) (Return (Name &F:1 Load))) nil None None) (FunctionDef &find_char:0 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None) (arg &sequence_lengths:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:2 &F_0:0)) (/seq)) (If (Compare (Name &k:2 Load) (list LtE) (list (Subscript (Name &sequence_lengths:2 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq (Assign (list (Name &prefix_length:2 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None))) nil) None) (Assign (list (Name &middle_length:2 Store)) (Call (Name g_len Load) (list (_starred_content (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None))) nil) None) (Assign (list (Name &first_part:2 Store)) (Name &prefix_length:2 Load) None) (Assign (list (Name &second_part:2 Store)) (BinOp (BinOp (Name &first_part:2 Load) Add (Subscript (Name &sequence_lengths:2 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)) Add (Name &middle_length:2 Load)) None) (If (Compare (Name &k:2 Load) (list LtE) (list (Name &first_part:2 Load))) (/seq (Return (Subscript (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load))) (/seq (If (Compare (Name &first_part:2 Load) (list Lt LtE) (list (Name &k:2 Load) (Name &second_part:2 Load))) (/seq (Return (Call (Name &find_char:0 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:2 Load) Sub (Name &first_part:2 Load))) (_starred_content (Name &sequence_lengths:2 Load))) nil))) (/seq (If (Compare (Name &second_part:2 Load) (list Lt LtE) (list (Name &k:2 Load) (BinOp (Name &second_part:2 Load) Add (Subscript (Name &sequence_lengths:2 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Call (Name &find_char:0 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:2 Load) Sub (Name &second_part:2 Load))) (_starred_content (Name &sequence_lengths:2 Load))) nil))) (/seq (Return (Subscript (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) (_slice_content (fn_19 (BinOp (Name &k:2 Load) Sub (Name &second_part:2 Load)) &n:2 &sequence_lengths:2)) Load))))))))) (/seq (Return (Constant s_. None))))) nil None None) (Assign (list (Name &sequence_lengths:0 Store)) (List (list (_starred_content (Constant i75 None))) Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i100001 None))) nil) (/seq (Assign (list (Name &new_length:0 Store)) (BinOp (BinOp (Subscript (Name &sequence_lengths:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Mult (Constant i2 None)) Add (Call (Name g_len Load) (list (_starred_content (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0LCAzNCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCAxMDEsIDExMCwgMTAwLCAzMiwgMzQsIDM0LCA2M10= None))) nil)) None) (If (Compare (Name &new_length:0 Load) (list Gt) (list (BinOp (Constant i10 None) Pow (Constant i18 None)))) (/seq (Assign (list (Name &new_length:0 Store)) (BinOp (Constant i10 None) Pow (Constant i18 None)) None)) (/seq)) (Expr (Call (Attribute (Name &sequence_lengths:0 Load) s_append Load) (list (_starred_content (Name &new_length:0 Load))) nil))) (/seq) None) (Assign (list (Name &F_0:0 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (fn_23 &q:0) (Assign (list (Name &answers:0 Store)) (Constant s_ None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &answers:0 Store) Add (Call (Name &find_char:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &sequence_lengths:0 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answers:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &kth_character_in_compression:0 (arguments nil (list (arg &q:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &base:1 &prefix:1 &infix:1 &suffix:1 &lengths:1 (/choiceseq))) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i100005 None))) nil) (/seq (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (BinOp (Constant i2 None) Pow (Constant i63 None)) Sub (Constant i1 None))) (_starred_content (fn_30 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &suffix:1 &prefix:1 &infix:1))) nil))) nil))) (/seq) None) (fn_20 &n:2 &lengths:1 &k:2 &base:1 &find_kth_character:1 (/choiceseq (/splice (fn_6 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load) &prefix:1 &k:2 &n:2 &find_kth_character:1 &infix:1)) (Return (Subscript (Name &suffix:1 Load) (_slice_content (fn_19 (Name &k:2 Load) &n:2 &lengths:1)) Load)))) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name &find_kth_character:1 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &k:4 Store))) Store) (Name &queries:1 Load) nil i0))))) nil))) nil None None) (fn_11 &q:0) (fn_7 (Name g_list Load) &q:0 &_:3 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &kth_character_in_compression:0 Load) (list (_starred_content (Name &q:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_character:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDEwNSwgMTEwLCAxMDAsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDcsIDQ1LCAxMTYsIDEwNCwgMzIsIDk5LCAxMDQsIDk3LCAxMTQsIDk3LCA5OSwgMTE2LCAxMDEsIDExNCwgMzIsIDExMSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTE2LCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMDIsIDk1LCAxMjMsIDExMCwgMTI1LCAzMiwgOTgsIDk3LCAxMTUsIDEwMSwgMTAwLCAzMiwgMTExLCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCAxMTQsIDExMSwgOTgsIDEwOCwgMTAxLCAxMDksIDM5LCAxMTUsIDMyLCAxMTUsIDExMiwgMTAxLCA5OSwgMTA1LCAxMDIsIDEwNSwgOTksIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzJd None)) (Assign (list (Name &F_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &F_0:1 Load))) nil))) Load) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Gt) (list (Name &k:1 Load))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (BinOp (fn_17 &lengths:1) Add (Constant i75 None)))) nil))) (/seq) None) (FunctionDef &char_at:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (fn_12 (Subscript (Name &lengths:1 Load) (_slice_content (Constant i0 None)) Load) &k:2 &F_0:1 &n:2) (Assign (list (Name &prefix:2 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &suffix:2 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (fn_3 (/seq) &k:2 &prefix:2) (AugAssign (Name &k:2 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name &prefix:2 Load))) nil)) (If (BoolOp And (list (Compare (BinOp (Name &n:2 Load) Sub (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &lengths:1 Load))) nil))) (Compare (Name &k:2 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load))))) (/seq (Return (Call (Name &char_at:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) (/seq)) (AugAssign (Name &k:2 Store) Sub (IfExp (Compare (BinOp (Name &n:2 Load) Sub (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &lengths:1 Load))) nil))) (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load) (Constant i0 None))) (fn_3 (/seq) &k:2 &suffix:2) (AugAssign (Name &k:2 Store) Sub (Call (Name g_len Load) (list (_starred_content (Name &suffix:2 Load))) nil)) (If (BoolOp And (list (Compare (BinOp (Name &n:2 Load) Sub (Constant i1 None)) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &lengths:1 Load))) nil))) (Compare (Name &k:2 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load))))) (/seq (Return (Call (Name &char_at:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (Name &k:2 Load))) nil))) (/seq)) (Return (Constant s_. None))) nil None None) (Return (Name &char_at:1 Load))) nil None None) (fn_23 &q:0) (fn_7 (Name g_list Load) &q:0 &_:3 &queries:0) (Assign (list (Name &result:0 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &k:0 Store))) Store) (Name &queries:0 Load) (/seq (Assign (list (Name &func:0 Store)) (Call (Name &find_character:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil) None) (Expr (Call (Attribute (Name &result:0 Load) s_append Load) (list (_starred_content (Call (Name &func:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &result:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_kth_character:0 (arguments nil (list (arg &q:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &f_0:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCA5NywgMTE2LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMSwgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDExMSwgMTE0LCAxMDgsIDEwMCwgNjMsIDMyLCA2NSwgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgOTgsIDExNywgMTE1LCAxMjEsIDYzLCAzMiwgODcsIDEwNSwgMTA4LCAxMDgsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTE1LCA5NywgMTE4LCAxMDEsIDMyLCAxMTcsIDExNSwgNjNd None) None) (Assign (list (Name &prefix:1 Store)) (Constant s-Wzg3LCAxMDQsIDk3LCAxMTYsIDMyLCA5NywgMTE0LCAxMDEsIDMyLCAxMjEsIDExMSwgMTE3LCAzMiwgMTAwLCAxMTEsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTksIDEwNCwgMTA1LCAxMDgsIDEwMSwgMzIsIDExNSwgMTAxLCAxMTAsIDEwMCwgMTA1LCAxMTAsIDEwMywgMzIsIDM0XQ== None) None) (Assign (list (Name &middle:1 Store)) (Constant s-WzM0LCA2MywgMzIsIDY1LCAxMTQsIDEwMSwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCA5OCwgMTE3LCAxMTUsIDEyMSwgNjMsIDMyLCA4NywgMTA1LCAxMDgsIDEwOCwgMzIsIDEyMSwgMTExLCAxMTcsIDMyLCAxMTUsIDEwMSwgMTEwLCAxMDAsIDMyLCAzNF0= None) None) (Assign (list (Name &suffix:1 Store)) (Constant s-WzM0LCA2M10= None) None) (FunctionDef &length_of_f:1 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Call (Name g_len Load) (list (_starred_content (Name &f_0:1 Load))) nil))) (/seq)) (Return (fn_8 (Call (Name &length_of_f:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None)))) nil) &suffix:1 &middle:1 &prefix:1))) nil None None) (FunctionDef &find_character:1 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i0 None))) (/seq (fn_4 &k:3 &f_0:1)) (/seq)) (/splice (fn_6 (Call (Name &length_of_f:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) &prefix:1 &k:3 &n:3 &find_character:1 &middle:1)) (AugAssign (Name &k:3 Store) Sub (Call (Name &length_of_f:1 Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil)) (fn_3 (/seq) &k:3 &suffix:1) (Return (Constant s_. None))) nil None None) (Assign (list (Name &result:1 Store)) (Constant s_ None) None) (For (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store) (Name &queries:1 Load) (/seq (AugAssign (Name &result:1 Store) Add (Call (Name &find_character:1 Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &k:1 Load))) nil))) (/seq) None) (Return (Name &result:1 Load))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Constant i3 None)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i111111111111 None))) Load))) Load))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Constant i5 None)) (_starred_content (fn_28))) nil))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_kth_character:0 Load) (list (_starred_content (Constant i10 None)) (_starred_content (fn_18))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_char:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &add_front:1 &add_middle:1 &add_end:1 &lengths:1 (/choiceseq))) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (BinOp (fn_10 (Call (Name g_len Load) (list (_starred_content (Name &add_middle:1 Load))) nil) &add_end:1 &add_front:1) Add (fn_17 &lengths:1)))) nil))) (/seq) None) (fn_26 (If (Compare (Name &k:1 Load) (list LtE) (list (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &add_middle:1 &add_front:1))) (/seq (Return (Subscript (Name &add_middle:1 Load) (_slice_content (fn_19 (BinOp (Name &k:1 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &add_front:1 Load))) nil)) &n:1 &lengths:1)) Load))) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (BinOp (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &add_middle:1 &add_front:1) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load)))) (/seq (AugAssign (Name &k:1 Store) Sub (fn_10 (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Load) &add_middle:1 &add_front:1)) (AugAssign (Name &n:1 Store) Sub (Constant i1 None))) (/seq (Return (Subscript (Name &add_end:1 Load) (_slice_content (BinOp (BinOp (BinOp (BinOp (Name &k:1 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &add_front:1 Load))) nil)) Sub (fn_15 &n:1 &lengths:1)) Sub (Call (Name g_len Load) (list (_starred_content (Name &add_middle:1 Load))) nil)) Sub (Constant i1 None))) Load)))))) &add_front:1 &k:1 &n:1 &lengths:1) (fn_12 (Subscript (Name &lengths:1 Load) (_slice_content (Constant i0 None)) Load) &k:1 &f_0:1 &n:1) (Return (Constant s_. None))) nil None None) (fn_23 &q:0) (/splice (fn_2 &answers:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (fn_24 &base_str:1 &k:1 &n:1 &find_char:0 (/choiceseq (/splice (fn_22 &prefix:1 &infix:1 &suffix:1 &len_prefix:1 &len_infix:1 &len_suffix:1 (/choiceseq))) (Assign (list (Name &lengths:1 Store)) (List (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &base_str:1 Load))) nil))) Load) None) (For (Name &i:1 Store) (fn_13 &n:1) (/seq (Assign (list (Name &cur_length:1 Store)) (BinOp (BinOp (BinOp (fn_17 &lengths:1) Add (Name &len_prefix:1 Load)) Add (Name &len_infix:1 Load)) Add (Name &len_suffix:1 Load)) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &cur_length:1 Load))) nil)) (If (Compare (Name &cur_length:1 Load) (list GtE) (list (Name &k:1 Load))) (/seq Break) (/seq))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &lengths:1 Load))) nil) Sub (Constant i1 None))) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (fn_27 (/seq) &k:1 &prefix:1 &len_prefix:1) (AugAssign (Name &k:1 Store) Sub (Name &len_prefix:1 Load)) (If (Compare (Name &k:1 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq Continue) (/seq)) (AugAssign (Name &k:1 Store) Sub (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (fn_27 (/seq) &k:1 &infix:1 &len_infix:1) (AugAssign (Name &k:1 Store) Sub (Name &len_infix:1 Load)) (If (Compare (Name &k:1 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq Continue) (/seq)) (AugAssign (Name &k:1 Store) Sub (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (Return (IfExp (Compare (Name &k:1 Load) (list LtE) (list (Name &len_suffix:1 Load))) (Subscript (Name &suffix:1 Load) (_slice_content (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Load) (Constant s_. None)))) (/seq) None) (Return (Constant s_. None)))) (fn_11 &q:0) (/splice (fn_2 &results:0 &k:0 &n:0 &find_char:0 &q:0 &_:0 (/choiceseq)))) nil)",
            "(Module (/seq (FunctionDef &solve_queries:0 (arguments nil (list (arg &queries:1 None None)) None nil nil None nil) (/seq (/splice (fn_14 &f_0:1 &prefix:1 &infix:1 &postfix:1 &lengths:1 (/choiceseq))) (Assign (list (Name &max_n:1 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Subscript (Name &query:4 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &query:4 Store) (Name &queries:1 Load) nil i0))))) nil) None) (For (Name &i:1 Store) (fn_13 &max_n:1) (/seq (Assign (list (Name &new_length:1 Store)) (fn_8 (Subscript (Name &lengths:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &postfix:1 &infix:1 &prefix:1) None) (Expr (Call (Attribute (Name &lengths:1 Load) s_append Load) (list (_starred_content (Name &new_length:1 Load))) nil))) (/seq) None) (FunctionDef &find_char:1 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &n:2 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &k:2 Load) (list LtE) (list (Subscript (Name &lengths:1 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Return (Subscript (Name &f_0:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Constant i1 None))) Load))) (/seq (Return (Constant s_. None))))) (/seq)) (If (Compare (Name &k:2 Load) (list Gt) (list (Subscript (Name &lengths:1 Load) (_slice_content (Name &n:2 Load)) Load))) (/seq (Return (Constant s_. None))) (/seq)) (fn_3 (/seq) &k:2 &prefix:1) (If (Compare (Name &k:2 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Call (Name &find_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (Name &k:2 Load) Sub (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil)))) nil))) (/seq)) (Assign (list (Name &mid_start:2 Store)) (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &prefix:1 Load))) nil) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)) Add (Constant i1 None)) None) (If (Compare (Name &k:2 Load) (list Lt) (list (BinOp (Name &mid_start:2 Load) Add (Call (Name g_len Load) (list (_starred_content (Name &infix:1 Load))) nil)))) (/seq (Return (Subscript (Name &infix:1 Load) (_slice_content (BinOp (Name &k:2 Load) Sub (Name &mid_start:2 Load))) Load))) (/seq)) (If (Compare (Name &k:2 Load) (list Lt) (list (BinOp (BinOp (Name &mid_start:2 Load) Add (Call (Name g_len Load) (list (_starred_content (Name &infix:1 Load))) nil)) Add (Subscript (Name &lengths:1 Load) (_slice_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) Load)))) (/seq (Return (Call (Name &find_char:1 Load) (list (_starred_content (BinOp (Name &n:2 Load) Sub (Constant i1 None))) (_starred_content (BinOp (BinOp (BinOp (Name &k:2 Load) Sub (Name &mid_start:2 Load)) Sub (Call (Name g_len Load) (list (_starred_content (Name &infix:1 Load))) nil)) Add (Constant i1 None)))) nil))) (/seq)) (Return (Subscript (Name &postfix:1 Load) (_slice_content (fn_19 (BinOp (BinOp (Name &k:2 Load) Sub (Name &mid_start:2 Load)) Sub (Call (Name g_len Load) (list (_starred_content (Name &infix:1 Load))) nil)) &n:2 &lengths:1)) Load))) nil None None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name &find_char:1 Load) (list (_starred_content (Name &n:5 Load)) (_starred_content (Name &k:5 Load))) nil) (list (comprehension (Tuple (list (_starred_content (Name &n:5 Store)) (_starred_content (Name &k:5 Store))) Store) (Name &queries:1 Load) nil i0))))) nil))) nil None None) (fn_11 &q:0) (fn_7 (Name g_tuple Load) &q:0 &_:3 &queries:0) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve_queries:0 Load) (list (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)"
        ]
    },
    "594": {
        "abstractions": [
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %2 None None)) None nil nil None nil) (/seq ?0 (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (BinOp (Name %2 Load) Pow (Constant f0.5 None)))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name %2 Load) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) (/seq))) (/seq) None) (Return (Constant True None))) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name %3 Load) Add (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name %3 Load) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) (Call (Name %2 Load) (list (_starred_content (Name %1 Load))) nil))) #0 (/seq))) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %1 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq)) (If (Compare (Name %1 Load) (list LtE) (list (Constant i3 None))) (/seq (Return (Constant True None))) (/seq)) (If (BoolOp Or (list (Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name %1 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) (/seq)) (Assign (list (Name %2 Store)) (Constant i5 None) None) (While (Compare (BinOp (Name %2 Load) Mult (Name %2 Load)) (list LtE) (list (Name %1 Load))) (/seq (If (BoolOp Or (list (Compare (BinOp (Name %1 Load) Mod (Name %2 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name %1 Load) Mod (BinOp (Name %2 Load) Add (Constant i2 None))) (list Eq) (list (Constant i0 None))))) (/seq (Return (Constant False None))) (/seq)) (AugAssign (Name %2 Store) Add (Constant i6 None))) (/seq)) (Return (Constant True None))) nil None None) ?0 (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %4 Load) nil nil))) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_I None)) Load))) nil)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil) None) ?0) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %2 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) ?0) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %3 (arguments nil (list (arg %1 None None)) None nil nil None nil) (/seq (If (Compare (Name %1 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq)) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call #0 (list (_starred_content (Name %1 Load))) nil))) nil) Add (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Name %1 Load) Mod (Name %2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) (/seq))) (/seq) None) (Return (Constant True None))) nil None None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) ?0 (Return (Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant s_I None)) Load))) Load)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Subscript (Name %2 Load) (_slice_content #0) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content #0) Load)) (_starred_content (Name %1 Load))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (Name %1 Load) Add (Constant i1 None)) Mod (Constant i3 None))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (AugAssign (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store) Add (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list #0 #0 #0)) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name %2 Load) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) (Call (Name %3 Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (BinOp (Name %2 Load) FloorDiv (Name %1 Load)))) (/seq))) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) ?0 (Assign (list (Name %3 Store)) (Call (Attribute (Name %1 Load) s_index Load) (list (_starred_content (Name %2 Load))) nil) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant s_O None)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant s_E None)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant s_I None)) Load) i-1 None))))) nil))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load) i-1 None))))) nil))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list LtE) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None) #0 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name %1 Load))) nil))) nil))) nil)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Attribute (Call #0 nil nil) s_split Load) nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(ListComp (Name %1 Load) (list (comprehension (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) (list (BoolOp And (list (Compare (BinOp (Name %2 Load) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) #0))) i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil))) Load)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load))) (/seq))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %2 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BoolOp And (list (Compare (BinOp (Name %3 Load) Mod (Name %1 Load)) (list Eq) (list (Constant i0 None))) (Call (Name %2 Load) (list (_starred_content (Name %1 Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (fn_1 %3 %1 %2 (/choiceseq (If (Compare (Name %1 Load) (list Lt) (list (Constant i2 None))) (/seq (Return (Constant False None))) (/seq)))) (FunctionDef %7 (arguments nil (list (arg %4 None None)) None nil nil None nil) (/seq (Assign (list (Name %5 Store)) (List (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) Load) None) (fn_2 (/seq (Expr (Call (Attribute (Name %5 Load) s_append Load) (list (_starred_content (BinOp (Name %4 Load) FloorDiv (Name %6 Load)))) nil))) %6 %2 %4) (Return (Name %5 Load))) nil None None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxLCA0Nl0= None)) (fn_18 &n:1))) (FunctionDef &next_move:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY4LCAxMDEsIDExNiwgMTAxLCAxMTQsIDEwOSwgMTA1LCAxMTAsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTEsIDExMiwgMTE2LCAxMDUsIDEwOSwgOTcsIDEwOCwgMzIsIDExMCwgMTAxLCAxMjAsIDExNiwgMzIsIDEwOSwgMTExLCAxMTgsIDEwMSwgNDZd None)) (Assign (list (Name &div_options:2 Store)) (List (list (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) Load) None) (fn_2 (/seq (Expr (Call (Attribute (Name &div_options:2 Load) s_append Load) (list (_starred_content (BinOp (Name &n:2 Load) FloorDiv (Name &i:2 Load)))) nil))) &i:2 &is_prime:0 &n:2) (Return (Call (Name g_min Load) (list (_starred_content (Name &div_options:2 Load))) nil))) nil None None) (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_player:3 None None) (arg &starting_number:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgzLCAxMDUsIDEwOSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDk3LCAzMiwgMTE0LCAxMTEsIDExNywgMTEwLCAxMDAsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCAxMTQsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAzMiwgMTEyLCAxMTEsIDEwNSwgMTEwLCAxMTYsIDExNSwgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA3OSwgMTAwLCAxMDAsIDQ0LCAzMiwgNjksIDExOCwgMTAxLCAxMTAsIDQ0LCAzMiwgNzMsIDExMCwgMTAzLCAxMDksIDk3LCAxMTQsIDEwNSwgOTcsIDEyMSwgMzIsIDEwNSwgMTEwLCAzMiwgMTExLCAxMTQsIDEwMCwgMTAxLCAxMTQsIDQ2XQ== None)) (Assign (list (Name &players:3 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (/splice (fn_8 &player_scores:3 (/choiceseq (Assign (list (Name &player_index:3 Store)) (Call (Attribute (Name &players:3 Load) s_index Load) (list (_starred_content (Name &starting_player:3 Load))) nil) None) (Assign (list (Name &current_number:3 Store)) (Name &starting_number:3 Load) None) (While (Compare (Name &current_number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_number:3 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &current_number:3 Load))) nil) None) (Assign (list (Subscript (Name &player_scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (Name &player_index:3 Load)) Load)) Store)) (Name &current_number:3 Load) None) (Assign (list (Name &player_index:3 Store)) (fn_10 &player_index:3) None)) (/seq)) (For (Name &player:3 Store) (Name &player_scores:3 Load) (/seq (If (Compare (Subscript (Name &player_scores:3 Load) (_slice_content (Name &player:3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &player_scores:3 Load) (_slice_content (Name &player:3 Load)) Store)) (Name &starting_number:3 Load) None)) (/seq))) (/seq) None))))) nil None None) (/splice (fn_6 &n:4 &main:0 (/choiceseq (/splice (fn_4 &total_scores:4 (/choiceseq (fn_5 &starting_number:4 &starting_player:4 &n:4 &_:4 (/choiceseq (Assign (list (Tuple (list (_starred_content (Name &o_points:4 Store)) (_starred_content (Name &e_points:4 Store)) (_starred_content (Name &i_points:4 Store))) Store)) (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_player:4 Load)) (_starred_content (Name &starting_number:4 Load))) nil) None) (AugAssign (Subscript (Name &total_scores:4 Load) (_slice_content (Constant s_O None)) Store) Add (Name &o_points:4 Load)) (AugAssign (Subscript (Name &total_scores:4 Load) (_slice_content (Constant s_E None)) Store) Add (Name &e_points:4 Load)) (AugAssign (Subscript (Name &total_scores:4 Load) (_slice_content (Constant s_I None)) Store) Add (Name &i_points:4 Load))))))))))) nil)",
            "(Module (/seq (fn_7 (Attribute (Name g_math Load) s_sqrt Load) &n:2 &i:2 &is_prime:0) (FunctionDef &prime_factors:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &factors:3 Store)) (List nil Load) None) (While (fn_25 &n:3) (/seq (Expr (Call (Attribute (Name &factors:3 Load) s_append Load) (list (_starred_content (Constant i2 None))) nil)) (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) FloorDiv (Constant i2 None)) None)) (/seq)) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_math Load) s_sqrt Load) (list (_starred_content (Name &n:3 Load))) nil))) nil) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (While (Compare (BinOp (Name &n:3 Load) Mod (Name &i:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Name &i:3 Load) (list NotIn) (list (Name &factors:3 Load))) (/seq (Expr (Call (Attribute (Name &factors:3 Load) s_append Load) (list (_starred_content (Name &i:3 Load))) nil))) (/seq)) (Assign (list (Name &n:3 Store)) (BinOp (Name &n:3 Load) FloorDiv (Name &i:3 Load)) None)) (/seq))) (/seq) None) (If (Compare (Name &n:3 Load) (list Gt) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &factors:3 Load) s_append Load) (list (_starred_content (Name &n:3 Load))) nil))) (/seq)) (Return (Name &factors:3 Load))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &start:1 None None) (arg &number:1 None None)) None nil nil None nil) (/seq (fn_13 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &scores:1) (/splice (fn_15 &players_sequence:1 &start:1 &current_player_index:1 (/choiceseq))) (FunctionDef &dfs:1 (arguments nil (list (arg &num:5 None None) (arg &player_index:5 None None) (arg &depth:5 None None)) None nil nil None nil) (/seq (fn_9 (Subscript (Name &players_sequence:1 Load) (_slice_content (Name &player_index:5 Load)) Load) &num:5 &scores:1) (If (Compare (Name &num:5 Load) (list Eq) (list (Constant i1 None))) (/seq (Return None)) (/seq)) (Assign (list (Name &next_player_index:5 Store)) (fn_10 &player_index:5) None) (Expr (Call (Name &dfs:1 Load) (list (_starred_content (BinOp (Name &num:5 Load) Sub (Constant i1 None))) (_starred_content (Name &next_player_index:5 Load)) (_starred_content (BinOp (Name &depth:5 Load) Add (Constant i1 None)))) nil)) (For (Name &factor:5 Store) (Call (Name &prime_factors:0 Load) (list (_starred_content (Name &num:5 Load))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (Name &num:5 Load) Mod (Name &factor:5 Load)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (Name &num:5 Load) FloorDiv (Name &factor:5 Load)) (list GtE) (list (Constant i1 None))))) (/seq (Expr (Call (Name &dfs:1 Load) (list (_starred_content (BinOp (Name &num:5 Load) FloorDiv (Name &factor:5 Load))) (_starred_content (Name &next_player_index:5 Load)) (_starred_content (BinOp (Name &depth:5 Load) Add (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil None None) (Expr (Call (Name &dfs:1 Load) (list (_starred_content (Name &number:1 Load)) (_starred_content (Name &current_player_index:1 Load)) (_starred_content (Constant i0 None))) nil)) (Return (Name &scores:1 Load))) nil None None) (/splice (fn_6 &n:4 &main:0 (/choiceseq (fn_13 (Constant i0 None) &total_scores:4) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) (/seq (Assign (list (Name &inp:4 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &starter:4 Store)) (Subscript (Subscript (Name &inp:4 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &number:4 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inp:4 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &round_scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &starter:4 Load)) (_starred_content (Name &number:4 Load))) nil) None) (For (Tuple (list (_starred_content (Name &player:4 Store)) (_starred_content (Name &score:4 Store))) Store) (Call (Attribute (Name &round_scores:4 Load) s_items Load) nil nil) (/seq (AugAssign (Subscript (Name &total_scores:4 Load) (_slice_content (Name &player:4 Load)) Store) Add (IfExp (Compare (Name &score:4 Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (Name &score:4 Load) (Name &number:4 Load)))) (/seq) None)) (/seq) None) (fn_16 &total_scores:4))))) nil)",
            "(Module (/seq (Assign (list (Name &primes:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_primerange Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10000 None))) nil))) nil) None) (FunctionDef &optimal_play:0 (arguments nil (list (arg &start:1 None None) (arg &turn:1 None None)) None nil nil None nil) (/seq (fn_26 &start:1) (fn_28 &scores:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (Assign (list (Subscript (Name &scores:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &start:1 Load) None)) (/seq) None) (Assign (list (Name &queue:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name &start:1 Load)) (_starred_content (Name &turn:1 Load)) (_starred_content (Name &scores:1 Load))) Load))) Load) None) (Assign (list (Name &lowest_scores:1 Store)) (List (list (_starred_content (Name &start:1 Load)) (_starred_content (Name &start:1 Load)) (_starred_content (Name &start:1 Load))) Load) None) (While (Name &queue:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current:1 Store)) (_starred_content (Name &current_turn:1 Store)) (_starred_content (Name &current_scores:1 Store))) Store)) (Call (Attribute (Name &queue:1 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil) None) (Assign (list (Name &moved_scores:1 Store)) (BinOp (Subscript (Name &current_scores:1 Load) (_slice_slice (Slice (Name &current_turn:1 Load) None None)) Load) Add (Subscript (Name &current_scores:1 Load) (_slice_slice (Slice None (Name &current_turn:1 Load) None)) Load)) None) (If (Compare (Name &current:1 Load) (list Eq) (list (Constant i1 None))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (Assign (list (Subscript (Name &lowest_scores:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &current_turn:1 Load)) Mod (Constant i3 None))) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &lowest_scores:1 Load) (_slice_content (BinOp (BinOp (Name &i:1 Load) Add (Name &current_turn:1 Load)) Mod (Constant i3 None))) Load)) (_starred_content (Subscript (Name &moved_scores:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None)) (/seq) None)) (/seq (Assign (list (Name &next_turn:1 Store)) (fn_10 &current_turn:1) None) (Assign (list (Name &new_scores:1 Store)) (Call (Attribute (Name &moved_scores:1 Load) s_copy Load) nil nil) None) (Assign (list (Subscript (Name &new_scores:1 Load) (_slice_content (Constant i0 None)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &new_scores:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (BinOp (Name &current:1 Load) Add (Constant i1 None)))) nil) None) (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &current:1 Load) Add (Constant i1 None))) (_starred_content (Name &next_turn:1 Load)) (_starred_content (BinOp (Subscript (Name &new_scores:1 Load) (_slice_slice (Slice None (Name &next_turn:1 Load) None)) Load) Add (Subscript (Name &new_scores:1 Load) (_slice_slice (Slice (Name &next_turn:1 Load) None None)) Load)))) Load))) nil)) (For (Name &prime:1 Store) (Name &primes:0 Load) (/seq (If (Compare (BinOp (Name &current:1 Load) Mod (Name &prime:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &new_scores:1 Store)) (Call (Attribute (Name &moved_scores:1 Load) s_copy Load) nil nil) None) (Assign (list (Subscript (Name &new_scores:1 Load) (_slice_content (Constant i0 None)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &new_scores:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (BinOp (Name &current:1 Load) FloorDiv (Name &prime:1 Load)))) nil) None) (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &current:1 Load) FloorDiv (Name &prime:1 Load))) (_starred_content (Name &next_turn:1 Load)) (_starred_content (BinOp (Subscript (Name &new_scores:1 Load) (_slice_slice (Slice None (Name &next_turn:1 Load) None)) Load) Add (Subscript (Name &new_scores:1 Load) (_slice_slice (Slice (Name &next_turn:1 Load) None None)) Load)))) Load))) nil)) Break) (/seq))) (/seq) None)))) (/seq)) (Return (Name &lowest_scores:1 Load))) nil None None) (/splice (fn_6 &n:2 &main:0 (/choiceseq (fn_28 &total_scores:2) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Name &line:2 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &start_player:2 Store)) (Call (Attribute (Constant s_OEI None) s_index Load) (list (_starred_content (Subscript (Name &line:2 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &start_number:2 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &line:2 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &round_scores:2 Store)) (Call (Name &optimal_play:0 Load) (list (_starred_content (Name &start_number:2 Load)) (_starred_content (Name &start_player:2 Load))) nil) None) (fn_12 &i:2 &round_scores:2 &total_scores:2)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &total_scores:2 Load))) nil))) nil))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &is_prime:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (fn_18 &n:1) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i2 None))) (/seq (Return (Constant True None))) (/seq)) (If (fn_25 &n:1) (/seq (Return (Constant False None))) (/seq)) (Assign (list (Name &p:1 Store)) (Constant i3 None) None) (While (Compare (BinOp (Name &p:1 Load) Mult (Name &p:1 Load)) (list LtE) (list (Name &n:1 Load))) (/seq (If (Compare (BinOp (Name &n:1 Load) Mod (Name &p:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant False None))) (/seq)) (AugAssign (Name &p:1 Store) Add (Constant i2 None))) (/seq)) (Return (Constant True None))) nil None None) (FunctionDef &optimal_next:0 (arguments nil (list (arg &state:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &state:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq (If (Call (Name &is_prime:0 Load) (list (_starred_content (Name &state:2 Load))) nil) (/seq (Return (Constant i1 None))) (/seq (If (fn_25 &state:2) (/seq (Return (BinOp (Name &state:2 Load) FloorDiv (Constant i2 None)))) (/seq (fn_14 &i:2 &state:2 &is_prime:0))))))) (Return (BinOp (Name &state:2 Load) Sub (Constant i1 None)))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &starting_player:3 None None) (arg &starting_number:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &scores:3 Store)) (List (list (_starred_content (Name &starting_number:3 Load)) (_starred_content (Name &starting_number:3 Load)) (_starred_content (Name &starting_number:3 Load))) Load) None) (/splice (fn_15 &player_order:3 &starting_player:3 &current_player_index:3 (/choiceseq))) (Assign (list (Name &state:3 Store)) (Name &starting_number:3 Load) None) (While (Compare (Name &state:3 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &new_state:3 Store)) (Call (Name &optimal_next:0 Load) (list (_starred_content (Name &state:3 Load))) nil) None) (fn_9 (Name &current_player_index:3 Load) &new_state:3 &scores:3) (Assign (list (Name &state:3 Store)) (Name &new_state:3 Load) None) (Assign (list (Name &current_player_index:3 Store)) (fn_10 &current_player_index:3) None)) (/seq)) (Return (Name &scores:3 Load))) nil None None) (/splice (fn_27 &n:4 &main:0 (/choiceseq (fn_28 &total_scores:4) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) (/seq (Assign (list (Name &starting_info:4 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &starting_player:4 Store)) (Subscript (Name &starting_info:4 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &starting_number:4 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &starting_info:4 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &round_scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &starting_player:4 Load)) (_starred_content (Name &starting_number:4 Load))) nil) None) (fn_12 &i:4 &round_scores:4 &total_scores:4)) (/seq) None) (fn_17 &total_scores:4))))) nil)",
            "(Module (/seq (fn_7 (Name g_sqrt Load) &n:1 &i:1 &is_prime:0) (FunctionDef &get_next_move:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (fn_20 &x:2) (If (fn_25 &x:2) (/seq (Return (BinOp (Name &x:2 Load) FloorDiv (Constant i2 None)))) (/seq)) (fn_14 &i:2 &x:2 &is_prime:0) (Return (BinOp (Name &x:2 Load) Add (Constant i1 None)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_4 &scores:0 (/choiceseq (Assign (list (Name &players:0 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (fn_5 &x:0 &starter:0 &n:0 &_:0 (/choiceseq (fn_13 (Name &x:0 Load) &min_values:0) (Assign (list (Name &current_player:0 Store)) (Name &starter:0 Load) None) (While (Compare (Name &x:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &x:0 Store)) (Call (Name &get_next_move:0 Load) (list (_starred_content (Name &x:0 Load))) nil) None) (fn_9 (Name &current_player:0 Load) &x:0 &min_values:0) (Assign (list (Name &current_player:0 Store)) (Subscript (Name &players:0 Load) (_slice_content (BinOp (BinOp (Call (Attribute (Name &players:0 Load) s_index Load) (list (_starred_content (Name &current_player:0 Load))) nil) Add (Constant i1 None)) Mod (Constant i3 None))) Load) None)) (/seq)) (For (Name &player:0 Store) (Name &players:0 Load) (/seq (AugAssign (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Subscript (Name &min_values:0 Load) (_slice_content (Subscript (Name &player:0 Load) (_slice_content (Constant i0 None)) Load)) Load))) (/seq) None))))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDk3LCAzMiwgMTEyLCAxMTQsIDEwNSwgMTA5LCAxMDEsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDQ2XQ== None)) (fn_18 &n:1))) (FunctionDef &best_move:0 (arguments nil (list (arg &start:2 None None) (arg &player:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY4LCAxMDEsIDExNiwgMTAxLCAxMTQsIDEwOSwgMTA1LCAxMTAsIDEwMSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCA5OCwgMTAxLCAxMTUsIDExNiwgMzIsIDEwOSwgMTExLCAxMTgsIDEwMSwgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgOTksIDExNywgMTE0LCAxMTQsIDEwMSwgMTEwLCAxMTYsIDMyLCAxMTIsIDEwOCwgOTcsIDEyMSwgMTAxLCAxMTQsIDQ2XQ== None)) (fn_20 &start:2) (If (Compare (BinOp (Name &start:2 Load) Sub (Constant i1 None)) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq)) (fn_2 (/seq (Assign (list (Name &possible_result:2 Store)) (BinOp (Name &start:2 Load) FloorDiv (Name &i:2 Load)) None) (Return (Name &possible_result:2 Load))) &i:2 &is_prime:0 &start:2) (Return (BinOp (Name &start:2 Load) Sub (Constant i1 None)))) nil None None) (FunctionDef &simulate_game:0 (arguments nil (list (arg &n:3 None None) (arg &rounds:3 None None)) None nil nil None nil) (/seq (/splice (fn_8 &scores:3 (/choiceseq (Assign (list (Name &players:3 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (For (Name &round:3 Store) (Name &rounds:3 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &starting_player:3 Store)) (_starred_content (Name &start:3 Store))) Store)) (Name &round:3 Load) None) (Assign (list (Name &player_index:3 Store)) (Call (Attribute (Name &players:3 Load) s_index Load) (list (_starred_content (Name &starting_player:3 Load))) nil) None) (Assign (list (Name &current_number:3 Store)) (Name &start:3 Load) None) (Assign (list (Name &lowest_numbers:3 Store)) (DictComp (Name &player:6 Load) (Name &start:3 Load) (list (comprehension (Name &player:6 Store) (Name &players:3 Load) nil i0))) None) (While (Compare (Name &current_number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_player:3 Store)) (Subscript (Name &players:3 Load) (_slice_content (BinOp (Name &player_index:3 Load) Mod (Constant i3 None))) Load) None) (Assign (list (Name &new_number:3 Store)) (Call (Name &best_move:0 Load) (list (_starred_content (Name &current_number:3 Load)) (_starred_content (Name &current_player:3 Load))) nil) None) (fn_9 (Name &current_player:3 Load) &new_number:3 &lowest_numbers:3) (Assign (list (Name &current_number:3 Store)) (Name &new_number:3 Load) None) (AugAssign (Name &player_index:3 Store) Add (Constant i1 None))) (/seq)) (For (Name &player:3 Store) (Name &players:3 Load) (/seq (AugAssign (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Store) Add (Subscript (Name &lowest_numbers:3 Load) (_slice_content (Name &player:3 Load)) Load))) (/seq) None)) (/seq) None))))) nil None None) (/splice (fn_21 (Name g_input Load) &n:0 &_:4 &rounds:0)) (Assign (list (Name &rounds:0 Store)) (ListComp (fn_23 &round:5) (list (comprehension (Name &round:5 Store) (Name &rounds:0 Load) nil i0))) None) (Assign (list (Name &scores:0 Store)) (Call (Name &simulate_game:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &rounds:0 Load))) nil) None) (fn_11 &scores:0)) nil)",
            "(Module (/seq (fn_7 (Attribute (Name g_math Load) s_sqrt Load) &n:1 &i:1 &is_prime:0) (FunctionDef &next_move:0 (arguments nil (list (arg &num:2 None None)) None nil nil None nil) (/seq (fn_20 &num:2) (Assign (list (Name &prime_divisors:2 Store)) (fn_22 (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:4 Load))) nil) &i:4 &num:2) None) (If (Name &prime_divisors:2 Load) (/seq (Return (BinOp (Name &num:2 Load) FloorDiv (Subscript (Name &prime_divisors:2 Load) (_slice_content (Constant i0 None)) Load)))) (/seq (Return (BinOp (Name &num:2 Load) Add (Constant i1 None)))))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &starting_player:3 None None) (arg &starting_number:3 None None)) None nil nil None nil) (/seq (fn_13 (Name &starting_number:3 Load) &scores:3) (/splice (fn_15 &players:3 &starting_player:3 &current_player_index:3 (/choiceseq))) (Assign (list (Name &current_number:3 Store)) (Name &starting_number:3 Load) None) (While (Compare (Name &current_number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_number:3 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &current_number:3 Load))) nil) None) (fn_9 (Subscript (Name &players:3 Load) (_slice_content (Name &current_player_index:3 Load)) Load) &current_number:3 &scores:3) (Assign (list (Name &current_player_index:3 Store)) (fn_10 &current_player_index:3) None)) (/seq)) (Return (Name &scores:3 Load))) nil None None) (fn_24 &n:0) (fn_13 (Constant i0 None) &total_scores:0) (fn_5 &start_num:0 &start_player:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &scores:0 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &start_player:0 Load)) (_starred_content (Name &start_num:0 Load))) nil) None) (AugAssign (Subscript (Name &total_scores:0 Load) (_slice_content (Constant s_O None)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Constant s_O None)) Load)) (AugAssign (Subscript (Name &total_scores:0 Load) (_slice_content (Constant s_E None)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Constant s_E None)) Load)) (AugAssign (Subscript (Name &total_scores:0 Load) (_slice_content (Constant s_I None)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Constant s_I None)) Load)))) (fn_16 &total_scores:0)) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxLCA0Nl0= None)) (fn_18 &n:1))) (FunctionDef &next_moves:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcxLCAxMDEsIDExMCwgMTAxLCAxMTQsIDk3LCAxMTYsIDEwMSwgMzIsIDExMiwgMTExLCAxMTUsIDExNSwgMTA1LCA5OCwgMTA4LCAxMDEsIDMyLCAxMTAsIDEwMSwgMTIwLCAxMTYsIDMyLCAxMDksIDExMSwgMTE4LCAxMDEsIDExNSwgNDZd None)) (Assign (list (Name &moves:2 Store)) (List (list (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (BinOp (Name &n:2 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))) nil) (/seq (If (fn_29 &i:2 &is_prime:0 &n:2) (/seq (Expr (Call (Attribute (Name &moves:2 Load) s_append Load) (list (_starred_content (BinOp (Name &n:2 Load) FloorDiv (Name &i:2 Load)))) nil))) (/seq))) (/seq) None) (Return (Name &moves:2 Load))) nil None None) (FunctionDef &optimal_move:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMSwgMTEyLCAxMTYsIDEwNSwgMTA5LCA5NywgMTA4LCAzMiwgMTEwLCAxMDEsIDEyMCwgMTE2LCAzMiwgMTA5LCAxMTEsIDExOCwgMTAxLCA0Nl0= None)) (Assign (list (Name &moves:3 Store)) (Call (Name &next_moves:0 Load) (list (_starred_content (Name &n:3 Load))) nil) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &moves:3 Load))) (list (keyword s_default (Name &n:3 Load)))))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &start_player:4 None None) (arg &starting_number:4 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgwLCAxMDgsIDk3LCAxMjEsIDMyLCA5NywgMzIsIDExNCwgMTExLCAxMTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgOTksIDExMSwgMTE0LCAxMDEsIDExNSwgMzIsIDExMSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMiwgMTA4LCA5NywgMTIxLCAxMDEsIDExNCwgMTE1LCA0Nl0= None)) (/splice (fn_15 &players:4 &start_player:4 &player_index:4 (/choiceseq (Assign (list (Name &positions:4 Store)) (DictComp (Name &player:6 Load) (Name &starting_number:4 Load) (list (comprehension (Name &player:6 Store) (Name &players:4 Load) nil i0))) None) (Assign (list (Name &lowest:4 Store)) (DictComp (Name &player:7 Load) (Name &starting_number:4 Load) (list (comprehension (Name &player:7 Store) (Name &players:4 Load) nil i0))) None)))) (Assign (list (Name &current_number:4 Store)) (Name &starting_number:4 Load) None) (While (Compare (Name &current_number:4 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_player:4 Store)) (Subscript (Name &players:4 Load) (_slice_content (BinOp (Name &player_index:4 Load) Mod (Constant i3 None))) Load) None) (Assign (list (Name &current_number:4 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &current_number:4 Load))) nil) None) (fn_9 (Name &current_player:4 Load) &current_number:4 &lowest:4) (AugAssign (Name &player_index:4 Store) Add (Constant i1 None))) (/seq)) (Return (List (list (_starred_content (Subscript (Name &lowest:4 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name &lowest:4 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name &lowest:4 Load) (_slice_content (Constant s_I None)) Load))) Load))) nil None None) (/splice (fn_6 &n:5 &main:0 (/choiceseq (fn_28 &scores:5) (fn_5 &starting_number:5 &start_player:5 &n:5 &_:5 (/choiceseq (Assign (list (Name &round_scores:5 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &start_player:5 Load)) (_starred_content (Name &starting_number:5 Load))) nil) None) (Assign (list (Name &scores:5 Store)) (ListComp (BinOp (Subscript (Name &scores:5 Load) (_slice_content (Name &i:8 Load)) Load) Add (Subscript (Name &round_scores:5 Load) (_slice_content (Name &i:8 Load)) Load)) (list (comprehension (Name &i:8 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) nil i0))) None))) (fn_17 &scores:5))))) nil)",
            "(Module (/seq (FunctionDef &score_round:0 (arguments nil (list (arg &start_player:1 None None) (arg &start_number:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgzLCA5OSwgMTExLCAxMTQsIDEwMSwgMTE1LCAzMiwgOTcsIDMyLCAxMTUsIDEwNSwgMTEwLCAxMDMsIDEwOCwgMTAxLCAzMiwgMTE0LCAxMTEsIDExNywgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDMsIDk3LCAxMDksIDEwMSwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNSwgMTE2LCA5NywgMTE0LCAxMTYsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTIsIDEwOCwgOTcsIDEyMSwgMTAxLCAxMTQsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDQ2XQ== None)) (fn_1 &i:3 &n:3 &is_prime:1 (/choiceseq (If (Compare (Name &n:3 Load) (list Lt) (list (Constant i2 None))) (/seq (Return (Constant False None))) (/seq)))) (fn_13 (Name &start_number:1 Load) &scores:1) (/splice (fn_15 &players:1 &start_player:1 &current_player_idx:1 (/choiceseq))) (Assign (list (Name &number:1 Store)) (Name &start_number:1 Load) None) (While (Compare (Name &number:1 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &taken_action:1 Store)) (Constant False None) None) (fn_2 (/seq (Assign (list (Name &next_number:1 Store)) (BinOp (Name &number:1 Load) FloorDiv (Name &i:1 Load)) None) (If (Compare (Subscript (Name &scores:1 Load) (_slice_content (Subscript (Name &players:1 Load) (_slice_content (Name &current_player_idx:1 Load)) Load)) Load) (list Gt) (list (Name &next_number:1 Load))) (/seq (Assign (list (Subscript (Name &scores:1 Load) (_slice_content (Subscript (Name &players:1 Load) (_slice_content (Name &current_player_idx:1 Load)) Load)) Store)) (Name &next_number:1 Load) None) (Assign (list (Name &number:1 Store)) (Name &next_number:1 Load) None) (Assign (list (Name &taken_action:1 Store)) (Constant True None) None)) (/seq)) Break) &i:1 &is_prime:1 &number:1) (If (BoolOp And (list (UnaryOp Not (Name &taken_action:1 Load)) (Compare (Subscript (Name &scores:1 Load) (_slice_content (Subscript (Name &players:1 Load) (_slice_content (Name &current_player_idx:1 Load)) Load)) Load) (list Gt) (list (BinOp (Name &number:1 Load) Add (Constant i1 None)))))) (/seq (Assign (list (Subscript (Name &scores:1 Load) (_slice_content (Subscript (Name &players:1 Load) (_slice_content (Name &current_player_idx:1 Load)) Load)) Store)) (BinOp (Name &number:1 Load) Add (Constant i1 None)) None) (AugAssign (Name &number:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &current_player_idx:1 Store)) (fn_10 &current_player_idx:1) None)) (/seq)) (Return (List (list (_starred_content (Subscript (Name &scores:1 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name &scores:1 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name &scores:1 Load) (_slice_content (Constant s_I None)) Load))) Load))) nil None None) (FunctionDef &play_game:0 (arguments nil (list (arg &inputs:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODMsIDEwNSwgMTA5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgOTcsIDEwOSwgMTAxLCAzMiwgMTAzLCAxMDUsIDExOCwgMTAxLCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDExNSwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDExNCwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE2LCAxMTEsIDExNiwgOTcsIDEwOCwgMzIsIDExNSwgOTksIDExMSwgMTE0LCAxMDEsIDExNSwgMzIsIDExMSwgMTAyLCAzMiwgMTAxLCA5NywgOTksIDEwNCwgMzIsIDExMiwgMTA4LCA5NywgMTIxLCAxMDEsIDExNCwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (/splice (fn_8 &total_scores:2 (/choiceseq (For (Tuple (list (_starred_content (Name &start_player:2 Store)) (_starred_content (Name &start_number:2 Store))) Store) (Name &inputs:2 Load) (/seq (Assign (list (Name &round_scores:2 Store)) (Call (Name &score_round:0 Load) (list (_starred_content (Name &start_player:2 Load)) (_starred_content (Name &start_number:2 Load))) nil) None) (For (Tuple (list (_starred_content (Name &player:2 Store)) (_starred_content (Name &score:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load)) (_starred_content (Name &round_scores:2 Load))) nil) (/seq (AugAssign (Subscript (Name &total_scores:2 Load) (_slice_content (Name &player:2 Load)) Store) Add (Name &score:2 Load))) (/seq) None)) (/seq) None))))) nil None None) (/splice (fn_21 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &_:4 &inputs:0)) (Assign (list (Name &inputs:0 Store)) (ListComp (fn_23 &line:5) (list (comprehension (Name &line:5 Store) (Name &inputs:0 Load) nil i0))) None) (Assign (list (Name &final_scores:0 Store)) (Call (Name &play_game:0 Load) (list (_starred_content (Name &inputs:0 Load))) nil) None) (fn_11 &final_scores:0)) nil)",
            "(Module (/seq (Assign (list (Name &primes:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_primerange Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i10001 None))) nil))) nil) None) (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_player:1 None None) (arg &starting_number:1 None None)) None nil nil None nil) (/seq (/splice (fn_15 &players:1 &starting_player:1 &player_index:1 (/choiceseq (fn_28 &scores:1)))) (Assign (list (Name &round_scores:1 Store)) (BinOp (List (list (_starred_content (Name &starting_number:1 Load))) Load) Mult (Constant i3 None)) None) (FunctionDef &next_move:1 (arguments nil (list (arg &number:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &possible_moves:2 Store)) (List (list (_starred_content (BinOp (Name &number:2 Load) Add (Constant i1 None)))) Load) None) (For (Name &prime:2 Store) (Name &primes:0 Load) (/seq (If (Compare (Name &prime:2 Load) (list Gt) (list (Name &number:2 Load))) (/seq Break) (/seq)) (If (Compare (BinOp (Name &number:2 Load) Mod (Name &prime:2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &possible_moves:2 Load) s_append Load) (list (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Name &prime:2 Load)))) nil))) (/seq))) (/seq) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &possible_moves:2 Load))) nil))) nil None None) (Assign (list (Name &current_number:1 Store)) (Name &starting_number:1 Load) None) (While (Compare (Name &current_number:1 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_number:1 Store)) (Call (Name &next_move:1 Load) (list (_starred_content (Name &current_number:1 Load))) nil) None) (fn_9 (Name &player_index:1 Load) &current_number:1 &round_scores:1) (Assign (list (Name &player_index:1 Store)) (fn_10 &player_index:1) None)) (/seq)) (Return (Name &round_scores:1 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (fn_28 &final_scores:0) (fn_5 &starting_number:0 &starting_player:0 &n:0 &_:0 (/choiceseq (If (Compare (Name &starting_number:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &round_scores:0 Store)) (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i1 None))) Load) None)) (/seq (Assign (list (Name &round_scores:0 Store)) (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_player:0 Load)) (_starred_content (Name &starting_number:0 Load))) nil) None))) (fn_12 &i:0 &round_scores:0 &final_scores:0))) (fn_11 &final_scores:0)) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (If (Compare (Name &n:1 Load) (list Lt) (list (Constant i2 None))) (/seq (Return (Constant False None))) (/seq)))) (FunctionDef &get_prime_factors:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &factors:2 Store)) (List nil Load) None) (fn_2 (/seq (Expr (Call (Attribute (Name &factors:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil))) &i:2 &is_prime:0 &n:2) (Return (Name &factors:2 Load))) nil None None) (FunctionDef &minimize_score:0 (arguments nil (list (arg &start:3 None None) (arg &strategy:3 None None)) None nil nil None nil) (/seq (fn_20 &start:3) (If (Compare (Name &strategy:3 Load) (list Eq) (list (Constant s_add None))) (/seq (Return (BinOp (Name &start:3 Load) Add (Constant i1 None)))) (/seq (Assign (list (Name &factors:3 Store)) (Call (Name &get_prime_factors:0 Load) (list (_starred_content (Name &start:3 Load))) nil) None) (If (UnaryOp Not (Name &factors:3 Load)) (/seq (Return (BinOp (Name &start:3 Load) Add (Constant i1 None)))) (/seq)) (Return (Call (Name g_min Load) (list (_starred_content (GeneratorExp (BinOp (Name &start:3 Load) FloorDiv (Name &factor:6 Load)) (list (comprehension (Name &factor:6 Store) (Name &factors:3 Load) nil i0))))) nil))))) nil None None) (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_player:4 None None) (arg &starting_number:4 None None) (arg &n:4 None None)) None nil nil None (list (Constant i3 None))) (/seq (Assign (list (Name &players:4 Store)) (BinOp (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) Mult (BinOp (BinOp (Name &n:4 Load) FloorDiv (Constant i3 None)) Add (Constant i1 None))) None) (Assign (list (Name &start_index:4 Store)) (Call (Attribute (Name &players:4 Load) s_index Load) (list (_starred_content (Name &starting_player:4 Load))) nil) None) (Assign (list (Name &players:4 Store)) (BinOp (Subscript (Name &players:4 Load) (_slice_slice (Slice (Name &start_index:4 Load) None None)) Load) Add (Subscript (Name &players:4 Load) (_slice_slice (Slice None (Name &start_index:4 Load) None)) Load)) None) (Assign (list (Name &scores:4 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (Name &n:4 Load)) None) (Assign (list (Name &current_number:4 Store)) (Name &starting_number:4 Load) None) (For (Tuple (list (_starred_content (Name &i:4 Store)) (_starred_content (Name &player:4 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &players:4 Load))) nil) (/seq (If (Compare (Name &current_number:4 Load) (list Eq) (list (Constant i1 None))) (/seq (For (Name &j:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &i:4 Load)) (_starred_content (Name &n:4 Load))) nil) (/seq (Assign (list (Subscript (Name &scores:4 Load) (_slice_content (BinOp (Name &j:4 Load) Mod (Constant i3 None))) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:4 Load) (_slice_content (BinOp (Name &j:4 Load) Mod (Constant i3 None))) Load)) (_starred_content (Constant i1 None))) nil) None)) (/seq) None) Break) (/seq)) (If (Compare (BinOp (Name &i:4 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &new_number:4 Store)) (Call (Name &minimize_score:0 Load) (list (_starred_content (Name &current_number:4 Load)) (_starred_content (Constant s_add None))) nil) None)) (/seq (If (Compare (BinOp (Name &i:4 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &new_number:4 Store)) (Call (Name &minimize_score:0 Load) (list (_starred_content (Name &current_number:4 Load)) (_starred_content (Constant s_divide None))) nil) None)) (/seq (Assign (list (Name &new_number:4 Store)) (Call (Name &minimize_score:0 Load) (list (_starred_content (Name &current_number:4 Load)) (_starred_content (Constant s_divide None))) nil) None))))) (fn_9 (BinOp (Name &i:4 Load) Mod (Constant i3 None)) &current_number:4 &scores:4) (Assign (list (Name &current_number:4 Store)) (Name &new_number:4 Load) None)) (/seq) None) (Return (Name &scores:4 Load))) nil None None) (/splice (fn_6 &n:5 &main:0 (/choiceseq (fn_28 &total_scores:5) (fn_5 &starting_number:5 &starting_player:5 &n:5 &_:5 (/choiceseq (Assign (list (Name &scores:5 Store)) (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_player:5 Load)) (_starred_content (Name &starting_number:5 Load))) nil) None) (fn_12 &i:5 &scores:5 &total_scores:5))) (fn_11 &total_scores:5))))) nil)",
            "(Module (fn_3 &n:1 &i:1 &is_prime:0 &main:0 (/choiceseq (FunctionDef &optimal_next:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (fn_20 &n:2) (If (Call (Name &is_prime:0 Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Return (Name &n:2 Load))) (/seq)) (fn_2 (/seq (Return (BinOp (Name &n:2 Load) FloorDiv (Name &i:2 Load)))) &i:2 &is_prime:0 &n:2) (Return (BinOp (Name &n:2 Load) Sub (Constant i1 None)))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &starting_number:3 None None) (arg &starting_player:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &scores:3 Store)) (List (list (_starred_content (Constant i10001 None)) (_starred_content (Constant i10001 None)) (_starred_content (Constant i10001 None))) Load) None) (fn_26 &starting_number:3) (Assign (list (Name &player:3 Store)) (Name &starting_player:3 Load) None) (Assign (list (Name &number:3 Store)) (Name &starting_number:3 Load) None) (While (Compare (Name &number:3 Load) (list Gt) (list (Constant i1 None))) (/seq (fn_9 (Name &player:3 Load) &number:3 &scores:3) (Assign (list (Name &number:3 Store)) (Call (Name &optimal_next:0 Load) (list (_starred_content (Name &number:3 Load))) nil) None) (Assign (list (Name &player:3 Store)) (fn_10 &player:3) None)) (/seq)) (Assign (list (Name &scores:3 Store)) (ListComp (Call (Name g_min Load) (list (_starred_content (Name &score:5 Load)) (_starred_content (Name &starting_number:3 Load))) nil) (list (comprehension (Name &score:5 Store) (Name &scores:3 Load) nil i0))) None) (Return (Name &scores:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (fn_24 &n:4) (/splice (fn_19 (fn_5 &starting_number:4 &starting_player_str:4 &n:4 &_:4 (/choiceseq (If (Compare (Name &starting_player_str:4 Load) (list Eq) (list (Constant s_O None))) (/seq (Assign (list (Name &starting_player:4 Store)) (Constant i0 None) None)) (/seq (If (Compare (Name &starting_player_str:4 Load) (list Eq) (list (Constant s_E None))) (/seq (Assign (list (Name &starting_player:4 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &starting_player:4 Store)) (Constant i2 None) None))))) (Assign (list (Name &scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &starting_number:4 Load)) (_starred_content (Name &starting_player:4 Load))) nil) None) (Assign (list (Name &total_scores:4 Store)) (ListComp (BinOp (Name &t:6 Load) Add (Name &s:6 Load)) (list (comprehension (Tuple (list (_starred_content (Name &t:6 Store)) (_starred_content (Name &s:6 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &total_scores:4 Load)) (_starred_content (Name &scores:4 Load))) nil) nil i0))) None))) &total_scores:4))) nil None None))) nil)",
            "(Module (/seq (/splice (fn_30 &num:1 &is_prime:0 &i:1 &number:2 &moves:2 &i:2 &next_moves:0)) (FunctionDef &optimal_move:0 (arguments nil (list (arg &scores:3 None None) (arg &number:3 None None) (arg &player_idx:3 None None)) None nil nil None nil) (/seq (If (BoolOp Or (list (Compare (Name &number:3 Load) (list Eq) (list (Constant i1 None))) (Compare (Name &number:3 Load) (list Lt) (list (Subscript (Name &scores:3 Load) (_slice_content (Name &player_idx:3 Load)) Load))))) (/seq (fn_9 (Name &player_idx:3 Load) &number:3 &scores:3) (Return (Name &scores:3 Load))) (/seq)) (Assign (list (Name &best_scores:3 Store)) (Subscript (Name &scores:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &move:3 Store) (Call (Name &next_moves:0 Load) (list (_starred_content (Name &number:3 Load))) nil) (/seq (Assign (list (Name &temp_scores:3 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Subscript (Name &scores:3 Load) (_slice_slice (Slice None None None)) Load)) (_starred_content (Name &move:3 Load)) (_starred_content (fn_10 &player_idx:3))) nil) None) (If (Compare (Call (Name g_sum Load) (list (_starred_content (Name &temp_scores:3 Load))) nil) (list Lt) (list (Call (Name g_sum Load) (list (_starred_content (Name &best_scores:3 Load))) nil))) (/seq (Assign (list (Name &best_scores:3 Store)) (Name &temp_scores:3 Load) None)) (/seq))) (/seq) None) (Return (Name &best_scores:3 Load))) nil None None) (FunctionDef &play_game:0 (arguments nil (list (arg &rounds:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &player_map:4 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i1 None) (Constant i2 None))) None) (fn_28 &final_scores:4) (For (Name &round:4 Store) (Name &rounds:4 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &starter:4 Store)) (_starred_content (Name &number:4 Store))) Store)) (Call (Attribute (Name &round:4 Load) s_split Load) nil nil) None) (Assign (list (Name &starter_idx:4 Store)) (Subscript (Name &player_map:4 Load) (_slice_content (Name &starter:4 Load)) Load) None) (Assign (list (Name &scores:4 Store)) (List (list (_starred_content (Constant i10001 None)) (_starred_content (Constant i10001 None)) (_starred_content (Constant i10001 None))) Load) None) (Assign (list (Name &scores:4 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &scores:4 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &number:4 Load))) nil)) (_starred_content (Name &starter_idx:4 Load))) nil) None) (fn_12 &i:4 &scores:4 &final_scores:4)) (/seq) None) (Return (Name &final_scores:4 Load))) nil None None) (fn_24 &n:0) (Assign (list (Name &rounds:0 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &final_scores:0 Store)) (Call (Name &play_game:0 Load) (list (_starred_content (Name &rounds:0 Load))) nil) None) (fn_17 &final_scores:0)) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &get_primes:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &primes:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (/seq (If (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:2 Load))) nil) (/seq (Expr (Call (Attribute (Name &primes:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil))) (/seq))) (/seq) None) (Return (Name &primes:2 Load))) nil None None) (FunctionDef &next_number:0 (arguments nil (list (arg &number:3 None None) (arg &turn:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &primes:3 Store)) (Call (Name &get_primes:0 Load) (list (_starred_content (Name &number:3 Load))) nil) None) (Assign (list (Name &possibilities:3 Store)) (List (list (_starred_content (BinOp (Name &number:3 Load) Add (Constant i1 None)))) Load) None) (For (Name &prime:3 Store) (Name &primes:3 Load) (/seq (If (Compare (BinOp (Name &number:3 Load) Mod (Name &prime:3 Load)) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &possibilities:3 Load) s_append Load) (list (_starred_content (BinOp (Name &number:3 Load) FloorDiv (Name &prime:3 Load)))) nil))) (/seq))) (/seq) None) (If (Compare (BinOp (Name &turn:3 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &possibilities:3 Load) s_sort Load) nil nil))) (/seq (If (Compare (BinOp (Name &turn:3 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &possibilities:3 Load) s_sort Load) nil (list (keyword s_reverse (Constant True None)))))) (/seq)))) (Return (Call (Name g_min Load) (list (_starred_content (Name &possibilities:3 Load))) nil))) nil None None) (/splice (fn_6 &rounds:4 &main:0 (/choiceseq (/splice (fn_4 &scores:4 (/choiceseq (Assign (list (Name &player_order:4 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i1 None) (Constant i2 None))) None) (fn_5 &number:4 &starting_player:4 &rounds:4 &_:4 (/choiceseq (If (Compare (Name &number:4 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_O None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_E None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_I None)) Store) Add (Constant i1 None)) Continue) (/seq)) (Assign (list (Name &points:4 Store)) (Dict (list (Constant i0 None) (Constant i1 None) (Constant i2 None)) (list (Name &number:4 Load) (Name &number:4 Load) (Name &number:4 Load))) None) (Assign (list (Name &turn:4 Store)) (Subscript (Name &player_order:4 Load) (_slice_content (Name &starting_player:4 Load)) Load) None) (While (Compare (Name &number:4 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &number:4 Store)) (Call (Name &next_number:0 Load) (list (_starred_content (Name &number:4 Load)) (_starred_content (Name &turn:4 Load))) nil) None) (fn_9 (BinOp (Name &turn:4 Load) Mod (Constant i3 None)) &number:4 &points:4) (AugAssign (Name &turn:4 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_O None)) Store) Add (Subscript (Name &points:4 Load) (_slice_content (Constant i0 None)) Load)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_E None)) Store) Add (Subscript (Name &points:4 Load) (_slice_content (Constant i1 None)) Load)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_I None)) Store) Add (Subscript (Name &points:4 Load) (_slice_content (Constant i2 None)) Load))))))))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &optimal_play:0 (arguments nil (list (arg &start_num:2 None None)) None nil nil None nil) (/seq (fn_26 &start_num:2) (Assign (list (Name &dp:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &start_num:2 Load) Add (Constant i1 None))) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &start_num:2 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &options:2 Store)) (List (list (_starred_content (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load))) Load) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &i:2 Load))) nil) (/seq (If (fn_29 &j:2 &is_prime:0 &i:2) (/seq (Expr (Call (Attribute (Name &options:2 Load) s_append Load) (list (_starred_content (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) FloorDiv (Name &j:2 Load))) Load))) nil))) (/seq))) (/seq) None) (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (Call (Name g_min Load) (list (_starred_content (Name &options:2 Load))) nil) Add (Constant i1 None)) None)) (/seq) None) (Assign (list (Name &scores:2 Store)) (List (list (_starred_content (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (Assign (list (Name &min_score:2 Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &dp:2 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load))) nil) None) (Assign (list (Name &player_order:2 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (Assign (list (Name &score_order:2 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (Return (ListComp (IfExp (Compare (Name &player:4 Load) (list In) (list (Subscript (Name &score_order:2 Load) (_slice_slice (Slice None (Call (Attribute (Name &score_order:2 Load) s_index Load) (list (_starred_content (Name &player:4 Load))) nil) None)) Load))) (Subscript (Name &dp:2 Load) (_slice_content (Name &start_num:2 Load)) Load) (Name &min_score:2 Load)) (list (comprehension (Name &player:4 Store) (Name &player_order:2 Load) nil i0))))) nil None None) (/splice (fn_21 (Name g_input Load) &n:0 &_:3 &rounds:0)) (/splice (fn_4 &scores:0 (/choiceseq (For (Tuple (list (_starred_content (Name &start_player:0 Store)) (_starred_content (Name &start_num:0 Store))) Store) (Name &rounds:0 Load) (/seq (Assign (list (Name &start_num:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &start_num:0 Load))) nil) None) (Assign (list (Name &round_scores:0 Store)) (Call (Name &optimal_play:0 Load) (list (_starred_content (Name &start_num:0 Load))) nil) None) (Assign (list (Name &player_order:0 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None)) (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (Assign (list (Name &idx:0 Store)) (Call (Attribute (Name &player_order:0 Load) s_index Load) (list (_starred_content (Name &start_player:0 Load))) nil) None) (For (Tuple (list (_starred_content (Name &player:0 Store)) (_starred_content (Name &score:0 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Subscript (Name &player_order:0 Load) (_slice_slice (Slice (Name &idx:0 Load) (BinOp (Name &idx:0 Load) Add (Constant i3 None)) None)) Load)) (_starred_content (Name &round_scores:0 Load))) nil) (/seq (AugAssign (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Name &score:0 Load))) (/seq) None)) (/seq) None))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxLCA0Nl0= None)) (fn_18 &n:1))) (FunctionDef &get_min_divisible_prime:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDksIDEwNSwgMTEwLCAxMDUsIDEwOSwgMTE3LCAxMDksIDMyLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMSwgMzIsIDExMCwgMTE3LCAxMDksIDk4LCAxMDEsIDExNCwgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgMTAwLCAxMDUsIDExOCwgMTA1LCAxMDAsIDEwMSwgMTE1LCAzMiwgMTEwLCA0Nl0= None)) (fn_2 (/seq (Return (Name &i:2 Load))) &i:2 &is_prime:0 &n:2) (Return (Name &n:2 Load))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &starting_player:3 None None) (arg &starting_number:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgzLCAxMDUsIDEwOSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDk3LCAzMiwgMTE1LCAxMDUsIDExMCwgMTAzLCAxMDgsIDEwMSwgMzIsIDExNCwgMTExLCAxMTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNSwgOTksIDExMSwgMTE0LCAxMDEsIDExNSwgMzIsIDEwMiwgMTExLCAxMTQsIDMyLCA3OSwgMTAwLCAxMDAsIDQ0LCAzMiwgNjksIDExOCwgMTAxLCAxMTAsIDQ0LCAzMiwgNzMsIDExMCwgMTAzLCAxMDksIDk3LCAxMTQsIDEwNSwgOTcsIDEyMSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE2LCAxMDQsIDk3LCAxMTYsIDMyLCAxMTEsIDExNCwgMTAwLCAxMDEsIDExNCwgNDZd None)) (/splice (fn_15 &players:3 &starting_player:3 &player_index:3 (/choiceseq (fn_13 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &scores:3) (Assign (list (Name &current_number:3 Store)) (Name &starting_number:3 Load) None)))) (While (Compare (Name &current_number:3 Load) (list Gt) (list (Constant i1 None))) (/seq (If (fn_25 &current_number:3) (/seq (AugAssign (Name &current_number:3 Store) Add (Constant i1 None))) (/seq (Assign (list (Name &prime_divisor:3 Store)) (Call (Name &get_min_divisible_prime:0 Load) (list (_starred_content (Name &current_number:3 Load))) nil) None) (If (Compare (Name &prime_divisor:3 Load) (list Eq) (list (Name &current_number:3 Load))) (/seq (AugAssign (Name &current_number:3 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &current_number:3 Store) FloorDiv (Name &prime_divisor:3 Load)))))) (fn_9 (Subscript (Name &players:3 Load) (_slice_content (Name &player_index:3 Load)) Load) &current_number:3 &scores:3) (Assign (list (Name &player_index:3 Store)) (fn_10 &player_index:3) None)) (/seq)) (For (Name &player:3 Store) (Name &players:3 Load) (/seq (If (Compare (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Assign (list (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Store)) (Name &starting_number:3 Load) None)) (/seq))) (/seq) None) (Return (Tuple (list (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_I None)) Load))) Load))) nil None None) (FunctionDef &game_simulation:0 (arguments nil (list (arg &input_data:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &rounds:4 Store)) (Call (Attribute (Name &input_data:4 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &rounds:4 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (/splice (fn_8 &scores:4 (/choiceseq (For (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:4 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &starting_player:4 Store)) (_starred_content (Name &starting_number:4 Store))) Store)) (Call (Attribute (Subscript (Name &rounds:4 Load) (_slice_content (Name &i:4 Load)) Load) s_split Load) nil nil) None) (Assign (list (Name &round_scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &starting_player:4 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &starting_number:4 Load))) nil))) nil) None) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_O None)) Store) Add (Subscript (Name &round_scores:4 Load) (_slice_content (Constant i0 None)) Load)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_E None)) Store) Add (Subscript (Name &round_scores:4 Load) (_slice_content (Constant i1 None)) Load)) (AugAssign (Subscript (Name &scores:4 Load) (_slice_content (Constant s_I None)) Store) Add (Subscript (Name &round_scores:4 Load) (_slice_content (Constant i2 None)) Load))) (/seq) None))))) nil None None) (Assign (list (Name &input_data:0 Store)) (Constant s-WzQ5LCAxMCwgNzksIDMyLCA1Ml0= None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &game_simulation:0 Load) (list (_starred_content (Name &input_data:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &next_move:0 (arguments nil (list (arg &x:2 None None)) None nil nil None nil) (/seq (fn_20 &x:2) (If (BoolOp Or (list (Call (Name &is_prime:0 Load) (list (_starred_content (BinOp (Name &x:2 Load) Sub (Constant i1 None)))) nil) (Compare (BinOp (Name &x:2 Load) Sub (Constant i1 None)) (list Eq) (list (Constant i1 None))))) (/seq (Return (BinOp (Name &x:2 Load) Sub (Constant i1 None)))) (/seq)) (fn_2 (/seq (Assign (list (Name &prime_factor:2 Store)) (Name &i:2 Load) None) Break) &i:2 &is_prime:0 &x:2) (Return (BinOp (Name &x:2 Load) FloorDiv (Name &prime_factor:2 Load)))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &start:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (/splice (fn_15 &players:3 &start:3 &turn:3 (/choiceseq (Assign (list (Name &scores:3 Store)) (DictComp (Name &player:5 Load) (Name &x:3 Load) (list (comprehension (Name &player:5 Store) (Name &players:3 Load) nil i0))) None)))) (While (Compare (Name &x:3 Load) (list Gt) (list (Constant i1 None))) (/seq (fn_9 (Subscript (Name &players:3 Load) (_slice_content (Name &turn:3 Load)) Load) &x:3 &scores:3) (Assign (list (Name &x:3 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &x:3 Load))) nil) None) (Assign (list (Name &turn:3 Store)) (BinOp (BinOp (Name &turn:3 Load) Add (Constant i1 None)) Mod (Call (Name g_len Load) (list (_starred_content (Name &players:3 Load))) nil)) None)) (/seq)) (Return (List (list (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_O None)) Load)) (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_E None)) Load)) (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Constant s_I None)) Load))) Load))) nil None None) (/splice (fn_6 &n:4 &main:0 (/choiceseq (fn_28 &total_scores:4) (fn_5 &x:4 &start:4 &n:4 &_:4 (/choiceseq (Assign (list (Name &round_scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &start:4 Load)) (_starred_content (Name &x:4 Load))) nil) None) (Assign (list (Name &total_scores:4 Store)) (ListComp (Call (Name g_sum Load) (list (_starred_content (Name &x:6 Load))) nil) (list (comprehension (Name &x:6 Store) (Call (Name g_zip Load) (list (_starred_content (Name &total_scores:4 Load)) (_starred_content (Name &round_scores:4 Load))) nil) nil i0))) None))) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &total_scores:4 Load) Load))) nil)))))) nil)",
            "(Module (/seq (/splice (fn_30 &n:1 &is_prime:0 &i:1 &n:2 &moves:2 &i:2 &next_moves:0)) (FunctionDef &play:0 (arguments nil (list (arg &starting_number:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &scores:3 Store)) (List (list (_starred_content (Name &starting_number:3 Load)) (_starred_content (Name &starting_number:3 Load)) (_starred_content (Name &starting_number:3 Load))) Load) None) (Assign (list (Name &current_min:3 Store)) (Name &starting_number:3 Load) None) (Assign (list (Name &turns:3 Store)) (Constant i0 None) None) (While (Compare (Name &starting_number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &possible_moves:3 Store)) (Call (Name &next_moves:0 Load) (list (_starred_content (Name &starting_number:3 Load))) nil) None) (Assign (list (Name &next_number:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &possible_moves:3 Load))) nil) None) (Assign (list (Name &starting_number:3 Store)) (Name &next_number:3 Load) None) (Assign (list (Name &current_min:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &current_min:3 Load)) (_starred_content (Name &starting_number:3 Load))) nil) None) (If (Compare (BinOp (Name &turns:3 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i0 None))) (/seq (fn_9 (Constant i0 None) &current_min:3 &scores:3)) (/seq (If (Compare (BinOp (Name &turns:3 Load) Mod (Constant i3 None)) (list Eq) (list (Constant i1 None))) (/seq (fn_9 (Constant i1 None) &current_min:3 &scores:3)) (/seq (fn_9 (Constant i2 None) &current_min:3 &scores:3))))) (AugAssign (Name &turns:3 Store) Add (Constant i1 None))) (/seq)) (Return (Name &scores:3 Load))) nil None None) (/splice (fn_27 &rounds:4 &main:0 (/choiceseq (/splice (fn_19 (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &rounds:4 Load))) nil) (/seq (Assign (list (Name &line:4 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &starting_player:4 Store)) (_starred_content (Name &starting_number:4 Store))) Store)) (fn_23 &line:4) None) (Assign (list (Name &starting_number_idx_mapping:4 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i1 None) (Constant i2 None))) None) (Assign (list (Name &starting_idx:4 Store)) (Subscript (Name &starting_number_idx_mapping:4 Load) (_slice_content (Name &starting_player:4 Load)) Load) None) (Assign (list (Name &scores:4 Store)) (Call (Name &play:0 Load) (list (_starred_content (Name &starting_number:4 Load))) nil) None) (Assign (list (Name &scores:4 Store)) (BinOp (Subscript (Name &scores:4 Load) (_slice_slice (Slice (Name &starting_idx:4 Load) None None)) Load) Add (Subscript (Name &scores:4 Load) (_slice_slice (Slice None (Name &starting_idx:4 Load) None)) Load)) None) (fn_12 &i:4 &scores:4 &total_scores:4)) (/seq) None) &total_scores:4)))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &optimal_play:0 (arguments nil (list (arg &start:2 None None) (arg &player:2 None None)) None nil nil None nil) (/seq (fn_26 &start:2) (Assign (list (Name &scores:2 Store)) (List (list (_starred_content (Name &start:2 Load)) (_starred_content (Name &start:2 Load)) (_starred_content (Name &start:2 Load))) Load) None) (Assign (list (Name &queue:2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name &start:2 Load)) (_starred_content (Constant i0 None)) (_starred_content (List (list (_starred_content (Name &start:2 Load)) (_starred_content (Name &start:2 Load)) (_starred_content (Name &start:2 Load))) Load))) Load))) Load) None) (While (Name &queue:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current:2 Store)) (_starred_content (Name &player:2 Store)) (_starred_content (Name &current_scores:2 Store))) Store)) (Call (Attribute (Name &queue:2 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil) None) (If (Compare (Name &current:2 Load) (list Eq) (list (Constant i1 None))) (/seq Break) (/seq)) (If (Compare (Name &player:2 Load) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &current:2 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &current:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &current:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &current:2 Load) Add (Constant i1 None))) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Name &new_score:2 Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i2 None)) Load))) Load))) Load))) nil))) (/seq)) (fn_2 (/seq (Assign (list (Name &new_val:2 Store)) (BinOp (Name &current:2 Load) FloorDiv (Name &i:2 Load)) None) (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &new_val:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &new_val:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &new_val:2 Load)) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Name &new_score:2 Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i2 None)) Load))) Load))) Load))) nil)) Break) &i:2 &is_prime:0 &current:2)) (/seq (If (Compare (Name &player:2 Load) (list Eq) (list (Constant i1 None))) (/seq (If (fn_25 &current:2) (/seq (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &current:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &current:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &current:2 Load) Add (Constant i1 None))) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Name &new_score:2 Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i2 None)) Load))) Load))) Load))) nil))) (/seq)) (fn_2 (/seq (Assign (list (Name &new_val:2 Store)) (BinOp (Name &current:2 Load) FloorDiv (Name &i:2 Load)) None) (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &new_val:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &new_val:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &new_val:2 Load)) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Name &new_score:2 Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i2 None)) Load))) Load))) Load))) nil)) Break) &i:2 &is_prime:0 &current:2)) (/seq (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &current:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &current:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &current:2 Load) Sub (Constant i1 None))) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Name &new_score:2 Load))) Load))) Load))) nil)) (fn_2 (/seq (Assign (list (Name &new_val:2 Store)) (BinOp (Name &current:2 Load) FloorDiv (Name &i:2 Load)) None) (Assign (list (Name &new_score:2 Store)) (IfExp (Compare (Name &new_val:2 Load) (list Lt) (list (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load))) (Name &new_val:2 Load) (Subscript (Name &current_scores:2 Load) (_slice_content (Name &player:2 Load)) Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &new_val:2 Load)) (_starred_content (fn_10 &player:2)) (_starred_content (List (list (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &current_scores:2 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Name &new_score:2 Load))) Load))) Load))) nil)) Break) &i:2 &is_prime:0 &current:2)))))) (/seq)) (Return (Name &scores:2 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_19 (fn_5 &start_num:0 &start_player:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &player_order:0 Store)) (Dict (list (Constant s_O None) (Constant s_E None) (Constant s_I None)) (list (Constant i0 None) (Constant i1 None) (Constant i2 None))) None) (Assign (list (Name &start_player:0 Store)) (Subscript (Name &player_order:0 Load) (_slice_content (Name &start_player:0 Load)) Load) None) (Assign (list (Name &round_scores:0 Store)) (Call (Name &optimal_play:0 Load) (list (_starred_content (Name &start_num:0 Load)) (_starred_content (Name &start_player:0 Load))) nil) None) (fn_12 &i:0 &round_scores:0 &scores:0))) &scores:0))) nil)",
            "(Module (/seq (FunctionDef &prime_factors:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &i:1 Store)) (Constant i2 None) None) (Assign (list (Name &factors:1 Store)) (List nil Load) None) (While (Compare (BinOp (Name &i:1 Load) Mult (Name &i:1 Load)) (list LtE) (list (Name &n:1 Load))) (/seq (If (BinOp (Name &n:1 Load) Mod (Name &i:1 Load)) (/seq (AugAssign (Name &i:1 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &n:1 Store) FloorDiv (Name &i:1 Load)) (Expr (Call (Attribute (Name &factors:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))))) (/seq)) (If (Compare (Name &n:1 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &factors:1 Load) s_append Load) (list (_starred_content (Name &n:1 Load))) nil))) (/seq)) (Return (Name &factors:1 Load))) nil None None) (FunctionDef &next_move:0 (arguments nil (list (arg &s:2 None None) (arg &player:2 None None)) None nil nil None nil) (/seq (fn_20 &s:2) (Assign (list (Name &factors:2 Store)) (Call (Name &prime_factors:0 Load) (list (_starred_content (Name &s:2 Load))) nil) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &factors:2 Load))) nil) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Name &s:2 Load) Add (Constant i1 None)))) (/seq)) (Return (BinOp (Name &s:2 Load) FloorDiv (Subscript (Name &factors:2 Load) (_slice_content (Constant i0 None)) Load)))) nil None None) (FunctionDef &simulate_game:0 (arguments nil (list (arg &n:3 None None) (arg &rounds:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &players:3 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (/splice (fn_8 &scores:3 (/choiceseq (For (Name &round:3 Store) (Name &rounds:3 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &starting_player:3 Store)) (_starred_content (Name &s:3 Store))) Store)) (Name &round:3 Load) None) (Assign (list (Name &starting_index:3 Store)) (Call (Attribute (Name &players:3 Load) s_index Load) (list (_starred_content (Name &starting_player:3 Load))) nil) None) (Assign (list (Name &turn:3 Store)) (Constant i0 None) None) (While (Compare (Name &s:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_player:3 Store)) (Subscript (Name &players:3 Load) (_slice_content (BinOp (BinOp (Name &starting_index:3 Load) Add (Name &turn:3 Load)) Mod (Constant i3 None))) Load) None) (Assign (list (Name &s:3 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &s:3 Load)) (_starred_content (Name &current_player:3 Load))) nil) None) (AugAssign (Name &turn:3 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Subscript (Name &scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (BinOp (BinOp (BinOp (Name &starting_index:3 Load) Add (Name &turn:3 Load)) Sub (Constant i1 None)) Mod (Constant i3 None))) Load)) Store) Add (Constant i1 None)) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (If (Compare (Subscript (Name &scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (Name &i:3 Load)) Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (Name &i:3 Load)) Load)) Store)) (Name &s:3 Load) None)) (/seq))) (/seq) None)) (/seq) None))))) nil None None) (fn_24 &n:0) (Assign (list (Name &rounds:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &line:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Attribute (Name &rounds:0 Load) s_append Load) (list (_starred_content (fn_23 &line:0))) nil))) (/seq) None) (Assign (list (Name &scores:0 Store)) (Call (Name &simulate_game:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &rounds:0 Load))) nil) None) (fn_11 &scores:0)) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &get_divisors:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &divisors:2 Store)) (List (list (_starred_content (Constant i1 None))) Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:2 Load))) nil) (/seq (If (fn_29 &i:2 &is_prime:0 &n:2) (/seq (Expr (Call (Attribute (Name &divisors:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil))) (/seq))) (/seq) None) (Return (Name &divisors:2 Load))) nil None None) (FunctionDef &optimal_move:0 (arguments nil (list (arg &n:3 None None) (arg &player:3 None None) (arg &scores:3 None None) (arg &depth:3 None None)) None nil nil None (list (Constant i0 None))) (/seq (If (Compare (Name &n:3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Name &scores:3 Load))) (/seq)) (Assign (list (Name &divisors:3 Store)) (Call (Name &get_divisors:0 Load) (list (_starred_content (Name &n:3 Load))) nil) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &divisors:3 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (AugAssign (Name &n:3 Store) FloorDiv (Call (Name g_min Load) (list (_starred_content (Subscript (Name &divisors:3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq (AugAssign (Name &n:3 Store) Sub (Constant i1 None)))) (fn_9 (Name &player:3 Load) &n:3 &scores:3) (Assign (list (Name &new_player:3 Store)) (fn_10 &player:3) None) (Return (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &new_player:3 Load)) (_starred_content (Name &scores:3 Load)) (_starred_content (BinOp (Name &depth:3 Load) Add (Constant i1 None)))) nil))) nil None None) (fn_24 &n:0) (fn_13 (Constant i0 None) &results:0) (fn_5 &num:0 &player:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &player_order:0 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (Assign (list (Name &start_player:0 Store)) (Call (Attribute (Name &player_order:0 Load) s_index Load) (list (_starred_content (Name &player:0 Load))) nil) None) (Assign (list (Name &scores:0 Store)) (List (list (_starred_content (Name &num:0 Load)) (_starred_content (Name &num:0 Load)) (_starred_content (Name &num:0 Load))) Load) None) (Assign (list (Name &scores:0 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &num:0 Load)) (_starred_content (Name &start_player:0 Load)) (_starred_content (Name &scores:0 Load))) nil) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &p:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &player_order:0 Load))) nil) (/seq (AugAssign (Subscript (Name &results:0 Load) (_slice_content (Name &p:0 Load)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq) None))) (fn_16 &results:0)) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &next_move:0 (arguments nil (list (arg &num:2 None None)) None nil nil None nil) (/seq (fn_20 &num:2) (If (BoolOp Or (list (Call (Name &is_prime:0 Load) (list (_starred_content (Name &num:2 Load))) nil) (Compare (BinOp (Name &num:2 Load) Mod (Constant i2 None)) (list NotEq) (list (Constant i0 None))))) (/seq (Return (BinOp (Name &num:2 Load) Sub (Constant i1 None)))) (/seq)) (Assign (list (Name &div:2 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &num:2 Load) Mod (Name &div:2 Load)) (list NotEq) (list (Constant i0 None))) (/seq (AugAssign (Name &div:2 Store) Add (Constant i1 None))) (/seq)) (Return (BinOp (Name &num:2 Load) FloorDiv (Name &div:2 Load)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_4 &scores:0 (/choiceseq (Assign (list (Name &players:0 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (fn_5 &num:0 &start_player:0 &n:0 &_:0 (/choiceseq (Assign (list (Name &turn:0 Store)) (Call (Attribute (Name &players:0 Load) s_index Load) (list (_starred_content (Name &start_player:0 Load))) nil) None) (Assign (list (Name &lowest_claim:0 Store)) (Name &num:0 Load) None) (fn_13 (Name &num:0 Load) &claimed:0) (While (Compare (Name &num:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &num:0 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &num:0 Load))) nil) None) (Assign (list (Name &player:0 Store)) (Subscript (Name &players:0 Load) (_slice_content (BinOp (Name &turn:0 Load) Mod (Constant i3 None))) Load) None) (Assign (list (Subscript (Name &claimed:0 Load) (_slice_content (Name &player:0 Load)) Store)) (Name &num:0 Load) None) (Assign (list (Name &lowest_claim:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &lowest_claim:0 Load)) (_starred_content (Name &num:0 Load))) nil) None) (AugAssign (Name &turn:0 Store) Add (Constant i1 None))) (/seq)) (For (Tuple (list (_starred_content (Name &player:0 Store)) (_starred_content (Name &score:0 Store))) Store) (Call (Attribute (Name &claimed:0 Load) s_items Load) nil nil) (/seq (If (Compare (Name &score:0 Load) (list Eq) (list (Name &lowest_claim:0 Load))) (/seq (AugAssign (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Name &lowest_claim:0 Load))) (/seq (AugAssign (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Name &score:0 Load))))) (/seq) None))))))) nil)",
            "(Module (fn_3 &n:1 &i:1 &is_prime:0 &main:0 (/choiceseq (FunctionDef &best_move:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (fn_20 &n:2) (fn_2 (/seq (Return (BinOp (Name &n:2 Load) FloorDiv (Name &i:2 Load)))) &i:2 &is_prime:0 &n:2) (Return (BinOp (Name &n:2 Load) Sub (Constant i1 None)))) nil None None) (FunctionDef &play_game:0 (arguments nil (list (arg &start_player:3 None None) (arg &n:3 None None)) None nil nil None nil) (/seq (/splice (fn_15 &players:3 &start_player:3 &current_player_index:3 (/choiceseq (fn_13 (Constant i0 None) &scores:3)))) (While (Compare (Name &n:3 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &n:3 Store)) (Call (Name &best_move:0 Load) (list (_starred_content (Name &n:3 Load))) nil) None) (AugAssign (Subscript (Name &scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (Name &current_player_index:3 Load)) Load)) Store) Add (Name &n:3 Load)) (Assign (list (Name &current_player_index:3 Store)) (fn_10 &current_player_index:3) None)) (/seq)) (AugAssign (Subscript (Name &scores:3 Load) (_slice_content (Subscript (Name &players:3 Load) (_slice_content (Name &current_player_index:3 Load)) Load)) Store) Add (Constant i1 None)) (Return (Name &scores:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (fn_24 &n:4) (/splice (fn_4 &overall_scores:4 (/choiceseq (fn_5 &start_number:4 &start_player:4 &n:4 &_:4 (/choiceseq (If (Compare (Name &start_number:4 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &overall_scores:4 Load) (_slice_content (Constant s_O None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &overall_scores:4 Load) (_slice_content (Constant s_E None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &overall_scores:4 Load) (_slice_content (Constant s_I None)) Store) Add (Constant i1 None))) (/seq (Assign (list (Name &round_scores:4 Store)) (Call (Name &play_game:0 Load) (list (_starred_content (Name &start_player:4 Load)) (_starred_content (Name &start_number:4 Load))) nil) None) (For (Name &player:4 Store) (Name &overall_scores:4 Load) (/seq (AugAssign (Subscript (Name &overall_scores:4 Load) (_slice_content (Name &player:4 Load)) Store) Add (Subscript (Name &round_scores:4 Load) (_slice_content (Name &player:4 Load)) Load))) (/seq) None))))))))) nil None None))) nil)",
            "(Module (fn_3 &n:1 &i:1 &is_prime:0 &main:0 (/choiceseq (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_player:2 None None) (arg &starting_number:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &scores:2 Store)) (List (list (_starred_content (Name &starting_number:2 Load)) (_starred_content (Name &starting_number:2 Load)) (_starred_content (Name &starting_number:2 Load))) Load) None) (Assign (list (Name &player_index:2 Store)) (Call (Attribute (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) s_index Load) (list (_starred_content (Name &starting_player:2 Load))) nil) None) (Assign (list (Name &number:2 Store)) (Name &starting_number:2 Load) None) (While (Compare (Name &number:2 Load) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Name &player_index:2 Load) (list Eq) (list (Constant i0 None))) (/seq (If (BoolOp Or (list (fn_25 &number:2) (Call (Name &is_prime:0 Load) (list (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil))) (/seq (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil) None) (AugAssign (Name &number:2 Store) Sub (Constant i1 None))) (/seq (Assign (list (Name &divisors:2 Store)) (ListComp (Name &i:5 Load) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &number:2 Load))) nil) (list (fn_29 &i:5 &is_prime:0 &number:2)) i0))) None) (Assign (list (Name &min_divisor:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &divisors:2 Load))) (list (keyword s_default (Name &number:2 Load)))) None) (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Name &min_divisor:2 Load)))) nil) None) (AugAssign (Name &number:2 Store) FloorDiv (Name &min_divisor:2 Load))))) (/seq (If (Compare (Name &player_index:2 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Call (Name &is_prime:0 Load) (list (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil) None) (AugAssign (Name &number:2 Store) Sub (Constant i1 None))) (/seq (Assign (list (Name &divisors:2 Store)) (fn_22 (BoolOp Or (list (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:6 Load))) nil) (Compare (Name &i:6 Load) (list Eq) (list (Name &number:2 Load))))) &i:6 &number:2) None) (Assign (list (Name &min_divisor:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &divisors:2 Load))) (list (keyword s_default (Name &number:2 Load)))) None) (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Name &min_divisor:2 Load)))) nil) None) (AugAssign (Name &number:2 Store) FloorDiv (Name &min_divisor:2 Load))))) (/seq (If (Call (Name &is_prime:0 Load) (list (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil) None) (AugAssign (Name &number:2 Store) Sub (Constant i1 None))) (/seq (Assign (list (Name &divisors:2 Store)) (fn_22 (BoolOp Or (list (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:7 Load))) nil) (Compare (Name &i:7 Load) (list Eq) (list (Name &number:2 Load))))) &i:7 &number:2) None) (Assign (list (Name &min_divisor:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &divisors:2 Load))) (list (keyword s_default (Name &number:2 Load)))) None) (Assign (list (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &scores:2 Load) (_slice_content (Name &player_index:2 Load)) Load)) (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Name &min_divisor:2 Load)))) nil) None) (AugAssign (Name &number:2 Store) FloorDiv (Name &min_divisor:2 Load)))))))) (Assign (list (Name &player_index:2 Store)) (fn_10 &player_index:2) None)) (/seq)) (Return (Name &scores:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (/splice (fn_19 (fn_5 &starting_number:3 &starting_player:3 &n:3 &_:3 (/choiceseq (Assign (list (Name &scores:3 Store)) (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_player:3 Load)) (_starred_content (Name &starting_number:3 Load))) nil) None) (Assign (list (Name &total_scores:3 Store)) (ListComp (BinOp (Name &ts:4 Load) Add (Name &s:4 Load)) (list (comprehension (Tuple (list (_starred_content (Name &ts:4 Store)) (_starred_content (Name &s:4 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &total_scores:3 Load)) (_starred_content (Name &scores:3 Load))) nil) nil i0))) None))) &total_scores:3))) nil None None))) nil)",
            "(Module (/seq (FunctionDef &find_divisor:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (If (fn_25 &n:1) (/seq (Return (Constant i2 None))) (/seq)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None)) (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Call (Name g_sqrt Load) (list (_starred_content (Name &n:1 Load))) nil))) nil) Add (Constant i1 None))) (_starred_content (Constant i2 None))) nil) (/seq (If (Compare (BinOp (Name &n:1 Load) Mod (Name &i:1 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &i:1 Load))) (/seq))) (/seq) None) (Return (Constant None None))) nil None None) (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_player:2 None None) (arg &starting_number:2 None None) (arg &scores:2 None None)) None nil nil None nil) (/seq (/splice (fn_15 &players:2 &starting_player:2 &cur_player_idx:2 (/choiceseq))) (Assign (list (Name &cur_number:2 Store)) (Name &starting_number:2 Load) None) (Assign (list (Name &lowest_number:2 Store)) (BinOp (List (list (_starred_content (Name &starting_number:2 Load))) Load) Mult (Constant i3 None)) None) (While (Compare (Name &cur_number:2 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &divisor:2 Store)) (Call (Name &find_divisor:0 Load) (list (_starred_content (Name &cur_number:2 Load))) nil) None) (If (Compare (Name &divisor:2 Load) (list IsNot) (list (Constant None None))) (/seq (AugAssign (Name &cur_number:2 Store) FloorDiv (Name &divisor:2 Load))) (/seq (AugAssign (Name &cur_number:2 Store) Add (Constant i1 None)))) (If (Compare (Name &cur_number:2 Load) (list Lt) (list (Subscript (Name &lowest_number:2 Load) (_slice_content (Name &cur_player_idx:2 Load)) Load))) (/seq (Assign (list (Subscript (Name &lowest_number:2 Load) (_slice_content (Name &cur_player_idx:2 Load)) Store)) (Name &cur_number:2 Load) None)) (/seq)) (Assign (list (Name &cur_player_idx:2 Store)) (fn_10 &cur_player_idx:2) None)) (/seq)) (fn_12 &i:2 &lowest_number:2 &scores:2)) nil None None) (/splice (fn_27 &n:3 &main:0 (/choiceseq (fn_28 &scores:3) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:3 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &starting_player:3 Store)) (_starred_content (Name &starting_number:3 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_player:3 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &starting_number:3 Load))) nil)) (_starred_content (Name &scores:3 Load))) nil))) (/seq) None) (fn_11 &scores:3))))) nil)",
            "(Module (/seq (FunctionDef &sieve:0 (arguments nil (list (arg &n:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcxLCAxMDEsIDExMCwgMTAxLCAxMTQsIDk3LCAxMTYsIDEwMSwgMzIsIDk3LCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMDksIDEwMSwgMTE1LCAzMiwgMTE3LCAxMTIsIDMyLCAxMTYsIDExMSwgMzIsIDExMCwgNDQsIDMyLCAxMDUsIDExMCwgOTksIDEwOCwgMTE3LCAxMTUsIDEwNSwgMTE4LCAxMDEsIDQ2XQ== None)) (Assign (list (Name &prime:1 Store)) (ListComp (Constant True None) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &p:1 Store)) (Constant i2 None) None) (While (Compare (BinOp (Name &p:1 Load) Mult (Name &p:1 Load)) (list LtE) (list (Name &n:1 Load))) (/seq (If (Compare (Subscript (Name &prime:1 Load) (_slice_content (Name &p:1 Load)) Load) (list Eq) (list (Constant True None))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &p:1 Load) Mult (Name &p:1 Load))) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None))) (_starred_content (Name &p:1 Load))) nil) (/seq (Assign (list (Subscript (Name &prime:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Constant False None) None)) (/seq) None)) (/seq)) (AugAssign (Name &p:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &primes:1 Store)) (List nil Load) None) (For (Name &p:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Subscript (Name &prime:1 Load) (_slice_content (Name &p:1 Load)) Load) (/seq (Expr (Call (Attribute (Name &primes:1 Load) s_append Load) (list (_starred_content (Name &p:1 Load))) nil))) (/seq))) (/seq) None) (Return (Name &primes:1 Load))) nil None None) (FunctionDef &get_divisible_by_prime:0 (arguments nil (list (arg &x:2 None None) (arg &primes:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgOTcsIDExNCwgMTAzLCAxMDEsIDExNSwgMTE2LCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTA4LCAxMDEsIDExNSwgMTE1LCAzMiwgMTE2LCAxMDQsIDk3LCAxMTAsIDMyLCAxMjAsIDMyLCAxMDAsIDEwNSwgMTE4LCAxMDUsIDExNSwgMTA1LCA5OCwgMTA4LCAxMDEsIDMyLCA5OCwgMTIxLCAzMiwgOTcsIDExMCwgMTIxLCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTA5LCAxMDEsIDQ2XQ== None)) (For (Name &prime:2 Store) (Name &primes:2 Load) (/seq (If (Compare (BinOp (Name &x:2 Load) Mod (Name &prime:2 Load)) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (Name &x:2 Load) FloorDiv (Name &prime:2 Load)))) (/seq))) (/seq) None) (Return (BinOp (Name &x:2 Load) Sub (Constant i1 None)))) nil None None) (FunctionDef &simulate_game:0 (arguments nil (list (arg &n:3 None None) (arg &rounds:3 None None)) None nil nil None nil) (/seq (/splice (fn_8 &scores:3 (/choiceseq (Assign (list (Name &players:3 Store)) (List (list (_starred_content (Constant s_O None)) (_starred_content (Constant s_E None)) (_starred_content (Constant s_I None))) Load) None) (Assign (list (Name &primes:3 Store)) (Call (Name &sieve:0 Load) (list (_starred_content (Constant i10000 None))) nil) None) (For (Tuple (list (_starred_content (Name &starter:3 Store)) (_starred_content (Name &num:3 Store))) Store) (Name &rounds:3 Load) (/seq (Assign (list (Name &current_scores:3 Store)) (DictComp (Name &player:6 Load) (Attribute (Name g_sys Load) s_maxsize Load) (list (comprehension (Name &player:6 Store) (Name &players:3 Load) nil i0))) None) (Assign (list (Name &player_index:3 Store)) (Call (Attribute (Name &players:3 Load) s_index Load) (list (_starred_content (Name &starter:3 Load))) nil) None) (While (Compare (Name &num:3 Load) (list Gt) (list (Constant i1 None))) (/seq (If (Compare (Name &num:3 Load) (list In) (list (Name &primes:3 Load))) (/seq (Assign (list (Name &num:3 Store)) (Constant i1 None) None)) (/seq (Assign (list (Name &num:3 Store)) (Call (Name &get_divisible_by_prime:0 Load) (list (_starred_content (Name &num:3 Load)) (_starred_content (Name &primes:3 Load))) nil) None))) (fn_9 (Subscript (Name &players:3 Load) (_slice_content (Name &player_index:3 Load)) Load) &num:3 &current_scores:3) (Assign (list (Name &player_index:3 Store)) (fn_10 &player_index:3) None)) (/seq)) (If (Compare (Name &num:3 Load) (list Eq) (list (Constant i1 None))) (/seq (For (Name &player:3 Store) (Name &players:3 Load) (/seq (Assign (list (Subscript (Name &current_scores:3 Load) (_slice_content (Name &player:3 Load)) Store)) (Constant i1 None) None)) (/seq) None)) (/seq)) (For (Name &player:3 Store) (Name &players:3 Load) (/seq (AugAssign (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Store) Add (Subscript (Name &current_scores:3 Load) (_slice_content (Name &player:3 Load)) Load))) (/seq) None)) (/seq) None))))) nil None None) (/splice (fn_6 &n:4 &main:0 (/choiceseq (Assign (list (Name &rounds:4 Store)) (ListComp (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) nil i0))) None) (Assign (list (Name &rounds:4 Store)) (ListComp (fn_23 &r:8) (list (comprehension (Name &r:8 Store) (Name &rounds:4 Load) nil i0))) None) (Assign (list (Name &result:4 Store)) (Call (Name &simulate_game:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &rounds:4 Load))) nil) None) (fn_11 &result:4))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (fn_18 &n:1))) (FunctionDef &prime_factors:0 (arguments nil (list (arg &n:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &factors:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &n:2 Load) Add (Constant i1 None)))) nil) (/seq (While (BoolOp And (list (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:2 Load))) nil) (Compare (BinOp (Name &n:2 Load) Mod (Name &i:2 Load)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Attribute (Name &factors:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil)) (AugAssign (Name &n:2 Store) FloorDiv (Name &i:2 Load))) (/seq))) (/seq) None) (Return (Name &factors:2 Load))) nil None None) (FunctionDef &optimal_move:0 (arguments nil (list (arg &n:3 None None)) None nil nil None nil) (/seq (fn_20 &n:3) (Assign (list (Name &factors:3 Store)) (Call (Name &prime_factors:0 Load) (list (_starred_content (Name &n:3 Load))) nil) None) (If (Name &factors:3 Load) (/seq (Return (BinOp (Name &n:3 Load) FloorDiv (Subscript (Name &factors:3 Load) (_slice_content (Constant i0 None)) Load)))) (/seq)) (Return (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil None None) (FunctionDef &simulate_round:0 (arguments nil (list (arg &starting_number:4 None None) (arg &starting_player:4 None None)) None nil nil None nil) (/seq (fn_13 (Name &starting_number:4 Load) &scores:4) (/splice (fn_15 &player_order:4 &starting_player:4 &current_player_index:4 (/choiceseq))) (Assign (list (Name &n:4 Store)) (Name &starting_number:4 Load) None) (While (Compare (Name &n:4 Load) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &n:4 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &n:4 Load))) nil) None) (fn_9 (Subscript (Name &player_order:4 Load) (_slice_content (Name &current_player_index:4 Load)) Load) &n:4 &scores:4) (Assign (list (Name &current_player_index:4 Store)) (fn_10 &current_player_index:4) None)) (/seq)) (Return (Name &scores:4 Load))) nil None None) (/splice (fn_6 &n:5 &main:0 (/choiceseq (/splice (fn_4 &total_scores:5 (/choiceseq (fn_5 &starting_number:5 &starting_player:5 &n:5 &_:5 (/choiceseq (Assign (list (Name &round_scores:5 Store)) (Call (Name &simulate_round:0 Load) (list (_starred_content (Name &starting_number:5 Load)) (_starred_content (Name &starting_player:5 Load))) nil) None) (For (Name &player:5 Store) (Name &total_scores:5 Load) (/seq (AugAssign (Subscript (Name &total_scores:5 Load) (_slice_content (Name &player:5 Load)) Store) Add (Subscript (Name &round_scores:5 Load) (_slice_content (Name &player:5 Load)) Load))) (/seq) None)))))))))) nil)",
            "(Module (/seq (fn_7 (Name g_sqrt Load) &n:1 &i:1 &is_prime:0) (FunctionDef &optimal_move:0 (arguments nil (list (arg &score:2 None None) (arg &number:2 None None)) None nil nil None nil) (/seq (fn_20 &number:2) (Assign (list (Name &primes:2 Store)) (ListComp (Name &i:4 Load) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &number:2 Load) Add (Constant i1 None)))) nil) (list (BoolOp And (list (Call (Name &is_prime:0 Load) (list (_starred_content (Name &i:4 Load))) nil) (Compare (BinOp (Name &number:2 Load) Mod (Name &i:4 Load)) (list Eq) (list (Constant i0 None)))))) i0))) None) (Assign (list (Name &optimal_score:2 Store)) (Name g_inf Load) None) (For (Name &prime:2 Store) (Name &primes:2 Load) (/seq (Assign (list (Name &new_score:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &score:2 Load)) (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Name &prime:2 Load)))) nil) None) (Assign (list (Name &optimal_score:2 Store)) (Call (Name g_min Load) (list (_starred_content (Name &optimal_score:2 Load)) (_starred_content (Name &new_score:2 Load))) nil) None)) (/seq) None) (Return (Call (Name g_min Load) (list (_starred_content (Name &optimal_score:2 Load)) (_starred_content (BinOp (Name &number:2 Load) Sub (Constant i1 None)))) nil))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &starting_player:3 None None) (arg &starting_number:3 None None)) None nil nil None nil) (/seq (/splice (fn_15 &players:3 &starting_player:3 &idx:3 (/choiceseq))) (fn_13 (Name g_inf Load) &scores:3) (Assign (list (Name &number:3 Store)) (Name &starting_number:3 Load) None) (While (Compare (Name &number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_player:3 Store)) (Subscript (Name &players:3 Load) (_slice_content (BinOp (Name &idx:3 Load) Mod (Constant i3 None))) Load) None) (Assign (list (Name &number:3 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Subscript (Name &scores:3 Load) (_slice_content (Name &current_player:3 Load)) Load)) (_starred_content (Name &number:3 Load))) nil) None) (fn_9 (Name &current_player:3 Load) &number:3 &scores:3) (AugAssign (Name &idx:3 Store) Add (Constant i1 None))) (/seq)) (For (Name &player:3 Store) (Name &scores:3 Load) (/seq (If (Compare (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Load) (list Eq) (list (Name g_inf Load))) (/seq (Assign (list (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Store)) (Name &starting_number:3 Load) None)) (/seq))) (/seq) None) (Return (Name &scores:3 Load))) nil None None) (fn_24 &n:0) (/splice (fn_4 &final_scores:0 (/choiceseq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &line:0 Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &starting_player:0 Store)) (_starred_content (Name &starting_number:0 Store))) Store)) (fn_23 &line:0) None) (Assign (list (Name &scores:0 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &starting_player:0 Load)) (_starred_content (Name &starting_number:0 Load))) nil) None) (For (Name &player:0 Store) (Name &final_scores:0 Load) (/seq (AugAssign (Subscript (Name &final_scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Load))) (/seq) None)) (/seq) None))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxLCA0Nl0= None)) (fn_18 &n:1))) (FunctionDef &next_move:0 (arguments nil (list (arg &number:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMCwgMTAxLCAxMjAsIDExNiwgMzIsIDExMSwgMTEyLCAxMTYsIDEwNSwgMTA5LCA5NywgMTA4LCAzMiwgMTA5LCAxMTEsIDExOCwgMTAxLCA0Nl0= None)) (fn_20 &number:2) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &number:2 Load) FloorDiv (Constant i2 None))) (_starred_content (Constant i1 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (fn_29 &i:2 &is_prime:0 &number:2) (/seq (Return (BinOp (Name &number:2 Load) FloorDiv (Name &i:2 Load)))) (/seq))) (/seq) None) (Return (BinOp (Name &number:2 Load) Add (Constant i1 None)))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &start_player:3 None None) (arg &number:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgwLCAxMDgsIDk3LCAxMjEsIDMyLCA5NywgMzIsIDExNCwgMTExLCAxMTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDExMSwgMTE5LCAxMDEsIDExNSwgMTE2LCAzMiwgMTEwLCAxMTcsIDEwOSwgOTgsIDEwMSwgMTE0LCAzMiwgMTAxLCA5NywgOTksIDEwNCwgMzIsIDExMiwgMTA4LCA5NywgMTIxLCAxMDEsIDExNCwgMzIsIDk5LCAxMDgsIDk3LCAxMDUsIDEwOSwgMTE1LCA0Nl0= None)) (/splice (fn_15 &players:3 &start_player:3 &player_idx:3 (/choiceseq (fn_13 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &scores:3)))) (While (Compare (Name &number:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &current_player:3 Store)) (Subscript (Name &players:3 Load) (_slice_content (BinOp (Name &player_idx:3 Load) Mod (Constant i3 None))) Load) None) (Assign (list (Name &number:3 Store)) (Call (Name &next_move:0 Load) (list (_starred_content (Name &number:3 Load))) nil) None) (If (Compare (Subscript (Name &scores:3 Load) (_slice_content (Name &current_player:3 Load)) Load) (list Gt) (list (Name &number:3 Load))) (/seq (Assign (list (Subscript (Name &scores:3 Load) (_slice_content (Name &current_player:3 Load)) Store)) (Name &number:3 Load) None)) (/seq)) (AugAssign (Name &player_idx:3 Store) Add (Constant i1 None))) (/seq)) (For (Name &player:3 Store) (Name &scores:3 Load) (/seq (If (Compare (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) (/seq (Assign (list (Subscript (Name &scores:3 Load) (_slice_content (Name &player:3 Load)) Store)) (Name &number:3 Load) None)) (/seq))) (/seq) None) (Return (Name &scores:3 Load))) nil None None) (/splice (fn_21 (Name g_input Load) &n:0 &_:4 &rounds:0)) (/splice (fn_4 &total_scores:0 (/choiceseq (For (Name &round:0 Store) (Name &rounds:0 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &start_player:0 Store)) (_starred_content (Name &number:0 Store))) Store)) (Name &round:0 Load) None) (Assign (list (Name &number:0 Store)) (Call (Name g_int Load) (list (_starred_content (Name &number:0 Load))) nil) None) (Assign (list (Name &scores:0 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Name &start_player:0 Load)) (_starred_content (Name &number:0 Load))) nil) None) (For (Name &player:0 Store) (Name &total_scores:0 Load) (/seq (AugAssign (Subscript (Name &total_scores:0 Load) (_slice_content (Name &player:0 Load)) Store) Add (Subscript (Name &scores:0 Load) (_slice_content (Name &player:0 Load)) Load))) (/seq) None)) (/seq) None))))) nil)",
            "(Module (/seq (fn_1 &i:1 &n:1 &is_prime:0 (/choiceseq (Expr (Constant s-WzY3LCAxMDQsIDEwMSwgOTksIDEwNywgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDMyLCAxMTAsIDExNywgMTA5LCA5OCwgMTAxLCAxMTQsIDMyLCAxMDUsIDExNSwgMzIsIDExMiwgMTE0LCAxMDUsIDEwOSwgMTAxLCA0Nl0= None)) (fn_18 &n:1))) (FunctionDef &optimal_move:0 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMSwgMTEyLCAxMTYsIDEwNSwgMTA5LCA5NywgMTA4LCAzMiwgMTA5LCAxMTEsIDExOCwgMTAxLCAzMiwgMTAyLCAxMTEsIDExNCwgMzIsIDk3LCAzMiwgMTEyLCAxMDgsIDk3LCAxMjEsIDEwMSwgMTE0LCA0Nl0= None)) (If (Compare (Name &start:2 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant i1 None))) (/seq (If (fn_25 &start:2) (/seq (Return (BinOp (Name &start:2 Load) FloorDiv (Constant i2 None)))) (/seq (fn_14 &i:2 &start:2 &is_prime:0))))) (Return (BinOp (Name &start:2 Load) Add (Constant i1 None)))) nil None None) (FunctionDef &play_round:0 (arguments nil (list (arg &start:3 None None) (arg &starter:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgzLCAxMDUsIDEwOSwgMTE3LCAxMDgsIDk3LCAxMTYsIDEwMSwgMzIsIDk3LCAzMiwgMTE0LCAxMTEsIDExNywgMTEwLCAxMDAsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDMsIDk3LCAxMDksIDEwMSwgNDZd None)) (Assign (list (Name &order:3 Store)) (Constant s_OEI None) None) (Assign (list (Name &idx:3 Store)) (Call (Attribute (Name &order:3 Load) s_index Load) (list (_starred_content (Name &starter:3 Load))) nil) None) (Assign (list (Name &scores:3 Store)) (List (list (_starred_content (Name &start:3 Load)) (_starred_content (Name &start:3 Load)) (_starred_content (Name &start:3 Load))) Load) None) (While (Compare (Name &start:3 Load) (list NotEq) (list (Constant i1 None))) (/seq (Assign (list (Name &start:3 Store)) (Call (Name &optimal_move:0 Load) (list (_starred_content (Name &start:3 Load))) nil) None) (fn_9 (BinOp (Name &idx:3 Load) Mod (Constant i3 None)) &start:3 &scores:3) (AugAssign (Name &idx:3 Store) Add (Constant i1 None))) (/seq)) (Return (Call (Name g_tuple Load) (list (_starred_content (Name &scores:3 Load))) nil))) nil None None) (/splice (fn_6 &n:4 &main:0 (/choiceseq (fn_28 &total_scores:4) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &starter:4 Store)) (_starred_content (Name &start:4 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &scores:4 Store)) (Call (Name &play_round:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &start:4 Load))) nil)) (_starred_content (Subscript (Name &starter:4 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (fn_12 &i:4 &scores:4 &total_scores:4)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &total_scores:4 Load))) nil))) nil))) nil)))))) nil)"
        ]
    },
    "82": {
        "abstractions": [
            {
                "body": "(Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name %4 Load) Sub (BinOp (BinOp (Name %2 Load) Sub (Constant i1 None)) Mult (Name %3 Load))) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))))) nil)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (BinOp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub #0)) Load) Add (Name %1 Load)))) nil) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (UnaryOp USub #0))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i3 None)) Load))) nil))) Load))) nil))) (/seq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil))) Load))) nil))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (Assign (list (Name %1 Store)) (Call (Attribute #0 s_split Load) nil nil) None) (If (Compare (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant s_D None)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i3 None)) Load))) nil))) Load))) nil))) (/seq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant s_C None)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil))) Load))) nil)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant s_impossible None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name %1 Load) i-1 (JoinedStr (list (Constant s_.9f None)))))))) nil))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %12 (arguments nil nil None nil nil None nil) (/seq (fn_3 %2 %1) (Assign (list (Name %3 Store)) (List nil Load) None) (Assign (list (Name %4 Store)) (List nil Load) None) (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Name %5 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (If (Compare (Subscript (Name %5 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %9 Store)) (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Name %5 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) None) (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %9 Load)) (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) Load))) nil))) (/seq (If (Compare (Subscript (Name %5 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Name %5 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) None) (Expr (Call (Attribute (Name %4 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) Load))) nil))) (/seq))))) (/seq) None) (Assign (list (Name %11 Store)) (Call (Name %10 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %4 Load)) (_starred_content (Name %2 Load))) nil) None) #0) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %12 Load) nil nil))) (/seq)))",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (_starred_content #0)) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (fn_3 %2 %1) (Assign (list (Name %4 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (BinOp (Name %3 Load) Mult (Name %2 Load)) Sub (BinOp (BinOp (Name %1 Load) Mult (BinOp #0 Pow (Constant i2 None))) Div (Constant i2 None)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript #0 (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (UnaryOp USub #0))) (/seq (Return (Constant s_impossible None))) (/seq (Return (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp (Name %2 Load) Mult (Name %1 Load)) Sub (BinOp #0 Mult (BinOp (Name %1 Load) Pow (Constant i2 None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue #0 i-1 (JoinedStr (list (Constant s_.9f None)))))))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (fn_3 %2 %1) (Assign (list (Name %3 Store)) (List nil Load) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Name %4 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) ?0) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (List (list (_starred_content (Subscript #0 (_slice_content (Constant i0 None)) Load))) Load) Add (Call (Name g_list Load) (list (_starred_content (fn_13 #0))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (fn_10 (BinOp (BinOp (Subscript (Name %1 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) Add (Name %4 Load)) Sub (BinOp (BinOp (Name %2 Load) Sub (Constant i1 None)) Mult (Name %3 Load))) %2 %1))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp #0 (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Name %3 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant s_D None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant s_C None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load))) Load) None) ?0 (Assign (list (Name %1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant s_D None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant s_C None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant s_C None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i3 None))) Load))) Load) None))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list Eq) (list (Constant s_impossible None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NywgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Name %1 Load))) nil))) nil))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) #0 None) (If (Attribute (Name %1 Load) s_success Load) (/seq (Return (UnaryOp USub (Attribute (Name %1 Load) s_fun Load)))) (/seq (Return (Constant s_impossible None)))))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq (Assign (list (Name %4 Store)) (ListComp (BinOp (List (list (_starred_content (fn_20))) Load) Mult (BinOp (Name %3 Load) Add (Constant i1 None))) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name %4 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) ?0) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i2 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i3 None)) Load))) nil))) Load)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Name %2 Load)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil))) nil) None) (Assign (list (Name %5 Store)) (ListComp (Call (Attribute (Name %4 Load) s_split Load) nil nil) (list (comprehension (Name %4 Store) (Subscript (Name %1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))) None) (Return (Tuple (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %5 Load))) Load)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &calculate_discrete_tastiness:0 (arguments nil (list (arg &w:1 None None) (arg &t:1 None None) (arg &dt:1 None None) (arg &weight:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &num_items:1 Store)) (BinOp (Name &weight:1 Load) FloorDiv (Name &w:1 Load)) None) (Assign (list (Name &total_tastiness:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &t:1 Load) Sub (BinOp (Name &i:6 Load) Mult (Name &dt:1 Load))) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &num_items:1 Load))) nil) nil i0))))) nil) None) (Return (Name &total_tastiness:1 Load))) nil None None) (FunctionDef &calculate_continuous_tastiness:0 (arguments nil (list (arg &t:2 None None) (arg &dt:2 None None) (arg &weight:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &total_tastiness:2 Store)) (fn_15 (BinOp (Constant f0.5 None) Mult (Name &dt:2 Load)) &weight:2 &t:2) None) (Return (Name &total_tastiness:2 Load))) nil None None) (FunctionDef &max_tastiness:0 (arguments nil (list (arg &dishes:3 None None) (arg &total_weight:3 None None)) None nil nil None nil) (/seq (/splice (fn_23 (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) &total_weight:3 &_:5 &dp:3)) (For (Name &dish:3 Store) (Name &dishes:3 Load) (/seq (If (fn_18 &dish:3) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &w:3 Store)) (_starred_content (Name &t:3 Store)) (_starred_content (Name &dt:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &curr_weight:3 Store) (fn_29 &total_weight:3 &w:3) (/seq (Assign (list (Name &num_items:3 Store)) (BinOp (BinOp (BinOp (Name &curr_weight:3 Load) Sub (Name &w:3 Load)) FloorDiv (Name &w:3 Load)) Add (Constant i1 None)) None) (Assign (list (Name &total_tastiness:3 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &t:3 Load) Sub (BinOp (Name &i:7 Load) Mult (Name &dt:3 Load))) (list (comprehension (Name &i:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &num_items:3 Load))) nil) nil i0))))) nil) None) (fn_2 (Name &w:3 Load) &total_tastiness:3 &curr_weight:3 &dp:3)) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:3 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &t:3 Store)) (_starred_content (Name &dt:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &curr_weight:3 Store) (fn_4 (Name &total_weight:3 Load)) (/seq (Assign (list (Name &total_tastiness:3 Store)) (fn_15 (BinOp (Constant f0.5 None) Mult (Name &dt:3 Load)) &curr_weight:3 &t:3) None) (fn_10 (Name &total_tastiness:3 Load) &curr_weight:3 &dp:3)) (/seq) None)) (/seq))))) (/seq) None) (Return (IfExp (Compare (Subscript (Name &dp:3 Load) (_slice_content (Name &total_weight:3 Load)) Load) (list NotEq) (list (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil))) (Subscript (Name &dp:3 Load) (_slice_content (Name &total_weight:3 Load)) Load) (Constant s_impossible None)))) nil None None) (/splice (fn_17 (/seq (/splice (fn_19 &d:4 &w:4 &dishes:4 &dish_info:4 &_:4 (/choiceseq (fn_6 &dish_info:4 &dishes:4)))) (Assign (list (Name &result:4 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &dishes:4 Load)) (_starred_content (Name &w:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Name &result:4 Load) (list NotEq) (list (Constant s_impossible None))) (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NCwgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Name &result:4 Load))) nil) (Name &result:4 Load)))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &solve_buffet:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &coeffs:1 Store)) (List nil Load) None) (Assign (list (Name &bounds:1 Store)) (List nil Load) None) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (fn_18 &dish:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &wd:1 Store)) (_starred_content (Name &td:1 Store)) (_starred_content (Name &deld:1 Store))) Store)) (Subscript (Name &dish:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Assign (list (Name &max_items:1 Store)) (Call (Name g_min Load) (list (_starred_content (BinOp (Name &w:1 Load) FloorDiv (Name &wd:1 Load))) (_starred_content (IfExp (Compare (Name &deld:1 Load) (list NotEq) (list (Constant i0 None))) (BinOp (Name &td:1 Load) FloorDiv (Name &deld:1 Load)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))) nil) None) (Assign (list (Name &total_taste:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &td:1 Load) Sub (BinOp (Name &deld:1 Load) Mult (Name &i:3 Load))) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &max_items:1 Load))) nil) nil i0))))) nil) None) (Expr (Call (Attribute (Name &coeffs:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &total_taste:1 Load)))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &wd:1 Load) Mult (Name &max_items:1 Load)))) Load))) nil))) (/seq (Assign (list (Tuple (list (_starred_content (Name &tc:1 Store)) (_starred_content (Name &delc:1 Store))) Store)) (Subscript (Name &dish:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (If (Compare (Name &delc:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &coeffs:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &tc:1 Load)))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &w:1 Load))) Load))) nil))) (/seq (Assign (list (Name &optimal_amount:1 Store)) (BinOp (Name &tc:1 Load) Div (BinOp (Constant i2 None) Mult (Name &delc:1 Load))) None) (Assign (list (Name &total_taste:1 Store)) (fn_12 (Name &optimal_amount:1 Load) &delc:1 &tc:1 &optimal_amount:1) None) (Expr (Call (Attribute (Name &coeffs:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &total_taste:1 Load)))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (Name &optimal_amount:1 Load))) nil))) Load))) nil))))))) (/seq) None) (/splice (fn_26 (Call (Name g_linprog Load) (list (_starred_content (Name &coeffs:1 Load))) (list (keyword s_A_ub (List (list (_starred_content (Call (Name g_list Load) (list (_starred_content (fn_4 (Name &d:1 Load)))) nil))) Load)) (keyword s_b_ub (List (list (_starred_content (Name &w:1 Load))) Load)) (keyword s_bounds (Name &bounds:1 Load)) (keyword s_method (Constant s_highs None)))) &res:1))) nil None None) (/splice (fn_11 &d:0 &w:0 &_:2 &dishes:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:0 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Tuple (list (_starred_content (Constant s_D None))) Load) Add (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) None)) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Tuple (list (_starred_content (Constant s_C None))) Load) Add (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load)))) nil)) None)))) (/seq) None) (Assign (list (Name &max_tastiness:0 Store)) (Call (Name &solve_buffet:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (fn_8 (Name &max_tastiness:0 Load) &max_tastiness:0)) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &discrete_dishes:1 None None) (arg &continuous_dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &A_ub:1 Store)) (_starred_content (Name &b_ub:1 Store)) (_starred_content (Name &c:1 Store))) Store)) (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load)) (_starred_content (List nil Load))) Load) None) (Assign (list (Name &bounds:1 Store)) (List nil Load) None) (Assign (list (Name &discrete_offset:1 Store)) (Constant i0 None) None) (Assign (list (Name &continuous_offset:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &discrete_dishes:1 Load))) nil) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &weight:1 Store)) (_starred_content (Name &t:1 Store)) (_starred_content (Name &decay:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &discrete_dishes:1 Load))) nil) (/seq (Assign (list (Name &max_items:1 Store)) (BinOp (Name &w:1 Load) FloorDiv (Name &weight:1 Load)) None) (For (Name &n:1 Store) (fn_4 (Name &max_items:1 Load)) (/seq (Assign (list (Name &tastiness:1 Store)) (BinOp (Name &t:1 Load) Sub (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Mult (Name &decay:1 Load))) None) (If (Compare (Name &tastiness:1 Load) (list LtE) (list (Constant i0 None))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &A_ub:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &discrete_offset:1 Load)) Add (List (list (_starred_content (UnaryOp USub (Name &weight:1 Load)))) Load)) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &discrete_dishes:1 Load))) nil) Sub (Name &discrete_offset:1 Load)) Sub (Constant i1 None)))) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &continuous_dishes:1 Load))) nil))))) nil)) (Expr (Call (Attribute (Name &b_ub:1 Load) s_append Load) (list (_starred_content (BinOp (UnaryOp USub (Name &weight:1 Load)) Mult (Name &n:1 Load)))) nil)) (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &tastiness:1 Load)))) nil))) (/seq) None) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &max_items:1 Load))) Load))) nil)) (AugAssign (Name &discrete_offset:1 Store) Add (Constant i1 None))) (/seq) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &t:1 Store)) (_starred_content (Name &decay:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &continuous_dishes:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &A_ub:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (BinOp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &discrete_dishes:1 Load))) nil)) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &continuous_offset:1 Load))) Add (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load)) Add (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &continuous_dishes:1 Load))) nil) Sub (Name &continuous_offset:1 Load)) Sub (Constant i1 None)))))) nil)) (Expr (Call (Attribute (Name &b_ub:1 Load) s_append Load) (list (_starred_content (Constant i0 None))) nil)) (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &t:1 Load)))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (IfExp (Compare (Name &decay:1 Load) (list Gt) (list (Constant i0 None))) (BinOp (BinOp (Name &w:1 Load) Mult (Name &decay:1 Load)) Div (Name &t:1 Load)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))) Load))) nil))) (/seq) None) (Assign (list (Name &weights:1 Store)) (BinOp (ListComp (Name &weight:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &weight:3 Store)) (_starred_content (Name &_:3 Store)) (_starred_content (Name &_:3 Store))) Store) (Name &discrete_dishes:1 Load) nil i0))) Add (ListComp (Constant f1.0 None) (list (comprehension (Name &_:4 Store) (Name &continuous_dishes:1 Load) nil i0)))) None) (Assign (list (Name &A_eq:1 Store)) (List (list (_starred_content (Name &weights:1 Load))) Load) None) (Assign (list (Name &b_eq:1 Store)) (List (list (_starred_content (Name &w:1 Load))) Load) None) (/splice (fn_26 (Call (Name g_linprog Load) nil (list (keyword s_c (Name &c:1 Load)) (keyword s_A_ub (Name &A_ub:1 Load)) (keyword s_b_ub (Name &b_ub:1 Load)) (keyword s_A_eq (Name &A_eq:1 Load)) (keyword s_b_eq (Name &b_eq:1 Load)) (keyword s_bounds (Name &bounds:1 Load)) (keyword s_method (Constant s_highs None)))) &res:1))) nil None None) (/splice (fn_17 (/seq (fn_3 &w:2 &d:2) (Assign (list (Tuple (list (_starred_content (Name &discrete_dishes:2 Store)) (_starred_content (Name &continuous_dishes:2 Store))) Store)) (Tuple (list (_starred_content (List nil Load)) (_starred_content (List nil Load))) Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:2 Load))) nil) (/seq (Assign (list (Name &parts:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (If (fn_18 &parts:2) (/seq (Expr (Call (Attribute (Name &discrete_dishes:2 Load) s_append Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Name &parts:2 Load)))) nil))) nil))) (/seq (Expr (Call (Attribute (Name &continuous_dishes:2 Load) s_append Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Name &parts:2 Load)))) nil))) nil))))) (/seq) None) (Assign (list (Name &result:2 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &d:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &discrete_dishes:2 Load)) (_starred_content (Name &continuous_dishes:2 Load))) nil) None) (fn_8 (Name &result:2 Load) &result:2)) &main:0))) nil)",
            "(Module (/seq (FunctionDef &integral_continuous:0 (arguments nil (list (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &X:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &X:1 Load) Mult (Name &t_i:1 Load)) Sub (BinOp (BinOp (Constant f0.5 None) Mult (Name &delta_t_i:1 Load)) Mult (BinOp (Name &X:1 Load) Pow (Constant i2 None)))))) nil None None) (FunctionDef &tastiness_discrete:0 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &N:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &N:2 Load) Mult (Name &t_i:2 Load)) Sub (BinOp (BinOp (Name &delta_t_i:2 Load) Mult (BinOp (Name &N:2 Load) Mult (BinOp (Name &N:2 Load) Sub (Constant i1 None)))) Div (Constant i2 None))))) nil None None) (fn_27 &dishes:3 &_:5 &w:3 &dp:3 &max_tastiness:0 (/choiceseq (For (Name &i:3 Store) (fn_4 (Call (Name g_len Load) (list (_starred_content (Name &dishes:3 Load))) nil)) (/seq (Assign (list (Name &dish:3 Store)) (Subscript (Name &dishes:3 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i1 None))) Load) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &w:3 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (Subscript (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &j:3 Load)) Load) None) (If (fn_18 &dish:3) (/seq (Assign (list (Tuple (list (_starred_content (Name &w_i:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Subscript (Name &dish:3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Name &k:3 Store) (fn_4 (BinOp (Name &j:3 Load) FloorDiv (Name &w_i:3 Load))) (/seq (If (Compare (Name &j:3 Load) (list GtE) (list (BinOp (Name &k:3 Load) Mult (Name &w_i:3 Load)))) (/seq (Assign (list (Subscript (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:3 Load) Sub (BinOp (Name &k:3 Load) Mult (Name &w_i:3 Load)))) Load) Add (Call (Name &tastiness_discrete:0 Load) (list (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Name &k:3 Load))) nil)))) nil) None)) (/seq))) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Subscript (Name &dish:3 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (Assign (list (Subscript (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Subscript (Name &dp:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &j:3 Load)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &i:3 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &j:3 Load)) Load) Add (Call (Name &integral_continuous:0 Load) (list (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Name &j:3 Load))) nil)))) nil) None)))) (/seq) None)) (/seq) None) (Return (Subscript (Subscript (Name &dp:3 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) (/splice (fn_11 &d:0 &w:0 &_:4 &dishes:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:0 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (fn_21 (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load)) None)) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (fn_21 (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load)) None)))) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil) None) (If (Compare (Name &result:0 Load) (list Eq) (list (fn_20))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (fn_16 (Name &result:0 Load))))) nil)",
            "(Module (/seq (FunctionDef &calc_tastiness:0 (arguments nil (list (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &amount:1 None None) (arg &discrete:1 None None)) None nil nil None (list (Constant True None))) (/seq (If (Name &discrete:1 Load) (/seq (Return (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &t_i:1 Load) Sub (BinOp (Name &n:3 Load) Mult (Name &delta_t_i:1 Load))) (list (comprehension (Name &n:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &amount:1 Load))) nil) nil i0))))) nil))) (/seq (Return (fn_15 (BinOp (Constant f0.5 None) Mult (Name &delta_t_i:1 Load)) &amount:1 &t_i:1))))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &dishes:2 None None) (arg &target_weight:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &target_weight:2 &dp:2)) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &t_i:2 Store)) (_starred_content (Name &delta_t_i:2 Store)) (_starred_content (Name &w_i:2 Store)) (_starred_content (Name &dish_type:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dishes:2 Load))) nil) (/seq (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_D None))) (/seq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &target_weight:2 Load)) (_starred_content (BinOp (Name &w_i:2 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Name &k:2 Store) (fn_4 (BinOp (Name &j:2 Load) FloorDiv (Name &w_i:2 Load))) (/seq (Assign (list (Name &added_tastiness:2 Store)) (Call (Name &calc_tastiness:0 Load) (list (_starred_content (Name &t_i:2 Load)) (_starred_content (Name &delta_t_i:2 Load)) (_starred_content (Name &k:2 Load))) nil) None) (If (Compare (BinOp (Name &j:2 Load) Sub (BinOp (Name &k:2 Load) Mult (Name &w_i:2 Load))) (list GtE) (list (Constant i0 None))) (/seq (fn_2 (BinOp (Name &k:2 Load) Mult (Name &w_i:2 Load)) &added_tastiness:2 &j:2 &dp:2)) (/seq))) (/seq) None)) (/seq) None)) (/seq (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_C None))) (/seq (For (Name &j:2 Store) (fn_29 &target_weight:2 &w_i:2) (/seq (fn_10 (BinOp (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Name &w_i:2 Load))) Load) Add (Call (Name &calc_tastiness:0 Load) (list (_starred_content (Name &t_i:2 Load)) (_starred_content (Name &delta_t_i:2 Load)) (_starred_content (Name &w_i:2 Load))) (list (keyword s_discrete (Constant False None))))) &j:2 &dp:2)) (/seq) None)) (/seq))))) (/seq) None) (Return (IfExp (Compare (Subscript (Name &dp:2 Load) (_slice_content (Name &target_weight:2 Load)) Load) (list NotEq) (list (fn_20))) (Subscript (Name &dp:2 Load) (_slice_content (Name &target_weight:2 Load)) Load) (Constant s_impossible None)))) nil None None) (/splice (fn_19 &d:0 &w:0 &dishes:0 &inputs:0 &_:0 (/choiceseq (Assign (list (Name &dish_type:0 Store)) (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load) None) (If (Compare (Name &dish_type:0 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &w_i:0 Store)) (_starred_content (Name &t_i:0 Store)) (_starred_content (Name &delta_t_i:0 Store))) Store)) (fn_13 (Name &inputs:0 Load)) None) (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &t_i:0 Load)) (_starred_content (Name &delta_t_i:0 Load)) (_starred_content (Name &w_i:0 Load)) (_starred_content (Name &dish_type:0 Load))) Load))) nil))) (/seq (If (Compare (Name &dish_type:0 Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &t_i:0 Store)) (_starred_content (Name &delta_t_i:0 Store))) Store)) (fn_13 (Name &inputs:0 Load)) None) (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &t_i:0 Load)) (_starred_content (Name &delta_t_i:0 Load)) (_starred_content (Constant i1 None)) (_starred_content (Name &dish_type:0 Load))) Load))) nil))) (/seq))))))) (Assign (list (Name &answer:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil) None) (fn_25 (Name &answer:0 Load) &answer:0)) nil)",
            "(Module (/seq (FunctionDef &calculate_discrete_tastiness:0 (arguments nil (list (arg &w_i:1 None None) (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &weight:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTcsIDMyLCAxMDAsIDEwNSwgMTE1LCA5OSwgMTE0LCAxMDEsIDExNiwgMTAxLCAzMiwgMTAwLCAxMDUsIDExNSwgMTA0LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &n:1 Store)) (BinOp (Name &weight:1 Load) FloorDiv (Name &w_i:1 Load)) None) (Return (fn_1 &n:1 &i:7 &delta_t_i:1 &t_i:1))) nil None None) (FunctionDef &calculate_continuous_tastiness:0 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &weight:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTcsIDMyLCA5OSwgMTExLCAxMTAsIDExNiwgMTA1LCAxMTAsIDExNywgMTExLCAxMTcsIDExNSwgMzIsIDEwMCwgMTA1LCAxMTUsIDEwNCwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Return (fn_15 (BinOp (Name &delta_t_i:2 Load) Div (Constant i2 None)) &weight:2 &t_i:2))) nil None None) (FunctionDef &calculate_maximum_tastiness:0 (arguments nil (list (arg &dishes:3 None None) (arg &w:3 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOSwgOTcsIDEyMCwgMTA1LCAxMDksIDExNywgMTA5LCAzMiwgMTEyLCAxMTEsIDExNSwgMTE1LCAxMDUsIDk4LCAxMDgsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTcsIDMyLCAxMDksIDEwMSwgOTcsIDEwOCwgMzIsIDExMSwgMTAyLCAzMiwgMTE5LCAxMDEsIDEwNSwgMTAzLCAxMDQsIDExNiwgMzIsIDExOSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (/splice (fn_23 (fn_20) &w:3 &_:5 &dp:3)) (For (Name &dish:3 Store) (Name &dishes:3 Load) (/seq (Assign (list (Name &dish_type:3 Store)) (Subscript (Name &dish:3 Load) (_slice_content (Constant i0 None)) Load) None) (If (Compare (Name &dish_type:3 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &w_i:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &curr_weight:3 Store) (fn_29 &w:3 &w_i:3) (/seq (Assign (list (Name &pieces:3 Store)) (BinOp (Name &curr_weight:3 Load) FloorDiv (Name &w_i:3 Load)) None) (Assign (list (Name &tastiness:3 Store)) (fn_1 &pieces:3 &i:8 &delta_t_i:3 &t_i:3) None) (fn_2 (Name &w_i:3 Load) &tastiness:3 &curr_weight:3 &dp:3)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &curr_weight:3 Store) (fn_4 (Name &w:3 Load)) (/seq (For (Name &added_weight:3 Store) (fn_4 (Name &curr_weight:3 Load)) (/seq (Assign (list (Name &tastiness:3 Store)) (Call (Name &calculate_continuous_tastiness:0 Load) (list (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Name &added_weight:3 Load))) nil) None) (If (Compare (BinOp (Name &curr_weight:3 Load) Sub (Name &added_weight:3 Load)) (list GtE) (list (Constant i0 None))) (/seq (fn_2 (Name &added_weight:3 Load) &tastiness:3 &curr_weight:3 &dp:3)) (/seq))) (/seq) None)) (/seq) None)))) (/seq) None) (Return (IfExp (Compare (Subscript (Name &dp:3 Load) (_slice_content (Name &w:3 Load)) Load) (list NotEq) (list (fn_20))) (Subscript (Name &dp:3 Load) (_slice_content (Name &w:3 Load)) Load) (Constant s_impossible None)))) nil None None) (/splice (fn_17 (/seq (/splice (fn_11 &d:4 &w:4 &_:6 &dishes:4)) (For (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:4 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (Name &i:4 Load)) Load) (_slice_slice (Slice (Constant i1 None) None None)) Store)) (fn_13 (Subscript (Name &dishes:4 Load) (_slice_content (Name &i:4 Load)) Load)) None)) (/seq) None) (Assign (list (Name &max_tastiness:4 Store)) (Call (Name &calculate_maximum_tastiness:0 Load) (list (_starred_content (Name &dishes:4 Load)) (_starred_content (Name &w:4 Load))) nil) None) (fn_25 (Constant s_impossible None) &max_tastiness:4)) &main:0))) nil)",
            "(Module (/seq (FunctionDef &parse_dish:0 (arguments nil (list (arg &line:1 (Name g_str Load) None)) None nil nil None nil) (/seq (Assign (list (Name &parts:1 Store)) (Call (Attribute (Name &line:1 Load) s_split Load) nil nil) None) (If (fn_18 &parts:1) (/seq (Return (fn_28 &parts:1))) (/seq (Return (Tuple (list (_starred_content (Subscript (Name &parts:1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:1 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:1 Load) (_slice_content (Constant i2 None)) Load))) nil))) Load))))) nil (Subscript (Name g_Union Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_str Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load)) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_str Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load))) Load)) Load) None) (FunctionDef &total_tastiness_discrete:0 (arguments nil (list (arg &weight:2 (Name g_int Load) None) (arg &tastiness:2 (Name g_int Load) None) (arg &decay:2 (Name g_int Load) None) (arg &amount:2 (Name g_int Load) None)) None nil nil None nil) (/seq (Assign (list (Name &total:2 Store)) (Constant i0 None) None) (For (Name &i:2 Store) (fn_4 (Name &amount:2 Load)) (/seq (AugAssign (Name &total:2 Store) Add (BinOp (Name &tastiness:2 Load) Sub (BinOp (BinOp (Name &i:2 Load) Sub (Constant i1 None)) Mult (Name &decay:2 Load))))) (/seq) None) (Return (Name &total:2 Load))) nil (Name g_float Load) None) (FunctionDef &total_tastiness_continuous:0 (arguments nil (list (arg &tastiness:3 (Name g_int Load) None) (arg &decay:3 (Name g_int Load) None) (arg &weight:3 (Name g_float Load) None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &tastiness:3 Load) Mult (Name &weight:3 Load)) Sub (BinOp (BinOp (BinOp (Name &decay:3 Load) Mult (Name &weight:3 Load)) Mult (Name &weight:3 Load)) Div (Constant i2 None))))) nil (Name g_float Load) None) (FunctionDef &compute_max_tastiness:0 (arguments nil (list (arg &dishes:4 (Subscript (Name g_List Load) (_slice_content (Subscript (Name g_Union Load) (_slice_tuple (Tuple (list (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_str Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load)) (_slice_content (Subscript (Name g_Tuple Load) (_slice_tuple (Tuple (list (_slice_content (Name g_str Load)) (_slice_content (Name g_int Load)) (_slice_content (Name g_int Load))) Load)) Load))) Load)) Load)) Load) None) (arg &target_weight:4 (Name g_int Load) None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &target_weight:4 &dp:4)) (For (Name &dish:4 Store) (Name &dishes:4 Load) (/seq (If (fn_18 &dish:4) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &weight:4 Store)) (_starred_content (Name &tastiness:4 Store)) (_starred_content (Name &decay:4 Store))) Store)) (Name &dish:4 Load) None) (For (Name &current_weight:4 Store) (fn_29 &target_weight:4 &weight:4) (/seq (Assign (list (Name &amount:4 Store)) (BinOp (Name &current_weight:4 Load) FloorDiv (Name &weight:4 Load)) None) (fn_10 (BinOp (Subscript (Name &dp:4 Load) (_slice_content (BinOp (Name &current_weight:4 Load) Sub (BinOp (Name &weight:4 Load) Mult (Name &amount:4 Load)))) Load) Add (Call (Name &total_tastiness_discrete:0 Load) (list (_starred_content (Name &weight:4 Load)) (_starred_content (Name &tastiness:4 Load)) (_starred_content (Name &decay:4 Load)) (_starred_content (Name &amount:4 Load))) nil)) &current_weight:4 &dp:4)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &tastiness:4 Store)) (_starred_content (Name &decay:4 Store))) Store)) (Name &dish:4 Load) None) (For (Name &current_weight:4 Store) (fn_4 (Name &target_weight:4 Load)) (/seq (fn_10 (BinOp (Subscript (Name &dp:4 Load) (_slice_content (BinOp (Name &current_weight:4 Load) Sub (Constant i1 None))) Load) Add (Call (Name &total_tastiness_continuous:0 Load) (list (_starred_content (Name &tastiness:4 Load)) (_starred_content (Name &decay:4 Load)) (_starred_content (Constant i1 None))) nil)) &current_weight:4 &dp:4)) (/seq) None)))) (/seq) None) (fn_14 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &target_weight:4 &dp:4)) nil (Name g_float Load) None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &first_line:5 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &d:5 Store)) (_starred_content (Name &w:5 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &first_line:5 Load) s_split Load) nil nil))) nil) None) (Assign (list (Name &dishes:5 Store)) (List nil Load) None) (For (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:5 Load))) nil) (/seq (Assign (list (Name &line:5 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) None) (Expr (Call (Attribute (Name &dishes:5 Load) s_append Load) (list (_starred_content (Call (Name &parse_dish:0 Load) (list (_starred_content (Name &line:5 Load))) nil))) nil))) (/seq) None) (Assign (list (Name &result:5 Store)) (Call (Name &compute_max_tastiness:0 Load) (list (_starred_content (Name &dishes:5 Load)) (_starred_content (Name &w:5 Load))) nil) None) (fn_8 (Name &result:5 Load) &result:5)) nil (Constant None None) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &meal_max_tastiness:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (/splice (fn_23 (fn_20) &w:1 &_:2 &dp:1)) (For (Tuple (list (_starred_content (Name &kind:1 Store)) (_starred_starred (Starred (Name &info:1 Store) Store))) Store) (Name &dishes:1 Load) (/seq (If (Compare (Name &kind:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &dish_w:1 Store)) (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &info:1 Load) None) (For (Name &curr_w:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (BinOp (Name &dish_w:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Name &n:1 Store) (fn_4 (BinOp (Name &curr_w:1 Load) FloorDiv (Name &dish_w:1 Load))) (/seq (fn_10 (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &curr_w:1 Load) Sub (BinOp (Name &n:1 Load) Mult (Name &dish_w:1 Load)))) Load) Add (BinOp (Name &n:1 Load) Mult (Name &t_i:1 Load))) Sub (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (BinOp (Name &n:1 Load) Sub (Constant i1 None))) Mult (Name &delta_t_i:1 Load)) FloorDiv (Constant i2 None))) &curr_w:1 &dp:1)) (/seq) None)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &info:1 Load) None) (For (Name &curr_w:1 Store) (fn_4 (Name &w:1 Load)) (fn_22 &dp:1 &curr_w:1 &delta_t_i:1 &t_i:1) (/seq) None)))) (/seq) None) (fn_14 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &w:1 &dp:1)) nil None None) (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i15 None))) Load) None) (/splice (fn_24 &dishes:0 (/choiceseq (fn_16 (Call (Name &meal_max_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil)) (Assign (list (Tuple (list (_starred_content (Name &d:0 Store)) (_starred_content (Name &w:0 Store))) Store)) (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i15 None))) Load) None)))) (fn_16 (Call (Name &meal_max_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &continuous_tastiness:0 (arguments nil (list (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &X:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgOTcsIDMyLCA5OSwgMTExLCAxMTAsIDExNiwgMTA1LCAxMTAsIDExNywgMTExLCAxMTcsIDExNSwgMzIsIDEwMCwgMTA1LCAxMTUsIDEwNCwgMzIsIDExMSwgMTE4LCAxMDEsIDExNCwgMzIsIDg4LCAzMiwgMTAzLCAxMTQsIDk3LCAxMDksIDExNSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Return (fn_12 (Name &X:1 Load) &delta_t_i:1 &X:1 &t_i:1))) nil None None) (FunctionDef &discrete_tastiness:0 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &N:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMDIsIDExMSwgMTE0LCAzMiwgNzgsIDMyLCAxMDUsIDExNiwgMTAxLCAxMDksIDExNSwgMzIsIDExMSwgMTAyLCAzMiwgOTcsIDMyLCAxMDAsIDEwNSwgMTE1LCA5OSwgMTE0LCAxMDEsIDExNiwgMTAxLCAzMiwgMTAwLCAxMDUsIDExNSwgMTA0LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Return (BinOp (BinOp (Name &N:2 Load) Mult (Name &t_i:2 Load)) Sub (BinOp (Name &delta_t_i:2 Load) Mult (BinOp (BinOp (Name &N:2 Load) Mult (BinOp (Name &N:2 Load) Sub (Constant i1 None))) Div (Constant i2 None)))))) nil None None) (FunctionDef &knapsack_max_tastiness:0 (arguments nil (list (arg &dishes:3 None None) (arg &W:3 None None)) None nil nil None nil) (/seq (/splice (fn_23 (UnaryOp USub (Constant i1 None)) &W:3 &_:5 &dp:3)) (For (Name &dish:3 Store) (Name &dishes:3 Load) (/seq (For (Name &current_weight:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &W:3 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &dp:3 Load) (_slice_content (Name &current_weight:3 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (If (fn_18 &dish:3) (/seq (For (Name &k:3 Store) (fn_4 (BinOp (Name &W:3 Load) FloorDiv (Subscript (Name &dish:3 Load) (_slice_content (Constant i1 None)) Load))) (/seq (Assign (list (Name &next_weight:3 Store)) (BinOp (Name &current_weight:3 Load) Add (BinOp (Subscript (Name &dish:3 Load) (_slice_content (Constant i1 None)) Load) Mult (Name &k:3 Load))) None) (If (Compare (Name &next_weight:3 Load) (list LtE) (list (Name &W:3 Load))) (/seq (fn_10 (BinOp (Subscript (Name &dp:3 Load) (_slice_content (Name &current_weight:3 Load)) Load) Add (Call (Name &discrete_tastiness:0 Load) (list (_starred_content (Subscript (Name &dish:3 Load) (_slice_content (Constant i2 None)) Load)) (_starred_content (Subscript (Name &dish:3 Load) (_slice_content (Constant i3 None)) Load)) (_starred_content (Name &k:3 Load))) nil)) &next_weight:3 &dp:3)) (/seq))) (/seq) None)) (/seq (For (Name &next_weight:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &current_weight:3 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &W:3 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &X:3 Store)) (BinOp (Name &next_weight:3 Load) Sub (Name &current_weight:3 Load)) None) (fn_10 (BinOp (Subscript (Name &dp:3 Load) (_slice_content (Name &current_weight:3 Load)) Load) Add (Call (Name &continuous_tastiness:0 Load) (list (_starred_content (Subscript (Name &dish:3 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &dish:3 Load) (_slice_content (Constant i2 None)) Load)) (_starred_content (Name &X:3 Load))) nil)) &next_weight:3 &dp:3)) (/seq) None)))) (/seq))) (/seq) None)) (/seq) None) (fn_14 (Constant i1 None) &W:3 &dp:3)) nil None None) (FunctionDef &total_meal_tastiness:0 (arguments nil (list (arg &input_data:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &lines:4 Store)) (Call (Attribute (Name &input_data:4 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &d:4 Store)) (_starred_content (Name &W:4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Subscript (Name &lines:4 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil))) nil) None) (Assign (list (Name &dishes:4 Store)) (List nil Load) None) (For (Name &i:4 Store) (fn_4 (Name &d:4 Load)) (fn_7 (Subscript (Name &lines:4 Load) (_slice_content (Name &i:4 Load)) Load) &parts:4 &dishes:4) (/seq) None) (Assign (list (Name &max_tastiness:4 Store)) (Call (Name &knapsack_max_tastiness:0 Load) (list (_starred_content (Name &dishes:4 Load)) (_starred_content (Name &W:4 Load))) nil) None) (fn_25 (Name &max_tastiness:4 Load) &max_tastiness:4)) nil None None) (Assign (list (Name &sample_input_1:0 Store)) (Constant s-WzUwLCAzMiwgNDksIDUzLCAxMCwgNjgsIDMyLCA1MiwgMzIsIDQ5LCA0OCwgMzIsIDQ5LCAxMCwgNjcsIDMyLCA1NCwgMzIsIDQ5XQ== None) None) (Expr (Call (Name &total_meal_tastiness:0 Load) (list (_starred_content (Name &sample_input_1:0 Load))) nil)) (Assign (list (Name &sample_input_2:0 Store)) (Constant s-WzUxLCAzMiwgNDksIDUzLCAxMCwgNjgsIDMyLCA1MiwgMzIsIDQ5LCA0OCwgMzIsIDQ5LCAxMCwgNjcsIDMyLCA1NCwgMzIsIDQ5LCAxMCwgNjcsIDMyLCA1NywgMzIsIDUxXQ== None) None) (Expr (Call (Name &total_meal_tastiness:0 Load) (list (_starred_content (Name &sample_input_2:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_tastiness:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &w:1 &dp:1)) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (fn_18 &dish:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &weight:1 Store)) (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &decay:1 Store))) Store)) (Name &dish:1 Load) None) (For (Name &cur_weight:1 Store) (fn_29 &w:1 &weight:1) (/seq (For (Name &pieces:1 Store) (fn_4 (BinOp (Name &cur_weight:1 Load) FloorDiv (Name &weight:1 Load))) (/seq (Assign (list (Name &new_tastiness:1 Store)) (BinOp (BinOp (Name &tastiness:1 Load) Mult (Name &pieces:1 Load)) Sub (BinOp (BinOp (BinOp (Name &decay:1 Load) Mult (BinOp (Name &pieces:1 Load) Sub (Constant i1 None))) Mult (Name &pieces:1 Load)) FloorDiv (Constant i2 None))) None) (If (Compare (Name &cur_weight:1 Load) (list GtE) (list (BinOp (Name &pieces:1 Load) Mult (Name &weight:1 Load)))) (/seq (fn_2 (BinOp (Name &pieces:1 Load) Mult (Name &weight:1 Load)) &new_tastiness:1 &cur_weight:1 &dp:1)) (/seq))) (/seq) None)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &decay:1 Store))) Store)) (Name &dish:1 Load) None) (For (Name &cur_weight:1 Store) (fn_4 (Name &w:1 Load)) (/seq (Assign (list (Name &new_tastiness:1 Store)) (fn_12 (Name &cur_weight:1 Load) &decay:1 &cur_weight:1 &tastiness:1) None) (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Load) Add (Name &new_tastiness:1 Load)) &cur_weight:1 &dp:1)) (/seq) None)))) (/seq) None) (fn_14 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &w:1 &dp:1)) nil None None) (fn_3 &w:0 &d:0) (Assign (list (Name &dishes:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:0 Load))) nil) (fn_7 (Call (Name g_input Load) nil nil) &dish_input:0 &dishes:0) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (fn_8 (Name &result:0 Load) &result:0)) nil)",
            "(Module (/seq (FunctionDef &find_max_tastiness:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (FunctionDef &total_tastiness_continuous:1 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &t_i:2 Load) Mult (Name &x:2 Load)) Sub (BinOp (BinOp (BinOp (Name &delta_t_i:2 Load) Mult (Name &x:2 Load)) Mult (Name &x:2 Load)) Div (Constant i2 None))))) nil None None) (FunctionDef &max_tastiness_discrete:1 (arguments nil (list (arg &t_i:3 None None) (arg &delta_t_i:3 None None) (arg &pieces:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &pieces:3 Load) Mult (Name &t_i:3 Load)) Sub (BinOp (BinOp (BinOp (Name &delta_t_i:3 Load) Mult (Name &pieces:3 Load)) Mult (BinOp (Name &pieces:3 Load) Sub (Constant i1 None))) Div (Constant i2 None))))) nil None None) (/splice (fn_5 (Constant f1000000000.0 None) &w:1 &dp:1)) (For (Tuple (list (_starred_content (Name &dish_type:1 Store)) (_starred_starred (Starred (Name &params:1 Store) Store))) Store) (Name &dishes:1 Load) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &weight:1 Store)) (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &params:1 Load) None) (For (Name &cur_weight:1 Store) (fn_29 &w:1 &weight:1) (/seq (Assign (list (Name &pieces:1 Store)) (BinOp (BinOp (BinOp (Name &cur_weight:1 Load) Sub (Name &weight:1 Load)) Add (Constant i1 None)) FloorDiv (Name &weight:1 Load)) None) (Assign (list (Name &total_t:1 Store)) (Call (Name &max_tastiness_discrete:1 Load) (list (_starred_content (Name &t_i:1 Load)) (_starred_content (Name &delta_t_i:1 Load)) (_starred_content (Name &pieces:1 Load))) nil) None) (fn_2 (Name &weight:1 Load) &total_t:1 &cur_weight:1 &dp:1)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &params:1 Load) None) (For (Name &cur_weight:1 Store) (fn_4 (Name &w:1 Load)) (/seq (For (Name &x:1 Store) (fn_4 (Name &cur_weight:1 Load)) (/seq (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &cur_weight:1 Load) Sub (Name &x:1 Load))) Load) Add (Call (Name &total_tastiness_continuous:1 Load) (list (_starred_content (Name &t_i:1 Load)) (_starred_content (Name &delta_t_i:1 Load)) (_starred_content (Name &x:1 Load))) nil)) &cur_weight:1 &dp:1)) (/seq) None)) (/seq) None)))) (/seq) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) (list GtE) (list (Constant i0 None))) (/seq (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load))) (/seq (Return (Constant s_impossible None))))) nil None None) (/splice (fn_11 &d:0 &w:0 &_:4 &dishes:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:0 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_slice (Slice None (Constant i2 None) None)) Store)) (fn_21 (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load)) None)) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &find_max_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (If (Compare (Name &result:0 Load) (list NotEq) (list (Constant s_impossible None))) (/seq (fn_16 (Name &result:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))))) nil)",
            "(Module (/seq (FunctionDef &parse_input:0 (arguments nil (list (arg &input_data:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &lines:1 Store)) (Call (Attribute (Call (Attribute (Name &input_data:1 Load) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (/splice (fn_30 &lines:1 &w:1 &d:1 &line:6 &dishes:1))) nil None None) (FunctionDef &tastiness_discrete:0 (arguments nil (list (arg &w:2 None None) (arg &t:2 None None) (arg &dt:2 None None) (arg &n:2 None None)) None nil nil None nil) (/seq (Return (Call (Name g_sum Load) (list (_starred_content (ListComp (BinOp (Name &t:2 Load) Sub (BinOp (BinOp (Name &i:7 Load) Sub (Constant i1 None)) Mult (Name &dt:2 Load))) (list (comprehension (Name &i:7 Store) (fn_4 (Name &n:2 Load)) nil i0))))) nil))) nil None None) (FunctionDef &tastiness_continuous:0 (arguments nil (list (arg &t:3 None None) (arg &dt:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (Return (fn_12 (Name &x:3 Load) &dt:3 &t:3 &x:3))) nil None None) (FunctionDef &max_tastiness:0 (arguments nil (list (arg &d:4 None None) (arg &w:4 None None) (arg &dishes:4 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &w:4 &dp:4)) (For (Name &dish:4 Store) (Name &dishes:4 Load) (/seq (If (fn_18 &dish:4) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &dish_w:4 Store)) (_starred_content (Name &t:4 Store)) (_starred_content (Name &dt:4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &dish:4 Load))) nil) None) (For (Name &i:4 Store) (fn_29 &w:4 &dish_w:4) (/seq (For (Name &n:4 Store) (fn_4 (BinOp (Name &i:4 Load) FloorDiv (Name &dish_w:4 Load))) (/seq (If (Compare (Name &i:4 Load) (list GtE) (list (BinOp (Name &n:4 Load) Mult (Name &dish_w:4 Load)))) (/seq (fn_10 (BinOp (Subscript (Name &dp:4 Load) (_slice_content (BinOp (Name &i:4 Load) Sub (BinOp (Name &n:4 Load) Mult (Name &dish_w:4 Load)))) Load) Add (Call (Name &tastiness_discrete:0 Load) (list (_starred_content (Name &dish_w:4 Load)) (_starred_content (Name &t:4 Load)) (_starred_content (Name &dt:4 Load)) (_starred_content (Name &n:4 Load))) nil)) &i:4 &dp:4)) (/seq))) (/seq) None)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &t:4 Store)) (_starred_content (Name &dt:4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &dish:4 Load))) nil) None) (For (Name &i:4 Store) (fn_4 (Name &w:4 Load)) (/seq (fn_10 (BinOp (Subscript (Name &dp:4 Load) (_slice_content (BinOp (Name &i:4 Load) Sub (Constant i1 None))) Load) Add (Call (Name &tastiness_continuous:0 Load) (list (_starred_content (Name &t:4 Load)) (_starred_content (Name &dt:4 Load)) (_starred_content (Constant i1 None))) nil)) &i:4 &dp:4)) (/seq) None)))) (/seq) None) (If (Compare (Subscript (Name &dp:4 Load) (_slice_content (Name &w:4 Load)) Load) (list Lt) (list (Constant i0 None))) (/seq (Return (Constant s_impossible None))) (/seq (Return (Subscript (Name &dp:4 Load) (_slice_content (Name &w:4 Load)) Load))))) nil None None) (FunctionDef &main:0 (arguments nil (list (arg &input_data:5 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:5 Store)) (_starred_content (Name &w:5 Store)) (_starred_content (Name &dishes:5 Store))) Store)) (Call (Name &parse_input:0 Load) (list (_starred_content (Name &input_data:5 Load))) nil) None) (Assign (list (Name &result:5 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &d:5 Load)) (_starred_content (Name &w:5 Load)) (_starred_content (Name &dishes:5 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NywgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Name &result:5 Load))) nil))) nil))) nil None None) (Assign (list (Name &input_data:0 Store)) (Constant s-WzUxLCAzMiwgNDksIDUzLCAxMCwgNjgsIDMyLCA1MiwgMzIsIDQ5LCA0OCwgMzIsIDQ5LCAxMCwgNjcsIDMyLCA1NCwgMzIsIDQ5LCAxMCwgNjcsIDMyLCA1NywgMzIsIDUxXQ== None) None) (Expr (Call (Name &main:0 Load) (list (_starred_content (Name &input_data:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &max_tastiness:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &discrete_dishes:1 Store)) (ListComp (Tuple (list (_starred_content (Name &wi:3 Load)) (_starred_content (Name &ti:3 Load)) (_starred_content (Name &dti:3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &d:3 Store)) (_starred_content (Name &wi:3 Store)) (_starred_content (Name &ti:3 Store)) (_starred_content (Name &dti:3 Store))) Store) (Name &dishes:1 Load) (list (Compare (Name &d:3 Load) (list Eq) (list (Constant s_D None)))) i0))) None) (Assign (list (Name &continuous_dishes:1 Store)) (ListComp (Tuple (list (_starred_content (Name &ti:4 Load)) (_starred_content (Name &dti:4 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &d:4 Store)) (_starred_content (Name &ti:4 Store)) (_starred_content (Name &dti:4 Store))) Store) (Name &dishes:1 Load) (list (Compare (Name &d:4 Load) (list Eq) (list (Constant s_C None)))) i0))) None) (Assign (list (Name &max_discrete_tastiness:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &w:1 Load) Add (Constant i1 None))) None) (For (Tuple (list (_starred_content (Name &wi:1 Store)) (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store) (Name &discrete_dishes:1 Load) (/seq (For (Name &weight:1 Store) (fn_29 &w:1 &wi:1) (/seq (Assign (list (Name &n_items:1 Store)) (BinOp (Name &weight:1 Load) FloorDiv (Name &wi:1 Load)) None) (Assign (list (Name &tastiness:1 Store)) (fn_1 &n_items:1 &n:6 &dti:1 &ti:1) None) (fn_10 (Name &tastiness:1 Load) &weight:1 &max_discrete_tastiness:1)) (/seq) None)) (/seq) None) (Assign (list (Name &max_continuous_tastiness:1 Store)) (BinOp (List (list (_starred_content (Constant f0.0 None))) Load) Mult (BinOp (Name &w:1 Load) Add (Constant i1 None))) None) (For (Tuple (list (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store) (Name &continuous_dishes:1 Load) (/seq (For (Name &weight:1 Store) (fn_4 (Name &w:1 Load)) (/seq (Assign (list (Name &tastiness:1 Store)) (BinOp (BinOp (Name &ti:1 Load) Mult (Name &weight:1 Load)) Sub (BinOp (BinOp (Name &dti:1 Load) Mult (BinOp (Name &weight:1 Load) Pow (Constant i2 None))) Div (Constant f2.0 None))) None) (fn_10 (Name &tastiness:1 Load) &weight:1 &max_continuous_tastiness:1)) (/seq) None)) (/seq) None) (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (Constant f0.0 None))) Load) Mult (BinOp (Name &w:1 Load) Add (Constant i1 None))) None) (For (Name &weight:1 Store) (fn_4 (Name &w:1 Load)) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &weight:1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &max_discrete_tastiness:1 Load) (_slice_content (Name &weight:1 Load)) Load)) (_starred_content (Subscript (Name &max_continuous_tastiness:1 Load) (_slice_content (Name &weight:1 Load)) Load))) nil) None) (For (Name &split:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &weight:1 Load))) nil) (/seq (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Name &split:1 Load)) Load) Add (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &weight:1 Load) Sub (Name &split:1 Load))) Load)) &weight:1 &dp:1)) (/seq) None)) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load))) nil None None) (FunctionDef &parse_input_and_solve:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_11 &d:2 &w:2 &_:5 &dishes:2)) (Assign (list (Name &parsed_dishes:2 Store)) (List nil Load) None) (For (Name &dish:2 Store) (Name &dishes:2 Load) (/seq (fn_6 &dish:2 &parsed_dishes:2)) (/seq) None) (Assign (list (Name &result:2 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &d:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &parsed_dishes:2 Load))) nil) None) (If (Compare (Name &result:2 Load) (list Gt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEyMywgNTgsIDQ2LCA1NywgMTAyLCAxMjVd None) s_format Load) (list (_starred_content (Name &result:2 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))))) nil None None) (Expr (Call (Name &parse_input_and_solve:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &calc_discrete_tastiness:0 (arguments nil (list (arg &N:1 None None) (arg &t:1 None None) (arg &delta_t:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &N:1 Load) Mult (Name &t:1 Load)) Sub (BinOp (BinOp (BinOp (Name &N:1 Load) Mult (BinOp (Name &N:1 Load) Sub (Constant i1 None))) Div (Constant i2 None)) Mult (Name &delta_t:1 Load))))) nil None None) (FunctionDef &calc_continuous_tastiness:0 (arguments nil (list (arg &X:2 None None) (arg &t:2 None None) (arg &delta_t:2 None None)) None nil nil None nil) (/seq (Return (fn_15 (BinOp (Name &delta_t:2 Load) Div (Constant i2 None)) &X:2 &t:2))) nil None None) (FunctionDef &knapsack_with_fractions:0 (arguments nil (list (arg &items:3 None None) (arg &weight_limit:3 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &items:3 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (BinOp (Subscript (Name &x:5 Load) (_slice_content (Constant i0 None)) Load) Div (Subscript (Name &x:5 Load) (_slice_content (Constant i1 None)) Load)))) (keyword s_reverse (Constant True None))))) (Assign (list (Name &total_value:3 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &value:3 Store)) (_starred_content (Name &weight:3 Store))) Store) (Name &items:3 Load) (/seq (If (Compare (Name &weight_limit:3 Load) (list Gt) (list (Name &weight:3 Load))) (/seq (AugAssign (Name &total_value:3 Store) Add (Name &value:3 Load)) (AugAssign (Name &weight_limit:3 Store) Sub (Name &weight:3 Load))) (/seq (AugAssign (Name &total_value:3 Store) Add (BinOp (BinOp (Name &value:3 Load) Div (Name &weight:3 Load)) Mult (Name &weight_limit:3 Load))) Break))) (/seq) None) (Return (Name &total_value:3 Load))) nil None None) (/splice (fn_17 (/seq (fn_3 &w:4 &d:4) (Assign (list (Name &items:4 Store)) (List nil Load) None) (Assign (list (Name &impossible:4 Store)) (Constant True None) None) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:4 Load))) nil) (/seq (Assign (list (Name &dish:4 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (If (fn_18 &dish:4) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &wi:4 Store)) (_starred_content (Name &ti:4 Store)) (_starred_content (Name &delta_ti:4 Store))) Store)) (fn_13 (Name &dish:4 Load)) None) (For (Name &n:4 Store) (fn_4 (BinOp (Name &w:4 Load) FloorDiv (Name &wi:4 Load))) (/seq (Assign (list (Name &value:4 Store)) (Call (Name &calc_discrete_tastiness:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &ti:4 Load)) (_starred_content (Name &delta_ti:4 Load))) nil) None) (Assign (list (Name &weight:4 Store)) (BinOp (Name &n:4 Load) Mult (Name &wi:4 Load)) None) (Expr (Call (Attribute (Name &items:4 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &value:4 Load)) (_starred_content (Name &weight:4 Load))) Load))) nil)) (If (Compare (Name &weight:4 Load) (list Eq) (list (Name &w:4 Load))) (/seq (Assign (list (Name &impossible:4 Store)) (Constant False None) None)) (/seq))) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:4 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &ti:4 Store)) (_starred_content (Name &delta_ti:4 Store))) Store)) (fn_13 (Name &dish:4 Load)) None) (For (Name &fraction:4 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i101 None))) nil) (/seq (Assign (list (Name &weight:4 Store)) (BinOp (BinOp (Name &w:4 Load) Mult (Name &fraction:4 Load)) Div (Constant i100 None)) None) (Assign (list (Name &value:4 Store)) (Call (Name &calc_continuous_tastiness:0 Load) (list (_starred_content (Name &weight:4 Load)) (_starred_content (Name &ti:4 Load)) (_starred_content (Name &delta_ti:4 Load))) nil) None) (Expr (Call (Attribute (Name &items:4 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &value:4 Load)) (_starred_content (Name &weight:4 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &impossible:4 Store)) (Constant False None) None)) (/seq))))) (/seq) None) (If (Name &impossible:4 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (Assign (list (Name &max_tastiness:4 Store)) (Call (Name &knapsack_with_fractions:0 Load) (list (_starred_content (Name &items:4 Load)) (_starred_content (Name &w:4 Load))) nil) None) (fn_16 (Name &max_tastiness:4 Load))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (Call (Name g_zeros Load) (list (_starred_content (BinOp (Name &w:1 Load) Add (Constant i1 None)))) (list (keyword s_dtype (Name g_float64 Load)))) None) (For (Tuple (list (_starred_content (Name &type:1 Store)) (_starred_starred (Starred (Name &args:1 Store) Store))) Store) (Name &dishes:1 Load) (/seq (If (Compare (Name &type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &wi:1 Store)) (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store)) (Name &args:1 Load) None) (For (Name &rem_w:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (BinOp (Name &wi:1 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (For (Tuple (list (_starred_content (Name &count:1 Store)) (_starred_content (Name &total_w:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &wi:1 Load)) (_starred_content (BinOp (Name &rem_w:1 Load) Add (Constant i1 None))) (_starred_content (Name &wi:1 Load))) nil))) (list (keyword s_start (Constant i1 None)))) (/seq (fn_10 (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &rem_w:1 Load) Sub (Name &total_w:1 Load))) Load) Add (BinOp (Name &ti:1 Load) Mult (Name &count:1 Load))) Sub (BinOp (BinOp (BinOp (Name &dti:1 Load) Mult (Name &count:1 Load)) Mult (BinOp (Name &count:1 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None))) &rem_w:1 &dp:1)) (/seq) None)) (/seq) None)) (/seq (If (Compare (Name &type:1 Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store)) (Name &args:1 Load) None) (For (Name &rem_w:1 Store) (fn_4 (Name &w:1 Load)) (/seq (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &rem_w:1 Load) Sub (Constant i1 None))) Load) Add (BinOp (Name &ti:1 Load) Sub (BinOp (BinOp (Name &rem_w:1 Load) Sub (Constant i1 None)) Mult (Name &dti:1 Load)))) &rem_w:1 &dp:1)) (/seq) None)) (/seq))))) (/seq) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Constant s_impossible None))) (/seq (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_11 &d:0 &w:0 &_:2 &dishes:0)) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &dish:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dishes:0 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Constant i0 None)) Store)) (Subscript (Name &dish:0 Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Subscript (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_slice (Slice (Constant i1 None) None None)) Store)) (Call (Name g_list Load) (list (_starred_content (fn_13 (Name &dish:0 Load)))) nil) None)) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (fn_8 (Name &result:0 Load) &result:0)) (/seq))) nil)",
            "(Module (/seq (FunctionDef &max_tastiness:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &w:1 &dp:1)) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (fn_18 &dish:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &weight:1 Store)) (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &decay:1 Store))) Store)) (Name &dish:1 Load) None) (For (Name &j:1 Store) (fn_29 &w:1 &weight:1) (/seq (For (Name &k:1 Store) (fn_4 (BinOp (Name &w:1 Load) FloorDiv (Name &weight:1 Load))) (/seq (If (Compare (BinOp (Name &j:1 Load) Sub (BinOp (Name &k:1 Load) Mult (Name &weight:1 Load))) (list GtE) (list (Constant i0 None))) (/seq (fn_10 (BinOp (BinOp (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (BinOp (Name &k:1 Load) Mult (Name &weight:1 Load)))) Load) Add (BinOp (Name &k:1 Load) Mult (Name &tastiness:1 Load))) Sub (BinOp (BinOp (BinOp (Name &decay:1 Load) Mult (Name &k:1 Load)) Mult (BinOp (Name &k:1 Load) Sub (Constant i1 None))) Div (Constant i2 None))) &j:1 &dp:1)) (/seq))) (/seq) None)) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &decay:1 Store))) Store)) (Name &dish:1 Load) None) (For (Name &j:1 Store) (fn_4 (Name &w:1 Load)) (fn_22 &dp:1 &j:1 &decay:1 &tastiness:1) (/seq) None)) (/seq))))) (/seq) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) (list Eq) (list (fn_20))) (/seq (Return (Constant s_impossible None))) (/seq)) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (fn_3 &w:0 &d:0) (Assign (list (Name &dishes:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:0 Load))) nil) (fn_7 (Call (Name g_input Load) nil nil) &dish_info:0 &dishes:0) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) i-1 (JoinedStr (list (Constant s_.6f None)))))))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &knapsack:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &items:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1 None) &w:1 &dp:1)) (For (Name &item:1 Store) (Name &items:1 Load) (/seq (If (Compare (Subscript (Name &item:1 Load) (_slice_content (Constant s_type None)) Load) (list Eq) (list (Constant s_D None))) (/seq (For (Name &curr_weight:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &w:1 Load)) (_starred_content (Constant i0 None)) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Name &item_weight:1 Store)) (Subscript (Name &item:1 Load) (_slice_content (Constant s_weight None)) Load) None) (For (Name &count:1 Store) (fn_4 (BinOp (Name &curr_weight:1 Load) FloorDiv (Name &item_weight:1 Load))) (/seq (Assign (list (Name &prev_weight:1 Store)) (BinOp (Name &curr_weight:1 Load) Sub (BinOp (Name &item_weight:1 Load) Mult (Name &count:1 Load))) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &prev_weight:1 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &tastiness:1 Store)) (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Name &prev_weight:1 Load)) Load) Add (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Subscript (Name &item:1 Load) (_slice_content (Constant s_tastiness None)) Load) Sub (BinOp (Subscript (Name &item:1 Load) (_slice_content (Constant s_decay None)) Load) Mult (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) (list (comprehension (Name &n:3 Store) (fn_4 (Name &count:1 Load)) nil i0))))) nil)) None) (fn_10 (Name &tastiness:1 Load) &curr_weight:1 &dp:1)) (/seq))) (/seq) None)) (/seq) None)) (/seq (For (Name &curr_weight:1 Store) (fn_4 (Name &w:1 Load)) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &curr_weight:1 Load) Sub (Constant i1 None))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &x:1 Store)) (Name &curr_weight:1 Load) None) (Assign (list (Name &tastiness:1 Store)) (BinOp (BinOp (Subscript (Name &item:1 Load) (_slice_content (Constant s_tastiness None)) Load) Mult (Name &x:1 Load)) Sub (BinOp (BinOp (Subscript (Name &item:1 Load) (_slice_content (Constant s_decay None)) Load) Mult (BinOp (Name &x:1 Load) Pow (Constant i2 None))) Div (Constant i2 None))) None) (fn_2 (Constant i1 None) &tastiness:1 &curr_weight:1 &dp:1)) (/seq))) (/seq) None)))) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load))) nil None None) (/splice (fn_17 (/seq (/splice (fn_19 &d:2 &w:2 &items:2 &parts:2 &_:2 (/choiceseq (If (fn_18 &parts:2) (/seq (Expr (Call (Attribute (Name &items:2 Load) s_append Load) (list (_starred_content (Dict (list (Constant s_type None) (Constant s_weight None) (Constant s_tastiness None) (Constant s_decay None)) (list (Constant s_D None) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:2 Load) (_slice_content (Constant i1 None)) Load))) nil) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:2 Load) (_slice_content (Constant i2 None)) Load))) nil) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:2 Load) (_slice_content (Constant i3 None)) Load))) nil))))) nil))) (/seq (Expr (Call (Attribute (Name &items:2 Load) s_append Load) (list (_starred_content (Dict (list (Constant s_type None) (Constant s_tastiness None) (Constant s_decay None)) (list (Constant s_C None) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:2 Load) (_slice_content (Constant i1 None)) Load))) nil) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &parts:2 Load) (_slice_content (Constant i2 None)) Load))) nil))))) nil))))))) (Assign (list (Name &result:2 Store)) (Call (Name &knapsack:0 Load) (list (_starred_content (Name &d:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &items:2 Load))) nil) None) (If (Compare (Name &result:2 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (fn_16 (Name &result:2 Load))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_tastiness_for_discrete:0 (arguments nil (list (arg &wi:1 None None) (arg &ti:1 None None) (arg &delta_ti:1 None None) (arg &gi:1 None None)) None nil nil None nil) (/seq (Return (fn_1 &gi:1 &n:7 &delta_ti:1 &ti:1))) nil None None) (FunctionDef &calculate_tastiness_for_continuous:0 (arguments nil (list (arg &ti:2 None None) (arg &delta_ti:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (Return (fn_15 (BinOp (Name &delta_ti:2 Load) Div (Constant i2 None)) &x:2 &ti:2))) nil None None) (FunctionDef &knapsack_with_fractional:0 (arguments nil (list (arg &weights:3 None None) (arg &values:3 None None) (arg &W:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &items:3 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_zip Load) (list (_starred_content (Name &weights:3 Load)) (_starred_content (Name &values:3 Load))) nil))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:8 None None)) None nil nil None nil) (BinOp (UnaryOp USub (Subscript (Name &x:8 Load) (_slice_content (Constant i1 None)) Load)) Div (Subscript (Name &x:8 Load) (_slice_content (Constant i0 None)) Load)))))) None) (Assign (list (Name &total_value:3 Store)) (Constant i0 None) None) (For (Tuple (list (_starred_content (Name &weight:3 Store)) (_starred_content (Name &value:3 Store))) Store) (Name &items:3 Load) (/seq (If (Compare (Name &W:3 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Name &can_take:3 Store)) (Call (Name g_min Load) (list (_starred_content (Name &weight:3 Load)) (_starred_content (Name &W:3 Load))) nil) None) (AugAssign (Name &total_value:3 Store) Add (BinOp (Name &can_take:3 Load) Mult (BinOp (Name &value:3 Load) Div (Name &weight:3 Load)))) (AugAssign (Name &W:3 Store) Sub (Name &can_take:3 Load))) (/seq) None) (Return (Name &total_value:3 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &d:4 None None) (arg &w:4 None None) (arg &dishes:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &discrete_items:4 Store)) (List nil Load) None) (Assign (list (Name &continuous_value:4 Store)) (Constant i0 None) None) (For (Name &dish:4 Store) (Name &dishes:4 Load) (/seq (If (fn_18 &dish:4) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &wi:4 Store)) (_starred_content (Name &ti:4 Store)) (_starred_content (Name &delta_ti:4 Store))) Store)) (Name &dish:4 Load) None) (Assign (list (Name &gi_max:4 Store)) (BinOp (Name &w:4 Load) FloorDiv (Name &wi:4 Load)) None) (Expr (Call (Attribute (Name &discrete_items:4 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &wi:4 Load)) (_starred_content (Call (Name &calculate_tastiness_for_discrete:0 Load) (list (_starred_content (Name &wi:4 Load)) (_starred_content (Name &ti:4 Load)) (_starred_content (Name &delta_ti:4 Load)) (_starred_content (Name &gi_max:4 Load))) nil))) Load))) nil))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &ti:4 Store)) (_starred_content (Name &delta_ti:4 Store))) Store)) (Name &dish:4 Load) None) (AugAssign (Name &continuous_value:4 Store) Add (Call (Name &calculate_tastiness_for_continuous:0 Load) (list (_starred_content (Name &ti:4 Load)) (_starred_content (Name &delta_ti:4 Load)) (_starred_content (Name &w:4 Load))) nil))))) (/seq) None) (Assign (list (Name &weights:4 Store)) (ListComp (Subscript (Name &item:5 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &item:5 Store) (Name &discrete_items:4 Load) nil i0))) None) (Assign (list (Name &values:4 Store)) (ListComp (Subscript (Name &item:6 Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &item:6 Store) (Name &discrete_items:4 Load) nil i0))) None) (Assign (list (Name &max_tastiness_without_continuous:4 Store)) (Call (Name &knapsack_with_fractional:0 Load) (list (_starred_content (Name &weights:4 Load)) (_starred_content (Name &values:4 Load)) (_starred_content (Name &w:4 Load))) nil) None) (Return (BinOp (Name &max_tastiness_without_continuous:4 Load) Add (Name &continuous_value:4 Load)))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_19 &d:0 &w:0 &dishes:0 &dish:0 &_:0 (/choiceseq (fn_6 &dish:0 &dishes:0)))) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Call (Name &solve:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) i-1 (JoinedStr (list (Constant s_.6f None)))))))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &knapsack_with_fraction:0 (arguments nil (list (arg &items:1 None None) (arg &max_weight:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &items:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &items:1 Load))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:4 None None)) None nil nil None nil) (BinOp (Subscript (Name &x:4 Load) (_slice_content (Constant i2 None)) Load) Div (Subscript (Name &x:4 Load) (_slice_content (Constant i1 None)) Load)))) (keyword s_reverse (Constant True None)))) None) (Assign (list (Name &total_value:1 Store)) (Constant f0.0 None) None) (Assign (list (Name &total_weight:1 Store)) (Constant f0.0 None) None) (For (Tuple (list (_starred_content (Name &weight:1 Store)) (_starred_content (Name &value:1 Store)) (_starred_content (Name &decay:1 Store))) Store) (Name &items:1 Load) (/seq (If (Compare (BinOp (Name &total_weight:1 Load) Add (Name &weight:1 Load)) (list LtE) (list (Name &max_weight:1 Load))) (/seq (AugAssign (Name &total_value:1 Store) Add (Name &value:1 Load)) (AugAssign (Name &total_weight:1 Store) Add (Name &weight:1 Load))) (/seq (Assign (list (Name &fraction:1 Store)) (BinOp (BinOp (Name &max_weight:1 Load) Sub (Name &total_weight:1 Load)) Div (Name &weight:1 Load)) None) (AugAssign (Name &total_value:1 Store) Add (BinOp (Name &value:1 Load) Mult (Name &fraction:1 Load))) Break))) (/seq) None) (Return (Name &total_value:1 Load))) nil None None) (FunctionDef &calculate_continuous_dish_tastiness:0 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &weight:2 None None)) None nil nil None nil) (/seq (Return (fn_15 (BinOp (Constant f0.5 None) Mult (Name &delta_t_i:2 Load)) &weight:2 &t_i:2))) nil None None) (/splice (fn_17 (/seq (fn_3 &w:3 &d:3) (Assign (list (Name &discrete_dishes:3 Store)) (List nil Load) None) (Assign (list (Name &continuous_total_tastiness:3 Store)) (Constant i0 None) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:3 Load))) nil) (/seq (Assign (list (Name &dish_data:3 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (If (fn_18 &dish_data:3) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &weight:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (fn_13 (Name &dish_data:3 Load)) None) (For (Name &n_items:3 Store) (fn_4 (BinOp (Name &w:3 Load) FloorDiv (Name &weight:3 Load))) (/seq (Assign (list (Name &total_tastiness:3 Store)) (fn_1 &n_items:3 &n:5 &delta_t_i:3 &t_i:3) None) (Expr (Call (Attribute (Name &discrete_dishes:3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &n_items:3 Load) Mult (Name &weight:3 Load))) (_starred_content (Name &total_tastiness:3 Load)) (_starred_content (Name &delta_t_i:3 Load))) Load))) nil))) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (fn_13 (Name &dish_data:3 Load)) None) (AugAssign (Name &continuous_total_tastiness:3 Store) Add (Call (Name &calculate_continuous_dish_tastiness:0 Load) (list (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Name &w:3 Load))) nil))))) (/seq) None) (Assign (list (Name &max_tastiness_from_discrete:3 Store)) (Call (Name &knapsack_with_fraction:0 Load) (list (_starred_content (Name &discrete_dishes:3 Load)) (_starred_content (Name &w:3 Load))) nil) None) (Assign (list (Name &total_tastiness:3 Store)) (BinOp (Name &max_tastiness_from_discrete:3 Load) Add (Name &continuous_total_tastiness:3 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &total_tastiness:3 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &solve_buffet:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:1 Store)) (List nil Load) None) (Assign (list (Name &A_ub:1 Store)) (List nil Load) None) (Assign (list (Name &b_ub:1 Store)) (List nil Load) None) (Assign (list (Name &bounds:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &dish_type:1 Store)) (_starred_starred (Starred (Name &params:1 Store) Store))) Store) (Name &dishes:1 Load) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &wi:1 Store)) (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store)) (Name &params:1 Load) None) (Assign (list (Name &max_pieces:1 Store)) (BinOp (Name &w:1 Load) FloorDiv (Name &wi:1 Load)) None) (For (Name &n:1 Store) (fn_4 (Name &max_pieces:1 Load)) (/seq (Assign (list (Name &tastiness:1 Store)) (BinOp (Name &ti:1 Load) Sub (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Mult (Name &dti:1 Load))) None) (If (Compare (Name &tastiness:1 Load) (list LtE) (list (Constant i0 None))) (/seq Break) (/seq)) (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &tastiness:1 Load)))) nil)) (Assign (list (Name &constraint:1 Store)) (Call (Attribute (Name g_np Load) s_zeros Load) (list (_starred_content (Name &d:1 Load))) nil) None) (Assign (list (Subscript (Name &constraint:1 Load) (_slice_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &c:1 Load))) nil) Sub (Constant i1 None))) Store)) (Name &wi:1 Load) None) (Expr (Call (Attribute (Name &A_ub:1 Load) s_append Load) (list (_starred_content (Name &constraint:1 Load))) nil)) (Expr (Call (Attribute (Name &b_ub:1 Load) s_append Load) (list (_starred_content (Name &w:1 Load))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) nil))) (/seq) None)) (/seq))) (/seq) None) (For (Tuple (list (_starred_content (Name &dish_type:1 Store)) (_starred_starred (Starred (Name &params:1 Store) Store))) Store) (Name &dishes:1 Load) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &ti:1 Store)) (_starred_content (Name &dti:1 Store))) Store)) (Name &params:1 Load) None) (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (BinOp (BinOp (Name &ti:1 Load) Pow (Constant i2 None)) Div (BinOp (Constant i2 None) Mult (Name &dti:1 Load)))))) nil)) (Assign (list (Name &constraint:1 Store)) (Call (Attribute (Name g_np Load) s_zeros Load) (list (_starred_content (Name &d:1 Load))) nil) None) (Assign (list (Subscript (Name &constraint:1 Load) (_slice_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &c:1 Load))) nil) Sub (Constant i1 None))) Store)) (Constant i1 None) None) (Expr (Call (Attribute (Name &A_ub:1 Load) s_append Load) (list (_starred_content (Name &constraint:1 Load))) nil)) (Expr (Call (Attribute (Name &b_ub:1 Load) s_append Load) (list (_starred_content (Name &w:1 Load))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &ti:1 Load) Div (Name &dti:1 Load)))) Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &A_ub:1 Store)) (Call (Attribute (Attribute (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (Name &A_ub:1 Load))) nil) s_T Load) s_tolist Load) nil nil) None) (/splice (fn_26 (Call (Name g_linprog Load) (list (_starred_content (Name &c:1 Load))) (list (keyword s_A_ub (Name &A_ub:1 Load)) (keyword s_b_ub (Name &b_ub:1 Load)) (keyword s_bounds (Name &bounds:1 Load)) (keyword s_method (Constant s_highs None)))) &res:1))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &d1:0 Store)) (_starred_content (Name &w1:0 Store))) Store)) (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i15 None))) Load) None) (Assign (list (Name &dishes_1:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant s_D None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (List (list (_starred_content (Constant s_C None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (Assign (list (Tuple (list (_starred_content (Name &d2:0 Store)) (_starred_content (Name &w2:0 Store))) Store)) (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i15 None))) Load) None) (Assign (list (Name &dishes_2:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant s_D None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i10 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (List (list (_starred_content (Constant s_C None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load)) (_starred_content (List (list (_starred_content (Constant s_C None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i3 None))) Load))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzgzLCA5NywgMTA5LCAxMTIsIDEwOCwgMTAxLCAzMiwgNzksIDExNywgMTE2LCAxMTIsIDExNywgMTE2LCAzMiwgNDksIDU4LCAzMl0= None) (FormattedValue (Call (Name &solve_buffet:0 Load) (list (_starred_content (Name &d1:0 Load)) (_starred_content (Name &w1:0 Load)) (_starred_content (Name &dishes_1:0 Load))) nil) i-1 None))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzgzLCA5NywgMTA5LCAxMTIsIDEwOCwgMTAxLCAzMiwgNzksIDExNywgMTE2LCAxMTIsIDExNywgMTE2LCAzMiwgNTAsIDU4LCAzMl0= None) (FormattedValue (Call (Name &solve_buffet:0 Load) (list (_starred_content (Name &d2:0 Load)) (_starred_content (Name &w2:0 Load)) (_starred_content (Name &dishes_2:0 Load))) nil) i-1 None))))) nil))) nil)",
            "(Module (/seq (FunctionDef &calculate_tastiness:0 (arguments nil (list (arg &dish_type:1 None None) (arg &weight:1 None None) (arg &t_initial:1 None None) (arg &delta_t:1 None None) (arg &total_weight:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Name &n:1 Store)) (BinOp (Name &total_weight:1 Load) Div (Name &weight:1 Load)) None) (If (Compare (BinOp (Name &n:1 Load) Mod (Constant i1 None)) (list NotEq) (list (Constant i0 None))) (/seq (Return (Constant s_impossible None))) (/seq)) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Name &n:1 Load))) nil) None) (Assign (list (Name &tastiness:1 Store)) (fn_1 &n:1 &i:3 &delta_t:1 &t_initial:1) None) (Return (Name &tastiness:1 Load))) (/seq (Assign (list (Name &tastiness:1 Store)) (fn_12 (Name &total_weight:1 Load) &delta_t:1 &total_weight:1 &t_initial:1) None) (Return (Name &tastiness:1 Load))))) nil None None) (FunctionDef &maximize_tastiness:0 (arguments nil (list (arg &d:2 None None) (arg &w:2 None None) (arg &dishes:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:2 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil))) Load) Mult (BinOp (Name &w:2 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:2 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &dish_type:2 Store)) (_starred_starred (Starred (Name &params:2 Store) Store))) Store)) (Subscript (Name &dishes:2 Load) (_slice_content (Name &i:2 Load)) Load) None) (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &weight:2 Store)) (_starred_content (Name &t_initial:2 Store)) (_starred_content (Name &delta_t:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &params:2 Load))) nil) None) (For (Name &j:2 Store) (fn_29 &w:2 &weight:2) (/seq (fn_10 (BinOp (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &j:2 Load) Sub (Name &weight:2 Load))) Load) Add (Call (Name &calculate_tastiness:0 Load) (list (_starred_content (Name &dish_type:2 Load)) (_starred_content (Name &weight:2 Load)) (_starred_content (Name &t_initial:2 Load)) (_starred_content (Name &delta_t:2 Load)) (_starred_content (Name &weight:2 Load))) nil)) &j:2 &dp:2)) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &t_initial:2 Store)) (_starred_content (Name &delta_t:2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &params:2 Load))) nil) None) (For (Name &j:2 Store) (fn_4 (Name &w:2 Load)) (/seq (Assign (list (Name &additional_tastiness:2 Store)) (Call (Name &calculate_tastiness:0 Load) (list (_starred_content (Name &dish_type:2 Load)) (_starred_content (Constant None None)) (_starred_content (Name &t_initial:2 Load)) (_starred_content (Name &delta_t:2 Load)) (_starred_content (Name &j:2 Load))) nil) None) (If (Compare (Name &additional_tastiness:2 Load) (list NotEq) (list (Constant s_impossible None))) (/seq (fn_2 (Constant i1 None) &additional_tastiness:2 &j:2 &dp:2)) (/seq))) (/seq) None)))) (/seq) None) (If (Compare (Subscript (Name &dp:2 Load) (_slice_content (Name &w:2 Load)) Load) (list Eq) (list (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil))) (/seq (Return (Constant s_impossible None))) (/seq (Return (Subscript (Name &dp:2 Load) (_slice_content (Name &w:2 Load)) Load))))) nil None None) (/splice (fn_19 &d:0 &w:0 &dishes:0 &dish_input:0 &_:0 (/choiceseq (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Name &dish_input:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_starred (Starred (fn_13 (Name &dish_input:0 Load)) Load))) Load))) nil))))) (Assign (list (Name &result:0 Store)) (Call (Name &maximize_tastiness:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (If (Compare (Name &result:0 Load) (list Eq) (list (Constant s_impossible None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &result:0 Load) i-1 (JoinedStr (list (Constant s_.6f None)))))))) nil))))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &dishes:1 None None) (arg &target_weight:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &C:1 Store)) (List nil Load) None) (Assign (list (Name &A:1 Store)) (List nil Load) None) (Assign (list (Name &b:1 Store)) (List (list (_starred_content (Name &target_weight:1 Load))) Load) None) (Assign (list (Name &bounds:1 Store)) (List nil Load) None) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (fn_18 &dish:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &w:1 Store)) (_starred_content (Name &t:1 Store)) (_starred_content (Name &dt:1 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &dish:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &dish:1 Load) (_slice_content (Constant i2 None)) Load)) (_starred_content (Subscript (Name &dish:1 Load) (_slice_content (Constant i3 None)) Load))) Load) None) (For (Name &n:1 Store) (fn_4 (BinOp (Name &target_weight:1 Load) FloorDiv (Name &w:1 Load))) (/seq (Expr (Call (Attribute (Name &C:1 Load) s_append Load) (list (_starred_content (BinOp (Name &t:1 Load) Sub (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Mult (Name &dt:1 Load))))) nil)) (Expr (Call (Attribute (Name &A:1 Load) s_append Load) (list (_starred_content (Name &w:1 Load))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) nil))) (/seq) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:1 Store)) (_starred_content (Name &dt:1 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &dish:1 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &dish:1 Load) (_slice_content (Constant i2 None)) Load))) Load) None) (For (Name &x:1 Store) (fn_4 (Name &target_weight:1 Load)) (/seq (Expr (Call (Attribute (Name &C:1 Load) s_append Load) (list (_starred_content (BinOp (Name &t:1 Load) Sub (BinOp (BinOp (Name &x:1 Load) Sub (Constant i1 None)) Mult (Name &dt:1 Load))))) nil)) (Expr (Call (Attribute (Name &A:1 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &target_weight:1 Load))) Load))) nil))) (/seq) None)))) (/seq) None) (Assign (list (Name &A_ub:1 Store)) (List (list (_starred_content (Name &A:1 Load))) Load) None) (Assign (list (Name &b_ub:1 Store)) (Name &b:1 Load) None) (Assign (list (Name &res:1 Store)) (Call (Name g_linprog Load) (list (_starred_content (BinOp (UnaryOp USub (Constant i1 None)) Mult (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (Name &C:1 Load))) nil)))) (list (keyword s_A_ub (Name &A_ub:1 Load)) (keyword s_b_ub (Name &b_ub:1 Load)) (keyword s_bounds (Name &bounds:1 Load)) (keyword s_method (Constant s_highs None)))) None) (If (Attribute (Name &res:1 Load) s_success Load) (/seq (Return (BinOp (UnaryOp USub (Constant i1 None)) Mult (Attribute (Name &res:1 Load) s_fun Load)))) (/seq (Return (Constant s_impossible None))))) nil None None) (Assign (list (Name &d:0 Store)) (Constant i2 None) None) (Assign (list (Name &w:0 Store)) (Constant i15 None) None) (/splice (fn_24 &dishes:0 (/choiceseq (fn_16 (Call (Name &solve:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil)) (Assign (list (Name &d:0 Store)) (Constant i3 None) None) (Assign (list (Name &w:0 Store)) (Constant i15 None) None)))) (fn_16 (Call (Name &solve:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &solve:0 (arguments nil (list (arg &d:1 None None) (arg &w:1 None None) (arg &dishes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &c:1 Store)) (List nil Load) None) (Assign (list (Name &A:1 Store)) (List nil Load) None) (Assign (list (Name &b:1 Store)) (List (list (_starred_content (Name &w:1 Load))) Load) None) (Assign (list (Name &bounds:1 Store)) (List nil Load) None) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (Compare (Subscript (Name &dish:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &dish:1 Load) None) (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (BinOp (BinOp (Name &t_i:1 Load) Pow (Constant i2 None)) Div (BinOp (Constant i2 None) Mult (Name &delta_t_i:1 Load)))))) nil)) (Expr (Call (Attribute (Name &A:1 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant None None))) Load))) nil))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &w_i:1 Store)) (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store)) (Name &dish:1 Load) None) (Assign (list (Name &max_items:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Name g_np Load) s_ceil Load) (list (_starred_content (BinOp (Name &w:1 Load) Div (Name &w_i:1 Load)))) nil))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &max_items:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &c:1 Load) s_append Load) (list (_starred_content (UnaryOp USub (Name &t_i:1 Load)))) nil)) (AugAssign (Name &t_i:1 Store) Sub (Name &delta_t_i:1 Load)) (Expr (Call (Attribute (Name &A:1 Load) s_append Load) (list (_starred_content (Name &w_i:1 Load))) nil)) (Expr (Call (Attribute (Name &bounds:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) nil))) (/seq) None)))) (/seq) None) (Assign (list (Name &c:1 Store)) (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (Name &c:1 Load))) nil) None) (Assign (list (Name &A:1 Store)) (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (List (list (_starred_content (Name &A:1 Load))) Load))) nil) None) (Assign (list (Name &b:1 Store)) (Call (Attribute (Name g_np Load) s_array Load) (list (_starred_content (Name &b:1 Load))) nil) None) (/splice (fn_26 (Call (Name g_linprog Load) (list (_starred_content (Name &c:1 Load))) (list (keyword s_A_ub (Name &A:1 Load)) (keyword s_b_ub (Name &b:1 Load)) (keyword s_bounds (Name &bounds:1 Load)) (keyword s_method (Constant s_highs None)))) &res:1))) nil None None) (/splice (fn_11 &d:0 &w:0 &_:2 &dishes:0)) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &dish:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dishes:0 Load))) nil) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (fn_21 (Name &dish:0 Load)) None)) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &d:0 Load)) (_starred_content (Name &w:0 Load)) (_starred_content (Name &dishes:0 Load))) nil) None) (fn_8 (Constant s_impossible None) &result:0)) nil)",
            "(Module (/seq (FunctionDef &calc_discrete_tastiness:0 (arguments nil (list (arg &w_i:1 None None) (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &weight:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk5LCAxMTEsIDExMCwgMTE1LCAxMTcsIDEwOSwgMTA1LCAxMTAsIDEwMywgMzIsIDEwNSwgMTE2LCAxMDEsIDEwOSwgMTE1LCAzMiwgMTExLCAxMDIsIDMyLCA5NywgMzIsIDEwMCwgMTA1LCAxMTUsIDk5LCAxMTQsIDEwMSwgMTE2LCAxMDEsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMDQsIDMyLCAxMTEsIDEwMiwgMzIsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMTAzLCAxMDUsIDExOCwgMTAxLCAxMTAsIDMyLCAxMTksIDEwMSwgMTA1LCAxMDMsIDEwNCwgMTE2LCAzMiwgMTE5LCA5NSwgMTA1LCA0NCwgMzIsIDEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAzMiwgMTE2LCA5NywgMTE1LCAxMTYsIDEwNSwgMTEwLCAxMDEsIDExNSwgMTE1LCAzMiwgMTE2LCA5NSwgMTA1LCA0NCwgMzIsIDEwMCwgMTAxLCA5OSwgOTcsIDEyMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDExNiwgOTcsIDk1LCAxMTYsIDk1LCAxMDUsIDQ0LCAzMiwgMTE3LCAxMTIsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTIsIDEwMSwgOTksIDEwNSwgMTAyLCAxMDUsIDk5LCAzMiwgMTE5LCAxMDEsIDEwNSwgMTAzLCAxMDQsIDExNiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &num_items:1 Store)) (BinOp (Name &weight:1 Load) FloorDiv (Name &w_i:1 Load)) None) (Assign (list (Name &total_tastiness:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &t_i:1 Load) Sub (BinOp (Name &delta_t_i:1 Load) Mult (Name &n:5 Load))) (list (comprehension (Name &n:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &num_items:1 Load))) nil) nil i0))))) nil) None) (Return (Name &total_tastiness:1 Load))) nil None None) (FunctionDef &calc_continuous_tastiness:0 (arguments nil (list (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &weight:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDk3LCAxMDgsIDk5LCAxMTcsIDEwOCwgOTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNiwgMTExLCAxMTYsIDk3LCAxMDgsIDMyLCAxMTYsIDk3LCAxMTUsIDExNiwgMTA1LCAxMTAsIDEwMSwgMTE1LCAxMTUsIDMyLCAxMTEsIDEwMiwgMzIsIDk5LCAxMTEsIDExMCwgMTE1LCAxMTcsIDEwOSwgMTA1LCAxMTAsIDEwMywgMzIsIDk3LCAzMiwgOTksIDExMSwgMTEwLCAxMTYsIDEwNSwgMTEwLCAxMTcsIDExMSwgMTE3LCAxMTUsIDMyLCAxMDAsIDEwNSwgMTE1LCAxMDQsIDMyLCAxMTEsIDEwMiwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTEwLCAxMDUsIDExNiwgMTA1LCA5NywgMTA4LCAzMiwgMTE2LCA5NywgMTE1LCAxMTYsIDEwNSwgMTEwLCAxMDEsIDExNSwgMTE1LCAzMiwgMTE2LCA5NSwgMTA1LCA0NCwgMzIsIDEwMCwgMTAxLCA5OSwgOTcsIDEyMSwgMzIsIDEwMCwgMTAxLCAxMDgsIDExNiwgOTcsIDk1LCAxMTYsIDk1LCAxMDUsIDQ0LCAzMiwgMTE3LCAxMTIsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMTIsIDEwMSwgOTksIDEwNSwgMTAyLCAxMDUsIDk5LCAzMiwgMTE5LCAxMDEsIDEwNSwgMTAzLCAxMDQsIDExNiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &total_tastiness:2 Store)) (fn_12 (Name &weight:2 Load) &delta_t_i:2 &weight:2 &t_i:2) None) (Return (Name &total_tastiness:2 Load))) nil None None) (FunctionDef &max_tastiness:0 (arguments nil (list (arg &dishes:3 None None) (arg &w:3 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1 None) &w:3 &dp:3)) (For (Name &dish:3 Store) (Name &dishes:3 Load) (/seq (If (fn_18 &dish:3) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &w_i:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &weight:3 Store) (fn_29 &w:3 &w_i:3) (/seq (If (Compare (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &weight:3 Load) Sub (Name &w_i:3 Load))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (fn_10 (BinOp (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &weight:3 Load) Sub (Name &w_i:3 Load))) Load) Add (Call (Name &calc_discrete_tastiness:0 Load) (list (_starred_content (Name &w_i:3 Load)) (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Name &w_i:3 Load))) nil)) &weight:3 &dp:3)) (/seq))) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:3 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &t_i:3 Store)) (_starred_content (Name &delta_t_i:3 Store))) Store)) (Name &dish:3 Load) None) (For (Name &weight:3 Store) (fn_4 (Name &w:3 Load)) (/seq (If (Compare (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &weight:3 Load) Sub (Constant i1 None))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (fn_10 (BinOp (Subscript (Name &dp:3 Load) (_slice_content (BinOp (Name &weight:3 Load) Sub (Constant i1 None))) Load) Add (Call (Name &calc_continuous_tastiness:0 Load) (list (_starred_content (Name &t_i:3 Load)) (_starred_content (Name &delta_t_i:3 Load)) (_starred_content (Constant i1 None))) nil)) &weight:3 &dp:3)) (/seq))) (/seq) None)) (/seq))))) (/seq) None) (fn_14 (Constant i1 None) &w:3 &dp:3)) nil None None) (/splice (fn_17 (/seq (fn_3 &w:4 &d:4) (Assign (list (Name &dishes:4 Store)) (List nil Load) None) (For (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &d:4 Load))) nil) (/seq (Expr (Call (Attribute (Name &dishes:4 Load) s_append Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) (If (Compare (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i2 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i2 None)) Load))) nil) None) (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i3 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i3 None)) Load))) nil) None)) (/seq (If (Compare (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i2 None)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Subscript (Name &dishes:4 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i2 None)) Load))) nil) None)) (/seq))))) (/seq) None) (Assign (list (Name &max_possible_tastiness:4 Store)) (Call (Name &max_tastiness:0 Load) (list (_starred_content (Name &dishes:4 Load)) (_starred_content (Name &w:4 Load))) nil) None) (fn_8 (Constant s_impossible None) &max_possible_tastiness:4)) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_tastiness:0 (arguments nil (list (arg &dishes:1 None None) (arg &weight:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1 None) &weight:1 &dp:1)) (For (Name &dish:1 Store) (Name &dishes:1 Load) (/seq (If (fn_18 &dish:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &dish_weight:1 Store)) (_starred_content (Name &t:1 Store)) (_starred_content (Name &delta_t:1 Store))) Store)) (Subscript (Name &dish:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Name &w:1 Store) (fn_29 &weight:1 &dish_weight:1) (/seq (Assign (list (Name &n:1 Store)) (BinOp (BinOp (Name &w:1 Load) Sub (Name &dish_weight:1 Load)) FloorDiv (Name &dish_weight:1 Load)) None) (Assign (list (Name &additional_tastiness:1 Store)) (BinOp (BinOp (Name &t:1 Load) Mult (Name &n:1 Load)) Sub (BinOp (BinOp (BinOp (Name &n:1 Load) Mult (BinOp (Name &n:1 Load) Sub (Constant i1 None))) FloorDiv (Constant i2 None)) Mult (Name &delta_t:1 Load))) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &w:1 Load) Sub (Name &dish_weight:1 Load))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (fn_2 (Name &dish_weight:1 Load) &additional_tastiness:1 &w:1 &dp:1)) (/seq))) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:1 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:1 Store)) (_starred_content (Name &delta_t:1 Store))) Store)) (Subscript (Name &dish:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) None) (For (Name &w:1 Store) (fn_4 (Name &weight:1 Load)) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &w:1 Load) Sub (Constant i1 None))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (fn_22 &dp:1 &w:1 &delta_t:1 &t:1) (/seq))) (/seq) None)) (/seq))))) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (Name &weight:1 Load)) Load))) nil None None) (/splice (fn_19 &d:0 &w:0 &dishes:0 &dish_description:0 &_:0 (/choiceseq (If (fn_18 &dish_description:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_content (Name &weight:0 Store)) (_starred_content (Name &t:0 Store)) (_starred_content (Name &delta_t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &dish_description:0 Load))) nil) None) (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant s_D None)) (_starred_content (Name &weight:0 Load)) (_starred_content (Name &t:0 Load)) (_starred_content (Name &delta_t:0 Load))) Load))) nil))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_content (Name &t:0 Store)) (_starred_content (Name &delta_t:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &dish_description:0 Load))) nil) None) (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Constant s_C None)) (_starred_content (Name &t:0 Load)) (_starred_content (Name &delta_t:0 Load))) Load))) nil))))))) (Assign (list (Name &max_tastiness:0 Store)) (Call (Name &calculate_tastiness:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil) None) (If (Compare (Name &max_tastiness:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &max_tastiness:0 Load) i-1 (JoinedStr (list (Constant s_.6f None)))))))) nil))))) nil)",
            "(Module (/seq (FunctionDef &calculate_tastiness:0 (arguments nil (list (arg &dish_type:1 None None) (arg &weight:1 None None) (arg &t_initial:1 None None) (arg &decay:1 None None) (arg &quantity:1 None None)) None nil nil None (list (Constant i1 None))) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Return (fn_1 &quantity:1 &n:5 &decay:1 &t_initial:1))) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_C None))) (/seq (Return (BinOp (BinOp (BinOp (Constant f0.5 None) Mult (Name &t_initial:1 Load)) Mult (Name &weight:1 Load)) Sub (BinOp (BinOp (Constant f0.5 None) Mult (Name &decay:1 Load)) Mult (BinOp (Name &weight:1 Load) Pow (Constant i2 None)))))) (/seq))))) nil None None) (fn_27 &dishes:2 &_:4 &total_weight:2 &dp:2 &solve:0 (/choiceseq (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &dish_type:2 Store)) (_starred_starred (Starred (Name &params:2 Store) Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dishes:2 Load))) (list (keyword s_start (Constant i1 None)))) (/seq (For (Name &weight:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &total_weight:2 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &weight:2 Load)) Store)) (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) (_slice_content (Name &weight:2 Load)) Load) None) (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &w:2 Store)) (_starred_content (Name &t:2 Store)) (_starred_content (Name &delta:2 Store))) Store)) (Name &params:2 Load) None) (For (Name &quantity:2 Store) (fn_4 (BinOp (Name &total_weight:2 Load) FloorDiv (Name &w:2 Load))) (/seq (If (Compare (BinOp (Name &weight:2 Load) Sub (BinOp (Name &w:2 Load) Mult (Name &quantity:2 Load))) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &weight:2 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &weight:2 Load)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &weight:2 Load) Sub (BinOp (Name &w:2 Load) Mult (Name &quantity:2 Load)))) Load) Add (Call (Name &calculate_tastiness:0 Load) (list (_starred_content (Name &dish_type:2 Load)) (_starred_content (Name &weight:2 Load)) (_starred_content (Name &t:2 Load)) (_starred_content (Name &delta:2 Load)) (_starred_content (Name &quantity:2 Load))) nil)))) nil) None)) (/seq))) (/seq) None)) (/seq (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &t:2 Store)) (_starred_content (Name &delta:2 Store))) Store)) (Name &params:2 Load) None) (For (Name &w:2 Store) (fn_4 (Name &weight:2 Load)) (/seq (Assign (list (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &weight:2 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Subscript (Name &dp:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &weight:2 Load)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dp:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name &weight:2 Load) Sub (Name &w:2 Load))) Load) Add (Call (Name &calculate_tastiness:0 Load) (list (_starred_content (Name &dish_type:2 Load)) (_starred_content (Name &w:2 Load)) (_starred_content (Name &t:2 Load)) (_starred_content (Name &delta:2 Load))) nil)))) nil) None)) (/seq) None)) (/seq))))) (/seq) None)) (/seq) None) (If (Compare (Subscript (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &total_weight:2 Load)) Load) (list Eq) (list (fn_20))) (/seq (Return (Constant s_impossible None))) (/seq (Return (JoinedStr (list (FormattedValue (Subscript (Subscript (Name &dp:2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Name &total_weight:2 Load)) Load) i-1 (JoinedStr (list (Constant s_.6f None))))))))))) (/splice (fn_11 &d:0 &w:0 &_:3 &dishes:0)) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Name &dish:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &dishes:0 Load))) nil) (/seq (If (fn_18 &dish:0) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Tuple (list (_starred_content (Subscript (Name &dish:0 Load) (_slice_content (Constant i0 None)) Load))) Load) Add (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Name &dish:0 Load)))) nil)) None)) (/seq (Assign (list (Subscript (Name &dishes:0 Load) (_slice_content (Name &i:0 Load)) Store)) (BinOp (Tuple (list (_starred_content (Subscript (Name &dish:0 Load) (_slice_content (Constant i0 None)) Load))) Load) Add (Call (Name g_tuple Load) (list (_starred_content (fn_13 (Name &dish:0 Load)))) nil)) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &total_tastiness_of_dish:0 (arguments nil (list (arg &w_i:1 None None) (arg &t_i:1 None None) (arg &delta_t_i:1 None None) (arg &dish_type:1 None None) (arg &target_weight:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_D None))) (/seq (Assign (list (Name &num_items:1 Store)) (BinOp (Name &target_weight:1 Load) FloorDiv (Name &w_i:1 Load)) None) (Return (fn_1 &num_items:1 &n:3 &delta_t_i:1 &t_i:1))) (/seq (If (Compare (Name &dish_type:1 Load) (list Eq) (list (Constant s_C None))) (/seq (Return (fn_15 (BinOp (Name &delta_t_i:1 Load) Div (Constant i2 None)) &target_weight:1 &t_i:1))) (/seq))))) nil None None) (FunctionDef &find_max_tastiness:0 (arguments nil (list (arg &dishes:2 None None) (arg &total_weight:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &total_weight:2 &dp:2)) (For (Name &dish:2 Store) (Name &dishes:2 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &w_i:2 Store)) (_starred_content (Name &t_i:2 Store)) (_starred_content (Name &delta_t_i:2 Store)) (_starred_content (Name &dish_type:2 Store))) Store)) (Name &dish:2 Load) None) (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_D None))) (/seq (For (Name &current_weight:2 Store) (fn_29 &total_weight:2 &w_i:2) (/seq (Assign (list (Name &num_items:2 Store)) (BinOp (Name &current_weight:2 Load) FloorDiv (Name &w_i:2 Load)) None) (Assign (list (Name &total_tastiness:2 Store)) (fn_1 &num_items:2 &n:4 &delta_t_i:2 &t_i:2) None) (fn_2 (BinOp (Name &w_i:2 Load) Mult (Name &num_items:2 Load)) &total_tastiness:2 &current_weight:2 &dp:2)) (/seq) None)) (/seq (If (Compare (Name &dish_type:2 Load) (list Eq) (list (Constant s_C None))) (/seq (For (Name &current_weight:2 Store) (fn_4 (Name &total_weight:2 Load)) (/seq (For (Name &x:2 Store) (fn_4 (Name &current_weight:2 Load)) (/seq (Assign (list (Name &total_tastiness:2 Store)) (fn_15 (BinOp (Name &delta_t_i:2 Load) Div (Constant i2 None)) &x:2 &t_i:2) None) (If (Compare (BinOp (Name &current_weight:2 Load) Sub (Name &x:2 Load)) (list GtE) (list (Constant i0 None))) (/seq (fn_2 (Name &x:2 Load) &total_tastiness:2 &current_weight:2 &dp:2)) (/seq))) (/seq) None)) (/seq) None)) (/seq))))) (/seq) None) (fn_14 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &total_weight:2 &dp:2)) nil None None) (/splice (fn_19 &d:0 &w:0 &dishes:0 &input_line:0 &_:0 (/choiceseq (If (fn_18 &input_line:0) (/seq (Assign (list (Tuple (list (_starred_content (Name &dish_type:0 Store)) (_starred_content (Name &w_i:0 Store)) (_starred_content (Name &t_i:0 Store)) (_starred_content (Name &delta_t_i:0 Store))) Store)) (fn_28 &input_line:0) None)) (/seq (Assign (list (Tuple (list (_starred_content (Name &dish_type:0 Store)) (_starred_content (Name &t_i:0 Store)) (_starred_content (Name &delta_t_i:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &input_line:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &input_line:0 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &input_line:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) Load) None) (Assign (list (Name &w_i:0 Store)) (Constant i0 None) None))) (Expr (Call (Attribute (Name &dishes:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &w_i:0 Load)) (_starred_content (Name &t_i:0 Load)) (_starred_content (Name &delta_t_i:0 Load)) (_starred_content (Name &dish_type:0 Load))) Load))) nil))))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_max_tastiness:0 Load) (list (_starred_content (Name &dishes:0 Load)) (_starred_content (Name &w:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &calculate_tastiness:0 (arguments nil (list (arg &discrete_dishes:1 None None) (arg &continuous_dishes:1 None None) (arg &weight:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:1 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant f1.0 None)))) Load) Mult (BinOp (Name &weight:1 Load) Add (Constant i1 None))) None) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant f0.0 None) None) (For (Tuple (list (_starred_content (Name &w_i:1 Store)) (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store) (Name &discrete_dishes:1 Load) (/seq (For (Name &w:1 Store) (fn_29 &weight:1 &w_i:1) (/seq (Assign (list (Name &n:1 Store)) (Constant i1 None) None) (While (Compare (BinOp (Name &w:1 Load) Sub (BinOp (Name &n:1 Load) Mult (Name &w_i:1 Load))) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &tastiness:1 Store)) (BinOp (BinOp (Name &t_i:1 Load) Mult (Name &n:1 Load)) Sub (BinOp (Name &delta_t_i:1 Load) Mult (BinOp (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Mult (Name &n:1 Load)) Div (Constant i2 None)))) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &w:1 Load) Sub (BinOp (Name &n:1 Load) Mult (Name &w_i:1 Load)))) Load) (list GtE) (list (Constant i0 None))) (/seq (fn_2 (BinOp (Name &n:1 Load) Mult (Name &w_i:1 Load)) &tastiness:1 &w:1 &dp:1)) (/seq)) (AugAssign (Name &n:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &t_i:1 Store)) (_starred_content (Name &delta_t_i:1 Store))) Store) (Name &continuous_dishes:1 Load) (/seq (For (Name &w:1 Store) (fn_4 (Name &weight:1 Load)) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) (list GtE) (list (Constant i0 None))) (/seq (Assign (list (Name &x:1 Store)) (Name &w:1 Load) None) (Assign (list (Name &additional_tastiness:1 Store)) (fn_12 (Name &x:1 Load) &delta_t_i:1 &x:1 &t_i:1) None) (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) Add (Name &additional_tastiness:1 Load)) &w:1 &dp:1)) (/seq))) (/seq) None)) (/seq) None) (Return (Subscript (Name &dp:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil None None) (/splice (fn_9 (If (Compare (Name &result:2 Load) (list Lt) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_impossible None))) nil))) (/seq (fn_16 (Name &result:2 Load)))) &d:2 &w:2 &discrete_dishes:2 &continuous_dishes:2 &line:2 &delta_t_i:2 &t_i:2 &_:2 &w_i:2 &calculate_tastiness:0 &result:2 &main:0))) nil)",
            "(Module (/seq (FunctionDef &parse_input:0 (arguments nil (list (arg &input_lines:1 None None)) None nil nil None nil) (/seq (/splice (fn_30 &input_lines:1 &target_weight:1 &d:1 &line:6 &dishes:1))) nil None None) (FunctionDef &calculate_discrete_tastiness:0 (arguments nil (list (arg &w_i:2 None None) (arg &t_i:2 None None) (arg &delta_t_i:2 None None) (arg &x:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (BinOp (Name &x:2 Load) FloorDiv (Name &w_i:2 Load)) None) (Assign (list (Name &tastiness:2 Store)) (fn_1 &n:2 &i:7 &delta_t_i:2 &t_i:2) None) (Return (Name &tastiness:2 Load))) nil None None) (FunctionDef &calculate_continuous_tastiness:0 (arguments nil (list (arg &t_i:3 None None) (arg &delta_t_i:3 None None) (arg &x:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &tastiness:3 Store)) (BinOp (BinOp (Name &x:3 Load) Mult (Name &t_i:3 Load)) Sub (BinOp (BinOp (BinOp (Constant f0.5 None) Mult (Name &x:3 Load)) Mult (Name &x:3 Load)) Mult (Name &delta_t_i:3 Load))) None) (Return (Name &tastiness:3 Load))) nil None None) (FunctionDef &knapsack:0 (arguments nil (list (arg &dishes:4 None None) (arg &target_weight:4 None None)) None nil nil None nil) (/seq (Assign (list (Name &dp:4 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (BinOp (List (list (_starred_content (fn_20))) Load) Mult (Name &target_weight:4 Load))) None) (For (Name &dish:4 Store) (Name &dishes:4 Load) (/seq (If (fn_18 &dish:4) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &w_i:4 Store)) (_starred_content (Name &t_i:4 Store)) (_starred_content (Name &delta_t_i:4 Store))) Store)) (fn_13 (Name &dish:4 Load)) None) (For (Name &j:4 Store) (fn_29 &target_weight:4 &w_i:4) (/seq (Assign (list (Name &tastiness:4 Store)) (Call (Name &calculate_discrete_tastiness:0 Load) (list (_starred_content (Name &w_i:4 Load)) (_starred_content (Name &t_i:4 Load)) (_starred_content (Name &delta_t_i:4 Load)) (_starred_content (Name &j:4 Load))) nil) None) (fn_2 (Name &w_i:4 Load) &tastiness:4 &j:4 &dp:4)) (/seq) None)) (/seq (If (Compare (Subscript (Name &dish:4 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Constant s_C None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:4 Store)) (_starred_content (Name &t_i:4 Store)) (_starred_content (Name &delta_t_i:4 Store))) Store)) (fn_13 (Name &dish:4 Load)) None) (For (Name &j:4 Store) (fn_4 (Name &target_weight:4 Load)) (/seq (Assign (list (Name &tastiness:4 Store)) (Call (Name &calculate_continuous_tastiness:0 Load) (list (_starred_content (Name &t_i:4 Load)) (_starred_content (Name &delta_t_i:4 Load)) (_starred_content (Name &j:4 Load))) nil) None) (For (Name &k:4 Store) (fn_29 &target_weight:4 &j:4) (/seq (fn_2 (Name &j:4 Load) &tastiness:4 &k:4 &dp:4)) (/seq) None)) (/seq) None)) (/seq))))) (/seq) None) (Return (Subscript (Name &dp:4 Load) (_slice_content (Name &target_weight:4 Load)) Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &input_lines:5 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:5 Store)) (_starred_content (Name &target_weight:5 Store)) (_starred_content (Name &dishes:5 Store))) Store)) (Call (Name &parse_input:0 Load) (list (_starred_content (Name &input_lines:5 Load))) nil) None) (Assign (list (Name &result:5 Store)) (Call (Name &knapsack:0 Load) (list (_starred_content (Name &dishes:5 Load)) (_starred_content (Name &target_weight:5 Load))) nil) None) (If (Compare (Name &result:5 Load) (list Eq) (list (fn_20))) (/seq (Return (Constant s_impossible None))) (/seq (Return (JoinedStr (list (FormattedValue (Name &result:5 Load) i-1 (JoinedStr (list (Constant s_.9f None)))))))))) nil None None) (Assign (list (Name &input_lines:0 Store)) (List (list (_starred_content (Constant s-WzUxLCAzMiwgNDksIDUzXQ== None)) (_starred_content (Constant s-WzY4LCAzMiwgNTIsIDMyLCA0OSwgNDgsIDMyLCA0OV0= None)) (_starred_content (Constant s-WzY3LCAzMiwgNTQsIDMyLCA0OV0= None)) (_starred_content (Constant s-WzY3LCAzMiwgNTcsIDMyLCA1MV0= None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &input_lines:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &compute_tastiness:0 (arguments nil (list (arg &discrete:1 None None) (arg &continuous:1 None None) (arg &max_weight:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Constant i1 None) &max_weight:1 &dp:1)) (For (Tuple (list (_starred_content (Name &weight:1 Store)) (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &delta:1 Store))) Store) (Name &discrete:1 Load) (/seq (For (Name &w:1 Store) (fn_29 &max_weight:1 &weight:1) (/seq (Assign (list (Name &pieces:1 Store)) (Constant i1 None) None) (While (Compare (BinOp (Name &pieces:1 Load) Mult (Name &weight:1 Load)) (list LtE) (list (Name &w:1 Load))) (/seq (Assign (list (Name &total_taste:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (BinOp (Name &tastiness:1 Load) Sub (BinOp (Name &delta:1 Load) Mult (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) (list (comprehension (Name &n:3 Store) (fn_4 (Name &pieces:1 Load)) nil i0))))) nil) None) (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &w:1 Load) Sub (BinOp (Name &pieces:1 Load) Mult (Name &weight:1 Load)))) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (fn_2 (BinOp (Name &pieces:1 Load) Mult (Name &weight:1 Load)) &total_taste:1 &w:1 &dp:1)) (/seq)) (AugAssign (Name &pieces:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &tastiness:1 Store)) (_starred_content (Name &delta:1 Store))) Store) (Name &continuous:1 Load) (/seq (For (Name &w:1 Store) (fn_4 (Name &max_weight:1 Load)) (/seq (If (Compare (Subscript (Name &dp:1 Load) (_slice_content (Name &w:1 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Name &total_taste:1 Store)) (fn_12 (Name &w:1 Load) &delta:1 &w:1 &tastiness:1) None) (fn_10 (BinOp (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Load) Add (Name &total_taste:1 Load)) &w:1 &dp:1)) (/seq))) (/seq) None)) (/seq) None) (fn_14 (Constant i1 None) &max_weight:1 &dp:1)) nil None None) (/splice (fn_9 (fn_8 (Name &result:2 Load) &result:2) &d:2 &w:2 &discrete:2 &continuous:2 &parts:2 &decay:2 &tastiness:2 &_:2 &weight:2 &compute_tastiness:0 &result:2 &main:0))) nil)"
        ]
    },
    "939": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) ?0) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) None) #0) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Sub (Constant i1 None)))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list GtE) (list (Name %1 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load) (list GtE) (list (Name %1 Load))))) #0 (/seq)) (If (BoolOp And (list (Compare (Name %2 Load) (list Lt) (list (BinOp (Name %4 Load) Sub (Constant i2 None)))) (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list GtE) (list (Name %1 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i2 None))) Load) (list GtE) (list (Name %1 Load))))) #0 (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BoolOp Or (list (BoolOp And (list (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (list LtE) (list (Name %1 Load))))) (BoolOp And (list (Compare (Name %2 Load) (list Lt) (list (BinOp #0 Sub (Constant i1 None)))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load) (list LtE) (list (Name %1 Load)))))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(BoolOp Or (list (BoolOp And (list (Compare (Name %2 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (list GtE) (list (Name %1 Load))))) (BoolOp And (list (Compare (Name %2 Load) (list Lt) (list (BinOp (Name %4 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load) (list GtE) (list (Name %1 Load)))))))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Name %1 Load) (list In) (list (Name %2 Load))) (/seq (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_index Load) (list (_starred_content (Name %1 Load))) nil) None) (If (BoolOp And (list (Compare (Name %3 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) (list LtE) (list (Name %1 Load))))) (/seq (Return (Constant True None))) (/seq)) (If (BoolOp And (list (Compare (Name %3 Load) (list Lt) (list (BinOp (Name %4 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name %2 Load) (_slice_content (BinOp (Name %3 Load) Add (Constant i1 None))) Load) (list LtE) (list (Name %1 Load))))) (/seq (Return (Constant True None))) (/seq)) (If #0 (/seq (Return (Constant True None))) (/seq))) (/seq))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (/splice (fn_1 %5 %3 %1 %2 %4 (/choiceseq (If (Compare (Name %3 Load) (list In) (list (Name %2 Load))) (/seq (If (Compare (Name %1 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) #0)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil))))))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list In) (list (Name %1 Load))) #0 (/seq (Return (Constant s_no None))))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %7 None None) (arg %3 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (List nil Load) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name %6 Store)) (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Constant i1 None)) Load) None) (If (Compare (Name %4 Load) (list In) (list (Name %6 Load))) #0 (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Constant s_no None))) nil))))) (/seq) None) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp And (list (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list GtE) (list (Name %1 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add #0)) Load) (list GtE) (list (Name %1 Load)))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil)) Continue)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i7 None)) (_starred_content (Constant i8 None)) (_starred_content (Constant i9 None)) (_starred_content (Constant i10 None))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) #0 None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content #0)) nil) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(BoolOp Or (list (Compare (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load) (list Eq) (list (Name %1 Load))) (Compare (Subscript (Name %2 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list Eq) (list (Name %1 Load)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(BoolOp Or (list (Compare (Name %2 Load) (list Eq) (list (Call (Name g_min Load) (list (_starred_content (Name %1 Load))) nil))) (Compare (Name %2 Load) (list Eq) (list (Call (Name g_max Load) (list (_starred_content (Name %1 Load))) nil)))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Constant s_no None))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BoolOp And (list (Compare (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (list LtE) (list (Name %1 Load))) (Compare (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Add (Constant i1 None))) Load) (list LtE) (list (Name %1 Load)))))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (IfExp #0 (Constant s_yes None) (Constant s_no None)))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (Name %4 Load) (list (comprehension (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %2 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %3 Load))) nil) (list (Compare (Name %2 Load) (list Eq) (list (Name %1 Load)))) i0)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_9 (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &a:1 Load))) nil))) nil) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant s_yes None))) (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i2 None))) (/seq (Return (Constant s_yes None))) (/seq (Assign (list (Name &pos_k:1 Store)) (fn_21 &k:1 &val:2 &a:1 &i:2) None) (For (Name &pos:1 Store) (Name &pos_k:1 Load) (/seq (If (fn_4 (Name &n:1 Load) &k:1 &pos:1 &a:1) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))))))) &a:1 &k:1 &n:1 &is_possible:0) (/splice (fn_2 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil)) &t:0 &k:0 &n:0 &a:0 &_:0))) nil)",
            "(Module (/seq (FunctionDef &is_possible:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &arr:1 None None)) None nil nil None nil) (/seq (fn_7 (BoolOp Or (list (Compare (Name &idx:1 Load) (list Eq) (list (Constant i0 None))) (Compare (Name &idx:1 Load) (list Eq) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))))) &k:1 &arr:1 &idx:1 &n:1) (Return (Constant False None))) nil None None) (/splice (fn_1 &t:0 &k:0 &n:0 &arr:0 &_:0 (/choiceseq (fn_5 (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil)))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (/seq (Assign (list (Name &count:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &k:0 Load))) nil) None) (If (Compare (Name &count:0 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Assign (list (Name &positions:0 Store)) (fn_21 &k:0 &x:1 &a:0 &i:1) None) (Assign (list (Name &can:0 Store)) (Constant False None) None) (For (Name &pos:0 Store) (Name &positions:0 Load) (/seq (If (BoolOp And (list (Compare (Name &pos:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &pos:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None)) (/seq (If (BoolOp And (list (Compare (Name &pos:0 Load) (list Eq) (list (Constant i0 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &pos:0 Load) Add (Constant i1 None))) Load) (list GtE) (list (Name &k:0 Load))))) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None)) (/seq (If (BoolOp And (list (Compare (Name &pos:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &pos:0 Load) Sub (Constant i1 None))) Load) (list GtE) (list (Name &k:0 Load))))) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None)) (/seq))))))) (/seq) None) (If (Name &can:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_Yes None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil))))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_No None))) nil)))))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (fn_13) (/seq)) (Assign (list (Name &possible:0 Store)) (Constant False None) None) (fn_3 (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) &k:0 &i:0 &a:0 &n:0) (fn_5 (Name &possible:0 Load))) (/seq (fn_18))))))) nil)",
            "(Module (/seq (FunctionDef &can_become_k:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &array:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &array:1 Load))) (/seq (Assign (list (Name &k_index:1 Store)) (Call (Attribute (Name &array:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) None) (Assign (list (Name &left_diff:1 Store)) (Name &k_index:1 Load) None) (Assign (list (Name &right_diff:1 Store)) (BinOp (BinOp (Name &n:1 Load) Sub (Name &k_index:1 Load)) Sub (Constant i1 None)) None) (If (BoolOp Or (list (Compare (Name &left_diff:1 Load) (list LtE) (list (Constant i1 None))) (Compare (Name &right_diff:1 Load) (list LtE) (list (Constant i1 None))))) (/seq (Return (Constant True None))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &k_index:1 Load) Sub (Constant i2 None)))) nil)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (BinOp (Name &k_index:1 Load) Add (Constant i3 None)))) nil))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &array:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &k:1 Load))) (Compare (Name &i:1 Load) (list NotEq) (list (Name &k_index:1 Load))))) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))))) (/seq (Return (Constant False None))))) nil None None) (/splice (fn_2 (fn_20 (Call (Name &can_become_k:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &array:0 Load))) nil)) &t:0 &k:0 &n:0 &array:0 &_:0))) nil)",
            "(Module (/seq (FunctionDef &is_possible:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &sequence:1 None None)) None nil nil None nil) (/seq (fn_7 (BoolOp And (list (Call (Attribute (Subscript (Name &sequence:1 Load) (_slice_slice (Slice None (BinOp (Name &n:1 Load) FloorDiv (Constant i2 None)) None)) Load) s_count Load) (list (_starred_content (Name &k:1 Load))) nil) (Call (Attribute (Subscript (Name &sequence:1 Load) (_slice_slice (Slice (BinOp (Name &n:1 Load) FloorDiv (Constant i2 None)) None None)) Load) s_count Load) (list (_starred_content (Name &k:1 Load))) nil))) &k:1 &sequence:1 &ind:1 &n:1) (If (fn_17 &sequence:1 &k:1) (/seq (Return (Constant True None))) (/seq)) (Return (Constant False None))) nil None None) (/splice (fn_1 &t:0 &k:0 &n:0 &sequence:0 &_:0 (/choiceseq (fn_20 (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &sequence:0 Load))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &process_queries:0 (arguments nil (list (arg &queries:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &results:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store)) (_starred_content (Name &a:1 Store))) Store) (Name &queries:1 Load) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &a:1 Load))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &a:1 Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Assign (list (Name &possible:1 Store)) (Constant False None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &k:1 Load))) (fn_6 &k:1 &i:1 &a:1 &n:1))) (/seq (Assign (list (Name &possible:1 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (Name &possible:1 Load) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_no None))) nil))))))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_no None))) nil))))) (/seq) None) (Return (Name &results:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &t:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &queries:2 Store)) (List nil Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:2 Load))) nil) (/seq (/splice (fn_15 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) &k:2 &n:2 &a:2)) (Expr (Call (Attribute (Name &queries:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &k:2 Load)) (_starred_content (Name &a:2 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &results:2 Store)) (Call (Name &process_queries:0 Load) (list (_starred_content (Name &queries:2 Load))) nil) None) (For (Name &result:2 Store) (Name &results:2 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &can_transform_to_k:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &arr:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &arr:1 Load))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &arr:1 Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant True None))) (/seq)) (Assign (list (Name &min_val:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &arr:1 Load))) nil) None) (Assign (list (Name &max_val:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:1 Load))) nil) None) (If (BoolOp Or (list (Compare (Name &min_val:1 Load) (list Eq) (list (Name &k:1 Load))) (Compare (Name &max_val:1 Load) (list Eq) (list (Name &k:1 Load))))) (/seq (Return (Constant True None))) (/seq)) (If (fn_16 &k:1 &arr:1) (/seq (Return (Constant True None))) (/seq)) (Return (Constant False None))) (/seq)) (Return (Constant False None))) nil None None) (/splice (fn_2 (fn_5 (Call (Name &can_transform_to_k:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil)) &t:0 &k:0 &n:0 &arr:0 &_:0))) nil)",
            "(Module (fn_8 (/seq (Assign (list (Name &can:0 Store)) (Constant s_no None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &k:0 Load))) (/seq (If (fn_6 &k:0 &i:0 &a:0 &n:0) (/seq (Assign (list (Name &can:0 Store)) (Constant s_yes None) None) Break) (/seq)) (If (BoolOp And (list (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Load) (list GtE) (list (Name &k:0 Load))))) (/seq (Assign (list (Name &can:0 Store)) (Constant s_yes None) None) Break) (/seq))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &can:0 Load))) nil))) &n:0 &a:0 &k:0 &_:0 &t:0) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list NotIn) (list (Name &a:0 Load))) (/seq (fn_18) Continue) (/seq)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (fn_13) (/seq)) (Assign (list (Name &can:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (fn_11 &n:0) (/seq (If (fn_12 (Constant i1 None) &k:0 &i:0 &a:0) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (If (fn_12 (Constant i2 None) &k:0 &i:0 &a:0) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (fn_20 (Name &can:0 Load)))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (/seq (Assign (list (Name &left:0 Store)) (Call (Attribute (Name &a:0 Load) s_index Load) (list (_starred_content (Name &k:0 Load))) nil) None) (Assign (list (Name &right:0 Store)) (BinOp (BinOp (Name &n:0 Load) Sub (Call (Attribute (Subscript (Name &a:0 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load) s_index Load) (list (_starred_content (Name &k:0 Load))) nil)) Sub (Constant i1 None)) None) (If (Compare (Name &left:0 Load) (list Eq) (list (Name &right:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (fn_5 (BoolOp Or (list (Compare (BinOp (Name &right:0 Load) Sub (Name &left:0 Load)) (list Eq) (list (Constant i1 None))) (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Name &k:0 Load) (list In) (list (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &left:0 Load) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None)) Load))) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &left:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &right:0 Load) Add (Constant i1 None)))) nil) nil i0))))) nil))))))) (/seq (fn_18))))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (fn_13) (/seq)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i1 None))) (/seq (fn_18) Continue) (/seq)) (Assign (list (Name &can:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (fn_11 &n:0) (/seq (If (BoolOp Or (list (fn_12 (Constant i1 None) &k:0 &i:0 &a:0) (fn_19 &k:0 &i:0 &a:0))) (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (fn_5 (Name &can:0 Load)))))) nil)",
            "(Module (/seq (fn_10 (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil)) Continue) (/seq)) (Assign (list (Name &left_k:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &right_k:1 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name &n:1 Load)) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Name &k:1 Load))) (/seq (Assign (list (Subscript (Name &left_k:1 Load) (_slice_content (Name &j:1 Load)) Store)) (Constant True None) None) (Assign (list (Subscript (Name &right_k:1 Load) (_slice_content (Name &j:1 Load)) Store)) (Constant True None) None)) (/seq (If (Compare (Name &j:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &left_k:1 Load) (_slice_content (Name &j:1 Load)) Store)) (BoolOp Or (list (Subscript (Name &left_k:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &j:1 Load)) Load) (list GtE) (list (Name &k:1 Load))))) None) (If (BoolOp And (list (Subscript (Name &left_k:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &j:1 Load)) Load) (list GtE) (list (Name &k:1 Load))))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil)) Break) (/seq))) (/seq)))) (If (Compare (Name &j:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &right_k:1 Load) (_slice_content (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Sub (Name &j:1 Load))) Store)) (BoolOp Or (list (Subscript (Name &right_k:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Name &j:1 Load))) Load) (Compare (Subscript (Name &a:1 Load) (_slice_content (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Sub (Name &j:1 Load))) Load) (list GtE) (list (Name &k:1 Load))))) None) (If (BoolOp And (list (Subscript (Name &right_k:1 Load) (_slice_content (BinOp (Name &n:1 Load) Sub (Name &j:1 Load))) Load) (Compare (Subscript (Name &a:1 Load) (_slice_content (BinOp (BinOp (Name &n:1 Load) Sub (Constant i1 None)) Sub (Name &j:1 Load))) Load) (list GtE) (list (Name &k:1 Load))))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil)) Break) (/seq))) (/seq))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_no None))) nil))) None)) &results:1 &i:1 &queries:1 &k:1 &n:1 &a:1 &t:1 &can_become_k:0) (Assign (list (Name &t:0 Store)) (Constant i5 None) None) (Assign (list (Name &queries:0 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) Load)) (_starred_content (List (list (_starred_content (Constant i6 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) Load)) (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Constant i10 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (fn_14))) Load))) Load) None) (Assign (list (Name &results:0 Store)) (Call (Name &can_become_k:0 Load) (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (For (Name &result:0 Store) (Name &results:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (FunctionDef &can_turn_all_elements_to_k:0 (arguments nil (list (arg &t:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &k:1 Store))) Store)) (Subscript (Subscript (Name &queries:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load) None) (Assign (list (Name &arr:1 Store)) (Subscript (Subscript (Name &queries:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load) None) (If (Compare (Name &k:1 Load) (list In) (list (Name &arr:1 Load))) (/seq (Assign (list (Name &dist:1 Store)) (Call (Attribute (Name &arr:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &arr:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Eq) (list (Name &k:1 Load))) (/seq (Assign (list (Name &dist:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &dist:1 Load)) (_starred_content (Call (Name g_abs Load) (list (_starred_content (BinOp (Name &j:1 Load) Sub (Call (Attribute (Name &arr:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil)))) nil))) nil) None)) (/seq))) (/seq) None) (fn_5 (Compare (Name &dist:1 Load) (list LtE) (list (Constant i1 None))))) (/seq (fn_18)))) (/seq) None)) nil None None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name &queries:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (/splice (fn_15 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) &k:0 &n:0 &arr:0)) (Expr (Call (Attribute (Name &queries:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Tuple (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load))) Load)) (_starred_content (Name &arr:0 Load))) Load))) nil))) (/seq) None) (Expr (Call (Name &can_turn_all_elements_to_k:0 Load) (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil)",
            "(Module (fn_8 (/seq (Assign (list (Name &possible:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &k:0 Load))) (/seq (If (fn_4 (Name &n:0 Load) &k:0 &i:0 &a:0) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq)) (If (BoolOp Or (list (BoolOp And (list (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Sub (Constant i2 None))) Load) (list LtE) (list (Name &k:0 Load))))) (BoolOp And (list (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Load) (list LtE) (list (Name &k:0 Load))))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq))) (/seq))) (/seq) None) (fn_5 (Name &possible:0 Load))) &n:0 &a:0 &k:0 &_:0 &t:0) nil)",
            "(Module (fn_8 (/seq (Assign (list (Name &possible:0 Store)) (Constant s_no None) None) (For (Name &i:0 Store) (fn_11 &n:0) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Name &k:0 Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Eq) (list (Name &k:0 Load))) (BoolOp And (list (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Load) (list Eq) (list (Name &k:0 Load))))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant s_yes None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &possible:0 Load) (list Eq) (list (Constant s_yes None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Assign (list (Name &sorted_a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Name &a:0 Load))) nil) None) (fn_5 (BoolOp Or (list (Compare (Subscript (Name &sorted_a:0 Load) (_slice_content (BinOp (Name &n:0 Load) FloorDiv (Constant i2 None))) Load) (list Eq) (list (Name &k:0 Load))) (Compare (Subscript (Name &sorted_a:0 Load) (_slice_content (BinOp (BinOp (Name &n:0 Load) Sub (Constant i1 None)) FloorDiv (Constant i2 None))) Load) (list Eq) (list (Name &k:0 Load))))))))) &n:0 &a:0 &k:0 &_:0 &t:0) nil)",
            "(Module (/seq (fn_9 (/seq (If (BoolOp Or (list (Compare (Name &k:1 Load) (list Eq) (list (Call (Name g_max Load) (list (_starred_content (Name &arr:1 Load))) nil))) (Compare (Name &k:1 Load) (list Eq) (list (Call (Name g_min Load) (list (_starred_content (Name &arr:1 Load))) nil))))) (/seq (Return (Constant s_yes None))) (/seq)) (For (Name &i:1 Store) (fn_11 &n:1) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Eq) (list (Name &k:1 Load))) (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (list Eq) (list (Name &k:1 Load))))) (/seq (Return (Constant s_yes None))) (/seq)) (If (BoolOp Or (list (Compare (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Lt Lt) (list (Name &k:1 Load) (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (list Lt Lt) (list (Name &k:1 Load) (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))) &arr:1 &k:1 &n:1 &can_transform_to_k:0) (/splice (fn_1 &t:0 &k:0 &n:0 &arr:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &can_transform_to_k:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (fn_13) (/seq)) (Assign (list (Name &possible:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (fn_11 &n:0) (/seq (If (BoolOp Or (list (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list LtE) (list (Name &k:0 Load))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list LtE) (list (Name &k:0 Load))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (Assign (list (Name &diff:0 Store)) (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Sub (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Load)) None) (If (BoolOp Or (list (Compare (Name &diff:0 Load) (list Eq) (list (BinOp (Constant i2 None) Mult (Name &k:0 Load)))) (BoolOp And (list (Compare (Name &diff:0 Load) (list Lt) (list (BinOp (Constant i2 None) Mult (Name &k:0 Load)))) (Compare (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (list Lt) (list (Name &k:0 Load))))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (fn_20 (Name &possible:0 Load)))))) nil)",
            "(Module (/seq (FunctionDef &can_transform_to_k:0 (arguments nil (list (arg &nums:1 None None) (arg &k:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &nums:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &before_k:1 Store)) (_starred_content (Name &after_k:1 Store))) Store)) (Tuple (list (_starred_content (Constant False None)) (_starred_content (Constant False None))) Load) None) (For (Name &num:1 Store) (Name &nums:1 Load) (/seq (If (Compare (Name &num:1 Load) (list Lt) (list (Name &k:1 Load))) (/seq (Assign (list (Name &before_k:1 Store)) (Constant True None) None)) (/seq)) (If (Compare (Name &num:1 Load) (list Gt) (list (Name &k:1 Load))) (/seq (Assign (list (Name &after_k:1 Store)) (Constant True None) None)) (/seq))) (/seq) None) (If (BoolOp Or (list (UnaryOp Not (Name &before_k:1 Load)) (UnaryOp Not (Name &after_k:1 Load)))) (/seq (Return (Constant s_yes None))) (/seq (Assign (list (Name &k_index:1 Store)) (Call (Attribute (Name &nums:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) None) (If (fn_4 (Call (Name g_len Load) (list (_starred_content (Name &nums:1 Load))) nil) &k:1 &k_index:1 &nums:1) (/seq (Return (Constant s_yes None))) (/seq (Return (Constant s_no None))))))) (/seq (Return (Constant s_no None))))) nil None None) (/splice (fn_1 &t:0 &k:0 &n:0 &nums:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &can_transform_to_k:0 Load) (list (_starred_content (Name &nums:0 Load)) (_starred_content (Name &k:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (fn_9 (/seq (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant s_yes None))) (/seq)) (Assign (list (Name &positions:1 Store)) (fn_21 &k:1 &val:2 &a:1 &i:2) None) (For (Name &pos:1 Store) (Name &positions:1 Load) (/seq (If (fn_6 &k:1 &pos:1 &a:1 &n:1) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))) &a:1 &k:1 &n:1 &is_transform_possible:0) (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_transform_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (fn_13) (/seq)) (Assign (list (Name &possible:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &k:0 Load) (list GtE) (list (Call (Name g_min Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)) Load))) nil))) (Compare (Name &k:0 Load) (list LtE) (list (Call (Name g_max Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)) Load))) nil))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (Name &possible:0 Load) (/seq Break) (/seq))) (/seq) None) (fn_5 (Name &possible:0 Load)))))) nil)",
            "(Module (/seq (FunctionDef &is_possible:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &a:1 Load))) (/seq (Assign (list (Name &count:1 Store)) (Call (Attribute (Name &a:1 Load) s_count Load) (list (_starred_content (Name &k:1 Load))) nil) None) (If (Compare (Name &count:1 Load) (list Eq) (list (Name &n:1 Load))) (/seq (Return (Constant s_yes None))) (/seq)) (fn_3 (/seq (Return (Constant s_yes None))) &k:1 &i:1 &a:1 &n:1)) (/seq)) (Return (Constant s_no None))) nil None None) (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &can_transform_to_k:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &seq:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjgsIDEwMSwgMTE2LCAxMDEsIDExNCwgMTA5LCAxMDUsIDExMCwgMTAxLCAzMiwgMTA1LCAxMDIsIDMyLCAxMDUsIDExNiwgMzksIDExNSwgMzIsIDExMiwgMTExLCAxMTUsIDExNSwgMTA1LCA5OCwgMTA4LCAxMDEsIDMyLCAxMTYsIDExMSwgMzIsIDExNiwgMTE0LCA5NywgMTEwLCAxMTUsIDEwMiwgMTExLCAxMTQsIDEwOSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDExNSwgMTAxLCAxMTMsIDExNywgMTAxLCAxMTAsIDk5LCAxMDEsIDMyLCAxMTYsIDExMSwgMzIsIDk3LCAzMiwgMTE1LCAxMDEsIDExMywgMTE3LCAxMDEsIDExMCwgOTksIDEwMSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMTksIDEwNCwgMTAxLCAxMTQsIDEwMSwgMzIsIDk3LCAxMDgsIDEwOCwgMzIsIDEwMSwgMTA4LCAxMDEsIDEwOSwgMTAxLCAxMTAsIDExNiwgMTE1LCAzMiwgOTcsIDExNCwgMTAxLCAzMiwgMTAxLCAxMTMsIDExNywgOTcsIDEwOCwgMzIsIDExNiwgMTExLCAzMiwgMTA3LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (If (Compare (Name &k:1 Load) (list In) (list (Name &seq:1 Load))) (/seq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &seq:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Name &k:1 Load))) (/seq (If (fn_4 (Name &n:1 Load) &k:1 &i:1 &seq:1) (/seq Continue) (/seq (Return (Constant s_no None))))) (/seq))) (/seq) None) (Return (Constant s_yes None))) (/seq (Return (Constant s_no None))))) nil None None) (/splice (fn_2 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &can_transform_to_k:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &seq:0 Load))) nil))) nil)) &t:0 &k:0 &n:0 &seq:0 &_:0))) nil)",
            "(Module (/seq (fn_9 (/seq (Assign (list (Name &k_index:1 Store)) (Call (Attribute (Name &arr:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) None) (If (BoolOp And (list (Compare (Name &k_index:1 Load) (list Gt) (list (Constant i0 None))) (BoolOp Or (list (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &k_index:1 Load) Sub (Constant i1 None))) Load) (list Eq) (list (Name &k:1 Load))) (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &k_index:1 Load) Sub (Constant i1 None))) Load) (list LtE) (list (Name &k:1 Load))))))) (/seq (Return (Constant s_yes None))) (/seq)) (If (BoolOp And (list (Compare (Name &k_index:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (BoolOp Or (list (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &k_index:1 Load) Add (Constant i1 None))) Load) (list Eq) (list (Name &k:1 Load))) (Compare (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &k_index:1 Load) Add (Constant i1 None))) Load) (list LtE) (list (Name &k:1 Load))))))) (/seq (Return (Constant s_yes None))) (/seq)) (If (BoolOp Or (list (Compare (Subscript (Name &arr:1 Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &k:1 Load))) (Compare (Subscript (Name &arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (list LtE) (list (Name &k:1 Load))))) (/seq (Return (Constant s_yes None))) (/seq)) (For (Name &i:1 Store) (fn_11 &n:1) (/seq (If (fn_19 &k:1 &i:1 &arr:1) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))) &arr:1 &k:1 &n:1 &is_possible:0) (/splice (fn_1 &t:0 &k:0 &n:0 &arr:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil))) nil)))))) nil)",
            "(Module (/seq (FunctionDef &is_possible:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &arr:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &arr:1 Load))) (/seq (Return (Constant s_yes None))) (/seq)) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (IfExp (Compare (Subscript (Name &arr:1 Load) (_slice_content (Constant i0 None)) Load) (list NotEq) (list (Name &k:1 Load))) (Constant s_no None) (Constant s_yes None)))) (/seq)) (Assign (list (Name &max_num:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &arr:1 Load))) nil) None) (Assign (list (Name &min_num:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &arr:1 Load))) nil) None) (If (BoolOp Or (list (Compare (Name &k:1 Load) (list Gt) (list (Name &max_num:1 Load))) (Compare (Name &k:1 Load) (list Lt) (list (Name &min_num:1 Load))))) (/seq (Return (Constant s_no None))) (/seq (If (Compare (Name &max_num:1 Load) (list Eq) (list (Name &min_num:1 Load))) (/seq (Return (IfExp (Compare (Name &max_num:1 Load) (list Eq) (list (Name &k:1 Load))) (Constant s_yes None) (Constant s_no None)))) (/seq (Return (Constant s_yes None))))))) nil None None) (/splice (fn_2 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil))) nil)) &t:0 &k:0 &n:0 &arr:0 &_:0))) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Assign (list (Name &possible:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &subsegment:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_slice (Slice (Name &i:0 Load) (BinOp (Name &j:0 Load) Add (Constant i1 None)) None)) Load))) nil) None) (If (Compare (BinOp (Call (Name g_len Load) (list (_starred_content (Name &subsegment:0 Load))) nil) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None))) (/seq (Assign (list (Name &median:0 Store)) (Subscript (Name &subsegment:0 Load) (_slice_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &subsegment:0 Load))) nil) FloorDiv (Constant i2 None))) Load) None)) (/seq (Assign (list (Name &median:0 Store)) (Subscript (Name &subsegment:0 Load) (_slice_content (BinOp (BinOp (Call (Name g_len Load) (list (_starred_content (Name &subsegment:0 Load))) nil) FloorDiv (Constant i2 None)) Sub (Constant i1 None))) Load) None))) (If (Compare (Name &median:0 Load) (list Eq) (list (Name &k:0 Load))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None) Break) (/seq))) (/seq) None) (If (Name &possible:0 Load) (/seq Break) (/seq))) (/seq) None) (fn_5 (Name &possible:0 Load)))))))) nil)",
            "(Module (/seq (fn_9 (/seq (If (fn_17 &arr:1 &k:1) (/seq (Return (Constant s_yes None))) (/seq)) (For (Name &i:1 Store) (fn_11 &n:1) (/seq (If (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &arr:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Name &k:1 Load)))) nil) (list LtE) (list (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &arr:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) Sub (Name &k:1 Load)))) nil))) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))) &arr:1 &k:1 &n:1 &check_possibility:0) (/splice (fn_2 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &check_possibility:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &arr:0 Load))) nil))) nil)) &t:0 &k:0 &n:0 &arr:0 &_:0))) nil)",
            "(Module (/seq (fn_10 (/seq (Assign (list (Name &unique_sorted:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (Name &arr:1 Load))) nil))) nil) None) (If (BoolOp Or (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &unique_sorted:1 Load))) nil) (list Eq) (list (Constant i1 None))) (fn_16 &k:1 &unique_sorted:1) (BoolOp And (list (Compare (Name &k:1 Load) (list In) (list (Name &unique_sorted:1 Load))) (BoolOp Or (list (Compare (BinOp (Subscript (Name &unique_sorted:1 Load) (_slice_content (BinOp (Call (Attribute (Name &unique_sorted:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) Sub (Constant i1 None))) Load) Add (Constant i1 None)) (list Eq) (list (Name &k:1 Load))) (Compare (BinOp (Subscript (Name &unique_sorted:1 Load) (_slice_content (BinOp (Call (Attribute (Name &unique_sorted:1 Load) s_index Load) (list (_starred_content (Name &k:1 Load))) nil) Add (Constant i1 None))) Load) Sub (Constant i1 None)) (list Eq) (list (Name &k:1 Load))))))))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Constant s_no None))) nil))))) &results:1 &i:1 &queries:1 &k:1 &n:1 &arr:1 &t:1 &can_achieve_uniform_sequence:0) (Assign (list (Name &t:0 Store)) (Constant i5 None) None) (Assign (list (Name &queries:0 Store)) (List (list (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i1 None))) Load))) Load)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i6 None))) Load)) (_starred_content (List (list (_starred_content (Constant i6 None))) Load))) Load)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i2 None))) Load)) (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) Load)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (List (list (_starred_content (Constant i3 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load))) Load)) (_starred_content (List (list (_starred_content (Tuple (list (_starred_content (Constant i10 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (fn_14))) Load))) Load) None) (Assign (list (Name &results:0 Store)) (Call (Name &can_achieve_uniform_sequence:0 Load) (list (_starred_content (Name &t:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (For (Name &res:0 Store) (Name &results:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (If (Compare (Name &k:0 Load) (list In) (list (Name &a:0 Load))) (/seq (Assign (list (Name &count:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Name &k:0 Load))) nil) None) (If (Compare (Name &count:0 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_yes None))) nil))) (/seq (Assign (list (Name &can:0 Store)) (Constant False None) None) (fn_3 (/seq (Assign (list (Name &can:0 Store)) (Constant True None) None) Break) &k:0 &i:0 &a:0 &n:0) (fn_5 (Name &can:0 Load))))) (/seq (fn_18))))))) nil)",
            "(Module (/seq (FunctionDef &is_possible:0 (arguments nil (list (arg &n:1 None None) (arg &k:1 None None) (arg &a:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:1 Load) (list In) (list (Name &a:1 Load))) (/seq (Return (Constant s_yes None))) (/seq)) (If (Compare (Name &n:1 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (Constant s_no None))) (/seq)) (Assign (list (Name &max_a:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &a:1 Load))) nil) None) (Assign (list (Name &min_a:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &a:1 Load))) nil) None) (If (BoolOp Or (list (Compare (Name &k:1 Load) (list Lt) (list (Name &min_a:1 Load))) (Compare (Name &k:1 Load) (list Gt) (list (Name &max_a:1 Load))))) (/seq (Return (Constant s_no None))) (/seq)) (If (BoolOp Or (list (Compare (Name &k:1 Load) (list Eq) (list (Name &min_a:1 Load))) (Compare (Name &k:1 Load) (list Eq) (list (Name &max_a:1 Load))))) (/seq (Return (Constant s_yes None))) (/seq)) (For (Name &i:1 Store) (fn_11 &n:1) (/seq (If (BoolOp And (list (Compare (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) (list NotEq) (list (Name &k:1 Load))) (Compare (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (list NotEq) (list (Name &k:1 Load))))) (/seq (Return (Constant s_yes None))) (/seq))) (/seq) None) (Return (Constant s_no None))) nil None None) (/splice (fn_1 &t:0 &k:0 &n:0 &a:0 &_:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &a:0 Load))) nil))) nil)))))) nil)"
        ]
    },
    "453": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Constant i0 None) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name %1 Load))) Load))) Load) None) (While (Name %3 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name %3 Load))) nil) None) ?0 (For (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %6 Store))) Store) (Call (Attribute (Subscript (Name %9 Load) (_slice_content (Name %4 Load)) Load) s_items Load) nil nil) (/seq (Assign (list (Name %7 Store)) (BinOp (Name %5 Load) Add (Name %6 Load)) None) (If (Compare (Name %7 Load) (list Lt) (list (Subscript (Name %2 Load) (_slice_content (Name %8 Load)) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %8 Load)) Store)) (Name %7 Load) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name %3 Load)) (_starred_content (Tuple (list (_starred_content (Name %7 Load)) (_starred_content (Name %8 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %2 Load)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) ?0 (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %2 Load) nil nil))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (If (Compare (Name %3 Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %4 Store))) Store) (Subscript (Name %8 Load) (_slice_content (Name %1 Load)) Load) (/seq (Assign (list (Name %5 Store)) (BinOp (Name %3 Load) Add (Name %4 Load)) None) (If (Compare (Name %5 Load) (list Lt) (list (Subscript (Name %2 Load) (_slice_content (Name %6 Load)) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %6 Load)) Store)) (Name %5 Load) None) (Expr (Call #0 (list (_starred_content (Name %7 Load)) (_starred_content (Tuple (list (_starred_content (Name %5 Load)) (_starred_content (Name %6 Load))) Load))) nil))) (/seq))) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult #0) None) (Assign (list (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Store)) (Constant i0 None) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name %2 Load))) Load))) Load) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) #0 (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) ?0 (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (fn_2) None) (Assign (list (Name %5 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_2))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %7 None None) (arg %6 None None) (arg %5 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_dict Load))) nil) None) (For (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store) (Name %5 Load) (/seq (Assign (list (Subscript (Subscript (Name %1 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (Name %3 Load)) Store)) (Name %2 Load) None) (Assign (list (Subscript (Subscript (Name %1 Load) (_slice_content (Name %3 Load)) Load) (_slice_content (Name %4 Load)) Store)) (Name %2 Load) None)) (/seq) None) ?0) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (fn_2) None) (Assign (list (Name %3 Store)) #0 None) (For (Name %7 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (fn_2) None) (Assign (list (Subscript (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load) (_slice_content (Name %5 Load)) Store)) (Name %4 Load) None) (Assign (list (Subscript (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (_slice_content (Name %6 Load)) Store)) (Name %4 Load) None)) (/seq) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %12 (arguments nil (list (arg %1 None None) (arg %11 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant False None))) Load) Mult (Name %2 Load)) None) (Assign (list (Name %4 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (Name %2 Load)) None) (/splice (fn_1 %11 %4 %10 %5 %9 %8 %7 %6 %1 (/choiceseq (If (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %5 Load)) Store)) (Constant True None) None))))) nil None None)",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %3 Load)) (_starred_content (Name %1 Load))) Load))) nil)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %11 (arguments nil (list (arg %1 None None) (arg %10 None None)) None nil nil None nil) (/seq (Assign (list (Name %3 Store)) (DictComp (Name %2 Load) (Call (Name g_float Load) (list (_starred_content #0)) nil) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))) None) (/splice (fn_1 %10 %3 %9 %4 %5 %8 %7 %6 %1 (/choiceseq (If (Compare (Name %5 Load) (list Gt) (list (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load))) (/seq Continue) (/seq)))))) nil None None)",
                "sym_arity": 11,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (While (Name %1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name %1 Load))) nil) None) ?0 (For (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %4 Store))) Store) (Subscript (Name %7 Load) (_slice_content (Name %2 Load)) Load) (/seq (If (Compare (BinOp (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load) Add (Name %4 Load)) (list Lt) (list (Subscript (Name %5 Load) (_slice_content (Name %6 Load)) Load))) (/seq (Assign (list (Subscript (Name %5 Load) (_slice_content (Name %6 Load)) Store)) (BinOp (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load) Add (Name %4 Load)) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name %1 Load)) (_starred_content (Tuple (list (_starred_content (Subscript (Name %5 Load) (_slice_content (Name %6 Load)) Load)) (_starred_content (Name %6 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %5 Load)))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content #0)) nil))) nil))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %11 (arguments nil (list (arg %10 None None) (arg %3 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (DictComp (Name %1 Load) (Call (Name g_float Load) (list (_starred_content (Constant s_infinity None))) nil) (list (comprehension (Name %1 Store) #0 nil i0))) None) (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store)) (Constant i0 None) None) (Assign (list (Name %4 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name %3 Load))) Load))) Load) None) (While (Compare (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (_starred_content (Name %4 Load))) nil) None) (If (Compare (Name %6 Load) (list Gt) (list (Subscript (Name %2 Load) (_slice_content (Name %5 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name %9 Store)) (_starred_content (Name %7 Store))) Store) (Call (Attribute (Subscript (Name %10 Load) (_slice_content (Name %5 Load)) Load) s_items Load) nil nil) (/seq (Assign (list (Name %8 Store)) (BinOp (Name %6 Load) Add (Name %7 Load)) None) (If (Compare (Name %8 Load) (list Lt) (list (Subscript (Name %2 Load) (_slice_content (Name %9 Load)) Load))) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %9 Load)) Store)) (Name %8 Load) None) (Expr (Call (Attribute (Name g_heapq Load) s_heappush Load) (list (_starred_content (Name %4 Load)) (_starred_content (Tuple (list (_starred_content (Name %8 Load)) (_starred_content (Name %9 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name %2 Load))) nil None None)",
                "sym_arity": 11,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Subscript (Subscript (Name %4 Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Store)) (Name %1 Load) None) (Assign (list (Subscript (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (_slice_content (BinOp (Name %3 Load) Sub (Constant i1 None))) Store)) (Name %1 Load) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (fn_2) None) (Assign (list (Name %3 Store)) #0 None) (For (Name %7 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store))) Store)) (fn_2) None) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %6 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %5 Load) Sub (Constant i1 None))) (_starred_content (Name %4 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (BinOp (Name %5 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %6 Load) Sub (Constant i1 None))) (_starred_content (Name %4 Load))) Load))) nil))) (/seq) None) (Assign (list (Name %8 Store)) (List nil Load) None) (For (Name %9 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) (/seq (Assign (list (Name %11 Store)) (Call (Name %10 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %9 Load))) nil) None) (Assign (list (Name %13 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name %11 Load))) nil) Mod (Name %12 Load)) None) (Expr (Call (Attribute (Name %8 Load) s_append Load) (list (_starred_content (Name %13 Load))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name %8 Load) Load))) nil)))",
                "sym_arity": 13,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (ListComp (Dict nil nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) #0 (Assign (list (Name %4 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %1 Load)) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Name %7 Store)) (Call (Name %6 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %5 Load))) nil) None) (Assign (list (Subscript (Name %4 Load) (_slice_content (Name %5 Load)) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name %7 Load))) nil) Mod (Name %8 Load)) None)) (/seq) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) ?0 (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Tuple (list (_starred_content (Constant i5 None)) (_starred_content (Constant i5 None))) Load) None) (Assign (list (Name %4 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i1 None)) (_starred_content (Constant i4 None)) (_starred_content (Constant i8 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i12 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i4 None))) Load)) (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i2 None))) Load))) Load) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) #0 None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content #0)) nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %1 Load)) None) (For (Name %3 Store) (fn_17 %1) #0 (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name %2 Load) Load))) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content #0)) nil) Mod (Name %1 Load)) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (List nil Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call #0 nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (Assign (list (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Name %1 Load)) Store)) (Constant i0 None) None)) (/seq) None) (For (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %5 Store)) (_starred_content (Name %6 Store))) Store) (Name %7 Load) (/seq (/splice (fn_16 %6 %5 %4 %2))) (/seq) None) (For (Name %9 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) (/seq #0) (/seq) None)) (/seq) None)) (/seq) None) (Return (Name %2 Load)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (fn_2) None) ?0 (For (Name %7 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %5 Store)) (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (fn_2) None) (/splice (fn_11 %3 %4 %5 %6))) (/seq) None))",
                "sym_arity": 7,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(BinOp (Call (Name g_sum Load) (list (_starred_content (Call (Attribute (Name %2 Load) s_values Load) nil nil))) nil) Mod (Name %1 Load))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content #0)) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_20 &MOD:0 &m:0 &n:0 &tunnels:0 (/choiceseq (FunctionDef &calc_danger_levels:0 (arguments nil (list (arg &n:1 None None) (arg &m:1 None None) (arg &tunnels:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (ListComp (List nil Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store)) (_starred_content (Name &w:1 Store))) Store) (Name &tunnels:1 Load) (/seq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (BinOp (Name &u:1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &v:1 Load) Sub (Constant i1 None))) (_starred_content (Name &w:1 Load))) Load))) nil)) (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (BinOp (Name &v:1 Load) Sub (Constant i1 None))) Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name &u:1 Load) Sub (Constant i1 None))) (_starred_content (Name &w:1 Load))) Load))) nil))) (/seq) None) (FunctionDef &dijkstra:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Name &n:1 Load) &dist:2 &start:2 &queue:2)) (/splice (fn_13 &queue:2 &u:2 &d:2 &w:2 &dist:2 &v:2 &graph:1 (/choiceseq (If (Compare (Name &d:2 Load) (list Gt) (list (Subscript (Name &dist:2 Load) (_slice_content (Name &u:2 Load)) Load))) (/seq Continue) (/seq)))))) nil None None) (Assign (list (Name &result:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &distances:1 Store)) (Call (Name &dijkstra:1 Load) (list (_starred_content (Name &i:1 Load))) nil) None) (Assign (list (Subscript (Name &result:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &distances:1 Load))) nil) Mod (Name &MOD:0 Load)) None)) (/seq) None) (Return (Name &result:1 Load))) nil None None)))) (Assign (list (Name &danger_levels:0 Store)) (Call (Name &calc_danger_levels:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (fn_14 (Name &danger_levels:0 Load))) nil)",
            "(Module (/seq (/splice (fn_20 &MOD:0 &M:0 &N:0 &tunnels:0 (/choiceseq (fn_10 &graph:1 &n:1 &visited:1 &distance:1 &current:1 &neighbor:1 &new_dist:1 &weight:1 &dist:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (/splice (fn_19 (For (Tuple (list (_starred_content (Name &A:2 Store)) (_starred_content (Name &B:2 Store)) (_starred_content (Name &L:2 Store))) Store) (Name &tunnels:2 Load) (/seq (/splice (fn_16 &L:2 &B:2 &A:2 &graph:2))) (/seq) None) &N:2 &_:3 &graph:2 &danger_levels:2 &i:2 &dijkstra:0 &distances:2 &MOD:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &danger_levels:2 Load) Load))) nil))) nil None None)))) (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil))) nil)",
            "(Module (/seq (Assign (list (Name &MOD:0 Store)) (fn_26) None) (FunctionDef &floyd_warshall:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dist:1 Store)) (ListComp (ListComp (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) (list (comprehension (Name &_:6 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) (list (comprehension (Name &__:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (/splice (fn_27 (If (Compare (BinOp (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &k:1 Load)) Load) Add (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) (list Lt) (list (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (Assign (list (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (BinOp (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &k:1 Load)) Load) Add (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) None)) (/seq)) &i:1 &dist:1 &n:1 &u:1 &v:1 &w:1 &edges:1 &j:1 &k:1))) nil None None) (FunctionDef &calculate_danger_levels:0 (arguments nil (list (arg &n:2 None None) (arg &edges:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &floyd_warshall:0 Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &edges:2 Load))) nil) None) (Assign (list (Name &danger_levels:2 Store)) (ListComp (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &row:5 Load))) nil) Mod (Name &MOD:0 Load)) (list (comprehension (Name &row:5 Store) (Name &distances:2 Load) nil i0))) None) (Return (Name &danger_levels:2 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (fn_25 (Name g_input Load)) None) (Assign (list (Name &edges:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_25 (Name g_input Load)))) nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:0 Load))) nil) nil i0))) None) (Assign (list (Name &danger_levels:0 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &edges:0 Load))) nil) None) (fn_14 (Name &danger_levels:0 Load))) nil)",
            "(Module (/seq (/splice (fn_7 &mod:0 &M:0 &N:0 &_:3 &tunnels:0 (/choiceseq (fn_10 &graph:1 &n:1 &visited:1 &distance:1 &current:1 &neighbor:1 &new_dist:1 &d:1 &dist:1 &q:1 &start:1 &dijkstra:0) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (/splice (fn_19 (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store) (Name &tunnels:2 Load) (/seq (AugAssign (Name &a:2 Store) Sub (Constant i1 None)) (AugAssign (Name &b:2 Store) Sub (Constant i1 None)) (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &a:2 Load)) Load) (_slice_content (Name &b:2 Load)) Store)) (Name &l:2 Load) None) (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &b:2 Load)) Load) (_slice_content (Name &a:2 Load)) Store)) (Name &l:2 Load) None)) (/seq) None) &N:2 &_:4 &graph:2 &sums:2 &i:2 &dijkstra:0 &distances:2 &mod:0)) (Return (Name &sums:2 Load))) nil None None)))) (Assign (list (Name &result:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &result:0 Load) Load))) nil))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &adj:1 None None) (arg &start:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_len Load) (list (_starred_content (Name &adj:1 Load))) nil) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &current_vertex:1 Store))) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Attribute (Name g_heapq Load) s_heappush Load) &current_vertex:1 &dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &pq:1 &adj:1))) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (fn_18 (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) &m:2 &n:2 &adj:2 &l:2 &v:2 &u:2 &_:2 &danger_levels:2 &i:2 &dijkstra:0 &dists:2 &MOD:0 &danger_level:2) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &read_ints:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_2))) nil None None) (FunctionDef &dijkstra:0 (arguments nil (list (arg &N:1 None None) (arg &graph:1 None None) (arg &start:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &N:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (/splice (fn_13 &pq:1 &u:1 &current_dist:1 &weight:1 &dist:1 &v:1 &graph:1 (/choiceseq (If (Compare (Name &current_dist:1 Load) (list NotEq) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &u:1 Load)) Load))) (/seq Continue) (/seq)))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &N:2 Store)) (_starred_content (Name &M:2 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:2 Store)) (_starred_content (Name &v:2 Store)) (_starred_content (Name &w:2 Store))) Store)) (Call (Name &read_ints:0 Load) nil nil) None) (/splice (fn_11 &w:2 &v:2 &u:2 &graph:2))) (/seq) None) (/splice (fn_6 (/seq (Assign (list (Name &dists:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &N:2 Load)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &start:2 Load))) nil) None) (Assign (list (Subscript (Name &all_dists:2 Load) (_slice_content (Name &start:2 Load)) Store)) (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &dists:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) None)) &N:2 &all_dists:2 &start:2)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (ListComp (BinOp (Name &d:3 Load) Mod (Name &MOD:0 Load)) (list (comprehension (Name &d:3 Store) (Subscript (Name &all_dists:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))) Load))) nil))) nil None None))) nil)",
            "(Module (/seq (Assign (list (Name &MOD:0 Store)) (fn_26) None) (FunctionDef &dijkstra:0 (arguments nil (list (arg &adj:1 None None) (arg &N:1 None None) (arg &start:1 None None)) None nil nil None nil) (/seq (fn_30 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &N:1 &dist:1) (/splice (fn_1 &start:1 &dist:1 &queue:1 &current:1 &d:1 &length:1 &new_d:1 &neighbor:1 &adj:1 (/choiceseq (If (Compare (Name &d:1 Load) (list Gt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &current:1 Load)) Load))) (/seq Continue) (/seq)))))) nil None None) (fn_8 &adj:2 &l:2 &b:2 &a:2 &tunnels:2 &M:2 &N:2 &solve:0 (/choiceseq (Assign (list (Name &result:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:2 Load)) None) (For (Name &start:2 Store) (fn_17 &N:2) (/seq (Assign (list (Name &shortest_paths:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &adj:2 Load)) (_starred_content (Name &N:2 Load)) (_starred_content (Name &start:2 Load))) nil) None) (fn_23 (Subscript (Name &shortest_paths:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) &MOD:0 &start:2 &result:2)) (/seq) None) (Return (Name &result:2 Load)))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_21 (fn_2) &M:0 &N:0 &_:3 &tunnels:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) Load))) nil))) (/seq))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_12 (Constant s_infinity None) &graph:1 &node:3 &distances:1 &current_node:1 &current_distance:1 &neighbor:1 &distance:1 &weight:1 &queue:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (Call (Name g_defaultdict Load) (list (_starred_content (Name g_dict Load))) nil) &m:2 &n:2 &graph:2 &l:2 &b:2 &a:2 &_:2)) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load))) nil) None) (Assign (list (Name &total_time:2 Store)) (fn_29 &MOD:0 &distances:2) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &chamber:2 Load)) Store)) (Name &total_time:2 Load) None)) &n:2 &danger_levels:2 &chamber:2)) (fn_14 (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_12 (Constant s_infinity None) &graph:1 &vertex:3 &distances:1 &current_vertex:1 &current_distance:1 &neighbor:1 &distance:1 &weight:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (DictComp (Name &i:4 Load) (Dict nil nil) (list (comprehension (Name &i:4 Store) (fn_17 &n:2) nil i0))) &m:2 &n:2 &graph:2 &l:2 &b:2 &a:2 &_:2)) (/splice (fn_22 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load))) nil) None) (fn_23 (Call (Attribute (Name &distances:2 Load) s_values Load) nil nil) &MOD:0 &chamber:2 &danger_levels:2)) &n:2 &danger_levels:2 &chamber:2))) nil None None))) nil)",
            "(Module (fn_3 &mod:0 &main:0 (/choiceseq (fn_15 (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &graph:1 Load))) nil) Add (Constant i1 None)))) nil) &vertex:3 &distance:1 &start:1 &pq:1 &current_vertex:1 &current_distance:1 &weight:1 &distance_via_vertex:1 &neighbor:1 &graph:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &m:2 Store))) Store)) (fn_25 (Attribute (Name g_stdin Load) s_readline Load)) None) (Assign (list (Name &graph:2 Store)) (DictComp (Name &i:4 Load) (Dict nil nil) (list (comprehension (Name &i:4 Store) (fn_17 &n:2) nil i0))) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store)) (fn_25 (Attribute (Name g_stdin Load) s_readline Load)) None) (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &a:2 Load)) Load) (_slice_content (Name &b:2 Load)) Store)) (Name &l:2 Load) None) (Assign (list (Subscript (Subscript (Name &graph:2 Load) (_slice_content (Name &b:2 Load)) Load) (_slice_content (Name &a:2 Load)) Store)) (Name &l:2 Load) None)) (/seq) None) (Assign (list (Name &danger_levels:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (fn_17 &n:2) (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (Assign (list (Name &danger_level:2 Store)) (fn_29 &mod:0 &distances:2) None) (Expr (Call (Attribute (Name &danger_levels:2 Load) s_append Load) (list (_starred_content (Name &danger_level:2 Load))) nil))) (/seq) None) (fn_14 (Name &danger_levels:2 Load))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_12 (Constant s_inf None) &graph:1 &node:3 &dist:1 &current_node:1 &current_distance:1 &neighbor:1 &distance:1 &weight:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (Call (Name g_defaultdict Load) (list (_starred_content (Name g_dict Load))) nil) &M:2 &N:2 &graph:2 &L:2 &B:2 &A:2 &_:2)) (/splice (fn_22 (/seq (Assign (list (Name &dist:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (fn_23 (Call (Attribute (Name &dist:2 Load) s_values Load) nil nil) &MOD:0 &i:2 &total_danger:2)) &N:2 &total_danger:2 &i:2))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &floyd_warshall:0 (arguments nil (list (arg &n:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &dist:1 Store)) (ListComp (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (Name &n:1 Load)) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (/splice (fn_27 (Assign (list (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)) (_starred_content (BinOp (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Name &k:1 Load)) Load) Add (Subscript (Subscript (Name &dist:1 Load) (_slice_content (Name &k:1 Load)) Load) (_slice_content (Name &j:1 Load)) Load)))) nil) None) &i:1 &dist:1 &n:1 &u:1 &v:1 &w:1 &edges:1 &j:1 &k:1))) nil None None) (FunctionDef &calculate_danger_levels:0 (arguments nil (list (arg &dist:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &dist:2 Load))) nil) None) (Assign (list (Name &danger_levels:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (If (Compare (Name &i:2 Load) (list NotEq) (list (Name &j:2 Load))) (/seq (AugAssign (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store) Add (Subscript (Subscript (Name &dist:2 Load) (_slice_content (Name &i:2 Load)) Load) (_slice_content (Name &j:2 Load)) Load))) (/seq))) (/seq) None) (AugAssign (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store) Mod (Name &MOD:0 Load))) (/seq) None) (Return (Name &danger_levels:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Import (list (alias &sys:3 None))) (Assign (list (Name &input:3 Store)) (Attribute (Attribute (Name &sys:3 Load) s_stdin Load) s_readline Load) None) (/splice (fn_21 (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:3 Load) nil nil) s_split Load) nil nil))) nil) &m:3 &n:3 &_:5 &edges:3)) (Assign (list (Name &dist:3 Store)) (Call (Name &floyd_warshall:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &edges:3 Load))) nil) None) (Assign (list (Name &danger_levels:3 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &dist:3 Load))) nil) None) (fn_14 (Name &danger_levels:3 Load))) nil None None))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &M:0 &N:0 &_:3 &tunnels:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &edges:1 None None) (arg &start:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (fn_30 (Constant False None) &n:1 &visited:1) (/splice (fn_5 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &distance:1 &start:1 &q:1)) (/splice (fn_13 &q:1 &node:1 &dist:1 &weight:1 &distance:1 &neighbor:1 &edges:1 (/choiceseq (If (Subscript (Name &visited:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &node:1 Load)) Store)) (Constant True None) None))))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &edges:2 Store)) (fn_24 &N:2 &_:4) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store) (Name &tunnels:2 Load) (/seq (/splice (fn_11 &l:2 &b:2 &a:2 &edges:2))) (/seq) None) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &edges:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &N:2 Load))) nil) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &distances:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) Mod (Name &MOD:0 Load)) None)) &N:2 &danger_levels:2 &i:2)) (Return (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None)))) (Assign (list (Name &result:0 Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &result:0 Load) Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &M:0 &N:0 &_:3 &tunnels:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &N:1 None None)) None nil nil None nil) (/seq (fn_30 (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) &N:1 &dist:1) (/splice (fn_1 &start:1 &dist:1 &queue:1 &current_vertex:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &graph:1 (/choiceseq (If (Compare (Name &current_dist:1 Load) (list Gt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load))) (/seq Continue) (/seq)))))) nil None None) (fn_8 &graph:2 &l:2 &b:2 &a:2 &tunnels:2 &M:2 &N:2 &danger_level:0 (/choiceseq (Assign (list (Name &danger_levels:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:2 Load)) None) (For (Name &chamber:2 Store) (fn_17 &N:2) (/seq (Assign (list (Name &shortest_paths:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load)) (_starred_content (Name &N:2 Load))) nil) None) (fn_23 (Subscript (Name &shortest_paths:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) &MOD:0 &chamber:2 &danger_levels:2)) (/seq) None) (Return (Name &danger_levels:2 Load))))))) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &danger_level:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) Load))) nil))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_12 (Constant s_inf None) &graph:1 &v:3 &distance:1 &current_vertex:1 &current_distance:1 &neighbor:1 &distance_candidate:1 &weight:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (Call (Name g_defaultdict Load) (list (_starred_content (Name g_dict Load))) nil) &m:2 &n:2 &graph:2 &l:2 &v:2 &u:2 &_:2)) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load))) nil) None) (For (Name &target:2 Store) (fn_17 &n:2) (/seq (Assign (list (Subscript (Name &total_distance:2 Load) (_slice_content (Name &chamber:2 Load)) Store)) (BinOp (BinOp (Subscript (Name &total_distance:2 Load) (_slice_content (Name &chamber:2 Load)) Load) Add (Subscript (Name &distances:2 Load) (_slice_content (Name &target:2 Load)) Load)) Mod (Name &MOD:0 Load)) None)) (/seq) None)) &n:2 &total_distance:2 &chamber:2)) (fn_14 (Subscript (Name &total_distance:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start_node:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (fn_30 (Constant False None) &n:1 &visited:1) (/splice (fn_5 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &distances:1 &start_node:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &dist:1 Store)) (_starred_content (Name &current_vertex:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &current_vertex:1 Load)) Store)) (Constant True None) None) (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &neighbor:1 Load)) Load)) (/seq (Assign (list (Name &distance:1 Store)) (Subscript (Subscript (Name &graph:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load) (_slice_content (Name &neighbor:1 Load)) Load) None) (If (Compare (Subscript (Name &distances:1 Load) (_slice_content (Name &neighbor:1 Load)) Load) (list Gt) (list (BinOp (Subscript (Name &distances:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load) Add (Name &distance:1 Load)))) (/seq (Assign (list (Subscript (Name &distances:1 Load) (_slice_content (Name &neighbor:1 Load)) Store)) (BinOp (Subscript (Name &distances:1 Load) (_slice_content (Name &current_vertex:1 Load)) Load) Add (Name &distance:1 Load)) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &pq:1 Load)) (_starred_content (Tuple (list (_starred_content (Subscript (Name &distances:1 Load) (_slice_content (Name &neighbor:1 Load)) Load)) (_starred_content (Name &neighbor:1 Load))) Load))) nil))) (/seq))) (/seq))) (/seq) None)) (/seq)) (Return (Subscript (Name &distances:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None) (fn_8 &graph:2 &l:2 &b:2 &a:2 &tunnels:2 &m:2 &n:2 &calc_danger_levels:0 (/choiceseq (Assign (list (Name &danger_levels:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) None) (For (Name &chamber:2 Store) (fn_17 &n:2) (/seq (Assign (list (Name &shortest_distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load)) (_starred_content (Name &n:2 Load))) nil) None) (fn_23 (Name &shortest_distances:2 Load) &MOD:0 &chamber:2 &danger_levels:2)) (/seq) None) (Return (Name &danger_levels:2 Load)))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_21 (fn_2) &m:3 &n:3 &_:4 &tunnels:3)) (Assign (list (Name &danger_levels:3 Store)) (Call (Name &calc_danger_levels:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &m:3 Load)) (_starred_content (Name &tunnels:3 Load))) nil) None) (fn_14 (Name &danger_levels:3 Load))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &node:1 Store))) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Attribute (Name g_heapq Load) s_heappush Load) &node:1 &dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &pq:1 &graph:1))) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_28 &m:2 &n:2 &l:2 &b:2 &a:2 &graph:2 &_:2 (/choiceseq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None)))) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &start:2 Load)) (_starred_content (Name &n:2 Load))) nil) None) (For (Name &end:2 Store) (fn_17 &n:2) (/seq (Assign (list (Subscript (Name &total_dist:2 Load) (_slice_content (Name &start:2 Load)) Store)) (BinOp (BinOp (Subscript (Name &total_dist:2 Load) (_slice_content (Name &start:2 Load)) Load) Add (Subscript (Name &distances:2 Load) (_slice_content (Name &end:2 Load)) Load)) Mod (Name &MOD:0 Load)) None)) (/seq) None)) &n:2 &total_dist:2 &start:2)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Subscript (Name &total_dist:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) Load))) nil))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &adj:1 None None) (arg &source:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &adj:1 Load))) nil) None) (/splice (fn_5 (Name &n:1 Load) &dist:1 &source:1 &queue:1)) (While (Name &queue:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:1 Store)) (_starred_content (Name &u:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &queue:1 Load))) nil) None) (If (Compare (Name &d:1 Load) (list Gt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &u:1 Load)) Load))) (/seq Continue) (/seq)) (For (Tuple (list (_starred_content (Name &v:1 Store)) (_starred_content (Name &w:1 Store))) Store) (Subscript (Name &adj:1 Load) (_slice_content (Name &u:1 Load)) Load) (/seq (If (Compare (BinOp (Name &d:1 Load) Add (Name &w:1 Load)) (list Lt) (list (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Load))) (/seq (Assign (list (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Store)) (BinOp (Name &d:1 Load) Add (Name &w:1 Load)) None) (Expr (Call (Name g_heappush Load) (list (_starred_content (Name &queue:1 Load)) (_starred_content (Tuple (list (_starred_content (Subscript (Name &dist:1 Load) (_slice_content (Name &v:1 Load)) Load)) (_starred_content (Name &v:1 Load))) Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (fn_18 (ListComp (List nil Load) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) nil i0))) &m:2 &n:2 &adj:2 &l:2 &b:2 &a:2 &_:2 &danger_levels:2 &i:2 &dijkstra:0 &dist:2 &MOD:0 &danger_level:2) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &adj:1 None None) (arg &N:1 None None) (arg &start:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &N:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &d:1 Store)) (_starred_content (Name &u:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Name g_heappush Load) &u:1 &dist:1 &d:1 &l:1 &alt:1 &v:1 &pq:1 &adj:1))) (/seq)) (Return (Subscript (Name &dist:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_28 &M:2 &N:2 &L:2 &B:2 &A:2 &adj:2 &_:2 (/choiceseq (Assign (list (Name &adj:2 Store)) (fn_24 &N:2 &_:3) None)))) (/splice (fn_22 (/seq (Assign (list (Name &shortest_distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &adj:2 Load)) (_starred_content (Name &N:2 Load)) (_starred_content (Name &chamber:2 Load))) nil) None) (fn_23 (Name &shortest_distances:2 Load) &MOD:0 &chamber:2 &danger_levels:2)) &N:2 &danger_levels:2 &chamber:2))) nil None None))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &M:0 &N:0 &_:3 &tunnels:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &start:1 None None) (arg &graph:1 None None) (arg &N:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &N:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &current:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Name g_heappush Load) &current:1 &dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &pq:1 &graph:1))) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (fn_24 &N:2 &_:4) None) (For (Tuple (list (_starred_content (Name &A:2 Store)) (_starred_content (Name &B:2 Store)) (_starred_content (Name &L:2 Store))) Store) (Name &tunnels:2 Load) (/seq (/splice (fn_11 &L:2 &B:2 &A:2 &graph:2))) (/seq) None) (Assign (list (Name &dist_from_1:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &graph:2 Load)) (_starred_content (Name &N:2 Load))) nil) None) (/splice (fn_6 (/seq (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &weight:2 Store))) Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &i:2 Load)) Load) (/seq (AugAssign (Subscript (Name &total_distances:2 Load) (_slice_content (Name &i:2 Load)) Store) Add (BinOp (BinOp (BinOp (Subscript (Name &dist_from_1:2 Load) (_slice_content (Name &i:2 Load)) Load) Add (Subscript (Name &dist_from_1:2 Load) (_slice_content (Name &neighbor:2 Load)) Load)) Add (Name &weight:2 Load)) Mod (Name &MOD:0 Load)))) (/seq) None)) &N:2 &total_distances:2 &i:2)) (For (Name &i:2 Store) (fn_17 &N:2) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (Subscript (Name &total_distances:2 Load) (_slice_content (Name &i:2 Load)) Load) FloorDiv (Constant i2 None)) Mod (Name &MOD:0 Load)))) (list (keyword s_end (Constant s-WzMyXQ== None)))))) (/seq) None)) nil None None)))) (Expr (Call (Name &solve:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &min_dist:1 Store)) (DictComp (Name &i:3 Load) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &graph:1 Load))) nil) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Name &min_dist:1 Load) (_slice_content (Name &start:1 Load)) Store)) (Constant i0 None) None) (Assign (list (Name &heap:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i0 None)) (_starred_content (Name &start:1 Load))) Load))) Load) None) (While (Name &heap:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &current_vertex:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &heap:1 Load))) nil) None) (/splice (fn_4 (Name g_heappush Load) &current_vertex:1 &min_dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &heap:1 &graph:1))) (/seq)) (Return (Name &min_dist:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_28 &M:2 &N:2 &L:2 &B:2 &A:2 &graph:2 &_:2 (/choiceseq (Assign (list (Name &graph:2 Store)) (fn_24 &N:2 &_:4) None)))) (/splice (fn_6 (/seq (Assign (list (Name &shortest_paths:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store)) (fn_29 &MOD:0 &shortest_paths:2) None)) &N:2 &danger_levels:2 &i:2)) (fn_14 (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &M:0 &N:0 &_:4 &tunnels:0 (/choiceseq (fn_12 (Constant s_infinity None) &graph:1 &node:3 &distances:1 &current_node:1 &current_distance:1 &neighbor:1 &distance:1 &weight:1 &priority_queue:1 &start:1 &dijkstra:0) (fn_8 &graph:2 &l:2 &b:2 &a:2 &tunnels:2 &M:2 &N:2 &calculate_danger_levels:0 (/choiceseq (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store)) (fn_29 &MOD:0 &distances:2) None)) &N:2 &danger_levels:2 &i:2)) (Return (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))))))) (Assign (list (Name &danger_levels:0 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &danger_levels:0 Load) Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &M:0 &N:0 &_:3 &tunnels:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &current:1 Store))) Store)) (Call (Attribute (Name g_heapq Load) s_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Attribute (Name g_heapq Load) s_heappush Load) &current:1 &dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &pq:1 &graph:1))) (/seq)) (Return (Subscript (Name &dist:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None) (FunctionDef &calculate_danger_levels:0 (arguments nil (list (arg &N:2 None None) (arg &M:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store) (Name &tunnels:2 Load) (/seq (/splice (fn_11 &l:2 &b:2 &a:2 &graph:2))) (/seq) None) (Assign (list (Name &all_distances:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &N:2 Load)) None) (For (Name &i:2 Store) (fn_17 &N:2) (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &N:2 Load))) nil) None) (fn_23 (Name &distances:2 Load) &MOD:0 &i:2 &all_distances:2)) (/seq) None) (Return (Name &all_distances:2 Load))) nil None None)))) (Assign (list (Name &danger_levels:0 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &N:0 Load)) (_starred_content (Name &M:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (fn_14 (Name &danger_levels:0 Load))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-Wzg1LCAxMTUsIDEwMSwgMzIsIDY4LCAxMDUsIDEwNiwgMTA3LCAxMTUsIDExNiwgMTE0LCA5NywgMzksIDExNSwgMzIsIDk3LCAxMDgsIDEwMywgMTExLCAxMTQsIDEwNSwgMTE2LCAxMDQsIDEwOSwgMzIsIDExNiwgMTExLCAzMiwgMTAyLCAxMDUsIDExMCwgMTAwLCAzMiwgMTE1LCAxMDQsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTE1LCAxMTYsIDMyLCAxMTIsIDk3LCAxMTYsIDEwNCwgMTE1LCAzMiwgMTAyLCAxMTQsIDExMSwgMTA5LCAzMiwgMTE1LCAxMTYsIDk3LCAxMTQsIDExNiwgMzIsIDExNiwgMTExLCAzMiwgOTcsIDEwOCwgMTA4LCAzMiwgMTExLCAxMTYsIDEwNCwgMTAxLCAxMTQsIDMyLCAxMTAsIDExMSwgMTAwLCAxMDEsIDExNSwgNDZd None)) (/splice (fn_5 (BinOp (Name &n:1 Load) Add (Constant i1 None)) &dist:1 &start:1 &pq:1)) (While (Name &pq:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &current_dist:1 Store)) (_starred_content (Name &node:1 Store))) Store)) (Call (Name g_heappop Load) (list (_starred_content (Name &pq:1 Load))) nil) None) (/splice (fn_4 (Name g_heappush Load) &node:1 &dist:1 &current_dist:1 &weight:1 &distance:1 &neighbor:1 &pq:1 &graph:1))) (/seq)) (Return (Name &dist:1 Load))) nil None None) (FunctionDef &calculate_danger_levels:0 (arguments nil (list (arg &n:2 None None) (arg &m:2 None None) (arg &tunnels:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store) (Name &tunnels:2 Load) (/seq (/splice (fn_11 &l:2 &b:2 &a:2 &graph:2))) (/seq) None) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &start:2 Load)) (_starred_content (Name &n:2 Load))) nil) None) (For (Name &i:2 Store) (fn_17 &n:2) (/seq (Assign (list (Subscript (Name &all_distances:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (BinOp (Subscript (Name &all_distances:2 Load) (_slice_content (Name &i:2 Load)) Load) Add (Subscript (Name &distances:2 Load) (_slice_content (Name &i:2 Load)) Load)) Mod (Name &MOD:0 Load)) None)) (/seq) None)) &n:2 &all_distances:2 &start:2)) (Return (Subscript (Name &all_distances:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_21 (fn_2) &m:3 &n:3 &_:4 &tunnels:3)) (Assign (list (Name &danger_levels:3 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &m:3 Load)) (_starred_content (Name &tunnels:3 Load))) nil) None) (fn_14 (Name &danger_levels:3 Load))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_12 (Constant s_infinity None) &graph:1 &vertex:3 &distances:1 &current_vertex:1 &current_distance:1 &neighbor:1 &distance:1 &weight:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (DictComp (Name &i:4 Load) (Dict nil nil) (list (comprehension (Name &i:4 Store) (fn_17 &N:2) nil i0))) &M:2 &N:2 &graph:2 &L:2 &B:2 &A:2 &_:2)) (/splice (fn_22 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &chamber:2 Load))) nil) None) (Assign (list (Name &total_distance:2 Store)) (fn_29 &MOD:0 &distances:2) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (BinOp (Name &chamber:2 Load) Sub (Constant i1 None))) Store)) (Name &total_distance:2 Load) None)) &N:2 &danger_levels:2 &chamber:2))) nil None None))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (FunctionDef &dijkstra:0 (arguments nil (list (arg &graph:1 None None) (arg &start:1 None None) (arg &n:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &inf:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_30 (Name &inf:1 Load) &n:1 &distance:1) (/splice (fn_1 &start:1 &distance:1 &pq:1 &current_node:1 &dist:1 &d:1 &new_dist:1 &neighbor:1 &graph:1 (/choiceseq (If (Compare (Subscript (Name &distance:1 Load) (_slice_content (Name &current_node:1 Load)) Load) (list Lt) (list (Name &dist:1 Load))) (/seq Continue) (/seq)))))) nil None None) (fn_8 &graph:2 &l:2 &b:2 &a:2 &tunnels:2 &M:2 &N:2 &calculate_danger_levels:0 (/choiceseq (Assign (list (Name &all_distances:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (fn_17 &N:2) (/seq (Expr (Call (Attribute (Name &all_distances:2 Load) s_append Load) (list (_starred_content (Subscript (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &N:2 Load))) nil) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil))) (/seq) None) (Assign (list (Name &danger_levels:2 Store)) (ListComp (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &distances:4 Load))) nil) Mod (Name &MOD:0 Load)) (list (comprehension (Name &distances:4 Store) (Call (Name g_zip Load) (list (_starred_starred (Starred (Name &all_distances:2 Load) Load))) nil) nil i0))) None) (Return (Name &danger_levels:2 Load)))) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &N:3 Store)) (_starred_content (Name &M:3 Store))) Store)) (fn_2) None) (Assign (list (Name &tunnels:3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_2))) nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &M:3 Load))) nil) nil i0))) None) (Assign (list (Name &danger_levels:3 Store)) (Call (Name &calculate_danger_levels:0 Load) (list (_starred_content (Name &N:3 Load)) (_starred_content (Name &M:3 Load)) (_starred_content (Name &tunnels:3 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &danger_levels:3 Load) Load))) nil))) nil None None))) nil)",
            "(Module (/seq (/splice (fn_7 &MOD:0 &m:0 &n:0 &_:4 &tunnels:0 (/choiceseq (fn_15 (Name &graph:1 Load) &vertex:3 &distances:1 &start_node:1 &pq:1 &current_vertex:1 &current_distance:1 &weight:1 &distance:1 &neighbor:1 &graph:1 &dijkstra:0) (fn_8 &graph:2 &l:2 &b:2 &a:2 &tunnels:2 &m:2 &n:2 &calc_danger_levels:0 (/choiceseq (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (For (Name &j:2 Store) (fn_17 &n:2) (/seq (AugAssign (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store) Add (Subscript (Name &distances:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq) None)) &n:2 &danger_levels:2 &i:2)) (Return (ListComp (BinOp (Name &dl:5 Load) Mod (Name &MOD:0 Load)) (list (comprehension (Name &dl:5 Store) (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))))))))) (Assign (list (Name &danger_levels:0 Store)) (Call (Name &calc_danger_levels:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &m:0 Load)) (_starred_content (Name &tunnels:0 Load))) nil) None) (fn_14 (Name &danger_levels:0 Load))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_10 &graph:1 &n:1 &visited:1 &distance:1 &current:1 &neighbor:1 &new_dist:1 &weight:1 &dist:1 &queue:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:2 Store)) (_starred_content (Name &m:2 Store))) Store)) (fn_2) None) (/splice (fn_19 (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &m:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store)) (_starred_content (Name &l:2 Store))) Store)) (fn_2) None) (/splice (fn_16 &l:2 &b:2 &a:2 &graph:2))) (/seq) None) &n:2 &_:3 &graph:2 &danger_levels:2 &i:2 &dijkstra:0 &distances:2 &MOD:0)) (fn_14 (Name &danger_levels:2 Load))) nil None None))) nil)",
            "(Module (/seq (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_28 &M:1 &N:1 &w:1 &v:1 &u:1 &graph:1 &_:1 (/choiceseq (Assign (list (Name &mod:1 Store)) (fn_26) None) (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None)))) (FunctionDef &bfs:1 (arguments nil (list (arg &start:2 None None)) None nil nil None nil) (/seq (fn_30 (UnaryOp USub (Constant i1 None)) &N:1 &distances:2) (Assign (list (Subscript (Name &distances:2 Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i0 None) None) (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (List (list (_starred_content (Name &start:2 Load))) Load))) nil) None) (While (Name &queue:2 Load) (/seq (Assign (list (Name &current:2 Store)) (Call (Attribute (Name &queue:2 Load) s_popleft Load) nil nil) None) (For (Tuple (list (_starred_content (Name &neighbor:2 Store)) (_starred_content (Name &weight:2 Store))) Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &current:2 Load)) Load) (/seq (If (Compare (Subscript (Name &distances:2 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Assign (list (Subscript (Name &distances:2 Load) (_slice_content (Name &neighbor:2 Load)) Store)) (BinOp (Subscript (Name &distances:2 Load) (_slice_content (Name &current:2 Load)) Load) Add (Name &weight:2 Load)) None) (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Name &neighbor:2 Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Assign (list (Subscript (Name &distances:2 Load) (_slice_content (Name &start:2 Load)) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &distances:2 Load))) nil) Mod (Name &mod:1 Load)) None) (Return (Subscript (Name &distances:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil None None) (Assign (list (Name &result:1 Store)) (Call (Name &bfs:1 Load) (list (_starred_content (Constant i1 None))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &N:1 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &temp_result:1 Store)) (Call (Name &bfs:1 Load) (list (_starred_content (Name &i:1 Load))) nil) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:1 Load))) nil) (/seq (AugAssign (Subscript (Name &result:1 Load) (_slice_content (Name &j:1 Load)) Store) Add (Subscript (Name &temp_result:1 Load) (_slice_content (Name &j:1 Load)) Load)) (AugAssign (Subscript (Name &result:1 Load) (_slice_content (Name &j:1 Load)) Store) Mod (Name &mod:1 Load))) (/seq) None)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &result:1 Load) Load))) nil))) nil None None) (Expr (Call (Attribute (Name g_sys Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (Constant i10 None) Pow (Constant i6 None)))) nil)) (Expr (Call (Attribute (Name g_threading Load) s_stack_size Load) (list (_starred_content (BinOp (Constant i2 None) Pow (Constant i26 None)))) nil)) (Assign (list (Name &thread:0 Store)) (Call (Attribute (Name g_threading Load) s_Thread Load) nil (list (keyword s_target (Name &main:0 Load)))) None) (Expr (Call (Attribute (Name &thread:0 Load) s_start Load) nil nil))) nil)",
            "(Module (fn_3 &MOD:0 &main:0 (/choiceseq (fn_10 &graph:1 &N:1 &visited:1 &distances:1 &node:1 &neighbor:1 &new_dist:1 &weight:1 &dist:1 &pq:1 &start:1 &dijkstra:0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_9 (ListComp (Dict nil nil) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:2 Load) Add (Constant i1 None)))) nil) nil i0))) &M:2 &N:2 &graph:2 &L:2 &B:2 &A:2 &_:2)) (/splice (fn_6 (/seq (Assign (list (Name &distances:2 Store)) (Call (Name &dijkstra:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &i:2 Load))) nil) None) (Assign (list (Subscript (Name &danger_levels:2 Load) (_slice_content (Name &i:2 Load)) Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Subscript (Name &distances:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) Mod (Name &MOD:0 Load)) None)) &N:2 &danger_levels:2 &i:2)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Subscript (Name &danger_levels:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) Load))) nil))) nil None None))) nil)"
        ]
    },
    "460": {
        "abstractions": [
            {
                "body": "(BinOp (Subscript (Subscript (Name %1 Load) (_slice_content #0) Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Subscript (Name %1 Load) (_slice_content #0) Load) (_slice_content (Constant i1 None)) Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(BinOp (Subscript (Subscript (Name %1 Load) (_slice_content #0) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name %1 Load) (_slice_content #0) Load) (_slice_content (Constant i1 None)) Load))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name %4 Load))) nil))) nil))) nil)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub #0)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) ?0 (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name %2 Load))) nil))) nil))) nil)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Attribute (Name %2 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult #0) None) (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult #0) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i3 None) None) (Assign (list (Name %2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i10 None))) (_starred_content (Constant i9 None))) Load)) (_starred_content (Tuple (list (_starred_content (UnaryOp USub (Constant i2 None))) (_starred_content (Constant i3 None))) Load))) Load) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %3 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %5 Load))) nil) (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %4 Load) Sub (Name %3 Load))) (_starred_content (Constant i1 None)) (_starred_content (Name %2 Load))) Load))) nil)) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (BinOp (Name %4 Load) Add (Name %3 Load))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (Name %2 Load))) Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name %1 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg %6 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name %6 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (UnaryOp USub (Subscript (Name %6 Load) (_slice_content (Constant i1 None)) Load)))) Load)))))))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call #0 (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call #0 nil nil))) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) nil))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call #0 (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (Name %1 Load) Sub (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name %2 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Name %3 Load))))) (/seq ?0 (AugAssign (Name %2 Store) Sub (Constant i1 None))) (/seq)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (Call (Name g_sorted Load) (list (_starred_content #0)) (list (keyword s_key (Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content #0)) nil))) nil))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %3 Load)) Load)) (_starred_content (BinOp (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) Add (Constant i1 None)))) nil) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %3 Store)) (fn_1 (Name %2 Load) %1) None) (Assign (list (Name %4 Store)) (BinOp (Name %2 Load) Add (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name %4 Load) (list Lt) (list (Name %5 Load))) (Compare (Subscript (Subscript (Name %1 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name %3 Load))))) (/seq ?0 (Assign (list (Name %3 Store)) (Call (Name g_max Load) (list (_starred_content (Name %3 Load)) (_starred_content (fn_1 (Name %4 Load) %1))) nil) None) (AugAssign (Name %4 Store) Add (Constant i1 None))) (/seq)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) #0 (/seq) None) (Return (Name %2 Load)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None) (Assign (list (Name %3 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name %1 Load)) None) ?0 (Assign (list (Name %5 Store)) (ListComp (BinOp (BinOp (Subscript (Name %2 Load) (_slice_content (Name %4 Load)) Load) Add (Subscript (Name %3 Load) (_slice_content (Name %4 Load)) Load)) Sub (Constant i1 None)) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Return (Name %5 Load)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Name %5 Load) (list Eq) (list (Constant i1 None))) (/seq (For (Name %3 Store) (Name %2 Load) (/seq (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Attribute (Name %2 Load) s_add Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Expr (Call (Attribute (Name %2 Load) s_remove Load) (list (_starred_content (Name %1 Load))) nil))))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(List (list (_starred_content (List (list (_starred_content (Constant i4 None)) (_starred_content (Constant i3 None))) Load)) (_starred_content (List (list (_starred_content (UnaryOp USub (Constant i10 None))) (_starred_content (Constant i9 None))) Load)) (_starred_content (List (list (_starred_content (UnaryOp USub (Constant i2 None))) (_starred_content (Constant i3 None))) Load))) Load)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (BinOp (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load) Sub (Subscript #0 (_slice_content (Constant i0 None)) Load)) (list LtE) (list (Subscript #0 (_slice_content (Constant i1 None)) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (BinOp (Subscript #0 (_slice_content (Constant i0 None)) Load) Sub (Subscript (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (_slice_content (Constant i0 None)) Load)) (list LtE) (list (Subscript #0 (_slice_content (Constant i1 None)) Load)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/splice (fn_5 %7 %4 (/choiceseq (Assign (list (Name %2 Store)) (List nil Load) None) (Assign (list (Name %1 Store)) (List nil Load) None) (For (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %7 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %6 Store)) (_starred_content (Name %5 Store))) Store)) (fn_9) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %6 Load))) nil)) (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %5 Load))) nil))) (/seq) None) (Assign (list (Name %4 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None))))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_5 %2 %4 (/choiceseq (Assign (list (Name %1 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_9))) nil) (list (comprehension (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None))))) (/seq))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) #0 None) (Assign (list (Name %2 Store)) #0 None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &find_exploding_cans:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (fn_18 (Name &cans:1 Load) &x:3 &sorted_cans:1) (/splice (fn_30 (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (Name &n:1 Load)) &left_range:1 &right_range:1)) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &radius:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &sorted_cans:1 Load))) nil) (/seq (Assign (list (Name &left_pos:1 Store)) (BinOp (Name &pos:1 Load) Sub (Name &radius:1 Load)) None) (For (Name &j:1 Store) (fn_4 (Constant i1 None) &i:1) (/seq (If (Compare (Subscript (Subscript (Name &sorted_cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Name &left_pos:1 Load))) (/seq (Assign (list (Subscript (Name &left_range:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &j:1 Load) None) (Assign (list (Name &left_pos:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_pos:1 Load)) (_starred_content (fn_2 (Name &j:1 Load) &sorted_cans:1))) nil) None)) (/seq Break))) (/seq) None)) (/seq) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &radius:1 Store))) Store))) Store) (Call (Name g_reversed Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_enumerate Load) (list (_starred_content (Name &sorted_cans:1 Load))) nil))) nil))) nil) (/seq (Assign (list (Name &right_pos:1 Store)) (BinOp (Name &pos:1 Load) Add (Name &radius:1 Load)) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &sorted_cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &right_pos:1 Load))) (/seq (Assign (list (Subscript (Name &right_range:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &j:1 Load) None) (Assign (list (Name &right_pos:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &right_pos:1 Load)) (_starred_content (fn_1 (Name &j:1 Load) &sorted_cans:1))) nil) None)) (/seq Break))) (/seq) None)) (/seq) None) (Assign (list (Name &exploded_counts:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &left:1 Store)) (_starred_content (Name &right:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &left_range:1 Load)) (_starred_content (Name &right_range:1 Load))) nil) (/seq (If (BoolOp And (list (Compare (Name &left:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (Compare (Name &right:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))))) (/seq (Expr (Call (Attribute (Name &exploded_counts:1 Load) s_append Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Name &left:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Attribute (Name &exploded_counts:1 Load) s_append Load) (list (_starred_content (BinOp (Name &right:1 Load) Add (Constant i1 None)))) nil))) (/seq (If (Compare (Name &right:1 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Attribute (Name &exploded_counts:1 Load) s_append Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Name &left:1 Load)))) nil))) (/seq (Expr (Call (Attribute (Name &exploded_counts:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &right:1 Load) Sub (Name &left:1 Load)) Add (Constant i1 None)))) nil))))))))) (/seq) None) (Assign (list (Name &initial_positions:1 Store)) (DictComp (Name &pos:2 Load) (Name &idx:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &idx:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:2 Store)) (_starred_content (Name &_:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) nil i0))) None) (Assign (list (Name &reordered_counts:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (For (Tuple (list (_starred_content (Name &idx:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &_:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &sorted_cans:1 Load))) nil) (/seq (Assign (list (Name &original_idx:1 Store)) (Subscript (Name &initial_positions:1 Load) (_slice_content (Name &pos:1 Load)) Load) None) (Assign (list (Subscript (Name &reordered_counts:1 Load) (_slice_content (Name &original_idx:1 Load)) Store)) (Subscript (Name &exploded_counts:1 Load) (_slice_content (Name &idx:1 Load)) Load) None)) (/seq) None) (Return (Name &reordered_counts:1 Load))) nil None None) (/splice (fn_8 &n:0 &cans:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &find_exploding_cans:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:3 &cans:1) (/splice (fn_7 (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) &left_reach:1 &right_reach:1)) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &rad:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &pos:1 Load) Sub (Name &rad:1 Load)) None) (Assign (list (Subscript (Name &right_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &pos:1 Load) Add (Name &rad:1 Load)) None)) (/seq) None) (Assign (list (Name &max_left:1 Store)) (Subscript (Name &left_reach:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (Assign (list (Name &max_left:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &max_left:1 Load)) (_starred_content (Subscript (Name &left_reach:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (Assign (list (Subscript (Name &left_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &max_left:1 Load) None) (If (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) Sub (Constant i1 None)))) (/seq (Assign (list (Name &max_left:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &max_left:1 Load)) (_starred_content (fn_2 (BinOp (Name &i:1 Load) Add (Constant i1 None)) &cans:1))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &max_right:1 Store)) (Subscript (Name &right_reach:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (For (Name &i:1 Store) (fn_14 &cans:1) (/seq (Assign (list (Name &max_right:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_right:1 Load)) (_starred_content (Subscript (Name &right_reach:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None) (Assign (list (Subscript (Name &right_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &max_right:1 Load) None) (If (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &max_right:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_right:1 Load)) (_starred_content (fn_1 (BinOp (Name &i:1 Load) Sub (Constant i1 None)) &cans:1))) nil) None)) (/seq))) (/seq) None) (Assign (list (Name &results:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (Assign (list (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Constant i1 None) (list (comprehension (Name &j:4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (list (Compare (Subscript (Name &left_reach:1 Load) (_slice_content (Name &j:4 Load)) Load) (list LtE LtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (Subscript (Name &right_reach:1 Load) (_slice_content (Name &j:4 Load)) Load)))) i0))))) nil) None)) (/seq) None) (Return (Name &results:1 Load))) nil None None) (/splice (fn_3 &n:0 &_:2 &cans:0 &results:0 (/choiceseq (Assign (list (Name &results:0 Store)) (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &left_idx:1 Store)) (_starred_content (Name &right_idx:1 Store))) Store)) (Tuple (list (_starred_content (Dict nil nil)) (_starred_content (Dict nil nil))) Load) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &rad:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (While (BoolOp And (list (Name &stack:1 Load) (Compare (fn_1 (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &cans:1) (list Lt) (list (BinOp (Name &pos:1 Load) Sub (Name &rad:1 Load)))))) (/seq (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))) (/seq)) (Assign (list (Subscript (Name &left_idx:1 Load) (_slice_content (Name &i:1 Load)) Store)) (IfExp (Name &stack:1 Load) (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (UnaryOp USub (Constant i1 None))) None) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (Expr (Call (Attribute (Name &stack:1 Load) s_clear Load) nil nil)) (For (Name &i:1 Store) (fn_14 &cans:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &rad:1 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (While (BoolOp And (list (Name &stack:1 Load) (Compare (fn_2 (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &cans:1) (list Gt) (list (BinOp (Name &pos:1 Load) Add (Name &rad:1 Load)))))) (/seq (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))) (/seq)) (Assign (list (Subscript (Name &right_idx:1 Load) (_slice_content (Name &i:1 Load)) Store)) (IfExp (Name &stack:1 Load) (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil)) None) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (Return (Tuple (list (_starred_content (Name &left_idx:1 Load)) (_starred_content (Name &right_idx:1 Load))) Load))) nil None None) (/splice (fn_16 (/seq (/splice (fn_3 &n:2 &_:5 &cans:2 &answer:2 (/choiceseq (Assign (list (Name &cans_with_indices:2 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:2 Load))) nil))) (list (keyword s_key (Lambda (arguments nil (list (arg &x:6 None None)) None nil nil None nil) (Subscript (Subscript (Name &x:6 Load) (_slice_content (Constant i1 None)) Load) (_slice_content (Constant i0 None)) Load))))) None) (Assign (list (Name &sorted_cans:2 Store)) (ListComp (Name &c:3 Load) (list (comprehension (Tuple (list (_starred_content (Name &_:3 Store)) (_starred_content (Name &c:3 Store))) Store) (Name &cans_with_indices:2 Load) nil i0))) None) (Assign (list (Name &sorted_indices:2 Store)) (ListComp (Name &i:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:4 Store)) (_starred_content (Name &_:4 Store))) Store) (Name &cans_with_indices:2 Load) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &left_idx:2 Store)) (_starred_content (Name &right_idx:2 Store))) Store)) (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &sorted_cans:2 Load))) nil) None) (Assign (list (Name &answer:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:2 Load)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (If (Compare (Subscript (Name &left_idx:2 Load) (_slice_content (Name &i:2 Load)) Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) (/seq (AugAssign (Subscript (Name &answer:2 Load) (_slice_content (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load)) Store) Add (BinOp (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load) Sub (Subscript (Name &sorted_indices:2 Load) (_slice_content (Subscript (Name &left_idx:2 Load) (_slice_content (Name &i:2 Load)) Load)) Load)))) (/seq)) (If (Compare (Subscript (Name &right_idx:2 Load) (_slice_content (Name &i:2 Load)) Load) (list NotEq) (list (Name &n:2 Load))) (/seq (AugAssign (Subscript (Name &answer:2 Load) (_slice_content (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load)) Store) Add (BinOp (Subscript (Name &sorted_indices:2 Load) (_slice_content (Subscript (Name &right_idx:2 Load) (_slice_content (Name &i:2 Load)) Load)) Load) Sub (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load)))) (/seq)) (Assign (list (Subscript (Name &answer:2 Load) (_slice_content (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &answer:2 Load) (_slice_content (Subscript (Name &sorted_indices:2 Load) (_slice_content (Name &i:2 Load)) Load)) Load)) (_starred_content (Constant i1 None))) nil) None)) (/seq) None))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &n:1 None None) (arg &cans:1 None None)) None nil nil None nil) (/seq (/splice (fn_11 &events:1 &i:1 &radius:1 &pos:1 &cans:1 &x:3)) (Assign (list (Name &active:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:1 Load)) None) (For (Tuple (list (_starred_content (Name &pos:1 Store)) (_starred_content (Name &type:1 Store)) (_starred_content (Name &index:1 Store))) Store) (Name &events:1 Load) (/seq (fn_24 &index:1 &active:1 &active_index:1 &answer:1 &type:1)) (/seq) None) (Return (Name &answer:1 Load))) nil None None) (/splice (fn_3 &n:0 &_:2 &cans:0 &answer:0 (/choiceseq (Assign (list (Name &answer:0 Store)) (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &cans:0 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:3 &cans:1) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_7 (Name &n:1 Load) &right_explosion:1 &left_explosion:1)) (Assign (list (Name &max_right:1 Store)) (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &max_right:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_right:1 Load)) (_starred_content (fn_1 (Name &i:1 Load) &cans:1))) nil) None) (Assign (list (Subscript (Name &right_explosion:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &max_right:1 Load) None)) (/seq) None) (Assign (list (Name &max_left:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &i:1 Store) (fn_4 (Constant i1 None) &n:1) (/seq (Assign (list (Name &max_left:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &max_left:1 Load)) (_starred_content (fn_2 (Name &i:1 Load) &cans:1))) nil) None) (Assign (list (Subscript (Name &left_explosion:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &max_left:1 Load) None)) (/seq) None) (/splice (fn_22 (/seq (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list Lt) (list (Name &n:1 Load))) (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Subscript (Name &right_explosion:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &right_explosion:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &right_explosion:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &right_explosion:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil) None) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Subscript (Name &left_explosion:1 Load) (_slice_content (Name &i:1 Load)) Load))))) (/seq (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None)) (Assign (list (Subscript (Name &left_explosion:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &left_explosion:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &left_explosion:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil) None) (AugAssign (Name &j:1 Store) Sub (Constant i1 None))) (/seq))) &n:1 &results:1 &i:1))) nil None None) (/splice (fn_10 (Name g_input Load) &n:0 &_:2 &cans:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:4 &cans:1) (/splice (fn_7 (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) &left_most_reachable:1 &right_most_reachable:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (Assign (list (Subscript (Name &left_most_reachable:1 Load) (_slice_content (Name &i:1 Load)) Store)) (fn_2 (Name &i:1 Load) &cans:1) None) (Assign (list (Subscript (Name &right_most_reachable:1 Load) (_slice_content (Name &i:1 Load)) Store)) (fn_1 (Name &i:1 Load) &cans:1) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (fn_15 (Name g_min Load) &i:1 &left_most_reachable:1) (/seq) None) (For (Name &i:1 Store) (Call (Name g_reversed Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) Sub (Constant i1 None)))) nil))) nil) (fn_12 (Name g_max Load) &i:1 &right_most_reachable:1) (/seq) None) (Assign (list (Name &results:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (Assign (list (Name &left_idx:1 Store)) (Call (Name g_next Load) (list (_starred_content (GeneratorExp (Name &j:2 Load) (list (comprehension (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (list (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:2 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Subscript (Name &left_most_reachable:1 Load) (_slice_content (Name &i:1 Load)) Load)))) i0))))) nil) None) (Assign (list (Name &right_idx:1 Store)) (Call (Name g_next Load) (list (_starred_content (GeneratorExp (Name &j:3 Load) (list (comprehension (Name &j:3 Store) (Call (Name g_reversed Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil))) nil) (list (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:3 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Subscript (Name &right_most_reachable:1 Load) (_slice_content (Name &i:1 Load)) Load)))) i0))))) nil) None) (Assign (list (Name &count:1 Store)) (BinOp (BinOp (Name &right_idx:1 Load) Sub (Name &left_idx:1 Load)) Add (Constant i1 None)) None) (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Name &count:1 Load))) nil))) (/seq) None) (Return (Name &results:1 Load))) nil None None) (/splice (fn_8 &n:0 &cans:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_total_explosions:0 (arguments nil (list (arg &locations:1 None None) (arg &radii:1 None None)) None nil nil None nil) (/seq (fn_18 (ListComp (Tuple (list (_starred_content (Name &loc:2 Load)) (_starred_content (Name &rad:2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &loc:2 Store)) (_starred_content (Name &rad:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &locations:1 Load)) (_starred_content (Name &radii:1 Load))) nil) nil i0))) &x:3 &cans:1) (/splice (fn_30 (BinOp (List (list (_starred_content (Constant None None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil)) &left_nearest:1 &right_nearest:1)) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &location:1 Store)) (_starred_content (Name &radius:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (While (BoolOp And (list (Name &stack:1 Load) (Compare (fn_1 (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &cans:1) (list GtE) (list (BinOp (Name &location:1 Load) Sub (Name &radius:1 Load)))))) (/seq (Assign (list (Subscript (Name &left_nearest:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil) None)) (/seq)) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (fn_14 &cans:1) (/seq (Assign (list (Tuple (list (_starred_content (Name &location:1 Store)) (_starred_content (Name &radius:1 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (While (BoolOp And (list (Name &stack:1 Load) (Compare (fn_2 (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) &cans:1) (list LtE) (list (BinOp (Name &location:1 Load) Add (Name &radius:1 Load)))))) (/seq (Assign (list (Subscript (Name &right_nearest:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil) None)) (/seq)) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (Assign (list (Name &total_explosions:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (Assign (list (Name &left_count:1 Store)) (Constant i0 None) None) (Assign (list (Name &j:1 Store)) (Name &i:1 Load) None) (While (Compare (Name &j:1 Load) (list IsNot) (list (Constant None None))) (/seq (AugAssign (Name &left_count:1 Store) Add (Constant i1 None)) (Assign (list (Name &j:1 Store)) (Subscript (Name &left_nearest:1 Load) (_slice_content (Name &j:1 Load)) Load) None)) (/seq)) (Assign (list (Name &right_count:1 Store)) (Constant i0 None) None) (Assign (list (Name &j:1 Store)) (Name &i:1 Load) None) (While (Compare (Name &j:1 Load) (list IsNot) (list (Constant None None))) (/seq (AugAssign (Name &right_count:1 Store) Add (Constant i1 None)) (Assign (list (Name &j:1 Store)) (Subscript (Name &right_nearest:1 Load) (_slice_content (Name &j:1 Load)) Load) None)) (/seq)) (Expr (Call (Attribute (Name &total_explosions:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &left_count:1 Load) Add (Name &right_count:1 Load)) Sub (Constant i1 None)))) nil))) (/seq) None) (Return (Name &total_explosions:1 Load))) nil None None) (fn_28 &radii:0 &locations:0 &find_total_explosions:0 &explosions:0 &r:0 &x:0 &n:0 &_:0)) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &locations:1 None None) (arg &radii:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &locations:1 Load))) nil) None) (Assign (list (Name &sorted_indices:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil))) (list (keyword s_key (Lambda (arguments nil (list (arg &i:5 None None)) None nil nil None nil) (Subscript (Name &locations:1 Load) (_slice_content (Name &i:5 Load)) Load))))) None) (Assign (list (Name &sorted_locations:1 Store)) (ListComp (Subscript (Name &locations:1 Load) (_slice_content (Name &i:2 Load)) Load) (list (comprehension (Name &i:2 Store) (Name &sorted_indices:1 Load) nil i0))) None) (Assign (list (Name &sorted_radii:1 Store)) (ListComp (Subscript (Name &radii:1 Load) (_slice_content (Name &i:3 Load)) Load) (list (comprehension (Name &i:3 Store) (Name &sorted_indices:1 Load) nil i0))) None) (/splice (fn_7 (Name &n:1 Load) &left_reach:1 &right_reach:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)) None) (Assign (list (Subscript (Name &right_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (fn_15 (Name g_max Load) &i:1 &left_reach:1) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (fn_12 (Name g_min Load) &i:1 &right_reach:1) (/seq) None) (Assign (list (Name &explosions:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &j:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &left_reach:1 Load) (_slice_content (BinOp (Name &j:1 Load) Sub (Constant i1 None))) Load) (list LtE) (list (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)))))) (/seq (AugAssign (Subscript (Name &explosions:1 Load) (_slice_content (Subscript (Name &sorted_indices:1 Load) (_slice_content (Name &i:1 Load)) Load)) Store) Add (Constant i1 None)) (AugAssign (Name &j:1 Store) Sub (Constant i1 None))) (/seq)) (Assign (list (Name &j:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &right_reach:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load) (list GtE) (list (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)))))) (/seq (AugAssign (Subscript (Name &explosions:1 Load) (_slice_content (Subscript (Name &sorted_indices:1 Load) (_slice_content (Name &i:1 Load)) Load)) Store) Add (Constant i1 None)) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &corrected_explosions:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &left_boundary:1 Store)) (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)) None) (Assign (list (Name &right_boundary:1 Store)) (BinOp (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Subscript (Name &sorted_radii:1 Load) (_slice_content (Name &i:1 Load)) Load)) None) (Assign (list (Name &l:1 Store)) (Constant i0 None) None) (Assign (list (Name &r:1 Store)) (Name &i:1 Load) None) (While (Compare (Name &l:1 Load) (list Lt) (list (Name &r:1 Load))) (/seq (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &m:1 Load)) Load) (list Lt) (list (Name &left_boundary:1 Load))) (/seq (Assign (list (Name &l:1 Store)) (BinOp (Name &m:1 Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Name &r:1 Store)) (Name &m:1 Load) None)))) (/seq)) (Assign (list (Name &left_index:1 Store)) (Name &l:1 Load) None) (Assign (list (Name &l:1 Store)) (Name &i:1 Load) None) (Assign (list (Name &r:1 Store)) (BinOp (Name &n:1 Load) Sub (Constant i1 None)) None) (While (Compare (Name &l:1 Load) (list Lt) (list (Name &r:1 Load))) (/seq (Assign (list (Name &m:1 Store)) (BinOp (BinOp (BinOp (Name &l:1 Load) Add (Name &r:1 Load)) Add (Constant i1 None)) FloorDiv (Constant i2 None)) None) (If (Compare (Subscript (Name &sorted_locations:1 Load) (_slice_content (Name &m:1 Load)) Load) (list Gt) (list (Name &right_boundary:1 Load))) (/seq (Assign (list (Name &r:1 Store)) (BinOp (Name &m:1 Load) Sub (Constant i1 None)) None)) (/seq (Assign (list (Name &l:1 Store)) (Name &m:1 Load) None)))) (/seq)) (Assign (list (Name &right_index:1 Store)) (Name &l:1 Load) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &left_index:1 Load)) (_starred_content (BinOp (Name &right_index:1 Load) Add (Constant i1 None)))) nil) (/seq (AugAssign (Subscript (Name &corrected_explosions:1 Load) (_slice_content (Subscript (Name &sorted_indices:1 Load) (_slice_content (Name &j:1 Load)) Load)) Store) Add (Constant i1 None))) (/seq) None)) (/seq) None) (Assign (list (Name &corrected_explosions:1 Store)) (ListComp (BinOp (Name &count:4 Load) Sub (Constant i1 None)) (list (comprehension (Name &count:4 Store) (Name &corrected_explosions:1 Load) nil i0))) None) (Return (Name &corrected_explosions:1 Load))) nil None None) (fn_28 &radii:0 &locations:0 &find_explosions:0 &explosions:0 &r:0 &x:0 &n:0 &_:0)) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_18 (Name &cans:1 Load) &x:4 &sorted_cans:1) (/splice (fn_7 (Call (Name g_len Load) (list (_starred_content (Name &sorted_cans:1 Load))) nil) &left_reach:1 &right_reach:1)) (Assign (list (Name &left_stack:1 Store)) (List nil Load) None) (Assign (list (Name &right_stack:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &sorted_cans:1 Load))) nil))) nil) (/seq (While (BoolOp And (list (Name &left_stack:1 Load) (fn_26 (Subscript (Name &sorted_cans:1 Load) (_slice_content (Subscript (Name &left_stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Load) &i:1 &sorted_cans:1))) (/seq (Assign (list (Subscript (Name &left_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &left_reach:1 Load) (_slice_content (Subscript (Name &left_stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Load) Add (Constant i1 None)) None) (Expr (Call (Attribute (Name &left_stack:1 Load) s_pop Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name &left_stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (For (Name &i:1 Store) (fn_14 &sorted_cans:1) (/seq (While (BoolOp And (list (Name &right_stack:1 Load) (fn_27 (Subscript (Name &sorted_cans:1 Load) (_slice_content (Subscript (Name &right_stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Load) &i:1 &sorted_cans:1))) (/seq (Assign (list (Subscript (Name &right_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &right_reach:1 Load) (_slice_content (Subscript (Name &right_stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Load) Add (Constant i1 None)) None) (Expr (Call (Attribute (Name &right_stack:1 Load) s_pop Load) nil nil))) (/seq)) (Expr (Call (Attribute (Name &right_stack:1 Load) s_append Load) (list (_starred_content (Name &i:1 Load))) nil))) (/seq) None) (Assign (list (Name &results:1 Store)) (ListComp (BinOp (Name &l:3 Load) Add (Name &r:3 Load)) (list (comprehension (Tuple (list (_starred_content (Name &l:3 Store)) (_starred_content (Name &r:3 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &left_reach:1 Load)) (_starred_content (Name &right_reach:1 Load))) nil) nil i0))) None) (Return (Name &results:1 Load))) nil None None) (/splice (fn_5 &n:0 &result:0 (/choiceseq (Assign (list (Name &cans:0 Store)) (ListComp (Call (Name g_tuple Load) (list (_starred_content (fn_9))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &result:0 Store)) (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &find_explosion_chain:0 (arguments nil (list (arg &n:1 None None) (arg &cans:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &cans:1 Load) s_sort Load) nil nil)) (Assign (list (Name &result:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &right_bound:1 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Constant i1 None)))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &r:1 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Subscript (Name &right_bound:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Name &x:1 Load) Add (Name &r:1 Load)) None)) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (If (Compare (Subscript (Name &right_bound:1 Load) (_slice_content (Name &i:1 Load)) Load) (list GtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load))) (fn_12 (Name g_max Load) &i:1 &right_bound:1) (/seq))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (BinOp (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &right_bound:1 Load) (_slice_content (Name &i:1 Load)) Load)) (list GtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (AugAssign (Subscript (Name &result:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq Break))) (/seq) None)) (/seq) None) (Return (Name &result:1 Load))) nil None None) (fn_29 &cans:0 &n:0 &find_explosion_chain:0 &result:0 &_:2)) nil)",
            "(Module (/seq (FunctionDef &find_exploding_cans:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &cans:1 Load) s_sort Load) nil nil)) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (Assign (list (Name &right_most_affected:1 Store)) (ListComp (Name &i:2 Load) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &j:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (While (BoolOp And (list (Compare (Name &j:1 Load) (list Lt) (list (Name &n:1 Load))) (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (fn_1 (Name &i:1 Load) &cans:1))))) (/seq (Assign (list (Subscript (Name &right_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &right_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Name &j:1 Load))) nil) None) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (fn_12 (Name g_max Load) &i:1 &right_most_affected:1) (/seq) None) (Assign (list (Name &left_most_affected:1 Store)) (ListComp (Name &i:3 Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &j:1 Store)) (BinOp (Name &n:1 Load) Sub (Constant i1 None)) None) (For (Name &i:1 Store) (fn_4 (Constant i1 None) &n:1) (/seq (While (BoolOp And (list (Compare (Name &j:1 Load) (list GtE) (list (Constant i0 None))) (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (fn_2 (Name &i:1 Load) &cans:1))))) (/seq (Assign (list (Subscript (Name &left_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &left_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Name &j:1 Load))) nil) None) (AugAssign (Name &j:1 Store) Sub (Constant i1 None))) (/seq))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (fn_15 (Name g_min Load) &i:1 &left_most_affected:1) (/seq) None) (Assign (list (Name &results:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &total_exploded:1 Store)) (BinOp (BinOp (Subscript (Name &right_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &left_most_affected:1 Load) (_slice_content (Name &i:1 Load)) Load)) Add (Constant i1 None)) None) (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (Name &total_exploded:1 Load))) nil))) (/seq) None) (Return (Name &results:1 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Constant i3 None) None) (Assign (list (Name &cans:0 Store)) (fn_25) None) (Assign (list (Name &res:0 Store)) (Call (Name &find_exploding_cans:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &res:0 Load) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (/splice (fn_11 &events:1 &i:1 &r:1 &x:1 &cans:1 &x:3)) (Assign (list (Name &total:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil)) None) (Assign (list (Name &active:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &event:1 Store) (Name &events:1 Load) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:1 Store)) (_starred_content (Name &event_type:1 Store)) (_starred_content (Name &index:1 Store))) Store)) (Name &event:1 Load) None) (fn_24 &index:1 &active:1 &active_index:1 &total:1 &event_type:1)) (/seq) None) (Return (Name &total:1 Load))) nil None None) (/splice (fn_3 &n:0 &_:2 &cans:0 &explosions:0 (/choiceseq (Assign (list (Name &explosions:0 Store)) (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None))))) nil)",
            "(Module (/seq (FunctionDef &explode_worms:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:2 &cans:1) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_7 (Name &n:1 Load) &left_limit:1 &right_limit:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_limit:1 Load) (_slice_content (Name &i:1 Load)) Store)) (fn_2 (Name &i:1 Load) &cans:1) None) (If (Compare (Name &i:1 Load) (list Gt) (list (Constant i0 None))) (fn_15 (Name g_max Load) &i:1 &left_limit:1) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i1 None) &n:1) (/seq (Assign (list (Subscript (Name &right_limit:1 Load) (_slice_content (Name &i:1 Load)) Store)) (fn_1 (Name &i:1 Load) &cans:1) None) (If (Compare (Name &i:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (fn_12 (Name g_min Load) &i:1 &right_limit:1) (/seq))) (/seq) None) (/splice (fn_22 (/seq (For (Name &j:1 Store) (fn_4 (Constant i1 None) &i:1) (/seq (If (Compare (fn_2 (Name &i:1 Load) &cans:1) (list LtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (AugAssign (Subscript (Name &total_exploded:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq Break))) (/seq) None) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (fn_1 (Name &i:1 Load) &cans:1) (list GtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (AugAssign (Subscript (Name &total_exploded:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq Break))) (/seq) None)) &n:1 &total_exploded:1 &i:1))) nil None None) (/splice (fn_8 &n:0 &cans:0)) (Assign (list (Name &total_exploded:0 Store)) (Call (Name &explode_worms:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None) (fn_19 (Name &total_exploded:0 Load))) nil)",
            "(Module (/seq (/splice (fn_3 &n:0 &_:1 &cans:0 &results:0 (/choiceseq (Expr (Call (Attribute (Name &cans:0 Load) s_sort Load) nil nil)) (Assign (list (Name &segments:0 Store)) (ListComp (Tuple (list (_starred_content (BinOp (Name &x:2 Load) Sub (Name &r:2 Load))) (_starred_content (BinOp (Name &x:2 Load) Add (Name &r:2 Load))) (_starred_content (Name &i:2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:0 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &segments:0 Load) s_sort Load) nil nil)) (Assign (list (Name &reachable_ends:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &stack:0 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &start:0 Store)) (_starred_content (Name &end:0 Store)) (_starred_content (Name &i:0 Store))) Store) (Name &segments:0 Load) (/seq (While (BoolOp And (list (Name &stack:0 Load) (Compare (Subscript (Subscript (Name &stack:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) (list Lt) (list (Name &end:0 Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &_:0 Store)) (_starred_content (Name &_:0 Store)) (_starred_content (Name &idx:0 Store))) Store)) (Call (Attribute (Name &stack:0 Load) s_pop Load) nil nil) None) (Assign (list (Name &end:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &end:0 Load)) (_starred_content (Subscript (Name &reachable_ends:0 Load) (_slice_content (Name &idx:0 Load)) Load))) nil) None)) (/seq)) (Assign (list (Subscript (Name &reachable_ends:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Name &end:0 Load) None) (Expr (Call (Attribute (Name &stack:0 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &start:0 Load)) (_starred_content (Name &end:0 Load)) (_starred_content (Name &i:0 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &results:0 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:0 Load)) None) (For (Tuple (list (_starred_content (Name &i:0 Store)) (_starred_content (Tuple (list (_starred_content (Name &start:0 Store)) (_starred_content (Name &end:0 Store)) (_starred_content (Name &idx:0 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &segments:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &next_start:0 Store)) (_starred_content (Name &_:0 Store)) (_starred_content (Name &_:0 Store))) Store)) (Subscript (Name &segments:0 Load) (_slice_content (Name &j:0 Load)) Load) None) (If (Compare (Name &next_start:0 Load) (list LtE) (list (Name &end:0 Load))) (/seq (AugAssign (Subscript (Name &results:0 Load) (_slice_content (Name &idx:0 Load)) Store) Add (Constant i1 None)) (Assign (list (Name &end:0 Store)) (Call (Name g_max Load) (list (_starred_content (Name &end:0 Load)) (_starred_content (Subscript (Name &reachable_ends:0 Load) (_slice_content (Subscript (Subscript (Name &segments:0 Load) (_slice_content (Name &j:0 Load)) Load) (_slice_content (Constant i2 None)) Load)) Load))) nil) None)) (/seq Break))) (/seq) None)) (/seq) None))))) nil)",
            "(Module (/seq (/splice (fn_16 (/seq (/splice (fn_10 (Name g_input Load) &n:1 &_:2 &cans:1)) (fn_6 &x:3 &cans:1) (Assign (list (Name &result:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &total_exploded:1 Store)) (Constant i1 None) None) (Assign (list (Name &left_blast_limit:1 Store)) (fn_2 (Name &i:1 Load) &cans:1) None) (/splice (fn_17 &i:1 &j:1 &left_blast_limit:1 &cans:1 (/choiceseq (AugAssign (Name &total_exploded:1 Store) Add (Constant i1 None)) (Assign (list (Name &left_blast_limit:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_blast_limit:1 Load)) (_starred_content (fn_2 (Name &j:1 Load) &cans:1))) nil) None)))) (/splice (fn_21 &cans:1 &i:1 &right_blast_limit:1 &k:1 &n:1 (/choiceseq (AugAssign (Name &total_exploded:1 Store) Add (Constant i1 None))))) (Assign (list (Subscript (Name &result:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &total_exploded:1 Load) None)) (/seq) None) (fn_19 (Name &result:1 Load))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None) (arg &index:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &left:1 Store)) (_starred_content (Name &right:1 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &index:1 Load)) Load) None) (Assign (list (Name &left_limit:1 Store)) (BinOp (Name &left:1 Load) Sub (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &index:1 Load)) Load) (_slice_content (Constant i1 None)) Load)) None) (Assign (list (Name &right_limit:1 Store)) (BinOp (Name &right:1 Load) Add (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &index:1 Load)) Load) (_slice_content (Constant i1 None)) Load)) None) (Assign (list (Name &reachable:1 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Name &index:1 Load))) Load))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) nil) (/seq (If (Compare (Name &i:1 Load) (list NotEq) (list (Name &index:1 Load))) (/seq (Assign (list (Tuple (list (_starred_content (Name &can_pos:1 Store)) (_starred_content (Name &can_radius:1 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (If (Compare (Name &left_limit:1 Load) (list LtE LtE) (list (Name &can_pos:1 Load) (Name &right_limit:1 Load))) (/seq (Expr (Call (Attribute (Name &reachable:1 Load) s_add Load) (list (_starred_content (Name &i:1 Load))) nil)) (Assign (list (Name &new_left_limit:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_limit:1 Load)) (_starred_content (BinOp (Name &can_pos:1 Load) Sub (Name &can_radius:1 Load)))) nil) None) (Assign (list (Name &new_right_limit:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &right_limit:1 Load)) (_starred_content (BinOp (Name &can_pos:1 Load) Add (Name &can_radius:1 Load)))) nil) None) (If (BoolOp Or (list (Compare (Name &new_left_limit:1 Load) (list NotEq) (list (Name &left_limit:1 Load))) (Compare (Name &new_right_limit:1 Load) (list NotEq) (list (Name &right_limit:1 Load))))) (/seq (Assign (list (Tuple (list (_starred_content (Name &left_limit:1 Store)) (_starred_content (Name &right_limit:1 Store))) Store)) (Tuple (list (_starred_content (Name &new_left_limit:1 Load)) (_starred_content (Name &new_right_limit:1 Load))) Load) None) (Assign (list (Name &reachable:1 Store)) (Call (Attribute (Name &reachable:1 Load) s_union Load) (list (_starred_content (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans:1 Load)) (_starred_content (Name &i:1 Load))) nil))) nil) None)) (/seq))) (/seq))) (/seq))) (/seq) None) (Return (Name &reachable:1 Load))) nil None None) (/splice (fn_16 (/seq (/splice (fn_5 &n:2 &results:2 (/choiceseq (Assign (list (Name &cans:2 Store)) (List nil Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store)) (fn_9) None) (Expr (Call (Attribute (Name &cans:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:2 Load)) (_starred_content (Name &r:2 Load))) Load))) nil))) (/seq) None) (Assign (list (Name &cans_with_distances:2 Store)) (ListComp (List (list (_starred_content (Subscript (Name &cans:2 Load) (_slice_content (Name &i:3 Load)) Load)) (_starred_content (fn_2 (Name &i:3 Load) &cans:2)) (_starred_content (fn_1 (Name &i:3 Load) &cans:2))) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) nil i0))) None) (Assign (list (Name &results:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Expr (Call (Attribute (Name &results:2 Load) s_append Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans_with_distances:2 Load)) (_starred_content (Name &i:2 Load))) nil))) nil))) nil))) (/seq) None))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_exploding_cans:0 (arguments nil (list (arg &n:1 None None) (arg &cans:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &cans:1 Load) s_sort Load) nil nil)) (/splice (fn_23 &n:1 &left_dp:1 &right_dp:1 &i:2 &result:1 (/choiceseq (Assign (list (Name &left_max_range:1 Store)) (BinOp (List (list (_starred_content (UnaryOp USub (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil)))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Subscript (Name &left_max_range:1 Load) (_slice_content (Constant i0 None)) Store)) (fn_1 (Constant i0 None) &cans:1) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &left_dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None) (If (Compare (fn_2 (Name &i:1 Load) &cans:1) (list LtE) (list (Subscript (Name &left_max_range:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq (AugAssign (Subscript (Name &left_dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq)) (Assign (list (Subscript (Name &left_max_range:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &left_max_range:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (_starred_content (fn_1 (Name &i:1 Load) &cans:1))) nil) None)) (/seq) None) (Assign (list (Name &right_max_range:1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Subscript (Name &right_max_range:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store)) (fn_2 (UnaryOp USub (Constant i1 None)) &cans:1) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (Assign (list (Subscript (Name &right_dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &right_dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) None) (If (Compare (fn_1 (Name &i:1 Load) &cans:1) (list GtE) (list (Subscript (Name &right_max_range:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) (/seq (AugAssign (Subscript (Name &right_dp:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq)) (Assign (list (Subscript (Name &right_max_range:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &right_max_range:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)) (_starred_content (fn_2 (Name &i:1 Load) &cans:1))) nil) None)) (/seq) None))))) nil None None) (Assign (list (Name &n:0 Store)) (Constant i3 None) None) (Assign (list (Name &cans:0 Store)) (fn_25) None) (Assign (list (Name &result:0 Store)) (Call (Name &calculate_exploding_cans:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &cans:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &result:0 Load) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &forward_reach:1 Store)) (ListComp (BinOp (Name &x:2 Load) Add (Name &r:2 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store) (Name &cans:1 Load) nil i0))) None) (Assign (list (Name &backward_reach:1 Store)) (ListComp (BinOp (Name &x:3 Load) Sub (Name &r:3 Load)) (list (comprehension (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &r:3 Store))) Store) (Name &cans:1 Load) nil i0))) None) (Assign (list (Name &max_forward_reach:1 Store)) (Call (Attribute (Name &forward_reach:1 Load) s_copy Load) nil nil) None) (Assign (list (Name &max_backward_reach:1 Store)) (Call (Attribute (Name &backward_reach:1 Load) s_copy Load) nil nil) None) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (fn_15 (Name g_max Load) &i:1 &max_forward_reach:1) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (fn_12 (Name g_max Load) &i:1 &max_backward_reach:1) (/seq) None) (Assign (list (Name &results:1 Store)) (List nil Load) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &r:1 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (Assign (list (Name &left_reach:1 Store)) (BinOp (Name &x:1 Load) Sub (Name &r:1 Load)) None) (Assign (list (Name &left_count:1 Store)) (Call (Name g_next Load) (list (_starred_content (GeneratorExp (Name &i:4 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:4 Store)) (_starred_content (Name &reach:4 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Subscript (Name &max_backward_reach:1 Load) (_slice_slice (Slice None (BinOp (Name &i:1 Load) Add (Constant i1 None)) None)) Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load))) nil) (list (Compare (Name &reach:4 Load) (list Lt) (list (Name &left_reach:1 Load)))) i0)))) (_starred_content (Name &i:1 Load))) nil) None) (Assign (list (Name &right_reach:1 Store)) (BinOp (Name &x:1 Load) Add (Name &r:1 Load)) None) (Assign (list (Name &right_count:1 Store)) (Call (Name g_next Load) (list (_starred_content (GeneratorExp (Name &i:5 Load) (list (comprehension (Tuple (list (_starred_content (Name &i:5 Store)) (_starred_content (Name &reach:5 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Subscript (Name &max_forward_reach:1 Load) (_slice_slice (Slice (Name &i:1 Load) None None)) Load))) nil) (list (Compare (Name &reach:5 Load) (list Lt) (list (Name &right_reach:1 Load)))) i0)))) (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &i:1 Load)) Sub (Constant i1 None)))) nil) None) (Expr (Call (Attribute (Name &results:1 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &n:1 Load) Sub (Name &left_count:1 Load)) Sub (Name &right_count:1 Load)))) nil))) (/seq) None) (Return (Name &results:1 Load))) nil None None) (/splice (fn_13 (Name g_input Load) &n:0 &cans:0 &r:0 &x:0 &_:0)) (Expr (Call (Attribute (Name &cans:0 Load) s_sort Load) nil nil)) (Assign (list (Name &result:0 Store)) (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None) (fn_19 (Name &result:0 Load))) nil)",
            "(Module (/seq (FunctionDef &propagate_explosion:0 (arguments nil (list (arg &cans:1 None None) (arg &index:1 None None) (arg &left_range:1 None None) (arg &right_range:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &count:1 Store)) (Constant i1 None) None) (/splice (fn_17 &index:1 &left_index:1 &left_range:1 &cans:1 (/choiceseq (AugAssign (Name &count:1 Store) Add (Constant i1 None)) (Assign (list (Name &left_range:1 Store)) (fn_2 (Name &left_index:1 Load) &cans:1) None)))) (Assign (list (Name &right_index:1 Store)) (BinOp (Name &index:1 Load) Add (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &right_index:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &right_index:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &right_range:1 Load))))) (/seq (AugAssign (Name &count:1 Store) Add (Constant i1 None)) (Assign (list (Name &right_range:1 Store)) (fn_1 (Name &right_index:1 Load) &cans:1) None) (AugAssign (Name &right_index:1 Store) Add (Constant i1 None))) (/seq)) (Return (Name &count:1 Load))) nil None None) (/splice (fn_16 (/seq (/splice (fn_13 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:2 &cans:2 &r:2 &x:2 &_:2)) (fn_6 &can:3 &cans:2) (Assign (list (Name &results:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store)) (Subscript (Name &cans:2 Load) (_slice_content (Name &i:2 Load)) Load) None) (Assign (list (Name &left_range:2 Store)) (BinOp (Name &x:2 Load) Sub (Name &r:2 Load)) None) (Assign (list (Name &right_range:2 Store)) (BinOp (Name &x:2 Load) Add (Name &r:2 Load)) None) (Assign (list (Name &count:2 Store)) (Call (Name &propagate_explosion:0 Load) (list (_starred_content (Name &cans:2 Load)) (_starred_content (Name &i:2 Load)) (_starred_content (Name &left_range:2 Load)) (_starred_content (Name &right_range:2 Load))) nil) None) (Expr (Call (Attribute (Name &results:2 Load) s_append Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &count:2 Load))) nil))) nil))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Name &results:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:4 &cans:1) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_23 &n:1 &left_explosions:1 &right_explosions:1 &i:3 &total_explosions:1 (/choiceseq (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None) (While (Compare (Name &j:1 Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (fn_2 (Name &i:1 Load) &cans:1) (list LtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (fn_20 &j:1 &left_explosions:1 &i:1) Break) (/seq)) (AugAssign (Name &j:1 Store) Sub (Constant i1 None))) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None) (While (Compare (Name &j:1 Load) (list Lt) (list (Name &n:1 Load))) (/seq (If (Compare (fn_1 (Name &i:1 Load) &cans:1) (list GtE) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load))) (/seq (fn_20 &j:1 &right_explosions:1 &i:1) Break) (/seq)) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None))))) nil None None) (/splice (fn_10 (Name g_input Load) &n:0 &_:2 &cans:0)) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &explode:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (fn_18 (Name &cans:1 Load) &x:3 &cans_sorted:1) (/splice (fn_30 (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Name &n:1 Load)) &explode_left:1 &explode_right:1)) (Assign (list (Name &max_range_left:1 Store)) (fn_2 (Constant i0 None) &cans_sorted:1) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (fn_2 (Name &i:1 Load) &cans_sorted:1) (list LtE) (list (Name &max_range_left:1 Load))) (/seq (Assign (list (Subscript (Name &explode_left:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &explode_left:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &explode_left:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Constant i1 None) None))) (Assign (list (Name &max_range_left:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &max_range_left:1 Load)) (_starred_content (fn_2 (Name &i:1 Load) &cans_sorted:1))) nil) None)) (/seq) None) (Assign (list (Name &max_range_right:1 Store)) (fn_1 (BinOp (Name &n:1 Load) Sub (Constant i1 None)) &cans_sorted:1) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (If (Compare (fn_1 (Name &i:1 Load) &cans_sorted:1) (list GtE) (list (Name &max_range_right:1 Load))) (/seq (Assign (list (Subscript (Name &explode_right:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (Subscript (Name &explode_right:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) Add (Constant i1 None)) None)) (/seq (Assign (list (Subscript (Name &explode_right:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Constant i1 None) None))) (Assign (list (Name &max_range_right:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_range_right:1 Load)) (_starred_content (fn_1 (Name &i:1 Load) &cans_sorted:1))) nil) None)) (/seq) None) (Assign (list (Name &results:1 Store)) (Dict nil nil) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &can:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (Assign (list (Name &idx:1 Store)) (Call (Attribute (Name &cans_sorted:1 Load) s_index Load) (list (_starred_content (Name &can:1 Load))) nil) None) (Assign (list (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (BinOp (Subscript (Name &explode_left:1 Load) (_slice_content (Name &idx:1 Load)) Load) Add (Subscript (Name &explode_right:1 Load) (_slice_content (Name &idx:1 Load)) Load)) Sub (Constant i1 None)) None)) (/seq) None) (Assign (list (Name &sorted_results:1 Store)) (ListComp (Subscript (Name &results:1 Load) (_slice_content (Name &i:2 Load)) Load) (list (comprehension (Name &i:2 Store) (Call (Name g_sorted Load) (list (_starred_content (Name &results:1 Load))) nil) nil i0))) None) (Return (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &sorted_results:1 Load))) nil))) nil))) nil None None) (/splice (fn_8 &n:0 &cans:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &explode:0 Load) (list (_starred_content (Name &cans:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_exploded_cans:0 (arguments nil (list (arg &positions:1 None None) (arg &radii:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &candidate_indexes:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &positions:1 Load))) nil))) nil))) nil) None) (Assign (list (Name &exploded_cans:1 Store)) (List nil Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &positions:1 Load))) nil))) nil) (/seq (Assign (list (Name &already_exploded:1 Store)) (Call (Name g_set Load) (list (_starred_content (List (list (_starred_content (Name &i:1 Load))) Load))) nil) None) (Assign (list (Name &explosion_queue:1 Store)) (List (list (_starred_content (Name &i:1 Load))) Load) None) (While (Name &explosion_queue:1 Load) (/seq (Assign (list (Name &current:1 Store)) (Call (Attribute (Name &explosion_queue:1 Load) s_pop Load) (list (_starred_content (Constant i0 None))) nil) None) (For (Name &j:1 Store) (Name &candidate_indexes:1 Load) (/seq (If (BoolOp And (list (Compare (Name &j:1 Load) (list NotIn) (list (Name &already_exploded:1 Load))) (Compare (Call (Name g_abs Load) (list (_starred_content (BinOp (Subscript (Name &positions:1 Load) (_slice_content (Name &j:1 Load)) Load) Sub (Subscript (Name &positions:1 Load) (_slice_content (Name &current:1 Load)) Load)))) nil) (list LtE) (list (Subscript (Name &radii:1 Load) (_slice_content (Name &current:1 Load)) Load))))) (/seq (Expr (Call (Attribute (Name &already_exploded:1 Load) s_add Load) (list (_starred_content (Name &j:1 Load))) nil)) (Expr (Call (Attribute (Name &explosion_queue:1 Load) s_append Load) (list (_starred_content (Name &j:1 Load))) nil))) (/seq))) (/seq) None)) (/seq)) (Expr (Call (Attribute (Name &exploded_cans:1 Load) s_append Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &already_exploded:1 Load))) nil))) nil))) (/seq) None) (Return (Name &exploded_cans:1 Load))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil))) nil) None) (Assign (list (Name &positions:0 Store)) (List nil Load) None) (Assign (list (Name &radii:0 Store)) (List nil Load) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (fn_9) None) (Expr (Call (Attribute (Name &positions:0 Load) s_append Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Attribute (Name &radii:0 Load) s_append Load) (list (_starred_content (Name &r:0 Load))) nil))) (/seq) None) (Assign (list (Name &result:0 Store)) (Call (Name &find_exploded_cans:0 Load) (list (_starred_content (Name &positions:0 Load)) (_starred_content (Name &radii:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &result:0 Load) Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &can:3 &cans:1) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_7 (Name &n:1 Load) &left_explosions:1 &right_explosions:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list GtE) (list (Constant i0 None))) (fn_26 (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) &i:1 &cans:1))) (/seq (fn_20 &j:1 &left_explosions:1 &i:1) (AugAssign (Name &j:1 Store) Sub (Constant i1 None))) (/seq))) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (Assign (list (Name &j:1 Store)) (BinOp (Name &i:1 Load) Add (Constant i1 None)) None) (While (BoolOp And (list (Compare (Name &j:1 Load) (list Lt) (list (Name &n:1 Load))) (fn_27 (Subscript (Name &cans:1 Load) (_slice_content (Name &j:1 Load)) Load) &i:1 &cans:1))) (/seq (fn_20 &j:1 &right_explosions:1 &i:1) (AugAssign (Name &j:1 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &total_explosions:1 Store)) (ListComp (BinOp (BinOp (Constant i1 None) Add (Subscript (Name &left_explosions:1 Load) (_slice_content (Name &i:2 Load)) Load)) Add (Subscript (Name &right_explosions:1 Load) (_slice_content (Name &i:2 Load)) Load)) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Return (Name &total_explosions:1 Load))) nil None None) (/splice (fn_8 &n:0 &cans:0)) (Assign (list (Name &result:0 Store)) (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None) (fn_19 (Name &result:0 Load))) nil)",
            "(Module (/seq (FunctionDef &find_reachable_cans:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &left_bounds:1 Store)) (ListComp (Tuple (list (_starred_content (BinOp (Name &x:2 Load) Sub (Name &r:2 Load))) (_starred_content (Name &i:2 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) nil i0))) None) (Assign (list (Name &right_bounds:1 Store)) (ListComp (Tuple (list (_starred_content (BinOp (Name &x:3 Load) Add (Name &r:3 Load))) (_starred_content (Name &i:3 Load))) Load) (list (comprehension (Tuple (list (_starred_content (Name &i:3 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &r:3 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) nil i0))) None) (Expr (Call (Attribute (Name &left_bounds:1 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &right_bounds:1 Load) s_sort Load) nil nil)) (Assign (list (Name &reachable:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil)) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (For (Name &bound:1 Store) (Name &left_bounds:1 Load) (/seq (While (BoolOp And (list (Name &stack:1 Load) (Compare (Subscript (Subscript (Name &right_bounds:1 Load) (_slice_content (Subscript (Name &stack:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)) Load) (_slice_content (Constant i0 None)) Load) (list Lt) (list (Subscript (Name &bound:1 Load) (_slice_content (Constant i0 None)) Load))))) (/seq (Expr (Call (Attribute (Name &stack:1 Load) s_pop Load) nil nil))) (/seq)) (For (Name &i:1 Store) (Name &stack:1 Load) (/seq (AugAssign (Subscript (Name &reachable:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &reachable:1 Load) (_slice_content (Subscript (Name &bound:1 Load) (_slice_content (Constant i1 None)) Load)) Store) Add (Constant i1 None))) (/seq) None) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Subscript (Name &bound:1 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None) (Return (ListComp (IfExp (Compare (Name &x:4 Load) (list Gt) (list (Constant i0 None))) (Name &x:4 Load) (Constant i1 None)) (list (comprehension (Name &x:4 Store) (Name &reachable:1 Load) nil i0))))) nil None None) (/splice (fn_13 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &cans:0 &r:0 &x:0 &_:0)) (fn_19 (Call (Name &find_reachable_cans:0 Load) (list (_starred_content (Name &cans:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_explosions:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_6 &x:3 &cans:1) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_22 (/seq (/splice (fn_21 &cans:1 &i:1 &right_extent:1 &j:1 &n:1 (/choiceseq))) (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (BinOp (BinOp (Name &j:1 Load) Sub (Name &i:1 Load)) Sub (Constant i1 None))) (Assign (list (Name &left_extent:1 Store)) (fn_2 (Name &i:1 Load) &cans:1) None) (/splice (fn_17 &i:1 &j:1 &left_extent:1 &cans:1 (/choiceseq (Assign (list (Name &left_extent:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_extent:1 Load)) (_starred_content (fn_2 (Name &j:1 Load) &cans:1))) nil) None)))) (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (BinOp (BinOp (Name &i:1 Load) Sub (Name &j:1 Load)) Sub (Constant i1 None)))) &n:1 &results:1 &i:1))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_5 &n:0 &explosions:0 (/choiceseq (Assign (list (Name &cans:0 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (fn_9))) nil) (list (comprehension (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &explosions:0 Store)) (Call (Name &find_explosions:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None))))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_explosion_chain:0 (arguments nil (list (arg &cans:1 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &cans:1 Load) s_sort Load) nil nil)) (Assign (list (Name &n:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil) None) (/splice (fn_7 (Name &n:1 Load) &left_blast:1 &right_blast:1)) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_blast:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &i:1 Load) None) (Assign (list (Subscript (Name &right_blast:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &i:1 Load) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &left_blast:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_max Load) (list (_starred_content (Subscript (Name &left_blast:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &left_blast:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:1 Store) (fn_4 (Constant i2 None) &n:1) (/seq (Assign (list (Subscript (Name &right_blast:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &right_blast:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load)) (_starred_content (Subscript (Name &right_blast:1 Load) (_slice_content (Name &i:1 Load)) Load))) nil) None)) (/seq) None) (Assign (list (Name &result:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &left_i:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &left_i:1 Load) (list Gt) (list (Constant i0 None))) (Compare (fn_1 (BinOp (Name &left_i:1 Load) Sub (Constant i1 None)) &cans:1) (list GtE) (list (fn_2 (Name &i:1 Load) &cans:1))))) (/seq (Assign (list (Name &left_i:1 Store)) (Subscript (Name &left_blast:1 Load) (_slice_content (BinOp (Name &left_i:1 Load) Sub (Constant i1 None))) Load) None)) (/seq)) (Assign (list (Name &right_i:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &right_i:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (Compare (fn_2 (BinOp (Name &right_i:1 Load) Add (Constant i1 None)) &cans:1) (list LtE) (list (fn_1 (Name &i:1 Load) &cans:1))))) (/seq (Assign (list (Name &right_i:1 Store)) (Subscript (Name &right_blast:1 Load) (_slice_content (BinOp (Name &right_i:1 Load) Add (Constant i1 None))) Load) None)) (/seq)) (Assign (list (Subscript (Name &result:1 Load) (_slice_content (Name &i:1 Load)) Store)) (BinOp (BinOp (Name &right_i:1 Load) Sub (Name &left_i:1 Load)) Add (Constant i1 None)) None)) (/seq) None) (Return (Name &result:1 Load))) nil None None) (/splice (fn_3 &n:0 &_:2 &cans:0 &result:0 (/choiceseq (Assign (list (Name &result:0 Store)) (Call (Name &find_explosion_chain:0 Load) (list (_starred_content (Name &cans:0 Load))) nil) None))))) nil)",
            "(Module (/seq (/splice (fn_16 (/seq (/splice (fn_3 &n:1 &_:3 &cans:1 &result:1 (/choiceseq (FunctionDef &explode:1 (arguments nil (list (arg &index:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (Assign (list (Name &stack:2 Store)) (List (list (_starred_content (Name &index:2 Load))) Load) None) (Assign (list (Name &exploded:2 Store)) (Call (Name g_set Load) nil nil) None) (While (Name &stack:2 Load) (/seq (Assign (list (Name &current:2 Store)) (Call (Attribute (Name &stack:2 Load) s_pop Load) nil nil) None) (If (Compare (Name &current:2 Load) (list In) (list (Name &exploded:2 Load))) (/seq Continue) (/seq)) (Expr (Call (Attribute (Name &exploded:2 Load) s_add Load) (list (_starred_content (Name &current:2 Load))) nil)) (AugAssign (Name &count:2 Store) Add (Constant i1 None)) (Assign (list (Tuple (list (_starred_content (Name &x_current:2 Store)) (_starred_content (Name &r_current:2 Store))) Store)) (Subscript (Name &cans:1 Load) (_slice_content (Name &current:2 Load)) Load) None) (For (Tuple (list (_starred_content (Name &i:2 Store)) (_starred_content (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &cans:1 Load))) nil) (/seq (If (Compare (Name &i:2 Load) (list NotIn) (list (Name &exploded:2 Load))) (/seq (If (BoolOp Or (list (Compare (BinOp (Name &x_current:2 Load) Sub (Name &r:2 Load)) (list LtE LtE) (list (Name &x:2 Load) (BinOp (Name &x_current:2 Load) Add (Name &r:2 Load)))) (Compare (BinOp (Name &x:2 Load) Sub (Name &r:2 Load)) (list LtE LtE) (list (Name &x_current:2 Load) (BinOp (Name &x:2 Load) Add (Name &r:2 Load)))))) (/seq (Expr (Call (Attribute (Name &stack:2 Load) s_append Load) (list (_starred_content (Name &i:2 Load))) nil))) (/seq))) (/seq))) (/seq) None)) (/seq)) (Return (Name &count:2 Load))) nil None None) (Assign (list (Name &result:1 Store)) (ListComp (Call (Name &explode:1 Load) (list (_starred_content (Name &i:4 Load))) nil) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_explosions:0 (arguments nil (list (arg &n:1 None None) (arg &cans:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &intervals:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (ListComp (Tuple (list (_starred_content (BinOp (Name &x:3 Load) Sub (Name &r:3 Load))) (_starred_content (BinOp (Name &x:3 Load) Add (Name &r:3 Load)))) Load) (list (comprehension (Tuple (list (_starred_content (Name &x:3 Store)) (_starred_content (Name &r:3 Store))) Store) (Name &cans:1 Load) nil i0))))) nil) None) (Assign (list (Name &max_reach:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:1 Load)) None) (Assign (list (Name &max_cur:1 Store)) (Subscript (Subscript (Name &intervals:1 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i1 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &intervals:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &max_cur:1 Load))) (/seq (Assign (list (Name &max_cur:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_cur:1 Load)) (_starred_content (Subscript (Subscript (Name &intervals:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i1 None)) Load))) nil) None)) (/seq)) (Assign (list (Subscript (Name &max_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &max_cur:1 Load) None)) (/seq) None) (/splice (fn_22 (/seq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name &intervals:1 Load) (_slice_content (Name &j:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Subscript (Name &max_reach:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (AugAssign (Subscript (Name &explosions:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None)) (If (Compare (Subscript (Name &max_reach:1 Load) (_slice_content (Name &j:1 Load)) Load) (list Gt) (list (Subscript (Name &max_reach:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (Assign (list (Subscript (Name &max_reach:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &max_reach:1 Load) (_slice_content (Name &j:1 Load)) Load) None)) (/seq))) (/seq Break))) (/seq) None)) &n:1 &explosions:1 &i:1))) nil None None) (fn_29 &cans:0 &n:0 &calculate_explosions:0 &result:0 &_:2)) nil)",
            "(Module (/seq (FunctionDef &find_reachable:0 (arguments nil (list (arg &cans:1 None None) (arg &index:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &left:1 Store)) (BinOp (Name &index:1 Load) Sub (Constant i1 None)) None) (Assign (list (Name &right:1 Store)) (BinOp (Name &index:1 Load) Add (Constant i1 None)) None) (Assign (list (Name &explodes:1 Store)) (Constant i1 None) None) (Assign (list (Name &left_limit:1 Store)) (fn_2 (Name &index:1 Load) &cans:1) None) (Assign (list (Name &right_limit:1 Store)) (fn_1 (Name &index:1 Load) &cans:1) None) (While (Compare (Name &left:1 Load) (list GtE) (list (Constant i0 None))) (/seq (If (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &left:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list GtE) (list (Name &left_limit:1 Load))) (/seq (AugAssign (Name &explodes:1 Store) Add (Constant i1 None)) (Assign (list (Name &left_limit:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_limit:1 Load)) (_starred_content (fn_2 (Name &left:1 Load) &cans:1))) nil) None) (AugAssign (Name &left:1 Store) Sub (Constant i1 None))) (/seq Break))) (/seq)) (While (Compare (Name &right:1 Load) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &cans:1 Load))) nil))) (/seq (If (Compare (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &right:1 Load)) Load) (_slice_content (Constant i0 None)) Load) (list LtE) (list (Name &right_limit:1 Load))) (/seq (AugAssign (Name &explodes:1 Store) Add (Constant i1 None)) (Assign (list (Name &right_limit:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &right_limit:1 Load)) (_starred_content (fn_1 (Name &right:1 Load) &cans:1))) nil) None) (AugAssign (Name &right:1 Store) Add (Constant i1 None))) (/seq Break))) (/seq)) (Return (Name &explodes:1 Load))) nil None None) (/splice (fn_16 (/seq (/splice (fn_5 &n:2 &result:2 (/choiceseq (Assign (list (Name &cans:2 Store)) (List nil Load) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:2 Store)) (_starred_content (Name &r:2 Store))) Store)) (fn_9) None) (Expr (Call (Attribute (Name &cans:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:2 Load)) (_starred_content (Name &r:2 Load))) Load))) nil))) (/seq) None) (fn_6 &can:3 &cans:2) (Assign (list (Name &result:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:2 Load))) nil) (/seq (Expr (Call (Attribute (Name &result:2 Load) s_append Load) (list (_starred_content (Call (Name &find_reachable:0 Load) (list (_starred_content (Name &cans:2 Load)) (_starred_content (Name &i:2 Load))) nil))) nil))) (/seq) None))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &calculate_exploding_cans:0 (arguments nil (list (arg &n:1 None None) (arg &cans:1 None None)) None nil nil None nil) (/seq (fn_18 (Name &cans:1 Load) &x:3 &cans:1) (/splice (fn_7 (Name &n:1 Load) &left_boundary:1 &right_boundary:1)) (Assign (list (Name &left_most:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (For (Name &i:1 Store) (fn_4 (Constant i1 None) &n:1) (/seq (Assign (list (Name &left_most:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &left_most:1 Load)) (_starred_content (fn_2 (Name &i:1 Load) &cans:1))) nil) None) (Assign (list (Subscript (Name &left_boundary:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &left_most:1 Load) None)) (/seq) None) (Assign (list (Name &right_most:1 Store)) (Call (Name g_float Load) (list (_starred_content (Constant s-WzQ1LCAxMDUsIDExMCwgMTAyXQ== None))) nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &right_most:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &right_most:1 Load)) (_starred_content (fn_1 (Name &i:1 Load) &cans:1))) nil) None) (Assign (list (Subscript (Name &right_boundary:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Name &right_most:1 Load) None)) (/seq) None) (/splice (fn_22 (/seq (Assign (list (Name &left_index:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &left_index:1 Load) (list Gt) (list (Constant i0 None))) (Compare (Subscript (Name &left_boundary:1 Load) (_slice_content (BinOp (Name &left_index:1 Load) Sub (Constant i1 None))) Load) (list Lt) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load))))) (/seq (AugAssign (Name &left_index:1 Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq)) (Assign (list (Name &right_index:1 Store)) (Name &i:1 Load) None) (While (BoolOp And (list (Compare (Name &right_index:1 Load) (list Lt) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) (Compare (Subscript (Name &right_boundary:1 Load) (_slice_content (BinOp (Name &right_index:1 Load) Add (Constant i1 None))) Load) (list Gt) (list (Subscript (Subscript (Name &cans:1 Load) (_slice_content (Name &i:1 Load)) Load) (_slice_content (Constant i0 None)) Load))))) (/seq (AugAssign (Name &right_index:1 Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &results:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Constant i1 None))) (/seq))) &n:1 &results:1 &i:1))) nil None None) (/splice (fn_10 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &n:0 &_:2 &cans:0)) (Assign (list (Name &exploding_cans:0 Store)) (Call (Name &calculate_exploding_cans:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &cans:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &exploding_cans:0 Load) Load))) nil))) nil)"
        ]
    },
    "838": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %4 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %1 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil)) None) (For (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %4 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %1 Load))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Store)) (BinOp (Name %3 Load) Add (Constant i1 None)) None)) (/seq) None) (Return (Name %2 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None)))) nil))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %1 None None)) None nil nil None nil) (/seq (Return (ListComp (Subscript (Name %3 Load) (_slice_content (BinOp (Subscript (Name %1 Load) (_slice_content (Name %2 Load)) Load) Sub (Constant i1 None))) Load) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) nil) nil i0))))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult #0) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) (/seq (Assign (list (Subscript (Name %1 Load) (_slice_content (BinOp (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) Sub (Constant i1 None))) Store)) (BinOp (Name %2 Load) Add (Constant i1 None)) None)) (/seq) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %5 (arguments nil (list (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (/splice (fn_1 %9 %8 %7 %6)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %5 Load) (list (_starred_content (Name %8 Load)) (_starred_content (Name %9 Load)) (_starred_content (Name %7 Load)) (_starred_content (Name %6 Load))) nil))) nil)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %1 None None) (arg %3 None None)) None nil nil None nil) (/seq (Return (ListComp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0))))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(ListComp (Subscript (Name %3 Load) (_slice_content (BinOp (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) Sub (Constant i1 None))) Load) (list (comprehension (Name %1 Store) (Call (Name g_range Load) (list (_starred_content #0)) nil) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (BinOp (Name %5 Load) Mod (Constant i2 None)) (list Eq) (list #0)) (/seq (Assign (list (Name %2 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %4 Load))) nil) None)) (/seq (Assign (list (Name %2 Store)) (Call (Name %3 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil) None)))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name %2 Store) (Name %5 Load) (/seq (Expr (Call (Attribute (Name %1 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name %4 Load) (list (_starred_content (Name %3 Load)) (_starred_content (Name %2 Load))) nil))) nil))) nil)) (Expr (Call (Attribute (Name %1 Load) s_add Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name %4 Load) (list (_starred_content #0) (_starred_content (Name %2 Load))) nil))) nil))) nil))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(ListComp (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load) (list (comprehension (Name %2 Store) (Name %1 Load) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %5 (arguments nil (list (arg %1 None None)) None nil nil None nil) (/seq ?0 (Assign (list (Name %2 Store)) (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) None) (/splice (fn_5 (Name %2 Load) %4 %3 %1)) (Return (Name %4 Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name %1 Load)) None) (For (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %4 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name %5 Load))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (BinOp (Name %4 Load) Sub (Constant i1 None))) Store)) (BinOp (Name %3 Load) Add (Constant i1 None)) None)) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Return (IfExp (Compare (Call (Name g_tuple Load) (list (_starred_content (Name %2 Load))) nil) (list In) (list (Name %1 Load))) (Constant s_YES None) (Constant s_NO None)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (BinOp (Name %1 Load) Mod (Constant i2 None)) (list Eq) (list (Constant i1 None)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (fn_2 &perm:2 &inverse:2 &i:2 &p:2 &inverse_permutation:0 (/choiceseq)) (/splice (fn_6 (/seq (fn_3 &n:1 &p:1) (Assign (list (Name &q_inv:1 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:1 Load))) nil) None) (FunctionDef &apply_permutation:1 (arguments nil (list (arg &perm:3 None None) (arg &q:3 None None)) None nil nil None nil) (/seq (Return (fn_9 (Name &n:1 Load) &i:4 &q:3 &perm:3))) nil None None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (Assign (list (Name &p_q:1 Store)) (Call (Name &apply_permutation:1 Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (Name &q:1 Load))) nil) None) (Assign (list (Name &p_q_inv:1 Store)) (Call (Name &apply_permutation:1 Load) (list (_starred_content (Name &p:1 Load)) (_starred_content (Name &q_inv:1 Load))) nil) None) (If (BoolOp Or (list (Compare (Name &p_q:1 Load) (list Eq) (list (Name &s:1 Load))) (Compare (Name &p_q_inv:1 Load) (list Eq) (list (Name &s:1 Load))))) (/seq (Return (Constant s_YES None))) (/seq)) (Assign (list (Name &p:1 Store)) (Name &p_q:1 Load) None)) (/seq) None) (Return (Constant s_NO None))) &s:1 &q:1 &k:1 &n:1 &can_match_permutation:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse_q:1 &i:1 &qi:1 &inverse_permutation:0 (/choiceseq)) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Return (fn_14 &q:2 &qi:4 &p:2))) nil None None) (/splice (fn_6 (/seq (fn_3 &n:3 &original:3) (Assign (list (Name &inverse_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &q_applied:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &original:3 Load)) (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &inverse_q_applied:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &original:3 Load)) (_starred_content (Name &inverse_q:3 Load))) nil) None) (If (Compare (Name &k:3 Load) (list Eq) (list (Constant i1 None))) (/seq (If (BoolOp Or (list (Compare (Name &s:3 Load) (list Eq) (list (Name &q_applied:3 Load))) (Compare (Name &s:3 Load) (list Eq) (list (Name &inverse_q_applied:3 Load))))) (/seq (Return (Constant s_YES None))) (/seq (Return (Constant s_NO None))))) (/seq)) (If (Compare (Name &s:3 Load) (list Eq) (list (Name &original:3 Load))) (/seq (Return (Constant s_NO None))) (/seq (Return (Constant s_YES None))))) &s:3 &q:3 &k:3 &n:3 &is_masha_permutation_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (/splice (fn_8 (/seq (/splice (fn_1 &k:1 &n:1 &q:1 &s:1)) (fn_2 &permutation:2 &inverse:2 &i:2 &p:2 &get_inverse:1 (/choiceseq)) (fn_7 &permutation:3 &i:4 &target:3 &apply_permutation:1) (fn_3 &n:1 &original_perm:1) (Assign (list (Name &q_inverse:1 Store)) (Call (Name &get_inverse:1 Load) (list (_starred_content (Name &q:1 Load))) nil) None) (Assign (list (Name &possible_perms:1 Store)) (Set (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &original_perm:1 Load))) nil)))) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (/splice (fn_12 (Name &q_inverse:1 Load) &next_possible_perms:1 &p:1 &q:1 &apply_permutation:1 &possible_perms:1)) (Assign (list (Name &possible_perms:1 Store)) (Name &next_possible_perms:1 Load) None)) (/seq) None) (fn_10 (BoolOp And (list (Compare (Call (Name g_tuple Load) (list (_starred_content (Name &s:1 Load))) nil) (list In) (list (Name &possible_perms:1 Load))) (Compare (Call (Name g_tuple Load) (list (_starred_content (Name &s:1 Load))) nil) (list NotEq) (list (Call (Name g_tuple Load) (list (_starred_content (Name &original_perm:1 Load))) nil))))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &invert_permutation:0 (arguments nil (list (arg &q:1 None None)) None nil nil None nil) (/seq (Return (ListComp (BinOp (Call (Attribute (Name &q:1 Load) s_index Load) (list (_starred_content (Name &i:3 Load))) nil) Add (Constant i1 None)) (list (comprehension (Name &i:3 Store) (fn_15 (Call (Name g_len Load) (list (_starred_content (Name &q:1 Load))) nil)) nil i0))))) nil None None) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_1 &k:0 &n:0 &q:0 &s:0)) (Assign (list (Name &q_inv:0 Store)) (Call (Name &invert_permutation:0 Load) (list (_starred_content (Name &q:0 Load))) nil) None) (fn_3 &n:0 &p:0) (Assign (list (Name &possible:0 Store)) (Constant False None) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Name &s:0 Load))) (/seq Break) (/seq)) (Assign (list (Name &p_q:0 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) nil) None) (Assign (list (Name &p_q_inv:0 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q_inv:0 Load))) nil) None) (If (BoolOp And (list (Compare (Name &p_q:0 Load) (list NotEq) (list (Name &s:0 Load))) (Compare (Name &p_q_inv:0 Load) (list NotEq) (list (Name &s:0 Load))))) (/seq (Assign (list (Name &possible:0 Store)) (Constant True None) None)) (/seq)) (Assign (list (Name &p:0 Store)) (IfExp (Compare (Name &p_q:0 Load) (list NotEq) (list (Name &s:0 Load))) (Name &p_q:0 Load) (Name &p_q_inv:0 Load)) None)) (/seq) None) (fn_10 (BoolOp And (list (Compare (Name &p:0 Load) (list Eq) (list (Name &s:0 Load))) (Name &possible:0 Load))))) nil)",
            "(Module (/seq (fn_16 &q:1 &n:1 &i:1 &inv_q:1 &inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_6 (/seq (Assign (list (Name &inv_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (fn_3 &n:3 &cur_permutation:3) (For (Name &i:3 Store) (fn_15 (Name &k:3 Load)) (/seq (fn_11 (Constant i1 None) &inv_q:3 &cur_permutation:3 &apply_permutation:0 &q:3 &i:3)) (/seq) None) (If (Compare (Name &cur_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq)) (fn_3 &n:3 &cur_permutation:3) (For (Name &i:3 Store) (fn_15 (Name &k:3 Load)) (/seq (fn_11 (Constant i0 None) &inv_q:3 &cur_permutation:3 &apply_permutation:0 &q:3 &i:3)) (/seq) None) (Return (IfExp (Compare (Name &cur_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (Constant s_YES None) (Constant s_NO None)))) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &p:1 &inv:1 &i:1 &pi:1 &inverse_permutation:0 (/choiceseq)) (/splice (fn_1 &k:0 &n:0 &q:0 &s:0)) (fn_3 &n:0 &p:0) (Assign (list (Name &q_inv:0 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:0 Load))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:0 Load))) nil) (/seq (If (Compare (Name &p:0 Load) (list Eq) (list (Name &s:0 Load))) (/seq (fn_18) Break) (/seq)) (Assign (list (Name &p_q:0 Store)) (fn_14 &q:0 &i:2 &p:0) None) (Assign (list (Name &p_q_inv:0 Store)) (fn_14 &q_inv:0 &i:3 &p:0) None) (If (BoolOp Or (list (Compare (Name &s:0 Load) (list Eq) (list (Name &p_q:0 Load))) (Compare (Name &s:0 Load) (list Eq) (list (Name &p_q_inv:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) Break) (/seq)) (Assign (list (Name &p:0 Store)) (Name &p_q:0 Load) None)) (/seq (fn_18)) None)) nil)",
            "(Module (/seq (fn_2 &permutation:1 &inverse:1 &i:1 &p:1 &inverse_permutation:0 (/choiceseq)) (fn_7 &permutation:2 &p:4 &sequence:2 &apply_permutation:0) (/splice (fn_6 (/seq (fn_3 &n:3 &original:3) (Assign (list (Name &q_inverse:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &current:3 Store)) (Name &original:3 Load) None) (Assign (list (Name &found_original:3 Store)) (Constant False None) None) (Assign (list (Name &found_inverse:3 Store)) (Constant False None) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (Compare (Name &current:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (Assign (list (Name &current:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (IfExp (UnaryOp Not (Name &found_original:3 Load)) (Name &q:3 Load) (Name &q_inverse:3 Load))) (_starred_content (Name &current:3 Load))) nil) None) (If (Compare (Name &current:3 Load) (list Eq) (list (Name &original:3 Load))) (/seq (Assign (list (Name &found_original:3 Store)) (Constant True None) None)) (/seq)) (If (Compare (Name &current:3 Load) (list Eq) (list (Name &q:3 Load))) (/seq (Assign (list (Name &found_inverse:3 Store)) (Constant True None) None)) (/seq))) (/seq) None) (If (Compare (Name &current:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq)) (Return (Constant s_NO None))) &s:3 &q:3 &k:3 &n:3 &check_possibility:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_16 &q:1 &n:1 &i:1 &inverse_q:1 &find_inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:5 &p:2 &apply_permutation:0) (FunctionDef &is_possible:0 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None) (arg &q:3 None None) (arg &s:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &inverse_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (fn_3 &n:3 &original_permutation:3) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i2 None) Pow (Name &k:3 Load)))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Subscript (Name &original_permutation:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (BinOp (BinOp (Name &i:3 Load) RShift (Name &j:3 Load)) BitAnd (Constant i1 None)) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_permutation:3 Load)) (_starred_content (Name &q:3 Load))) nil) None)) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_permutation:3 Load)) (_starred_content (Name &inverse_q:3 Load))) nil) None)))) (/seq) None) (If (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Assign (list (Name &temp_perm:3 Store)) (Subscript (Name &original_permutation:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (Assign (list (Name &flip:3 Store)) (BinOp (BinOp (Name &i:3 Load) RShift (Name &j:3 Load)) BitAnd (Constant i1 None)) None) (If (Name &flip:3 Load) (/seq (Assign (list (Name &temp_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &temp_perm:3 Load)) (_starred_content (Name &q:3 Load))) nil) None)) (/seq (Assign (list (Name &temp_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &temp_perm:3 Load)) (_starred_content (Name &inverse_q:3 Load))) nil) None))) (If (Compare (Name &temp_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant False None))) (/seq))) (/seq) None) (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (/splice (fn_8 (/seq (/splice (fn_1 &k:4 &n:4 &q:4 &s:4)) (fn_10 (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load)) (_starred_content (Name &q:4 Load)) (_starred_content (Name &s:4 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_16 &q:1 &n:1 &i:1 &q_inverse:1 &find_inverse_permutation:0 (/choiceseq)) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Return (fn_9 (Call (Name g_len Load) (list (_starred_content (Name &p:2 Load))) nil) &i:5 &q:2 &p:2))) nil None None) (FunctionDef &can_reach:0 (arguments nil (list (arg &s:3 None None) (arg &q:3 None None) (arg &q_inverse:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (If (Compare (Name &k:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Compare (Name &s:3 Load) (list Eq) (list (Call (Name g_list Load) (list (_starred_content (fn_15 (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil)))) nil))))) (/seq (If (Compare (Name &k:3 Load) (list Eq) (list (Constant i1 None))) (/seq (Return (BoolOp Or (list (Compare (Name &s:3 Load) (list Eq) (list (Name &q:3 Load))) (Compare (Name &s:3 Load) (list Eq) (list (Name &q_inverse:3 Load))))))) (/seq (Return (Constant True None))))))) nil None None) (/splice (fn_8 (/seq (/splice (fn_1 &k:4 &n:4 &q:4 &s:4)) (Assign (list (Name &q_inverse:4 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:4 Load))) nil) None) (If (Compare (Name &s:4 Load) (list Eq) (list (Call (Name g_list Load) (list (_starred_content (fn_15 (Name &n:4 Load)))) nil))) (/seq (fn_18)) (/seq (fn_10 (Call (Name &can_reach:0 Load) (list (_starred_content (Name &s:4 Load)) (_starred_content (Name &q:4 Load)) (_starred_content (Name &q_inverse:4 Load)) (_starred_content (Name &k:4 Load))) nil))))) &main:0))) nil)",
            "(Module (/seq (fn_16 &q:1 &n:1 &i:1 &inverse:1 &inverse_permutation:0 (/choiceseq (Expr (Constant s-WzY3LCAxMTEsIDEwOSwgMTEyLCAxMTcsIDExNiwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwNSwgMTEwLCAxMTgsIDEwMSwgMTE0LCAxMTUsIDEwMSwgMzIsIDExMSwgMTAyLCAzMiwgOTcsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCA0Nl0= None)))) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMTIsIDExMiwgMTA4LCAxMjEsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEzLCAzMiwgMTE2LCAxMTEsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEyLCA0Nl0= None)) (Return (fn_9 (Call (Name g_len Load) (list (_starred_content (Name &p:2 Load))) nil) &i:4 &q:2 &p:2))) nil None None) (/splice (fn_6 (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjcsIDEwNCwgMTAxLCA5OSwgMTA3LCAzMiwgMTA1LCAxMDIsIDMyLCAxMDUsIDExNiwgMzksIDExNSwgMzIsIDExMiwgMTExLCAxMTUsIDExNSwgMTA1LCA5OCwgMTA4LCAxMDEsIDMyLCAxMTYsIDEwNCwgOTcsIDExNiwgMzIsIDk3LCAxMDIsIDExNiwgMTAxLCAxMTQsIDMyLCAxMDcsIDMyLCAxMDksIDExMSwgMTE4LCAxMDEsIDExNSwgNDQsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgOTgsIDExMSwgOTcsIDExNCwgMTAwLCAzMiwgOTksIDExMSwgMTEwLCAxMTYsIDk3LCAxMDUsIDExMCwgMTAxLCAxMDAsIDMyLCA3NywgOTcsIDExNSwgMTA0LCA5NywgMzksIDExNSwgMzIsIDExMiwgMTAxLCAxMTQsIDEwOSwgMTE3LCAxMTYsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDMyLCAxMTUsIDQ0LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNywgMTEwLCAxMTEsIDExOSwgMTA1LCAxMTAsIDEwMywgMzIsIDExNiwgMTA0LCA5NywgMTE2LCAzMiwgNzcsIDk3LCAxMTUsIDEwNCwgOTcsIDM5LCAxMTUsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEwLCAxMDEsIDExOCwgMTAxLCAxMTQsIDMyLCAxMTEsIDk5LCA5OSwgMTE3LCAxMTQsIDExNCwgMTAxLCAxMDAsIDMyLCAxMTEsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCA5OCwgMTExLCA5NywgMTE0LCAxMDAsIDMyLCA5OCwgMTAxLCAxMDIsIDExMSwgMTE0LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA3LCA0NSwgMTE2LCAxMDQsIDMyLCAxMDksIDExMSwgMTE4LCAxMDEsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzJd None)) (fn_3 &n:3 &current_permutation:3) (Assign (list (Name &q_inverse:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (fn_11 (Constant i0 None) &q_inverse:3 &current_permutation:3 &apply_permutation:0 &q:3 &k:3) (AugAssign (Name &k:3 Store) Sub (Constant i1 None))) (/seq) None) (Return (IfExp (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (Constant s_YES None) (Constant s_NO None)))) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (/splice (fn_8 (/seq (/splice (fn_1 &k:1 &n:1 &q:1 &s:1)) (/splice (fn_17 &n:1 &inv_q:1 &i:1 &v:1 &q:1)) (fn_7 &perm:2 &i:3 &src:2 &apply_permutation:1) (fn_3 &n:1 &current:1) (Assign (list (Name &possible:1 Store)) (Compare (Name &current:1 Load) (list NotEq) (list (Name &s:1 Load))) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (If (fn_13 &_:1) (/seq (Assign (list (Name &current:1 Store)) (Call (Name &apply_permutation:1 Load) (list (_starred_content (Name &q:1 Load)) (_starred_content (Name &current:1 Load))) nil) None)) (/seq (Assign (list (Name &current:1 Store)) (Call (Name &apply_permutation:1 Load) (list (_starred_content (Name &inv_q:1 Load)) (_starred_content (Name &current:1 Load))) nil) None))) (If (BoolOp And (list (Compare (Name &current:1 Load) (list Eq) (list (Name &s:1 Load))) (Compare (Name &_:1 Load) (list NotEq) (list (BinOp (Name &k:1 Load) Sub (Constant i1 None)))))) (/seq (Assign (list (Name &possible:1 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (BoolOp And (list (Name &possible:1 Load) (Compare (Name &current:1 Load) (list Eq) (list (Name &s:1 Load))))) (Constant s_YES None) (Constant s_NO None)))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_2 &p:1 &inverse:1 &i:1 &pi:1 &inverse_permutation:0 (/choiceseq)) (fn_7 &perm:2 &pi:5 &original:2 &apply_permutation:0) (FunctionDef &can_reach:0 (arguments nil (list (arg &s:3 None None) (arg &q:3 None None) (arg &k:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &identity:3 Store)) (Call (Name g_list Load) (list (_starred_content (fn_15 (Call (Name g_len Load) (list (_starred_content (Name &q:3 Load))) nil)))) nil) None) (If (Compare (Name &s:3 Load) (list Eq) (list (Name &identity:3 Load))) (/seq (Return (Constant False None))) (/seq)) (Assign (list (Name &q_inv:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &current_permutation:3 Store)) (Name &identity:3 Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None) (If (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant True None))) (/seq)) (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q_inv:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None) (If (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (/splice (fn_8 (/seq (/splice (fn_1 &k:4 &n:4 &q:4 &s:4)) (Assign (list (Name &possible:4 Store)) (Call (Name &can_reach:0 Load) (list (_starred_content (Name &s:4 Load)) (_starred_content (Name &q:4 Load)) (_starred_content (Name &k:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Name &possible:4 Load) (Constant s_YES None) (Constant s_NO None)))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inv_q:1 &i:1 &val:1 &inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_6 (/seq (fn_3 &n:3 &original:3) (Assign (list (Name &q_inverse:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &seq:3 Store) (List (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &q_inverse:3 Load))) Load) (/seq (Assign (list (Name &current:3 Store)) (Name &original:3 Load) None) (For (Name &i:3 Store) (fn_15 (Name &k:3 Load)) (/seq (Assign (list (Name &current:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current:3 Load)) (_starred_content (Name &seq:3 Load))) nil) None) (If (Compare (Name &current:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (If (Compare (Name &i:3 Load) (list Eq) (list (Name &k:3 Load))) (/seq (Return (Constant s_YES None))) (/seq Break))) (/seq))) (/seq Continue) None) Break) (/seq (Return (Constant s_NO None))) None) (Return (IfExp (Compare (Name &current:3 Load) (list Eq) (list (Name &s:3 Load))) (Constant s_YES None) (Constant s_NO None)))) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &perm:1 &inverse_perm:1 &i:1 &p:1 &find_inverse_permutation:0 (/choiceseq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAzMiwgMTA1LCAxMTAsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTEyLCAxMDEsIDExNCwgMTA5LCAxMTcsIDExNiwgOTcsIDExNiwgMTA1LCAxMTEsIDExMCwgNDZd None)))) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &perm:2 None None) (arg &to_perm:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzY1LCAxMTIsIDExMiwgMTA4LCAxMjEsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTE2LCAxMTEsIDMyLCA5NywgMTEwLCAxMTEsIDExNiwgMTA0LCAxMDEsIDExNCwgMzIsIDExMiwgMTAxLCAxMTQsIDEwOSwgMTE3LCAxMTYsIDk3LCAxMTYsIDEwNSwgMTExLCAxMTAsIDQ2XQ== None)) (Return (fn_14 &perm:2 &p:4 &to_perm:2))) nil None None) (/splice (fn_6 (/seq (Expr (Constant s-WzY4LCAxMDEsIDExNiwgMTAxLCAxMTQsIDEwOSwgMTA1LCAxMTAsIDEwMSwgMzIsIDEwNSwgMTAyLCAzMiwgNzcsIDk3LCAxMTUsIDEwNCwgOTcsIDM5LCAxMTUsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgOTksIDk3LCAxMTAsIDMyLCA5NywgMTEyLCAxMTIsIDEwMSwgOTcsIDExNCwgMzIsIDk3LCAxMDIsIDExNiwgMTAxLCAxMTQsIDMyLCAxMDcsIDMyLCAxMDksIDExMSwgMTE4LCAxMDEsIDExNSwgNDZd None)) (fn_3 &n:3 &initial_perm:3) (Assign (list (Name &inverse_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &impossible:3 Store)) (Constant False None) None) (If (Compare (Name &s:3 Load) (list Eq) (list (Name &initial_perm:3 Load))) (/seq (Assign (list (Name &impossible:3 Store)) (Constant True None) None)) (/seq (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (Assign (list (Name &applied_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &initial_perm:3 Load))) nil) None) (Assign (list (Name &inverse_applied_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &inverse_q:3 Load)) (_starred_content (Name &initial_perm:3 Load))) nil) None) (If (BoolOp Or (list (Compare (Name &s:3 Load) (list Eq) (list (Name &applied_perm:3 Load))) (Compare (Name &s:3 Load) (list Eq) (list (Name &inverse_applied_perm:3 Load))))) (/seq Break) (/seq)) (Assign (list (Name &initial_perm:3 Store)) (Name &applied_perm:3 Load) None)) (/seq (Assign (list (Name &impossible:3 Store)) (Constant True None) None)) None))) (Return (IfExp (Name &impossible:3 Load) (Constant s_NO None) (Constant s_YES None)))) &s:3 &q:3 &k:3 &n:3 &can_masha_permutation_occur:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_7 &permutation:1 &i:4 &target:1 &apply_permutation:0) (fn_2 &permutation:2 &inverse:2 &i:2 &p:2 &inverse_permutation:0 (/choiceseq)) (/splice (fn_8 (/seq (/splice (fn_1 &k:3 &n:3 &q:3 &s:3)) (fn_3 &n:3 &start_permutation:3) (Assign (list (Name &inverse_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:3 Load) Add (Constant i1 None)))) nil) (/seq (If (fn_13 &i:3) (/seq (Assign (list (Name &current_permutation:3 Store)) (Subscript (Name &start_permutation:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:3 Load) FloorDiv (Constant i2 None)))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None)) (/seq) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:3 Load) FloorDiv (Constant i2 None)))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &inverse_q:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None)) (/seq) None)) (/seq (Assign (list (Name &current_permutation:3 Store)) (Subscript (Name &start_permutation:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:3 Load) FloorDiv (Constant i2 None)))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None)) (/seq) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &i:3 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &current_permutation:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &inverse_q:3 Load)) (_starred_content (Name &current_permutation:3 Load))) nil) None)) (/seq) None))) (If (Compare (Name &current_permutation:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)) (Return None)) (/seq))) (/seq) None) (fn_18)) &main:0))) nil)",
            "(Module (/seq (fn_2 &perm:1 &inv:1 &i:1 &p:1 &inverse_permutation:0 (/choiceseq)) (fn_7 &perm:2 &p:4 &original:2 &apply_permutation:0) (/splice (fn_6 (/seq (fn_3 &n:3 &id_perm:3) (Assign (list (Name &q_inv:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &possible:3 Store)) (Set (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &id_perm:3 Load))) nil)))) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (/splice (fn_12 (Name &q_inv:3 Load) &next_possible:3 &p:3 &q:3 &apply_permutation:0 &possible:3)) (Assign (list (Name &possible:3 Store)) (Name &next_possible:3 Load) None)) (/seq) None) (fn_19 &possible:3 &s:3)) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse_perm:1 &i:1 &val:1 &find_inverse_permutation:0 (/choiceseq)) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &perm:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Return (fn_14 &q:2 &i:4 &perm:2))) nil None None) (/splice (fn_6 (/seq (fn_3 &n:3 &initial_perm:3) (Assign (list (Name &inverse_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (fn_11 (Constant i0 None) &inverse_q:3 &initial_perm:3 &apply_permutation:0 &q:3 &_:3)) (/seq) None) (If (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq (fn_3 &n:3 &initial_perm:3) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:3 Load) Sub (Constant i1 None)))) nil) (/seq (fn_11 (Constant i0 None) &inverse_q:3 &initial_perm:3 &apply_permutation:0 &q:3 &_:3)) (/seq) None) (If (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_NO None))) (/seq (Return (Constant s_YES None))))))) &s:3 &q:3 &k:3 &n:3 &check_possibility:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_7 &permutation:1 &i:4 &target:1 &apply_permutation:0) (fn_2 &permutation:2 &inverse:2 &i:2 &p:2 &inverse_permutation:0 (/choiceseq)) (/splice (fn_6 (/seq (fn_3 &n:3 &start_permutation:3) (Assign (list (Name &reachable_permutations:3 Store)) (Set (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &start_permutation:3 Load))) nil)))) None) (Assign (list (Name &current_permutations:3 Store)) (Set (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &start_permutation:3 Load))) nil)))) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (/splice (fn_12 (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) &next_permutations:3 &p:3 &q:3 &apply_permutation:0 &current_permutations:3)) (Expr (Call (Attribute (Name &reachable_permutations:3 Load) s_update Load) (list (_starred_content (Name &next_permutations:3 Load))) nil)) (Assign (list (Name &current_permutations:3 Store)) (Call (Attribute (Name &next_permutations:3 Load) s_copy Load) nil nil) None)) (/seq) None) (If (Compare (Name &k:3 Load) (list Lt) (list (Constant i2 None))) (/seq (Expr (Call (Attribute (Name &reachable_permutations:3 Load) s_discard Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &start_permutation:3 Load))) nil))) nil)) (Expr (Call (Attribute (Name &reachable_permutations:3 Load) s_discard Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &start_permutation:3 Load))) nil))) nil))) nil)) (Expr (Call (Attribute (Name &reachable_permutations:3 Load) s_discard Load) (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Call (Name &apply_permutation:0 Load) (list (_starred_content (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil)) (_starred_content (Name &start_permutation:3 Load))) nil))) nil))) nil))) (/seq)) (fn_19 &reachable_permutations:3 &s:3)) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (FunctionDef &inverse_permutation:0 (arguments nil (list (arg &q:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_len Load) (list (_starred_content (Name &q:1 Load))) nil) &inv:1 &i:1 &q:1)) (Return (Name &inv:1 Load))) nil None None) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_8 (/seq (/splice (fn_1 &k:3 &n:3 &q:3 &s:3)) (fn_3 &n:3 &initial:3) (If (Compare (Name &initial:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (fn_18) (Return None)) (/seq)) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (fn_13 &_:3) (/seq (Assign (list (Name &initial:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &initial:3 Load)) (_starred_content (Name &q:3 Load))) nil) None)) (/seq (Assign (list (Name &q_inv:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &initial:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &initial:3 Load)) (_starred_content (Name &q_inv:3 Load))) nil) None)))) (/seq) None) (fn_10 (Compare (Name &initial:3 Load) (list Eq) (list (Name &s:3 Load))))) &main:0))) nil)",
            "(Module (/seq (/splice (fn_6 (/seq (/splice (fn_5 (Name &n:1 Load) &q_inv:1 &i:1 &q:1)) (fn_3 &n:1 &p:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (If (Compare (Name &p:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (Assign (list (Name &p_q:1 Store)) (fn_9 (Name &n:1 Load) &i:2 &q:1 &p:1) None) (If (Compare (Name &p_q:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant s_YES None))) (/seq)) (Assign (list (Name &p_inv:1 Store)) (fn_9 (Name &n:1 Load) &i:3 &q_inv:1 &p:1) None) (If (Compare (Name &p_inv:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant s_YES None))) (/seq)) (Assign (list (Name &p:1 Store)) (Name &p_q:1 Load) None)) (/seq) None) (Return (IfExp (Compare (Name &p:1 Load) (list Eq) (list (Name &s:1 Load))) (Constant s_NO None) (Constant s_YES None)))) &s:1 &q:1 &k:1 &n:1 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse:1 &i:1 &val:1 &inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_6 (/seq (Assign (list (Name &inv_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (fn_3 &n:3 &identity:3) (If (Compare (Name &s:3 Load) (list Eq) (list (Name &identity:3 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (fn_13 &i:3) (/seq (Assign (list (Name &identity:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &identity:3 Load)) (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &s:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &s:3 Load)) (_starred_content (Name &inv_q:3 Load))) nil) None)) (/seq (Assign (list (Name &identity:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &identity:3 Load)) (_starred_content (Name &inv_q:3 Load))) nil) None) (Assign (list (Name &s:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &s:3 Load)) (_starred_content (Name &q:3 Load))) nil) None)))) (/seq) None) (If (Compare (Name &identity:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq (If (fn_13 &k:3) (/seq (fn_3 &n:3 &identity_reset:3) (fn_3 &n:3 &s_reset:3) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (fn_11 (Constant i0 None) &inv_q:3 &s_reset:3 &apply_permutation:0 &q:3 &i:3)) (/seq) None) (If (Compare (Name &s_reset:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq))) (/seq)) (Return (Constant s_NO None))))) &s:3 &q:3 &k:3 &n:3 &check_petya_game:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (/splice (fn_1 &k:0 &n:0 &q:0 &s:0)) (/splice (fn_17 &n:0 &inv_q:0 &i:0 &qi:0 &q:0)) (fn_7 &perm:1 &pi:3 &p:1 &apply_permutation:0) (FunctionDef &is_possible:0 (arguments nil (list (arg &n:2 None None) (arg &k:2 None None) (arg &q:2 None None) (arg &inv_q:2 None None) (arg &s:2 None None)) None nil nil None nil) (/seq (fn_3 &n:2 &current_perm:2) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &k:2 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &current_perm:2 Load) (list Eq) (list (Name &s:2 Load))) (/seq (If (Compare (Name &_:2 Load) (list Eq) (list (Name &k:2 Load))) (/seq (Return (Constant s_YES None))) (/seq (Return (Constant s_NO None))))) (/seq)) (Assign (list (Name &current_perm:2 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (IfExp (fn_13 &_:2) (Name &q:2 Load) (Name &inv_q:2 Load))) (_starred_content (Name &current_perm:2 Load))) nil) None)) (/seq) None) (Return (Constant s_NO None))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &inv_q:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_2 &q:1 &inv_q:1 &i:1 &qi:1 &inverse_permutation:0 (/choiceseq)) (fn_7 &q:2 &qi:4 &p:2 &apply_permutation:0) (FunctionDef &is_possible:0 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None) (arg &q:3 None None) (arg &s:3 None None)) None nil nil None nil) (/seq (fn_3 &n:3 &initial_p:3) (Assign (list (Name &inv_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &comb:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Constant i1 None) LShift (Name &k:3 Load)))) nil) (/seq (Assign (list (Name &temp_p:3 Store)) (Call (Attribute (Name &initial_p:3 Load) s_copy Load) nil nil) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (BinOp (Name &comb:3 Load) BitAnd (BinOp (Constant i1 None) LShift (Name &i:3 Load))) (/seq (Assign (list (Name &temp_p:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &q:3 Load)) (_starred_content (Name &temp_p:3 Load))) nil) None)) (/seq (Assign (list (Name &temp_p:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &inv_q:3 Load)) (_starred_content (Name &temp_p:3 Load))) nil) None)))) (/seq) None) (If (Compare (Name &temp_p:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant True None))) (/seq))) (/seq) None) (Return (Constant False None))) nil None None) (/splice (fn_1 &k:0 &n:0 &q:0 &s:0)) (fn_10 (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &k:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &s:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_8 (/seq (/splice (fn_1 &k:1 &n:1 &q:1 &s:1)) (Assign (list (Name &q_map:1 Store)) (DictComp (BinOp (Name &i:3 Load) Add (Constant i1 None)) (Subscript (Name &q:1 Load) (_slice_content (Name &i:3 Load)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) nil i0))) None) (Assign (list (Name &inv_q_map:1 Store)) (DictComp (Name &v:2 Load) (Name &k:2 Load) (list (comprehension (Tuple (list (_starred_content (Name &k:2 Store)) (_starred_content (Name &v:2 Store))) Store) (Call (Attribute (Name &q_map:1 Load) s_items Load) nil nil) nil i0))) None) (fn_3 &n:1 &p:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (If (fn_20 &k:1) (/seq (Assign (list (Name &p:1 Store)) (ListComp (Subscript (Name &q_map:1 Load) (_slice_content (Name &x:4 Load)) Load) (list (comprehension (Name &x:4 Store) (Name &p:1 Load) nil i0))) None)) (/seq (Assign (list (Name &p:1 Store)) (ListComp (Subscript (Name &inv_q_map:1 Load) (_slice_content (Name &x:5 Load)) Load) (list (comprehension (Name &x:5 Store) (Name &p:1 Load) nil i0))) None))) (AugAssign (Name &k:1 Store) Sub (Constant i1 None))) (/seq) None) (fn_10 (Compare (Name &p:1 Load) (list Eq) (list (Name &s:1 Load))))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_inverse_permutation:0 (arguments nil (list (arg &q:1 None None)) None nil nil None nil) (/seq (/splice (fn_5 (Call (Name g_len Load) (list (_starred_content (Name &q:1 Load))) nil) &inverse_q:1 &i:1 &q:1)) (Return (Name &inverse_q:1 Load))) nil None None) (fn_4 &q:2 &i:4 &p:2 &apply_permutation:0) (/splice (fn_8 (/seq (/splice (fn_1 &k:3 &n:3 &q:3 &s:3)) (Assign (list (Name &inverse_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (fn_3 &n:3 &original_p:3) (Assign (list (Name &current_p:3 Store)) (Subscript (Name &original_p:3 Load) (_slice_slice (Slice None None None)) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (Assign (list (Name &next_p:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_p:3 Load)) (_starred_content (Name &q:3 Load))) nil) None) (If (Compare (Name &next_p:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (fn_18) (Return None)) (/seq)) (Assign (list (Name &next_p_inverse:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_p:3 Load)) (_starred_content (Name &inverse_q:3 Load))) nil) None) (If (Compare (Name &next_p_inverse:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (fn_18) (Return None)) (/seq)) (If (Compare (Name &current_p:3 Load) (list Eq) (list (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_p:3 Load)) (_starred_content (Name &q:3 Load))) nil))) (/seq (Assign (list (Name &current_p:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &current_p:3 Load)) (_starred_content (Name &inverse_q:3 Load))) nil) None)) (/seq (Assign (list (Name &current_p:3 Store)) (Name &next_p:3 Load) None)))) (/seq) None) (fn_10 (Compare (Name &current_p:3 Load) (list Eq) (list (Name &s:3 Load))))) &main:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse:1 &i:1 &val:1 &inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:4 &perm:2 &apply_permutation:0) (/splice (fn_6 (/seq (fn_3 &n:3 &initial_perm:3) (Assign (list (Name &inv_q:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &perm_set:3 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &current_perms:3 Store)) (List (list (_starred_content (Name &initial_perm:3 Load))) Load) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (Assign (list (Name &next_perms:3 Store)) (List nil Load) None) (For (Name &p:3 Store) (Name &current_perms:3 Load) (/seq (Assign (list (Name &new_perm_q:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &p:3 Load)) (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &new_perm_inv_q:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &p:3 Load)) (_starred_content (Name &inv_q:3 Load))) nil) None) (Assign (list (Name &perm_tuple_q:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Name &new_perm_q:3 Load))) nil) None) (Assign (list (Name &perm_tuple_inv_q:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Name &new_perm_inv_q:3 Load))) nil) None) (If (Compare (Name &perm_tuple_q:3 Load) (list NotIn) (list (Name &perm_set:3 Load))) (/seq (Expr (Call (Attribute (Name &perm_set:3 Load) s_add Load) (list (_starred_content (Name &perm_tuple_q:3 Load))) nil)) (Expr (Call (Attribute (Name &next_perms:3 Load) s_append Load) (list (_starred_content (Name &new_perm_q:3 Load))) nil))) (/seq)) (If (Compare (Name &perm_tuple_inv_q:3 Load) (list NotIn) (list (Name &perm_set:3 Load))) (/seq (Expr (Call (Attribute (Name &perm_set:3 Load) s_add Load) (list (_starred_content (Name &perm_tuple_inv_q:3 Load))) nil)) (Expr (Call (Attribute (Name &next_perms:3 Load) s_append Load) (list (_starred_content (Name &new_perm_inv_q:3 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &current_perms:3 Store)) (Name &next_perms:3 Load) None)) (/seq) None) (fn_19 &perm_set:3 &s:3)) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse_q:1 &i:1 &value:1 &find_inverse_permutation:0 (/choiceseq)) (fn_4 &q:2 &i:5 &p:2 &apply_permutation:0) (FunctionDef &is_possible:0 (arguments nil (list (arg &n:3 None None) (arg &k:3 None None) (arg &q:3 None None) (arg &s:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &inverse_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (fn_3 &n:3 &initial:3) (For (Name &step:3 Store) (fn_15 (Name &k:3 Load)) (/seq (fn_11 (Constant i1 None) &inverse_q:3 &initial:3 &apply_permutation:0 &q:3 &step:3)) (/seq) None) (Return (Compare (Name &initial:3 Load) (list Eq) (list (Name &s:3 Load))))) nil None None) (/splice (fn_8 (/seq (/splice (fn_1 &k:4 &n:4 &q:4 &s:4)) (fn_10 (Call (Name &is_possible:0 Load) (list (_starred_content (Name &n:4 Load)) (_starred_content (Name &k:4 Load)) (_starred_content (Name &q:4 Load)) (_starred_content (Name &s:4 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (/splice (fn_6 (/seq (/splice (fn_5 (Name &n:1 Load) &inv_q:1 &i:1 &q:1)) (fn_3 &n:1 &p:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (If (fn_13 &_:1) (/seq (Assign (list (Name &p:1 Store)) (fn_9 (Name &n:1 Load) &i:2 &q:1 &p:1) None)) (/seq (Assign (list (Name &p:1 Store)) (fn_9 (Name &n:1 Load) &i:3 &inv_q:1 &p:1) None)))) (/seq) None) (If (Compare (Name &p:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant s_YES None))) (/seq (If (fn_20 &k:1) (/seq (fn_3 &n:1 &p:1) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:1 Load))) nil) (/seq (If (fn_20 &_:1) (/seq (Assign (list (Name &p:1 Store)) (fn_9 (Name &n:1 Load) &i:4 &q:1 &p:1) None)) (/seq (Assign (list (Name &p:1 Store)) (fn_9 (Name &n:1 Load) &i:5 &inv_q:1 &p:1) None)))) (/seq) None) (If (Compare (Name &p:1 Load) (list Eq) (list (Name &s:1 Load))) (/seq (Return (Constant s_YES None))) (/seq))) (/seq)))) (Return (Constant s_NO None))) &s:1 &q:1 &k:1 &n:1 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &p:1 &inverse:1 &i:1 &pi:1 &inverse_permutation:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA1LCAxMTAsIDExOCwgMTAxLCAxMTQsIDExNSwgMTAxLCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCAxMDEsIDExNCwgMTA5LCAxMTcsIDExNiwgOTcsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)))) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExMiwgMTEyLCAxMDgsIDEwNSwgMTAxLCAxMTUsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEzLCAzMiwgMTE2LCAxMTEsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEyLCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMTE1LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExNCwgMTAxLCAxMTUsIDExNywgMTA4LCAxMTYsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzJd None)) (Return (fn_14 &q:2 &qi:4 &p:2))) nil None None) (/splice (fn_6 (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjgsIDEwMSwgMTE2LCAxMDEsIDExNCwgMTA5LCAxMDUsIDExMCwgMTAxLCAxMTUsIDMyLCAxMDUsIDEwMiwgMzIsIDEwNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCAxMTIsIDExMSwgMTE1LCAxMTUsIDEwNSwgOTgsIDEwOCwgMTAxLCAzMiwgMTE2LCAxMTEsIDMyLCAxMDMsIDEwMSwgMTE2LCAzMiwgNzcsIDk3LCAxMTUsIDEwNCwgOTcsIDM5LCAxMTUsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTE1LCAzMiwgOTcsIDEwMiwgMTE2LCAxMDEsIDExNCwgMzIsIDEwNywgMzIsIDEwOSwgMTExLCAxMTgsIDEwMSwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (fn_3 &n:3 &initial_perm:3) (If (BoolOp And (list (Compare (Name &s:3 Load) (list Eq) (list (Name &initial_perm:3 Load))) (Compare (Name &k:3 Load) (list Gt) (list (Constant i0 None))))) (/seq (Return (Constant s_NO None))) (/seq)) (Assign (list (Name &q_inv:3 Store)) (Call (Name &inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (Assign (list (Name &initial_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &initial_perm:3 Load)) (_starred_content (Name &q:3 Load))) nil) None)) (/seq) None) (If (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_YES None))) (/seq)) (fn_3 &n:3 &initial_perm:3) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (If (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (/seq (Return (Constant s_NO None))) (/seq)) (Assign (list (Name &initial_perm:3 Store)) (Call (Name &apply_permutation:0 Load) (list (_starred_content (Name &initial_perm:3 Load)) (_starred_content (Name &q_inv:3 Load))) nil) None)) (/seq) None) (Return (IfExp (Compare (Name &initial_perm:3 Load) (list Eq) (list (Name &s:3 Load))) (Constant s_YES None) (Constant s_NO None)))) &s:3 &q:3 &k:3 &n:3 &is_possible:0 &s:0 &q:0 &n:0 &k:0))) nil)",
            "(Module (/seq (fn_2 &q:1 &inverse:1 &i:1 &p:1 &find_inverse_permutation:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDEwNSwgMTEwLCAxMDAsIDExNSwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDUsIDExMCwgMTE4LCAxMDEsIDExNCwgMTE1LCAxMDEsIDMyLCAxMTEsIDEwMiwgMzIsIDk3LCAzMiwgMTAzLCAxMDUsIDExOCwgMTAxLCAxMTAsIDMyLCAxMTIsIDEwMSwgMTE0LCAxMDksIDExNywgMTE2LCA5NywgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTEzLCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)))) (FunctionDef &apply_permutation:0 (arguments nil (list (arg &p:2 None None) (arg &q:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDExMiwgMTEyLCAxMDgsIDEwNSwgMTAxLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTEyLCAxMDEsIDExNCwgMTA5LCAxMTcsIDExNiwgOTcsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMywgMzIsIDExNiwgMTExLCAzMiwgMTEyLCAxMDEsIDExNCwgMTA5LCAxMTcsIDExNiwgOTcsIDExNiwgMTA1LCAxMTEsIDExMCwgMzIsIDExMiwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Return (fn_9 (Call (Name g_len Load) (list (_starred_content (Name &p:2 Load))) nil) &i:4 &q:2 &p:2))) nil None None) (/splice (fn_6 (/seq (fn_3 &n:3 &p:3) (Assign (list (Name &inv_q:3 Store)) (Call (Name &find_inverse_permutation:0 Load) (list (_starred_content (Name &q:3 Load))) nil) None) (Assign (list (Name &possible_states:3 Store)) (Set (list (_starred_content (Call (Name g_tuple Load) (list (_starred_content (Name &p:3 Load))) nil)))) None) (Assign (list (Name &new_states:3 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &k:3 Load))) nil) (/seq (For (Name &state:3 Store) (Name &possible_states:3 Load) (/seq (Assign (list (Name &state_after_q:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name &apply_permutation:0 Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &state:3 Load))) nil)) (_starred_content (Name &q:3 Load))) nil))) nil) None) (Assign (list (Name &state_after_inv_q:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name &apply_permutation:0 Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &state:3 Load))) nil)) (_starred_content (Name &inv_q:3 Load))) nil))) nil) None) (Expr (Call (Attribute (Name &new_states:3 Load) s_add Load) (list (_starred_content (Name &state_after_q:3 Load))) nil)) (Expr (Call (Attribute (Name &new_states:3 Load) s_add Load) (list (_starred_content (Name &state_after_inv_q:3 Load))) nil))) (/seq) None) (Assign (list (Name &possible_states:3 Store)) (Call (Attribute (Name &new_states:3 Load) s_copy Load) nil nil) None) (Expr (Call (Attribute (Name &new_states:3 Load) s_clear Load) nil nil))) (/seq) None) (If (Compare (Call (Name g_tuple Load) (list (_starred_content (Name &s:3 Load))) nil) (list In) (list (Name &possible_states:3 Load))) (/seq (Return (Constant s_YES None))) (/seq (Return (Constant s_NO None))))) &s:3 &q:3 &k:3 &n:3 &check_possibility:0 &s:0 &q:0 &n:0 &k:0))) nil)"
        ]
    },
    "655": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (Assign (list (Name %2 Store)) (List nil Load) None) (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %9 Load) Sub (Name %8 Load)) Add (Constant i1 None)))) nil) (/seq (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %7 Load) Sub (Name %6 Load)) Add (Constant i1 None)))) nil) (/seq ?0 (If (Compare (Name %5 Load) (list Gt) (list (Name %1 Load))) (/seq (Assign (list (Name %1 Store)) (Name %5 Load) None) (Assign (list (Name %2 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) Load) None)) (/seq (If (Compare (Name %5 Load) (list Eq) (list (Name %1 Load))) (/seq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %4 Load)) (_starred_content (Name %3 Load))) Load))) nil))) (/seq))))) (/seq) None)) (/seq) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %9 Load))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %8 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name %7 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (Name %2 Load)) Load) (list Eq) (list (Subscript (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (_slice_content (BinOp (Name %3 Load) Add (Name %2 Load))) Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %9 Load) Sub (Name %8 Load)) Add (Constant i1 None)))) nil) (/seq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %7 Load) Sub (Name %6 Load)) Add (Constant i1 None)))) nil) (/seq ?0 (If (Compare (Name %5 Load) (list Gt) (list (Name %4 Load))) (/seq (Assign (list (Name %4 Store)) (Name %5 Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) Load) None)) (/seq (If (Compare (Name %5 Load) (list Eq) (list (Name %4 Load))) (/seq (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) nil))) (/seq))))) (/seq) None)) (/seq) None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name %1 Load) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name %1 Store) (Subscript #0 (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %4 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Return (fn_2 %1 %3))) nil None None) (FunctionDef %14 (arguments nil (list (arg %5 None None) (arg %9 None None) (arg %12 None None) (arg %10 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %5 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %5 Load))) nil))) Load) None) (Assign (list (Name %8 Store)) (Constant i0 None) None) (fn_3 %8 %13 %12 %11 %10 %9 %5 %7 %6) (Return (Name %8 Load))) nil None None) (FunctionDef %26 (arguments nil (list (arg %15 None None) (arg %18 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %17 Store)) (_starred_content (Name %16 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %15 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %15 Load))) nil))) Load) None) (Assign (list (Tuple (list (_starred_content (Name %20 Store)) (_starred_content (Name %19 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %18 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %18 Load))) nil))) Load) None) (/splice (fn_1 %25 %24 %21 %22 %23 %17 %20 %16 %19 (/choiceseq (Assign (list (Name %23 Store)) (Call (Name %14 Load) (list (_starred_content (Name %15 Load)) (_starred_content (Name %18 Load)) (_starred_content (Name %22 Load)) (_starred_content (Name %21 Load))) nil) None)))) (Return (Name %24 Load))) nil None None))",
                "sym_arity": 26,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %9 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Subscript (Name %8 Load) (_slice_content (Name %4 Load)) Load) (_slice_content (Name %2 Load)) Load) (list Eq) (list (Subscript (Subscript (Name %7 Load) (_slice_content (BinOp (Name %6 Load) Add (Name %4 Load))) Load) (_slice_content (BinOp (Name %5 Load) Add (Name %2 Load))) Load))) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %3 Load))) nil) nil i0) (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))))) nil) None)",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load) i-1 None))))) nil))) (/seq) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %6 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name %1 Load) nil nil) None) (Assign (list (Name %3 Store)) (Call (Name %1 Load) nil nil) None) (Assign (list (Name %5 Store)) (Call (Name %4 Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %3 Load))) nil) None) ?0) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %6 Load) nil nil))) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil))) (/seq) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Subscript #0 (_slice_content (Constant i0 None)) Load) s_split Load) nil nil))) nil) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))) nil))) Load) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) Load) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %3 (arguments nil (list (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Name %4 Store)) (List (list (_starred_content (Constant s-WzUwLCAzMiwgNTBd None)) (_starred_content (Constant s-WzQ5LCAzMiwgNDhd None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDld None))) Load) None) (Assign (list (Name %5 Store)) (List (list (_starred_content (Constant s-WzUxLCAzMiwgNTFd None)) (_starred_content (Constant s-WzQ5LCAzMiwgNDgsIDMyLCA0OF0= None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDksIDMyLCA0OF0= None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDgsIDMyLCA0OV0= None))) Load) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(FunctionDef %8 (arguments nil (list (arg %2 None None) (arg %7 None None) (arg %6 None None) (arg %5 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Constant i0 None)) Load))) nil))) nil) (/seq (If #0 (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name %3 Load))) nil) (list (comprehension (Name %3 Store) (Call (Attribute (Name %2 Load) s_split Load) nil nil) nil i0))) (list (comprehension (Name %2 Store) (Subscript (Name %1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load) nil i0)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %5 (arguments nil nil None nil nil None nil) (/seq (fn_9 %2 %1) (Assign (list (Name %4 Store)) (fn_2 %2 %3) None) (Return (Tuple (list (_starred_content (Name %1 Load)) (_starred_content (Name %2 Load)) (_starred_content (Name %4 Load))) Load))) nil None None)",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(FunctionDef %10 (arguments nil (list (arg %7 None None) (arg %6 None None) (arg %2 None None) (arg %4 None None) (arg %8 None None) (arg %9 None None)) None nil nil None nil) (/seq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %9 Load))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %8 Load))) nil) (/seq (If (Compare (Subscript (Subscript (Name %7 Load) (_slice_content (Name %5 Load)) Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Subscript (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %4 Load))) Load) (_slice_content (BinOp (Name %3 Load) Add (Name %2 Load))) Load))) (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None) (Return (Name %1 Load))) nil None None)",
                "sym_arity": 10,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name %3 Store)) (_starred_content (Name %2 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) nil))) Load) None) (Assign (list (Name %5 Store)) (fn_2 %2 %4) None) (Assign (list (Name %6 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name %8 Store)) (_starred_content (Name %7 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %6 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name %6 Load) (_slice_content (Constant i1 None)) Load))) nil))) Load) None))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Expr (Call (Attribute (Name %2 Load) s_sort Load) nil (list (keyword s_key (Lambda (arguments nil (list (arg %1 None None)) None nil nil None nil) (Tuple (list (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))) Load))))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %9 Load) Sub (Name %8 Load)) Add (Constant i1 None)))) nil) (/seq (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name %7 Load) Sub (Name %6 Load)) Add (Constant i1 None)))) nil) (/seq #0 (If (Compare (Name %5 Load) (list Gt) (list (Name %4 Load))) (/seq (Assign (list (Name %4 Store)) (Name %5 Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) Load) None)) (/seq (If (Compare (Name %5 Load) (list Eq) (list (Name %4 Load))) (/seq (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) Load))) nil))) (/seq))))) (/seq) None)) (/seq) None) (Return (Call (Name g_sorted Load) (list (_starred_content (Name %3 Load))) nil)))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/choiceseq (Assign (list (Name %1 Store)) (Constant i0 None) None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) (/seq (For (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) (/seq (If #0 (/seq (AugAssign (Name %1 Store) Add (Constant i1 None))) (/seq))) (/seq) None)) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store) #0 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load)) (_starred_content (Name %1 Load))) nil))) (/seq) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Compare (Subscript (Subscript (Name %6 Load) (_slice_content (Name %3 Load)) Load) (_slice_content (Name %1 Load)) Load) (list Eq) (list (Subscript (Subscript (Name %5 Load) (_slice_content (BinOp (Name %4 Load) Add (Name %3 Load))) Load) (_slice_content (BinOp (Name %2 Load) Add (Name %1 Load))) Load)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Compare (Subscript (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Name %2 Load))) Load) (_slice_content (BinOp (Name %4 Load) Add (Name %1 Load))) Load) (list Eq) (list (Subscript (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) (_slice_content (Name %1 Load)) Load)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_15 (/seq (Assign (list (Name &robot_dims:1 Store)) (Call (Attribute (Subscript (Name &robot_image:1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil) None) (Assign (list (Name &robot_width:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &robot_dims:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &robot_height:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &robot_dims:1 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (fn_5 (Name &robot_image:1 Load) &row:2 &robot_pixels:1) (Assign (list (Name &floor_dims:1 Store)) (Call (Attribute (Subscript (Name &floor_image:1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil) None) (Assign (list (Name &floor_width:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &floor_dims:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &floor_height:1 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &floor_dims:1 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (fn_5 (Name &floor_image:1 Load) &row:3 &floor_pixels:1) (/splice (fn_1 &max_matches:1 &candidate_locations:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (Assign (list (Name &matches:1 Store)) (Constant i0 None) None) (fn_3 &matches:1 &r_x:1 &x:1 &r_y:1 &y:1 &floor_pixels:1 &robot_pixels:1 &robot_width:1 &robot_height:1)))) (Expr (Call (Attribute (Name &candidate_locations:1 Load) s_sort Load) nil nil)) (fn_11 (Name &candidate_locations:1 Load) &loc:1)) &floor_image:1 &robot_image:1 &find_robot_location:0 &robot_image_input:0 &floor_image_input:0)) (Expr (Call (Name &find_robot_location:0 Load) (list (_starred_content (Name &robot_image_input:0 Load)) (_starred_content (Name &floor_image_input:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_15 (/seq (fn_12 (Name &robot_image:1 Load) &robot_height:1 &robot_width:1) (fn_5 (Name &robot_image:1 Load) &row:3 &robot_data:1) (fn_12 (Name &floor_image:1 Load) &floor_height:1 &floor_width:1) (fn_5 (Name &floor_image:1 Load) &row:4 &floor_data:1) (FunctionDef &compare:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &match_count:2 Store)) (Constant i0 None) None) (fn_3 &match_count:2 &c:2 &x:2 &r:2 &y:2 &floor_data:1 &robot_data:1 &robot_width:1 &robot_height:1) (Return (Name &match_count:2 Load))) nil None None) (/splice (fn_1 &max_matches:1 &candidates:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (Assign (list (Name &matches:1 Store)) (Call (Name &compare:1 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) nil) None)))) (Expr (Call (Attribute (Name &candidates:1 Load) s_sort Load) nil nil)) (Return (Name &candidates:1 Load))) &floor_image:1 &robot_image:1 &find_robot_location:0 &robot_image:0 &floor_image:0)) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_robot_location:0 Load) (list (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &floor_image:0 Load))) nil) None) (fn_24 (Name &candidates:0 Load) &y:0 &x:0)) nil)",
            "(Module (/seq (FunctionDef &get_max_matching_locations:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None)) None nil nil None nil) (/seq (fn_14 &robot_img:1 &robot_height:1 &robot_width:1) (fn_14 &floor_img:1 &floor_height:1 &floor_width:1) (Assign (list (Name &locations:1 Store)) (List nil Load) None) (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (fn_4 &y:1 &x:1 &locations:1 &max_matches:1 &matches:1 &robot_height:1 &floor_height:1 &robot_width:1 &floor_width:1 (/choiceseq (fn_7 &robot_width:1 &rx:5 &robot_height:1 &ry:4 &x:1 &y:1 &floor_img:1 &robot_img:1 &matches:1))) (Return (Name &locations:1 Load))) nil None None) (/splice (fn_20 &robot_size:0 &robot_height:0 &robot_width:0 &_:2 &robot_img:0 &floor_size:0 &floor_height:0 &floor_width:0)) (Assign (list (Name &floor_img:0 Store)) (fn_2 &floor_height:0 &_:3) None) (Assign (list (Name &locations:0 Store)) (Call (Name &get_max_matching_locations:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil) None) (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &locations:0 Load))) nil) &loc:0)) nil)",
            "(Module (/seq (/splice (fn_15 (/seq (fn_12 (Name &robot_img:1 Load) &R_H:1 &R_W:1) (fn_12 (Name &floor_img:1 Load) &F_H:1 &F_W:1) (fn_5 (Name &robot_img:1 Load) &row:2 &robot_pattern:1) (fn_5 (Name &floor_img:1 Load) &row:3 &floor_pattern:1) (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_locations:1 Store)) (List nil Load) None) (fn_4 &y:1 &x:1 &candidate_locations:1 &max_matches:1 &match_count:1 &R_H:1 &F_H:1 &R_W:1 &F_W:1 (/choiceseq (Assign (list (Name &match_count:1 Store)) (Constant i0 None) None) (fn_3 &match_count:1 &j:1 &x:1 &i:1 &y:1 &floor_pattern:1 &robot_pattern:1 &R_W:1 &R_H:1))) (Expr (Call (Attribute (Name &candidate_locations:1 Load) s_sort Load) nil nil)) (Return (Name &candidate_locations:1 Load))) &floor_img:1 &robot_img:1 &find_robot_location:0 &robot_input:0 &floor_input:0)) (Assign (list (Name &locations:0 Store)) (Call (Name &find_robot_location:0 Load) (list (_starred_content (Name &robot_input:0 Load)) (_starred_content (Name &floor_input:0 Load))) nil) None) (fn_8 (Name &locations:0 Load) &loc:0)) nil)",
            "(Module (/seq (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDEwNSwgMTEwLCAxMDAsIDMyLCA5OSwgOTcsIDExMCwgMTAwLCAxMDUsIDEwMCwgOTcsIDExNiwgMTAxLCAzMiwgOTksIDExMSwgMTExLCAxMTQsIDEwMCwgMTA1LCAxMTAsIDk3LCAxMTYsIDEwMSwgMTE1LCAzMiwgMTE5LCAxMDQsIDEwMSwgMTE0LCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE0LCAxMTEsIDk4LCAxMTEsIDExNiwgMzIsIDEwNSwgMTA5LCA5NywgMTAzLCAxMDEsIDMyLCA5OSwgMTExLCAxMTcsIDEwOCwgMTAwLCAzMiwgMTA5LCA5NywgMTE2LCA5OSwgMTA0LCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMiwgMTA4LCAxMTEsIDExMSwgMTE0LCAzMiwgMTA1LCAxMDksIDk3LCAxMDMsIDEwMSwgNDYsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDgwLCA5NywgMTE0LCA5NywgMTA5LCAxMDEsIDExNiwgMTAxLCAxMTQsIDExNSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNDUsIDMyLCAxMTQsIDExMSwgOTgsIDExMSwgMTE2LCA5NSwgMTA1LCAxMDksIDEwMywgNTgsIDMyLCA2NSwgMzIsIDExNiwgMTE3LCAxMTIsIDEwOCwgMTAxLCAzMiwgOTksIDExMSwgMTEwLCAxMTYsIDk3LCAxMDUsIDExMCwgMTA1LCAxMTAsIDEwMywgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTksIDEwNSwgMTAwLCAxMTYsIDEwNCwgMzIsIDk3LCAxMTAsIDEwMCwgMzIsIDEwNCwgMTAxLCAxMDUsIDEwMywgMTA0LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTQsIDExMSwgOTgsIDExMSwgMTE2LCAzMiwgMTA1LCAxMDksIDk3LCAxMDMsIDEwMSwgNDQsIDMyLCAxMTIsIDEwOCwgMTE3LCAxMTUsIDMyLCA5NywgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwNSwgMTA5LCA5NywgMTAzLCAxMDEsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDQ1LCAzMiwgMTAyLCAxMDgsIDExMSwgMTExLCAxMTQsIDk1LCAxMDUsIDEwOSwgMTAzLCA1OCwgMzIsIDY1LCAzMiwgMTE2LCAxMTcsIDExMiwgMTA4LCAxMDEsIDMyLCA5OSwgMTExLCAxMTAsIDExNiwgOTcsIDEwNSwgMTEwLCAxMDUsIDExMCwgMTAzLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExOSwgMTA1LCAxMDAsIDExNiwgMTA0LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgMTA0LCAxMDEsIDEwNSwgMTAzLCAxMDQsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMiwgMTA4LCAxMTEsIDExMSwgMTE0LCAzMiwgMTA1LCAxMDksIDk3LCAxMDMsIDEwMSwgNDQsIDMyLCAxMTIsIDEwOCwgMTE3LCAxMTUsIDMyLCA5NywgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwNSwgMTA5LCA5NywgMTAzLCAxMDEsIDQ2LCAxMCwgMTAsIDMyLCAzMiwgMzIsIDMyLCA4MiwgMTAxLCAxMTYsIDExNywgMTE0LCAxMTAsIDExNSwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgNjUsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTE3LCAxMTIsIDEwOCwgMTAxLCAxMTUsIDMyLCAxMTQsIDEwMSwgMTEyLCAxMTQsIDEwMSwgMTE1LCAxMDEsIDExMCwgMTE2LCAxMDUsIDExMCwgMTAzLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDk5LCA5NywgMTEwLCAxMDAsIDEwNSwgMTAwLCA5NywgMTE2LCAxMDEsIDMyLCA0MCwgMTIwLCA0NCwgMzIsIDEyMSwgNDEsIDMyLCA5OSwgMTExLCAxMTEsIDExNCwgMTAwLCAxMDUsIDExMCwgOTcsIDExNiwgMTAxLCAxMTUsIDQ2LCAxMCwgMzIsIDMyLCAzMiwgMzJd None)) (Assign (list (Tuple (list (_starred_content (Name &robot_width:1 Store)) (_starred_content (Name &robot_height:1 Store)) (_starred_content (Name &robot_pixels:1 Store))) Store)) (Name &robot_img:1 Load) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:1 Store)) (_starred_content (Name &floor_height:1 Store)) (_starred_content (Name &floor_pixels:1 Store))) Store)) (Name &floor_img:1 Load) None) (/splice (fn_1 &max_matches:1 &candidate_coords:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (fn_7 &robot_width:1 &rx:5 &robot_height:1 &ry:4 &x:1 &y:1 &floor_pixels:1 &robot_pixels:1 &matches:1)))) (Return (Name &candidate_coords:1 Load))) nil None None) (fn_9 &rH:0 &rW:0) (Assign (list (Name &robot_pixels:0 Store)) (fn_2 &rH:0 &_:2) None) (Assign (list (Name &robot_img:0 Store)) (Tuple (list (_starred_content (Name &rW:0 Load)) (_starred_content (Name &rH:0 Load)) (_starred_content (Name &robot_pixels:0 Load))) Load) None) (fn_9 &fH:0 &fW:0) (Assign (list (Name &floor_pixels:0 Store)) (fn_2 &fH:0 &_:3) None) (Assign (list (Name &floor_img:0 Store)) (Tuple (list (_starred_content (Name &fW:0 Load)) (_starred_content (Name &fH:0 Load)) (_starred_content (Name &floor_pixels:0 Load))) Load) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil) None) (fn_24 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:0 Load))) nil) &y:0 &x:0)) nil)",
            "(Module (/seq (/splice (fn_6 &H:3 &W:3 &_:4 &read_image:0 &robot:1 &R_H:1 &R_W:1 &matches:1 &floor:1 &y:1 &i:1 &x:1 &j:1 &count_matches:0 &robot:2 &R_H:2 &R_W:2 &floor:2 &F_H:2 &F_W:2 &y:2 &x:2 &matches:2 &candidate_locations:2 &max_matches:2 &find_candidate_locations:0)) (Assign (list (Name &robot_image:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &floor_image:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidate_locations:0 Load) (list (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &floor_image:0 Load))) nil) None) (fn_24 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:0 Load))) nil) &y:0 &x:0)) nil)",
            "(Module (/seq (FunctionDef &find_robot_location:0 (arguments nil (list (arg &robot_image:1 None None) (arg &floor_image:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_locations:1 Store)) (List nil Load) None) (fn_14 &robot_image:1 &robot_height:1 &robot_width:1) (fn_14 &floor_image:1 &floor_height:1 &floor_width:1) (/splice (fn_22 (fn_7 &robot_width:1 &rx:5 &robot_height:1 &ry:4 &x:1 &y:1 &floor_image:1 &robot_image:1 &matches:1) &y:1 &x:1 &candidate_locations:1 &max_matches:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1))) nil None None) (/splice (fn_20 &robot_dimensions:0 &robot_height:0 &robot_width:0 &_:2 &robot_image:0 &floor_dimensions:0 &floor_height:0 &floor_width:0)) (Assign (list (Name &floor_image:0 Store)) (fn_2 &floor_height:0 &_:3) None) (Assign (list (Name &candidate_locations:0 Store)) (Call (Name &find_robot_location:0 Load) (list (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &floor_image:0 Load))) nil) None) (fn_11 (Name &candidate_locations:0 Load) &location:0)) nil)",
            "(Module (/seq (/splice (fn_6 &H:4 &W:4 &_:5 &read_image:0 &robot_img:1 &robot_H:1 &robot_W:1 &match_count:1 &floor_img:1 &y:1 &i:1 &x:1 &j:1 &matches:0 &robot_img:2 &robot_H:2 &robot_W:2 &floor_img:2 &floor_H:2 &floor_W:2 &y:2 &x:2 &match_count:2 &candidate_locations:2 &max_matches:2 &find_candidate_locations:0)) (/splice (fn_10 &read_image:0 &robot_img:3 &floor_img:3 &find_candidate_locations:0 &candidate_locations:3 &main:0 (/choiceseq (Expr (Call (Attribute (Name &candidate_locations:3 Load) s_sort Load) nil nil)) (fn_8 (Name &candidate_locations:3 Load) &location:3))))) nil)",
            "(Module (/seq (/splice (fn_15 (/seq (fn_12 (Name &robot_img:1 Load) &robot_h:1 &robot_w:1) (fn_5 (Name &robot_img:1 Load) &row:2 &robot_pixels:1) (fn_12 (Name &floor_img:1 Load) &floor_h:1 &floor_w:1) (fn_5 (Name &floor_img:1 Load) &row:3 &floor_pixels:1) (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_locations:1 Store)) (List nil Load) None) (fn_4 &start_y:1 &start_x:1 &candidate_locations:1 &max_matches:1 &matches:1 &robot_h:1 &floor_h:1 &robot_w:1 &floor_w:1 (fn_23 (fn_25 &x:1 &start_x:1 &y:1 &start_y:1 &floor_pixels:1 &robot_pixels:1) &matches:1 &robot_h:1 &y:1 &robot_w:1 &x:1)) (fn_21 &x:4 &candidate_locations:1) (fn_8 (Name &candidate_locations:1 Load) &location:1)) &floor_img:1 &robot_img:1 &find_robot_in_floor:0 &robot_img:0 &floor_img:0)) (Expr (Call (Name &find_robot_in_floor:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil))) nil)",
            "(Module (/seq (/splice (fn_15 (/seq (fn_12 (Name &robot:1 Load) &robot_h:1 &robot_w:1) (fn_12 (Name &floor:1 Load) &floor_h:1 &floor_w:1) (Assign (list (Name &robot_img:1 Store)) (fn_17 &robot:1 &line:2 &x:4) None) (Assign (list (Name &floor_img:1 Store)) (fn_17 &floor:1 &line:3 &x:5) None) (/splice (fn_1 &max_matches:1 &candidate_locations:1 &y:1 &x:1 &matches:1 &robot_w:1 &floor_w:1 &robot_h:1 &floor_h:1 (/choiceseq (Assign (list (Name &matches:1 Store)) (Constant i0 None) None) (fn_3 &matches:1 &dx:1 &x:1 &dy:1 &y:1 &floor_img:1 &robot_img:1 &robot_w:1 &robot_h:1)))) (Expr (Call (Attribute (Name &candidate_locations:1 Load) s_sort Load) nil nil)) (fn_8 (Name &candidate_locations:1 Load) &location:1)) &floor:1 &robot:1 &find_matching_locations:0 &robot_input:0 &floor_input:0)) (Expr (Call (Name &find_matching_locations:0 Load) (list (_starred_content (Name &robot_input:0 Load)) (_starred_content (Name &floor_input:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (fn_9 &H:4 &W:4) (Return (fn_2 &H:4 &_:5))) nil None None) (fn_16 (fn_26 &dx:1 &dy:1 &robot:1 &x:1 &y:1 &floor:1) &matches:1 &robot:1 &dx:1 &dy:1 &y:1 &x:1 &floor:1 &count_matches:0) (FunctionDef &find_locations:0 (arguments nil (list (arg &robot:2 None None) (arg &floor:2 None None)) None nil nil None nil) (/seq (fn_13 &robot:2 &robot_width:2 &robot_height:2) (fn_13 &floor:2 &floor_width:2 &floor_height:2) (/splice (fn_1 &max_matches:2 &candidate_locations:2 &y:2 &x:2 &matches:2 &robot_width:2 &floor_width:2 &robot_height:2 &floor_height:2 (/choiceseq (Assign (list (Name &matches:2 Store)) (Call (Name &count_matches:0 Load) (list (_starred_content (Name &robot:2 Load)) (_starred_content (Name &floor:2 Load)) (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load))) nil) None)))) (Return (Name &candidate_locations:2 Load))) nil None None) (/splice (fn_10 &read_image:0 &robot_image:3 &floor_image:3 &find_locations:0 &locations:3 &main:0 (/choiceseq (fn_8 (Call (Name g_sorted Load) (list (_starred_content (Name &locations:3 Load))) nil) &loc:3))))) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:5 &image:1 &read_image:0) (FunctionDef &match_score:0 (arguments nil (list (arg &robot:2 None None) (arg &floor:2 None None) (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_W:2 Store)) (_starred_content (Name &robot_H:2 Store)) (_starred_content (Name &robot_image:2 Store))) Store)) (Name &robot:2 Load) None) (Assign (list (Name &score:2 Store)) (Constant i0 None) None) (fn_3 &score:2 &j:2 &x:2 &i:2 &y:2 &floor:2 &robot_image:2 &robot_W:2 &robot_H:2) (Return (Name &score:2 Load))) nil None None) (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot:3 None None) (arg &floor:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_W:3 Store)) (_starred_content (Name &robot_H:3 Store)) (_starred_content (Name &_:3 Store))) Store)) (Name &robot:3 Load) None) (Assign (list (Tuple (list (_starred_content (Name &floor_W:3 Store)) (_starred_content (Name &floor_H:3 Store)) (_starred_content (Name &floor_image:3 Store))) Store)) (Name &floor:3 Load) None) (/splice (fn_1 &max_score:3 &candidates:3 &y:3 &x:3 &score:3 &robot_W:3 &floor_W:3 &robot_H:3 &floor_H:3 (/choiceseq (Assign (list (Name &score:3 Store)) (Call (Name &match_score:0 Load) (list (_starred_content (Name &robot:3 Load)) (_starred_content (Name &floor_image:3 Load)) (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load))) nil) None)))) (Return (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:3 Load))) nil))) nil None None) (/splice (fn_10 &read_image:0 &robot:4 &floor:4 &find_candidates:0 &candidates:4 &main:0 (/choiceseq (fn_11 (Name &candidates:4 Load) &candidate:4))))) nil)",
            "(Module (/seq (FunctionDef &find_robot_location:0 (arguments nil (list (arg &robot_image:1 None None) (arg &floor_image:1 None None)) None nil nil None nil) (/seq (fn_12 (Name &robot_image:1 Load) &robot_height:1 &robot_width:1) (fn_12 (Name &floor_image:1 Load) &floor_height:1 &floor_width:1) (Assign (list (Name &robot_pixels:1 Store)) (fn_17 &robot_image:1 &row:2 &x:4) None) (Assign (list (Name &floor_pixels:1 Store)) (fn_17 &floor_image:1 &row:3 &x:5) None) (/splice (fn_1 &max_matches:1 &candidate_locations:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (fn_7 &robot_width:1 &rx:7 &robot_height:1 &ry:6 &x:1 &y:1 &floor_pixels:1 &robot_pixels:1 &matches:1)))) (Expr (Call (Attribute (Name &candidate_locations:1 Load) s_sort Load) nil nil)) (fn_8 (Name &candidate_locations:1 Load) &location:1)) nil None None) (Expr (Call (Name &find_robot_location:0 Load) (list (_starred_content (List (list (_starred_content (Constant s-WzUwLCAzMiwgNTBd None)) (_starred_content (Constant s-WzQ5LCAzMiwgNDhd None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDld None))) Load)) (_starred_content (List (list (_starred_content (Constant s-WzUxLCAzMiwgNTFd None)) (_starred_content (Constant s-WzQ5LCAzMiwgNDgsIDMyLCA0OF0= None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDksIDMyLCA0OF0= None)) (_starred_content (Constant s-WzQ4LCAzMiwgNDgsIDMyLCA0OV0= None))) Load))) nil))) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:4 &image:1 &read_image:0) (FunctionDef &match_images:0 (arguments nil (list (arg &robot:2 None None) (arg &floor:2 None None) (arg &robot_size:2 None None) (arg &floor_size:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_w:2 Store)) (_starred_content (Name &robot_h:2 Store))) Store)) (Name &robot_size:2 Load) None) (Assign (list (Tuple (list (_starred_content (Name &floor_w:2 Store)) (_starred_content (Name &floor_h:2 Store))) Store)) (Name &floor_size:2 Load) None) (Assign (list (Name &max_matches:2 Store)) (Constant i0 None) None) (Assign (list (Name &candidates:2 Store)) (List nil Load) None) (fn_4 &y:2 &x:2 &candidates:2 &max_matches:2 &matches:2 &robot_h:2 &floor_h:2 &robot_w:2 &floor_w:2 (/choiceseq (Assign (list (Name &matches:2 Store)) (Constant i0 None) None) (fn_3 &matches:2 &rh:2 &y:2 &rw:2 &x:2 &floor:2 &robot:2 &robot_h:2 &robot_w:2))) (Return (Name &candidates:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_w:3 Store)) (_starred_content (Name &robot_h:3 Store)) (_starred_content (Name &robot_image:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &floor_w:3 Store)) (_starred_content (Name &floor_h:3 Store)) (_starred_content (Name &floor_image:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:3 Store)) (Call (Name &match_images:0 Load) (list (_starred_content (Name &robot_image:3 Load)) (_starred_content (Name &floor_image:3 Load)) (_starred_content (Tuple (list (_starred_content (Name &robot_w:3 Load)) (_starred_content (Name &robot_h:3 Load))) Load)) (_starred_content (Tuple (list (_starred_content (Name &floor_w:3 Load)) (_starred_content (Name &floor_h:3 Load))) Load))) nil) None) (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:3 Load))) nil) &candidate:3)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (Assign (list (Name &candidates:1 Store)) (List nil Load) None) (fn_14 &robot_img:1 &robot_height:1 &robot_width:1) (fn_14 &floor_img:1 &floor_height:1 &floor_width:1) (For (Name &y:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &floor_height:1 Load) Sub (Name &robot_height:1 Load)) Add (Constant i1 None)))) nil) (/seq (For (Name &x:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &floor_width:1 Load) Sub (Name &robot_width:1 Load)) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &matches:1 Store)) (Call (Name g_sum Load) (list (_starred_content (GeneratorExp (fn_26 &j:5 &i:4 &robot_img:1 &x:1 &y:1 &floor_img:1) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &robot_height:1 Load))) nil) nil i0) (comprehension (Name &j:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &robot_width:1 Load))) nil) nil i0))))) nil) None) (If (Compare (Name &matches:1 Load) (list Gt) (list (Name &max_matches:1 Load))) (/seq (Assign (list (Name &candidates:1 Store)) (List (list (_starred_content (Tuple (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) Load))) Load) None) (Assign (list (Name &max_matches:1 Store)) (Name &matches:1 Load) None)) (/seq (If (Compare (Name &matches:1 Load) (list Eq) (list (Name &max_matches:1 Load))) (/seq (Expr (Call (Attribute (Name &candidates:1 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) Load))) nil))) (/seq))))) (/seq) None)) (/seq) None) (Return (Name &candidates:1 Load))) nil None None) (fn_9 &height:0 &width:0) (Assign (list (Name &robot_img:0 Store)) (fn_2 &height:0 &_:2) None) (Assign (list (Name &floor_dimensions:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:0 Store)) (_starred_content (Name &floor_height:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &floor_dimensions:0 Load))) nil) None) (Assign (list (Name &floor_img:0 Store)) (fn_2 &floor_height:0 &_:3) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil) None) (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:0 Load))) nil) &candidate:0)) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (fn_9 &H:3 &W:3) (Return (fn_2 &H:3 &_:4))) nil None None) (FunctionDef &compare_images:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None) (arg &start_x:1 None None) (arg &start_y:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &robot_h:1 Store)) (Call (Name g_len Load) (list (_starred_content (Name &robot_img:1 Load))) nil) None) (Assign (list (Name &robot_w:1 Store)) (Call (Name g_len Load) (list (_starred_content (Subscript (Name &robot_img:1 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &count:1 Store)) (Constant i0 None) None) (fn_3 &count:1 &x:1 &start_x:1 &y:1 &start_y:1 &floor_img:1 &robot_img:1 &robot_w:1 &robot_h:1) (Return (Name &count:1 Load))) nil None None) (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_img:2 None None) (arg &floor_img:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &floor_h:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &floor_img:2 Load))) nil) None) (Assign (list (Name &floor_w:2 Store)) (Call (Name g_len Load) (list (_starred_content (Subscript (Name &floor_img:2 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &robot_h:2 Store)) (Call (Name g_len Load) (list (_starred_content (Name &robot_img:2 Load))) nil) None) (Assign (list (Name &robot_w:2 Store)) (Call (Name g_len Load) (list (_starred_content (Subscript (Name &robot_img:2 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (/splice (fn_1 &max_matches:2 &candidates:2 &start_y:2 &start_x:2 &matches:2 &robot_w:2 &floor_w:2 &robot_h:2 &floor_h:2 (/choiceseq (Assign (list (Name &matches:2 Store)) (Call (Name &compare_images:0 Load) (list (_starred_content (Name &robot_img:2 Load)) (_starred_content (Name &floor_img:2 Load)) (_starred_content (Name &start_x:2 Load)) (_starred_content (Name &start_y:2 Load))) nil) None)))) (Return (Name &candidates:2 Load))) nil None None) (Assign (list (Name &robot_img:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &floor_img:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil) None) (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:0 Load))) nil) &candidate:0)) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:5 &image:1 &read_image_input:0) (FunctionDef &count_matching_pixels:0 (arguments nil (list (arg &robot_image:2 None None) (arg &floor_image:2 None None) (arg &rx:2 None None) (arg &ry:2 None None) (arg &RW:2 None None) (arg &RH:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (Constant i0 None) None) (fn_3 &count:2 &x:2 &rx:2 &y:2 &ry:2 &floor_image:2 &robot_image:2 &RW:2 &RH:2) (Return (Name &count:2 Load))) nil None None) (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot:3 None None) (arg &floor:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &RW:3 Store)) (_starred_content (Name &RH:3 Store)) (_starred_content (Name &robot_image:3 Store))) Store)) (Name &robot:3 Load) None) (Assign (list (Tuple (list (_starred_content (Name &FW:3 Store)) (_starred_content (Name &FH:3 Store)) (_starred_content (Name &floor_image:3 Store))) Store)) (Name &floor:3 Load) None) (/splice (fn_1 &max_matches:3 &candidates:3 &y:3 &x:3 &matches:3 &RW:3 &FW:3 &RH:3 &FH:3 (/choiceseq (Assign (list (Name &matches:3 Store)) (Call (Name &count_matching_pixels:0 Load) (list (_starred_content (Name &robot_image:3 Load)) (_starred_content (Name &floor_image:3 Load)) (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load)) (_starred_content (Name &RW:3 Load)) (_starred_content (Name &RH:3 Load))) nil) None)))) (Return (Name &candidates:3 Load))) nil None None) (/splice (fn_10 &read_image_input:0 &robot:4 &floor:4 &find_candidates:0 &candidates:4 &main:0 (/choiceseq (Expr (Call (Attribute (Name &candidates:4 Load) s_sort Load) nil nil)) (For (Name &candidate:4 Store) (Name &candidates:4 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &candidate:4 Load) Load))) nil))) (/seq) None))))) nil)",
            "(Module (/seq (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None)) None nil nil None nil) (/seq (fn_12 (Call (Attribute (Name &robot_img:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) &robot_h:1 &robot_w:1) (fn_12 (Call (Attribute (Name &floor_img:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) &floor_h:1 &floor_w:1) (fn_5 (Call (Attribute (Name &robot_img:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) &line:3 &robot_pixels:1) (fn_5 (Call (Attribute (Name &floor_img:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) &line:4 &floor_pixels:1) (FunctionDef &count_match:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &match_count:2 Store)) (Constant i0 None) None) (fn_3 &match_count:2 &j:2 &x:2 &i:2 &y:2 &floor_pixels:1 &robot_pixels:1 &robot_w:1 &robot_h:1) (Return (Name &match_count:2 Load))) nil None None) (/splice (fn_1 &max_matches:1 &candidates:1 &y:1 &x:1 &matches:1 &robot_w:1 &floor_w:1 &robot_h:1 &floor_h:1 (/choiceseq (Assign (list (Name &matches:1 Store)) (Call (Name &count_match:1 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) nil) None)))) (Expr (Call (Attribute (Name &candidates:1 Load) s_sort Load) nil nil)) (Return (Name &candidates:1 Load))) nil None None) (Assign (list (Name &robot_img:0 Store)) (Constant s-WzUwLCAzMiwgNTAsIDEwLCA0OSwgMzIsIDQ4LCAxMCwgNDgsIDMyLCA0OV0= None) None) (Assign (list (Name &floor_img:0 Store)) (Constant s-WzUxLCAzMiwgNTEsIDEwLCA0OSwgMzIsIDQ4LCAzMiwgNDgsIDEwLCA0OCwgMzIsIDQ5LCAzMiwgNDgsIDEwLCA0OCwgMzIsIDQ4LCAzMiwgNDld None) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_img:0 Load)) (_starred_content (Name &floor_img:0 Load))) nil) None) (fn_24 (Name &candidates:0 Load) &y:0 &x:0)) nil)",
            "(Module (/seq (/splice (fn_6 &h:4 &w:4 &_:5 &read_image:0 &robot:1 &robot_h:1 &robot_w:1 &matches:1 &floor:1 &start_y:1 &y:1 &start_x:1 &x:1 &count_matches:0 &robot:2 &robot_h:2 &robot_w:2 &floor:2 &floor_h:2 &floor_w:2 &y:2 &x:2 &matches:2 &candidates:2 &max_matches:2 &find_candidates:0)) (/splice (fn_10 &read_image:0 &robot_image:3 &floor_image:3 &find_candidates:0 &candidates:3 &main:0 (/choiceseq (Expr (Call (Attribute (Name &candidates:3 Load) s_sort Load) nil nil)) (fn_24 (Name &candidates:3 Load) &y:3 &x:3))))) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:3 &image:1 &read_image:0) (FunctionDef &match_locations:0 (arguments nil (list (arg &robot:2 None None) (arg &floor:2 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_width:2 Store)) (_starred_content (Name &robot_height:2 Store)) (_starred_content (Name &robot_image:2 Store))) Store)) (Name &robot:2 Load) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:2 Store)) (_starred_content (Name &floor_height:2 Store)) (_starred_content (Name &floor_image:2 Store))) Store)) (Name &floor:2 Load) None) (/splice (fn_1 &max_matches:2 &candidate_locations:2 &y:2 &x:2 &matches:2 &robot_width:2 &floor_width:2 &robot_height:2 &floor_height:2 (/choiceseq (Assign (list (Name &matches:2 Store)) (Constant i0 None) None) (fn_3 &matches:2 &r_x:2 &x:2 &r_y:2 &y:2 &floor_image:2 &robot_image:2 &robot_width:2 &robot_height:2)))) (fn_21 &loc:4 &candidate_locations:2) (fn_11 (Name &candidate_locations:2 Load) &loc:2)) nil None None) (Assign (list (Name &robot:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &floor:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Expr (Call (Name &match_locations:0 Load) (list (_starred_content (Name &robot:0 Load)) (_starred_content (Name &floor:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_robot_in_floor:0 (arguments nil (list (arg &robot_image:1 None None) (arg &floor_image:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &robot_lines:1 Store)) (Call (Attribute (Name &robot_image:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (Assign (list (Name &robot_dimensions:1 Store)) (Call (Attribute (Subscript (Name &robot_lines:1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &robot_width:1 Store)) (_starred_content (Name &robot_height:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &robot_dimensions:1 Load))) nil) None) (fn_5 (Name &robot_lines:1 Load) &line:3 &robot_pixels:1) (Assign (list (Name &floor_lines:1 Store)) (Call (Attribute (Name &floor_image:1 Load) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (Assign (list (Name &floor_dimensions:1 Store)) (Call (Attribute (Subscript (Name &floor_lines:1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:1 Store)) (_starred_content (Name &floor_height:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Name &floor_dimensions:1 Load))) nil) None) (fn_5 (Name &floor_lines:1 Load) &line:4 &floor_pixels:1) (FunctionDef &count_matches:1 (arguments nil (list (arg &x:2 None None) (arg &y:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &matches:2 Store)) (Constant i0 None) None) (fn_3 &matches:2 &dx:2 &x:2 &dy:2 &y:2 &floor_pixels:1 &robot_pixels:1 &robot_width:1 &robot_height:1) (Return (Name &matches:2 Load))) nil None None) (/splice (fn_1 &max_matches:1 &candidate_positions:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (Assign (list (Name &matches:1 Store)) (Call (Name &count_matches:1 Load) (list (_starred_content (Name &x:1 Load)) (_starred_content (Name &y:1 Load))) nil) None)))) (fn_8 (Call (Name g_sorted Load) (list (_starred_content (Name &candidate_positions:1 Load))) nil) &pos:1)) nil None None) (Assign (list (Name &robot_image:0 Store)) (Constant s-WzUwLCAzMiwgNTAsIDEwLCA0OSwgMzIsIDQ4LCAxMCwgNDgsIDMyLCA0OV0= None) None) (Assign (list (Name &floor_image:0 Store)) (Constant s-WzUxLCAzMiwgNTEsIDEwLCA0OSwgMzIsIDQ4LCAzMiwgNDgsIDEwLCA0OCwgMzIsIDQ5LCAzMiwgNDgsIDEwLCA0OCwgMzIsIDQ4LCAzMiwgNDld None) None) (Expr (Call (Name &find_robot_in_floor:0 Load) (list (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &floor_image:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_best_matches:0 (arguments nil (list (arg &robot_dim:1 None None) (arg &robot_image:1 None None) (arg &floor_dim:1 None None) (arg &floor_image:1 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_width:1 Store)) (_starred_content (Name &robot_height:1 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &n:2 Load))) nil) (list (comprehension (Name &n:2 Store) (Call (Attribute (Name &robot_dim:1 Load) s_split Load) nil nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:1 Store)) (_starred_content (Name &floor_height:1 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &n:3 Load))) nil) (list (comprehension (Name &n:3 Store) (Call (Attribute (Name &floor_dim:1 Load) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &candidates:1 Store)) (List nil Load) None) (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (fn_4 &y:1 &x:1 &candidates:1 &max_matches:1 &matches:1 &robot_height:1 &floor_height:1 &robot_width:1 &floor_width:1 (fn_23 (fn_26 &rx:1 &ry:1 &robot_image:1 &x:1 &y:1 &floor_image:1) &matches:1 &robot_height:1 &ry:1 &robot_width:1 &rx:1)) (fn_21 &pos:4 &candidates:1) (Return (Name &candidates:1 Load))) nil None None) (Assign (list (Name &robot_dim:0 Store)) (Constant s-WzUwLCAzMiwgNTBd None) None) (Assign (list (Name &robot_image:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (Assign (list (Name &floor_dim:0 Store)) (Constant s-WzUxLCAzMiwgNTFd None) None) (Assign (list (Name &floor_image:0 Store)) (List (list (_starred_content (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load)) (_starred_content (List (list (_starred_content (Constant i0 None)) (_starred_content (Constant i0 None)) (_starred_content (Constant i1 None))) Load))) Load) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_best_matches:0 Load) (list (_starred_content (Name &robot_dim:0 Load)) (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &floor_dim:0 Load)) (_starred_content (Name &floor_image:0 Load))) nil) None) (fn_11 (Name &candidates:0 Load) &candidate:0)) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:4 &image:1 &read_image:0) (fn_19 &matches:2 &x:2 &j:2 &y:2 &i:2 &floor:2 &robot:2 &W:2 &H:2 &count_matches:0) (FunctionDef &find_robot:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &rW:3 Store)) (_starred_content (Name &rH:3 Store)) (_starred_content (Name &robot:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &fW:3 Store)) (_starred_content (Name &fH:3 Store)) (_starred_content (Name &floor:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (/splice (fn_1 &max_matches:3 &candidate_locations:3 &y:3 &x:3 &matches:3 &rW:3 &fW:3 &rH:3 &fH:3 (/choiceseq (Assign (list (Name &matches:3 Store)) (Call (Name &count_matches:0 Load) (list (_starred_content (Name &robot:3 Load)) (_starred_content (Name &floor:3 Load)) (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load)) (_starred_content (Name &rW:3 Load)) (_starred_content (Name &rH:3 Load))) nil) None)))) (Expr (Call (Attribute (Name &candidate_locations:3 Load) s_sort Load) nil nil)) (fn_11 (Name &candidate_locations:3 Load) &location:3)) nil None None) (Expr (Call (Name &find_robot:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (fn_9 &h:3 &w:3) (Return (fn_2 &h:3 &_:4))) nil None None) (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_img:1 None None) (arg &floor_img:1 None None)) None nil nil None nil) (/seq (fn_13 &robot_img:1 &robot_w:1 &robot_h:1) (fn_13 &floor_img:1 &floor_w:1 &floor_h:1) (/splice (fn_1 &max_matches:1 &candidates:1 &y:1 &x:1 &matches:1 &robot_w:1 &floor_w:1 &robot_h:1 &floor_h:1 (/choiceseq (fn_7 &robot_w:1 &rx:6 &robot_h:1 &ry:5 &x:1 &y:1 &floor_img:1 &robot_img:1 &matches:1)))) (Return (Name &candidates:1 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &robot_img:2 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &floor_img:2 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:2 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_img:2 Load)) (_starred_content (Name &floor_img:2 Load))) nil) None) (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:2 Load))) nil) &candidate:2)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (Expr (Constant s-WzgyLCAxMDEsIDk3LCAxMDAsIDExNSwgMzIsIDk3LCAxMTAsIDMyLCAxMDUsIDEwOSwgOTcsIDEwMywgMTAxLCAzMiwgMTAyLCAxMTQsIDExMSwgMTA5LCAzMiwgMTE1LCAxMTYsIDk3LCAxMTAsIDEwMCwgOTcsIDExNCwgMTAwLCAzMiwgMTA1LCAxMTAsIDExMiwgMTE3LCAxMTYsIDQ2XQ== None)) (fn_9 &H:3 &W:3) (Return (fn_2 &H:3 &_:4))) nil None None) (FunctionDef &match_images:0 (arguments nil (list (arg &robot:1 None None) (arg &floor:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzcwLCAxMDUsIDExMCwgMTAwLCAxMTUsIDMyLCA5NywgMTA4LCAxMDgsIDMyLCAxMDksIDk3LCAxMTYsIDk5LCAxMDQsIDEwMSwgMTE1LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE0LCAxMTEsIDk4LCAxMTEsIDExNiwgMzIsIDEwNSwgMTA5LCA5NywgMTAzLCAxMDEsIDMyLCAxMDUsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDIsIDEwOCwgMTExLCAxMTEsIDExNCwgMzIsIDEwNSwgMTA5LCA5NywgMTAzLCAxMDEsIDQ2XQ== None)) (fn_14 &robot:1 &robot_height:1 &robot_width:1) (fn_14 &floor:1 &floor_height:1 &floor_width:1) (/splice (fn_1 &max_matches:1 &candidates:1 &y:1 &x:1 &matches:1 &robot_width:1 &floor_width:1 &robot_height:1 &floor_height:1 (/choiceseq (fn_7 &robot_width:1 &rx:6 &robot_height:1 &ry:5 &x:1 &y:1 &floor:1 &robot:1 &matches:1)))) (Return (Name &candidates:1 Load))) nil None None) (/splice (fn_10 &read_image:0 &robot:2 &floor:2 &match_images:0 &candidates:2 &main:0 (/choiceseq (Expr (Call (Attribute (Name &candidates:2 Load) s_sort Load) nil nil)) (fn_24 (Name &candidates:2 Load) &y:2 &x:2))))) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &W:4 Store)) (_starred_content (Name &H:4 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil) None) (Return (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &H:4 Load))) nil) nil i0))))) nil None None) (fn_16 (fn_25 &c:1 &x:1 &r:1 &y:1 &floor:1 &robot:1) &match_count:1 &robot:1 &c:1 &r:1 &y:1 &x:1 &floor:1 &count_matches:0) (FunctionDef &find_best_locations:0 (arguments nil (list (arg &robot:2 None None) (arg &floor:2 None None)) None nil nil None nil) (/seq (fn_13 &robot:2 &robot_width:2 &robot_height:2) (fn_13 &floor:2 &floor_width:2 &floor_height:2) (/splice (fn_1 &max_matches:2 &best_locations:2 &y:2 &x:2 &matches:2 &robot_width:2 &floor_width:2 &robot_height:2 &floor_height:2 (/choiceseq (Assign (list (Name &matches:2 Store)) (Call (Name &count_matches:0 Load) (list (_starred_content (Name &robot:2 Load)) (_starred_content (Name &floor:2 Load)) (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load))) nil) None)))) (Return (Name &best_locations:2 Load))) nil None None) (/splice (fn_10 &read_image:0 &robot:3 &floor:3 &find_best_locations:0 &best_locations:3 &main:0 (/choiceseq (fn_11 (Call (Name g_sorted Load) (list (_starred_content (Name &best_locations:3 Load))) nil) &location:3))))) nil)",
            "(Module (/seq (fn_18 &W:1 &H:1 &_:4 &img:1 &read_image:0) (FunctionDef &match_images:0 (arguments nil (list (arg &robot_W:2 None None) (arg &robot_H:2 None None) (arg &robot_img:2 None None) (arg &floor_W:2 None None) (arg &floor_H:2 None None) (arg &floor_img:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_matches:2 Store)) (Constant i0 None) None) (Assign (list (Name &candidates:2 Store)) (List nil Load) None) (fn_4 &y:2 &x:2 &candidates:2 &max_matches:2 &matches:2 &robot_H:2 &floor_H:2 &robot_W:2 &floor_W:2 (fn_23 (fn_25 &i:2 &x:2 &j:2 &y:2 &floor_img:2 &robot_img:2) &matches:2 &robot_H:2 &j:2 &robot_W:2 &i:2)) (Return (Name &candidates:2 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_W:3 Store)) (_starred_content (Name &robot_H:3 Store)) (_starred_content (Name &robot_img:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &floor_W:3 Store)) (_starred_content (Name &floor_H:3 Store)) (_starred_content (Name &floor_img:3 Store))) Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:3 Store)) (Call (Name &match_images:0 Load) (list (_starred_content (Name &robot_W:3 Load)) (_starred_content (Name &robot_H:3 Load)) (_starred_content (Name &robot_img:3 Load)) (_starred_content (Name &floor_W:3 Load)) (_starred_content (Name &floor_H:3 Load)) (_starred_content (Name &floor_img:3 Load))) nil) None) (fn_24 (Call (Name g_sorted Load) (list (_starred_content (Name &candidates:3 Load))) nil) &y:3 &x:3)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_candidate_locations:0 (arguments nil nil None nil nil None nil) (/seq (fn_9 &H_robot:1 &W_robot:1) (Assign (list (Name &robot_image:1 Store)) (fn_2 &H_robot:1 &_:2) None) (fn_9 &H_floor:1 &W_floor:1) (Assign (list (Name &floor_image:1 Store)) (fn_2 &H_floor:1 &_:3) None) (Assign (list (Name &max_matches:1 Store)) (Constant i0 None) None) (Assign (list (Name &candidate_locations:1 Store)) (List nil Load) None) (fn_4 &y:1 &x:1 &candidate_locations:1 &max_matches:1 &matches:1 &H_robot:1 &H_floor:1 &W_robot:1 &W_floor:1 (fn_23 (fn_26 &i:1 &j:1 &robot_image:1 &x:1 &y:1 &floor_image:1) &matches:1 &H_robot:1 &j:1 &W_robot:1 &i:1)) (Expr (Call (Attribute (Name &candidate_locations:1 Load) s_sort Load) nil nil)) (fn_24 (Name &candidate_locations:1 Load) &y:1 &x:1)) nil None None)) nil)",
            "(Module (/seq (FunctionDef &read_image:0 (arguments nil nil None nil nil None nil) (/seq (fn_9 &H:3 &W:3) (Return (fn_2 &H:3 &_:4))) nil None None) (fn_16 (fn_25 &j:1 &x:1 &i:1 &y:1 &background_image:1 &robot_image:1) &count:1 &robot_image:1 &j:1 &i:1 &y:1 &x:1 &background_image:1 &count_matches:0) (FunctionDef &find_candidates:0 (arguments nil (list (arg &robot_image:2 None None) (arg &background_image:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &candidates:2 Store)) (List nil Load) None) (Assign (list (Name &max_matches:2 Store)) (Constant i0 None) None) (fn_13 &robot_image:2 &R_w:2 &R_h:2) (fn_13 &background_image:2 &B_w:2 &B_h:2) (/splice (fn_22 (Assign (list (Name &matches:2 Store)) (Call (Name &count_matches:0 Load) (list (_starred_content (Name &robot_image:2 Load)) (_starred_content (Name &background_image:2 Load)) (_starred_content (Name &x:2 Load)) (_starred_content (Name &y:2 Load))) nil) None) &y:2 &x:2 &candidates:2 &max_matches:2 &matches:2 &R_w:2 &B_w:2 &R_h:2 &B_h:2))) nil None None) (Assign (list (Name &robot_image:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &background_image:0 Store)) (Call (Name &read_image:0 Load) nil nil) None) (Assign (list (Name &candidates:0 Store)) (Call (Name &find_candidates:0 Load) (list (_starred_content (Name &robot_image:0 Load)) (_starred_content (Name &background_image:0 Load))) nil) None) (For (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store) (Name &candidates:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (FormattedValue (Name &x:0 Load) i-1 None) (Constant s-WzMyXQ== None) (FormattedValue (Name &y:0 Load) i-1 None))))) nil))) (/seq) None)) nil)",
            "(Module (/seq (FunctionDef &parse_image:0 (arguments nil (list (arg &input_lines:1 None None)) None nil nil None nil) (/seq (fn_12 (Name &input_lines:1 Load) &H:1 &W:1) (Assign (list (Name &pixels:1 Store)) (ListComp (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &line:5 Load) s_split Load) nil nil))) nil))) nil) (list (comprehension (Name &line:5 Store) (Subscript (Name &input_lines:1 Load) (_slice_slice (Slice (Constant i1 None) (BinOp (Name &H:1 Load) Add (Constant i1 None)) None)) Load) nil i0))) None) (Return (Tuple (list (_starred_content (Name &W:1 Load)) (_starred_content (Name &H:1 Load)) (_starred_content (Name &pixels:1 Load))) Load))) nil None None) (fn_19 &match_count:2 &x:2 &j:2 &y:2 &i:2 &floor_pixels:2 &robot_pixels:2 &robot_width:2 &robot_height:2 &count_matches:0) (FunctionDef &find_robot:0 (arguments nil (list (arg &robot:3 None None) (arg &floor:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &robot_width:3 Store)) (_starred_content (Name &robot_height:3 Store)) (_starred_content (Name &robot_pixels:3 Store))) Store)) (Name &robot:3 Load) None) (Assign (list (Tuple (list (_starred_content (Name &floor_width:3 Store)) (_starred_content (Name &floor_height:3 Store)) (_starred_content (Name &floor_pixels:3 Store))) Store)) (Name &floor:3 Load) None) (/splice (fn_1 &max_matches:3 &candidate_locations:3 &y:3 &x:3 &matches:3 &robot_width:3 &floor_width:3 &robot_height:3 &floor_height:3 (/choiceseq (Assign (list (Name &matches:3 Store)) (Call (Name &count_matches:0 Load) (list (_starred_content (Name &robot_pixels:3 Load)) (_starred_content (Name &floor_pixels:3 Load)) (_starred_content (Name &x:3 Load)) (_starred_content (Name &y:3 Load)) (_starred_content (Name &robot_width:3 Load)) (_starred_content (Name &robot_height:3 Load))) nil) None)))) (Expr (Call (Attribute (Name &candidate_locations:3 Load) s_sort Load) nil nil)) (Return (Name &candidate_locations:3 Load))) nil None None) (/splice (fn_15 (/seq (Assign (list (Name &robot:4 Store)) (Call (Name &parse_image:0 Load) (list (_starred_content (Name &robot_input:4 Load))) nil) None) (Assign (list (Name &floor:4 Store)) (Call (Name &parse_image:0 Load) (list (_starred_content (Name &floor_input:4 Load))) nil) None) (Assign (list (Name &candidate_locations:4 Store)) (Call (Name &find_robot:0 Load) (list (_starred_content (Name &robot:4 Load)) (_starred_content (Name &floor:4 Load))) nil) None) (fn_8 (Name &candidate_locations:4 Load) &location:4)) &floor_input:4 &robot_input:4 &process_images:0 &robot_input:0 &floor_input:0)) (Expr (Call (Name &process_images:0 Load) (list (_starred_content (Name &robot_input:0 Load)) (_starred_content (Name &floor_input:0 Load))) nil))) nil)"
        ]
    },
    "496": {
        "abstractions": [
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content #0)) nil) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (BinOp (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) Add (Subscript (Name %3 Load) (_slice_content (BinOp (Name %2 Load) Sub (Name %1 Load))) Load)))) nil) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (FunctionDef %7 (arguments nil (list (arg %6 None None) (arg %5 None None) (arg %4 None None) (arg %3 None None)) None nil nil None nil) (/seq ?0 (For (Name %1 Store) (Name %3 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) nil))) (/seq) None)) nil None None) (Assign (list (Tuple (list (_starred_content (Name %9 Store)) (_starred_content (Name %8 Store))) Store)) (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None))) Load) None) (Assign (list (Name %10 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i7 None))) Load) None) (Assign (list (Name %11 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i8 None))) Load) None) (Expr (Call (Name %7 Load) (list (_starred_content (Name %9 Load)) (_starred_content (Name %8 Load)) (_starred_content (Name %10 Load)) (_starred_content (Name %11 Load))) nil)))",
                "sym_arity": 11,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store)) (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Sub (Constant i1 None))) Load) None)) (/seq) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name %3 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name %5 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name %4 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None))) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_1 (BinOp (BinOp (Name %1 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) %3 %1 %2)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (BinOp (Name %2 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name %3 Store)) (BinOp (Name %2 Load) Sub (Name %1 Load)) None) (Assign (list (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load)) (_starred_content (BinOp (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Load) Add (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load)))) nil) None)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (FunctionDef %5 (arguments nil (list (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (Assign (list (Tuple (list (_starred_content (Name %7 Store)) (_starred_content (Name %6 Store))) Store)) (Tuple (list (_starred_content (Constant i4 None)) (_starred_content (Constant i5 None))) Load) None) (Assign (list (Name %8 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i7 None))) Load) None) (Assign (list (Name %9 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i8 None))) Load) None))",
                "sym_arity": 9,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil))) Load) Mult (BinOp #0 Add (Constant i1 None))) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Assign (list (Name %2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Call (Name g_max Load) (list (_starred_content (Name %1 Load))) nil) Add (Constant i1 None))) None)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None))) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (GeneratorExp (BinOp (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) Add (Subscript (Name %3 Load) (_slice_content (BinOp (Name %1 Load) Sub (Name %2 Load))) Load)) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (BinOp (Name %1 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)))) nil) nil i0))))) nil) None)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None))) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil) (/seq (fn_1 (BinOp (BinOp (Name %2 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) %3 %2 %1)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Add (Constant i1 None))) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %4 Load) Add (Constant i1 None))) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) nil) (/seq (Assign (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_1 #0 %3 %1 %2)) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (List nil Load) None) (For (Name %2 Store) (Name %4 Load) (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) nil))) (/seq) None) (Return (Name %1 Load)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/seq (FunctionDef %8 (arguments nil (list (arg %7 None None) (arg %6 None None) (arg %5 None None) (arg %1 None None)) None nil nil None nil) (/seq (Assign (list (Name %2 Store)) (Call (Name g_max Load) (list (_starred_content (Name %1 Load))) nil) None) ?0 (For (Name %3 Store) (Name %1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load))) nil))) (/seq) None)) nil None None) (Assign (list (Name %9 Store)) (Constant i4 None) None) (Assign (list (Name %10 Store)) (Constant i5 None) None) (Assign (list (Name %11 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i7 None))) Load) None) (Assign (list (Name %12 Store)) (List (list (_starred_content (Constant i2 None)) (_starred_content (Constant i3 None)) (_starred_content (Constant i5 None)) (_starred_content (Constant i6 None)) (_starred_content (Constant i8 None))) Load) None) (Expr (Call (Name %8 Load) (list (_starred_content (Name %9 Load)) (_starred_content (Name %10 Load)) (_starred_content (Name %11 Load)) (_starred_content (Name %12 Load))) nil)))",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(Assign (list (Name %1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp #0 Add (Constant i1 None))) None)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (FunctionDef %5 (arguments nil (list (arg %4 None None) (arg %3 None None) (arg %2 None None) (arg %1 None None)) None nil nil None nil) #0 nil None None) (/splice (fn_4 %10 %9 %8 %7 %6)) (Assign (list (Name %11 Store)) (Call (Name %5 Load) (list (_starred_content (Name %9 Load)) (_starred_content (Name %10 Load)) (_starred_content (Name %8 Load)) (_starred_content (Name %6 Load))) nil) None) (For (Name %12 Store) (Name %11 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name %12 Load))) nil))) (/seq) None))",
                "sym_arity": 12,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp #0 Add (Constant i1 None)))) nil)",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            }
        ],
        "rewritten": [
            "(Module (/seq (/splice (fn_7 (/seq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) None) (fn_8 (Name &max_k:1 Load) &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &max_k:1 Load))) nil) &i:1 &a:1 &dp:1) (fn_11 (Name &max_k:1 Load) &dp:1 &k:1 &i:1 &n:1) (/splice (fn_14 &results:1 &k:1 &dp:1 &queries:1))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &queries:1 &energy:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &energy:0 &queries:0 (/choiceseq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &energy:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &k:1 &dp:1 &j:1 &n:1))) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil))) nil) &i:1 &energy_levels:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &k:1 &dp:1 &i:1 &n:1) (Return (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &k:2 Load)) Load) (list (comprehension (Name &k:2 Store) (Name &queries:1 Load) nil i0))))) &queries:1 &energy_levels:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &energy_levels:0 &queries:0)) (Assign (list (Name &results:0 Store)) (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &energy_levels:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (For (Name &result:0 Store) (Name &results:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (fn_2 &qk:1 &dp:1 &k:1 &a:1 &q:1 &n:1 &min_explodification_energy:0 &q:0 &n:0 &a:0 &k:0 (/choiceseq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &k:1 Load))) nil) None) (fn_8 (Name &max_k:1 Load) &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_11 (Name &max_k:1 Load) &dp:1 &i:1 &j:1 &n:1))) nil)",
            "(Module (/seq (FunctionDef &explodification:0 (arguments nil (list (arg &n:1 None None) (arg &q:1 None None) (arg &a:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil))) nil) &i:1 &a:1 &dp:1) (fn_10 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &i:1 &j:3 &dp:1 &n:1) (For (Name &query:1 Store) (Name &queries:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &query:1 Load)) Load))) nil))) (/seq) None)) nil None None) (/splice (fn_4 &q:0 &n:0 &a:0 &_:2 &queries:0)) (Expr (Call (Name &explodification:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &k_list:1 &a:1 &q:1 &n:1 &min_energy:0 &q:0 &n:0 &a:0 &k_list:0 (/choiceseq (fn_9 &k_list:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &k_list:1 Load))) nil) &i:1 &dp:1 &j:1 &n:1))) nil)",
            "(Module (fn_17 (/seq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (For (Name &k:1 Store) (fn_18 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil)) (/seq (fn_6 &i:1 &k:1 &j:1 &dp:1)) (/seq) None) (/splice (fn_14 &results:1 &query:1 &dp:1 &queries:1))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &queries:0 &_:2 &a:0 &n:0 &q:0 &results:0 &result:0) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 &q:1 &n:1 &a:1 &_:4 &k_list:1)) (Return (Tuple (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &a:1 Load)) (_starred_content (Name &k_list:1 Load))) Load))) nil None None) (FunctionDef &explodificate:0 (arguments nil (list (arg &n:2 None None) (arg &a:2 None None) (arg &k_list:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &max_k:2 Store)) (Call (Name g_max Load) (list (_starred_content (Name &k_list:2 Load))) nil) None) (fn_8 (Name &max_k:2 Load) &dp:2) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:2 Load)) (_starred_content (Name &max_k:2 Load))) nil) &i:2 &a:2 &dp:2) (For (Name &k:2 Store) (fn_12 (Name &max_k:2 Load) &n:2) (/seq (fn_1 (Name &k:2 Load) &i:2 &k:2 &dp:2)) (/seq) None) (Return (ListComp (Subscript (Name &dp:2 Load) (_slice_content (Name &k:5 Load)) Load) (list (comprehension (Name &k:5 Store) (Name &k_list:2 Load) nil i0))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:3 Store)) (_starred_content (Name &a:3 Store)) (_starred_content (Name &k_list:3 Store))) Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Name &results:3 Store)) (Call (Name &explodificate:0 Load) (list (_starred_content (Name &n:3 Load)) (_starred_content (Name &a:3 Load)) (_starred_content (Name &k_list:3 Load))) nil) None) (For (Name &result:3 Store) (Name &results:3 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:3 Load))) nil))) (/seq) None)) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
            "(Module (fn_17 (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (For (Name &k:1 Store) (fn_12 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &n:1) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_1 (Name &k:1 Load) &i:1 &k:1 &dp:1)) (/seq) None) (Return (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &k:3 Load)) Load) (list (comprehension (Name &k:3 Store) (Name &queries:1 Load) nil i0))))) &queries:1 &a:1 &q:1 &n:1 &min_explodification_energy:0 &queries:0 &_:2 &a:0 &n:0 &q:0 &results:0 &result:0) nil)",
            "(Module (/seq (FunctionDef &minimum_energy_released:0 (arguments nil (list (arg &experiments_input:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &input_lines:1 Store)) (Call (Attribute (Call (Attribute (Name &experiments_input:1 Load) s_strip Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &n:1 Store)) (_starred_content (Name &q:1 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Subscript (Name &input_lines:1 Load) (_slice_content (Constant i0 None)) Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil) None) (Assign (list (Name &energy_levels:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Subscript (Name &input_lines:1 Load) (_slice_content (Constant i1 None)) Load) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &atoms:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Subscript (Name &input_lines:1 Load) (_slice_slice (Slice (Constant i2 None) None None)) Load))) nil))) nil) None) (fn_9 &atoms:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &energy_levels:1 &dp:1) (fn_10 (Call (Name g_max Load) (list (_starred_content (Name &atoms:1 Load))) nil) &k:1 &i:3 &dp:1 &n:1) (Return (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &k:2 Load)) Load))) nil) (list (comprehension (Name &k:2 Store) (Name &atoms:1 Load) nil i0))))) nil))) nil None None) (Assign (list (Name &experiments_input:0 Store)) (Constant s-WzUyLCAzMiwgNTMsIDEwLCA1MCwgMzIsIDUxLCAzMiwgNTMsIDMyLCA1NSwgMTAsIDUwLCAxMCwgNTEsIDEwLCA1MywgMTAsIDU0LCAxMCwgNTZd None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &minimum_energy_released:0 Load) (list (_starred_content (Name &experiments_input:0 Load))) nil))) nil))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &k_values:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &k_values:0 (/choiceseq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &k_values:1 Load))) nil) None) (fn_16 (Name &max_k:1 Load) &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_10 (Name &max_k:1 Load) &i:1 &j:2 &dp:1 &n:1))) nil)",
            "(Module (fn_2 &query:1 &dp:1 &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0 (/choiceseq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (For (Name &k:1 Store) (fn_12 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &n:1) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_6 &i:1 &k:1 &j:1 &dp:1)) (/seq) None))) nil)",
            "(Module (fn_17 (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &k:1 &dp:1 &i:1 &n:1) (Assign (list (Name &results:1 Store)) (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &query:3 Load)) Load) (list (comprehension (Name &query:3 Store) (Name &queries:1 Load) nil i0))) None) (Return (Name &results:1 Load))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &queries:0 &_:2 &a:0 &n:0 &q:0 &results:0 &result:0) nil)",
            "(Module (fn_17 (/seq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &k_queries:1 Load))) nil) &dp:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Store)) (Subscript (Name &a:1 Load) (_slice_content (Name &i:1 Load)) Load) None)) (/seq) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None))) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil))) nil) (/seq (fn_1 (BinOp (BinOp (Name &k:1 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) &i:1 &k:1 &dp:1)) (/seq) None) (Return (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &k:3 Load)) Load) (list (comprehension (Name &k:3 Store) (Name &k_queries:1 Load) nil i0))))) &k_queries:1 &a:1 &q:1 &n:1 &explodification_min_energy:0 &k_queries:0 &_:2 &a:0 &n:0 &q:0 &result:0 &energy:0) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &k:1 &dp:1 &i:1 &n:1) (/splice (fn_14 &results:1 &query:1 &dp:1 &queries:1))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil))) nil))) nil))) nil)",
            "(Module (fn_15 &queries:1 &max_k:1 &k:1 &dp:1 &a:1 &q:1 &n:1 &min_energy_released:0 &n:0 &q:0 &a:0 &queries:0 (/choiceseq (fn_8 (Name &max_k:1 Load) &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &max_k:1 Load))) nil) &i:1 &a:1 &dp:1) (fn_11 (Name &max_k:1 Load) &dp:1 &k:1 &i:1 &n:1))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0 (/choiceseq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil))) nil) &i:1 &a:1 &dp:1) (For (Name &k:1 Store) (fn_12 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &n:1) (/seq (fn_1 (Name &k:1 Load) &i:1 &k:1 &dp:1)) (/seq) None))) nil)",
            "(Module (fn_2 &k:1 &energy_table:1 &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0 (/choiceseq (fn_16 (Call (Name g_max Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil))) nil) &energy_table:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &energy_table:1) (fn_13 (Name &k:1 Load) &k:1 &energy_table:1 &i:1 &n:1))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &k_list:1 &a:1 &q:1 &n:1 &compute_min_energy:0 &q:0 &n:0 &a:0 &k_list:0 (/choiceseq (fn_9 &k_list:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_13 (Name &k:1 Load) &k:1 &dp:1 &i:1 &n:1))) nil)",
            "(Module (fn_2 &query:1 &dp:1 &queries:1 &energy_list:1 &q:1 &n:1 &min_energy_explodification:0 &q:0 &n:0 &energy_list:0 &queries:0 (/choiceseq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &energy_list:1 &dp:1) (fn_13 (BinOp (BinOp (Name &k:1 Load) FloorDiv (Constant i2 None)) Add (Constant i1 None)) &k:1 &dp:1 &i:1 &n:1))) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) None) (fn_16 (Name &max_k:1 Load) &min_energy:1) (fn_3 (Name &n:1 Load) &k:1 &a:1 &min_energy:1) (For (Name &k:1 Store) (fn_12 (Name &max_k:1 Load) &n:1) (/seq (Assign (list (Subscript (Name &min_energy:1 Load) (_slice_content (Name &k:1 Load)) Store)) (BinOp (Subscript (Name &min_energy:1 Load) (_slice_content (BinOp (Name &k:1 Load) FloorDiv (Constant i2 None))) Load) Add (Subscript (Name &min_energy:1 Load) (_slice_content (BinOp (BinOp (Name &k:1 Load) Add (Constant i1 None)) FloorDiv (Constant i2 None))) Load)) None)) (/seq) None) (/splice (fn_14 &results:1 &k:1 &min_energy:1 &queries:1))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0)) (Assign (list (Name &answer:0 Store)) (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_starred (Starred (Name &answer:0 Load) Load))) (list (keyword s_sep (Constant s-WzEwXQ== None)))))) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_11 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1 &k:1 &i:1 &n:1) (Return (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &k:2 Load)) Load) (list (comprehension (Name &k:2 Store) (Name &queries:1 Load) nil i0))))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0)) (Assign (list (Name &result:0 Store)) (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Constant s-WzEwXQ== None) s_join Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_str Load)) (_starred_content (Name &result:0 Load))) nil))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_energy_released:0 (arguments nil (list (arg &n:1 None None) (arg &q:1 None None) (arg &a:1 None None) (arg &queries:1 None None)) None nil nil None nil) (/seq (fn_9 &queries:1 &dp:1) (fn_3 (Name &n:1 Load) &i:1 &a:1 &dp:1) (fn_5 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &i:1 &dp:1 &j:1 &n:1) (For (Name &k:1 Store) (Name &queries:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil))) (/seq) None)) nil None None) (/splice (fn_4 &q:0 &n:0 &a:0 &_:2 &queries:0)) (Expr (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil)",
            "(Module (/seq (FunctionDef &min_energy_released:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_4 &q:1 &n:1 &a:1 &_:2 &queries:1)) (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) None) (fn_8 (Name &max_k:1 Load) &dp:1) (For (Name &i:1 Store) (fn_18 (Name &n:1 Load)) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Call (Name g_min Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &a:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) nil) None)) (/seq) None) (For (Name &k:1 Store) (fn_12 (Name &max_k:1 Load) &n:1) (/seq (fn_1 (Name &k:1 Load) &i:1 &k:1 &dp:1)) (/seq) None) (For (Name &k:1 Store) (Name &queries:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &min_energy_released:0 Load) nil nil))) nil)",
            "(Module (fn_15 &k_list:1 &max_k:1 &k:1 &dp:1 &a:1 &q:1 &n:1 &explodificate:0 &n:0 &q:0 &a:0 &k_list:0 (/choiceseq (fn_16 (Name &max_k:1 Load) &dp:1) (fn_3 (Name &n:1 Load) &k:1 &a:1 &dp:1) (fn_5 (Name &max_k:1 Load) &k:1 &dp:1 &i:1 &n:1))) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) None) (fn_8 (Name &max_k:1 Load) &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Name &max_k:1 Load))) nil) &k:1 &a:1 &dp:1) (fn_11 (Name &max_k:1 Load) &dp:1 &k:1 &i:1 &n:1) (Return (ListComp (Subscript (Name &dp:1 Load) (_slice_content (Name &k:2 Load)) Load) (list (comprehension (Name &k:2 Store) (Name &queries:1 Load) nil i0))))) &queries:1 &a:1 &q:1 &n:1 &min_energy_released:0 &q:0 &n:0 &a:0 &queries:0)) (Assign (list (Name &result:0 Store)) (Call (Name &min_energy_released:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &a:0 Load)) (_starred_content (Name &queries:0 Load))) nil) None) (For (Name &value:0 Store) (Name &result:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &value:0 Load))) nil))) (/seq) None)) nil)",
            "(Module (/seq (/splice (fn_7 (/seq (fn_8 (Name &n:1 Load) &dp:1) (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (fn_3 (Name &n:1 Load) &i:1 &energies:1 &dp:1) (For (Name &k:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &k:1 Load) (list LtE) (list (Name &n:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &dp:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil))) (/seq (fn_8 (Name &k:1 Load) &min_energy:1) (For (Name &i:1 Store) (fn_18 (Name &n:1 Load)) (/seq (Assign (list (Subscript (Name &min_energy:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Load) None)) (/seq) None) (For (Name &i:1 Store) (fn_12 (Name &k:1 Load) &n:1) (/seq (fn_1 (Name &i:1 Load) &x:1 &i:1 &min_energy:1)) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &min_energy:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil))))) (/seq) None)) &queries:1 &energies:1 &q:1 &n:1 &min_energy:0 &q:0 &n:0 &energies:0 &queries:0)) (Expr (Call (Name &min_energy:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &q:0 Load)) (_starred_content (Name &energies:0 Load)) (_starred_content (Name &queries:0 Load))) nil))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &queries:1 &energy_levels:1 &q:1 &n:1 &explodification_min_energy:0 &q:0 &n:0 &energy_levels:0 &queries:0 (/choiceseq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil)) (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None)))) nil))) nil) (/seq (Assign (list (Subscript (Name &dp:1 Load) (_slice_content (Name &i:1 Load)) Store)) (Subscript (Name &energy_levels:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load) None)) (/seq) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Add (Constant i1 None))) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &dp:1 Load))) nil))) nil) (/seq (fn_6 &i:1 &k:1 &j:1 &dp:1)) (/seq) None))) nil)",
            "(Module (fn_2 &k:1 &min_energy:1 &queries:1 &a:1 &q:1 &n:1 &min_energy_explodification:0 &q:0 &n:0 &a:0 &queries:0 (/choiceseq (Assign (list (Name &max_k:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) None) (fn_16 (Name &max_k:1 Load) &min_energy:1) (fn_3 (Name &n:1 Load) &k:1 &a:1 &min_energy:1) (For (Name &k:1 Store) (fn_12 (Name &max_k:1 Load) &n:1) (/seq (Assign (list (Subscript (Name &min_energy:1 Load) (_slice_content (Name &k:1 Load)) Store)) (Call (Name g_float Load) (list (_starred_content (Constant s_inf None))) nil) None) (fn_6 &i:1 &k:1 &j:1 &min_energy:1)) (/seq) None))) nil)",
            "(Module (fn_2 &k:1 &dp:1 &queries:1 &energies:1 &q:1 &n:1 &explodification_min_energy:0 &q:0 &n:0 &energies:0 &queries:0 (/choiceseq (fn_8 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil) &dp:1) (fn_3 (Call (Name g_min Load) (list (_starred_content (Name &n:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil))) nil) &i:1 &energies:1 &dp:1) (For (Name &k:1 Store) (fn_18 (Call (Name g_max Load) (list (_starred_content (Name &queries:1 Load))) nil)) (/seq (If (Compare (Name &k:1 Load) (list Gt) (list (Name &n:1 Load))) (/seq (fn_6 &i:1 &k:1 &j:1 &dp:1)) (/seq))) (/seq) None))) nil)"
        ]
    },
    "21": {
        "abstractions": [
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_deque Load) (list (_starred_content #0)) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (While (Name %1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (Assign (list (Name %3 Store)) (Call (Attribute (Name %1 Load) s_popleft Load) nil nil) None) (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %3 Load))) nil)) (For (Name %4 Store) (Subscript (Name %6 Load) (_slice_content (Name %3 Load)) Load) (/seq (AugAssign (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Store) Sub (Constant i1 None)) (If (Compare (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %4 Load))) nil))) (/seq))) (/seq) None)) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load))) Load) None) (Assign (list (Name %5 Store)) (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil))) nil) None) (For (Name %6 Store) (Call (Name g_range Load) (list (_starred_content (Name %5 Load))) nil) (/seq (If (Compare (Subscript (Name %4 Load) (_slice_content (Name %6 Load)) Load) (list NotEq) (list (Subscript (Name %3 Load) (_slice_content (Name %6 Load)) Load))) (/seq ?0 Break) (/seq))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name %4 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name %3 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) None)) (/seq) None)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Constant s_d None)) (_starred_content (Constant i4 None))) Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Constant s_cab None)) (_starred_content (Constant s_cda None)) (_starred_content (Constant s_ccc None)) (_starred_content (Constant s_badca None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)) (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Constant s_c None)) (_starred_content (Constant i4 None))) Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Constant s_abc None)) (_starred_content (Constant s_bca None)) (_starred_content (Constant s_cab None)) (_starred_content (Constant s_aca None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)) (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Tuple (list (_starred_content (Constant s_f None)) (_starred_content (Constant i2 None))) Load) None) (Assign (list (Name %3 Store)) (List (list (_starred_content (Constant s_dea None)) (_starred_content (Constant s_cfb None))) Load) None) (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (Assign (list (Name %2 Store)) (Call (Attribute (Name %1 Load) s_popleft Load) nil nil) None) ?0 (For (Name %3 Store) (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load) (/seq (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Store) Sub (Constant i1 None)) (If (Compare (Subscript (Name %4 Load) (_slice_content (Name %3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name %1 Load) s_append Load) (list (_starred_content (Name %3 Load))) nil))) (/seq))) (/seq) None))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load) (list NotIn) (list (Subscript (Name %4 Load) (_slice_content (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load)) Load))) (/seq (Expr (Call (Attribute (Subscript (Name %4 Load) (_slice_content (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load)) Load) s_add Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) nil)) (AugAssign (Subscript (Name %5 Load) (_slice_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) Store) Add (Constant i1 None))) (/seq))",
                "sym_arity": 5,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Attribute (Call #0 nil nil) s_split Load) nil nil) None) (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %6 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (For (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Subscript (Name %6 Load) (_slice_content (Name %5 Load)) Load)) (_starred_content (Subscript (Name %6 Load) (_slice_content (BinOp (Name %5 Load) Add (Constant i1 None))) Load))) nil) (/seq (If (Compare (Name %2 Load) (list NotEq) (list (Name %1 Load))) (/seq (If (Compare (Name %1 Load) (list NotIn) (list (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) (/seq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) s_add Load) (list (_starred_content (Name %1 Load))) nil)) (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Store) Add (Constant i1 None))) (/seq)) Break) (/seq))) #0 None)) (/seq) None)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Tuple (list (_starred_content (Name %2 Store)) (_starred_content (Name %1 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name %4 Store)) (ListComp (Call #0 nil nil) (list (comprehension (Name %3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil))) nil) nil i0))) None))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load)) (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load))) Load) None) ?0) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(Call (Name g_range Load) (list (_starred_content (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)) (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Name %1 Load))) nil) Add (Constant i1 None)))) nil)",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(ListComp (Name %1 Load) (list (comprehension (Name %1 Store) (Name %2 Load) (list (Compare (Subscript #0 (_slice_content (Name %1 Load)) Load) (list Eq) (list (Constant i0 None)))) i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(If (Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) ?0 (fn_2 %8 %7 %3 %5 %6 %2 (/choiceseq (Expr (Call (Attribute (Subscript (Name %1 Load) (_slice_content (Subscript (Name %5 Load) (_slice_content (Name %2 Load)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load))) nil)) (AugAssign (Subscript (Name %4 Load) (_slice_content (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load)) Store) Add (Constant i1 None)))))",
                "sym_arity": 8,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(While (Name %1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (Assign (list (Name %2 Store)) (Call (Attribute (Name %1 Load) s_popleft Load) nil nil) None) (Expr (Call (Attribute (Name %3 Load) s_append Load) (list (_starred_content (Name %2 Load))) nil)) (For (Name %4 Store) (Subscript (Name %6 Load) (_slice_content (Name %2 Load)) Load) (/seq (AugAssign (Subscript (Name %5 Load) (_slice_content (Name %4 Load)) Store) Sub (Constant i1 None)) #0) (/seq) None)) (/seq))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "S"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "S"
            },
            {
                "body": "(If (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(BinOp (BinOp #0 Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)) Add (Constant i1 None))",
                "sym_arity": 0,
                "dfa_symvars": [],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "E"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(/subseq (FunctionDef %1 (arguments nil nil None nil nil None nil) #0 nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name %1 Load) nil nil))) (/seq)))",
                "sym_arity": 1,
                "dfa_symvars": [
                    "Name"
                ],
                "dfa_metavars": [
                    "seqS"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) nil)",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(Assign (list (Name %3 Store)) (DictComp (Call (Name g_chr Load) (list (_starred_content (Name %2 Load))) nil) (Constant i0 None) (list (comprehension (Name %2 Store) (fn_10 %1) nil i0))) None)",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Expr (Call (Attribute (Subscript (Name %3 Load) (_slice_content (Name %2 Load)) Load) s_append Load) (list (_starred_content (Name %1 Load))) nil)) (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %1 Load)) Store) Add (Constant i1 None)))",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            },
            {
                "body": "(For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (Name %6 Load))) nil) (/seq (If (Compare (Subscript (Name %2 Load) (_slice_content (Name %5 Load)) Load) (list NotEq) (list (Subscript (Name %1 Load) (_slice_content (Name %5 Load)) Load))) (/seq (fn_5 %5 %1 %2 %4 %3) Break) (/seq))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (Tuple (list (_starred_content (Dict nil nil)) (_starred_content (Dict nil nil))) Load))) (/seq))) None)",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(If (BoolOp And (list (UnaryOp Not (Name %3 Load)) (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_deque Load) (list (_starred_content #0)) nil) None) (Assign (list (Name %2 Store)) (List nil Load) None) (While (Name %1 Load) (/seq (/splice (fn_4 %1 %3 %6 %5 %4 (/choiceseq (Expr (Call (Attribute (Name %2 Load) s_append Load) (list (_starred_content (Name %3 Load))) nil)))))) (/seq)))",
                "sym_arity": 6,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(If (Compare (Call (Name g_len Load) (list (_starred_content (Name %2 Load))) nil) (list NotEq) (list (Call (Name g_len Load) (list (_starred_content (Name %1 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Name %4 Load))) nil) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq ?0 Break) (/seq))) (/seq) None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (Assign (list (Name %3 Store)) (DictComp (Name %2 Load) (Constant i0 None) (list (comprehension (Name %2 Store) #0 nil i0))) None))",
                "sym_arity": 3,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [
                    "E"
                ],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 1,
                "dfa_root": "seqS"
            },
            {
                "body": "(DictComp (Call (Name g_chr Load) (list (_starred_content (BinOp (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil) Add (Name %2 Load)))) nil) (Constant i0 None) (list (comprehension (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (fn_16 (Call (Name g_ord Load) (list (_starred_content (Name %1 Load))) nil)))) nil) nil i0)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "E"
            },
            {
                "body": "(FunctionDef %4 (arguments nil (list (arg %3 None None) (arg %2 None None)) None nil nil None nil) (/seq ?0 (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name %1 Load))) nil))) nil None None)",
                "sym_arity": 4,
                "dfa_symvars": [
                    "Name",
                    "Name",
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [
                    "seqS"
                ],
                "choice_arity": 1,
                "arity": 0,
                "dfa_root": "S"
            },
            {
                "body": "(/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Subscript (Name %2 Load) (_slice_content (BinOp (Name %1 Load) Add (Constant i1 None))) Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)))",
                "sym_arity": 2,
                "dfa_symvars": [
                    "Name",
                    "Name"
                ],
                "dfa_metavars": [],
                "dfa_choicevars": [],
                "choice_arity": 0,
                "arity": 0,
                "dfa_root": "seqS"
            }
        ],
        "rewritten": [
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 &graph:1 &in_degree:1)) (fn_2 &i:1 &words:1 &word2:1 &word1:1 &min_length:1 &j:1 (/choiceseq (fn_5 &j:1 &word2:1 &word1:1 &graph:1 &in_degree:1))) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:1 Load) &c:4 &in_degree:1))) nil) None) (Assign (list (Name &order:1 Store)) (List nil Load) None) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) (list (_starred_content (Name &queue:1 Load))) nil) None) (fn_14 (If (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &neighbor:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Name &neighbor:1 Load))) nil)) (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &neighbor:1 Load))) nil))) (/seq)) &queue:1 &current:1 &order:1 &neighbor:1 &in_degree:1 &graph:1) (fn_25 &in_degree:1 &visited:1) (Assign (list (Name &unique_chars:1 Store)) (SetComp (Name &char:2 Load) (list (comprehension (Name &word:5 Store) (Name &words:1 Load) nil i0) (comprehension (Name &char:2 Store) (Name &word:5 Load) nil i0))) None) (Assign (list (Name &missing_chars:1 Store)) (BinOp (Name &unique_chars:1 Load) Sub (Name &visited:1 Load)) None) (If (Name &missing_chars:1 Load) (/seq (Expr (Call (Attribute (Name &order:1 Load) s_extend Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (Name &missing_chars:1 Load))) nil))) nil))) (/seq)) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:1 Load))) nil))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:3 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &read_input:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:1 &L:1 &_:5 &words:1)) (Return (Name &words:1 Load))) nil None None) (FunctionDef &build_graph:0 (arguments nil (list (arg &words:2 None None)) None nil nil None nil) (/seq (/splice (fn_17 &graph:2 &in_degree:2)) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &words:2 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &word1:2 Store)) (Subscript (Name &words:2 Load) (_slice_content (Name &i:2 Load)) Load) None) (Assign (list (Name &word2:2 Store)) (Subscript (Name &words:2 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load) None) (Assign (list (Name &minLength:2 Store)) (fn_19 &word2:2 &word1:2) None) (fn_22 &word2:2 &word1:2 &in_degree:2 &graph:2 &j:2 &minLength:2)) (/seq) None) (Assign (list (Name &all_chars:2 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:2 Load))) nil))) nil) None) (For (Name &char:2 Store) (Name &all_chars:2 Load) (/seq (AugAssign (Subscript (Name &in_degree:2 Load) (_slice_content (Name &char:2 Load)) Store) Add (Constant i0 None))) (/seq) None) (Return (Tuple (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load))) Load))) nil None None) (FunctionDef &topological_sort:0 (arguments nil (list (arg &graph:3 None None) (arg &in_degree:3 None None)) None nil nil None nil) (/seq (/splice (fn_1 (fn_11 (Name &in_degree:3 Load) &char:6 &in_degree:3) &zero_in_degree_queue:3 &order:3 &vertex:3 &neighbour:3 &in_degree:3 &graph:3)) (fn_12 &order:3 &in_degree:3)) nil None None) (FunctionDef &find_alphabet_order:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &words:4 Store)) (Call (Name &read_input:0 Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &graph:4 Store)) (_starred_content (Name &in_degree:4 Store))) Store)) (Call (Name &build_graph:0 Load) (list (_starred_content (Name &words:4 Load))) nil) None) (If (BoolOp And (list (UnaryOp Not (Name &graph:4 Load)) (UnaryOp Not (Name &in_degree:4 Load)))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (Return (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &graph:4 Load)) (_starred_content (Name &in_degree:4 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_alphabet_order:0 Load) nil nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_alphabet_ordering:0 (arguments nil (list (arg &L:1 None None) (arg &N:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &in_degree:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Name &char_set:1 Store)) (Call (Name g_set Load) nil nil) None) (FunctionDef &add_edge:1 (arguments nil (list (arg &from_node:2 None None) (arg &to_node:2 None None)) None nil nil None nil) (/seq (/splice (fn_21 &to_node:2 &from_node:2 &graph:1 &in_degree:1))) nil None None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &word1:1 Store)) (_starred_content (Name &word2:1 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &words:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &words:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) Load) None) (Assign (list (Name &min_len:1 Store)) (fn_19 &word2:1 &word1:1) None) (Expr (Call (Attribute (Name &char_set:1 Load) s_update Load) (list (_starred_content (Name &word1:1 Load))) nil)) (Expr (Call (Attribute (Name &char_set:1 Load) s_update Load) (list (_starred_content (Name &word2:1 Load))) nil)) (Assign (list (Name &found:1 Store)) (Constant False None) None) (fn_26 &j:1 &word2:1 &word1:1 &min_len:1 (/choiceseq (Expr (Call (Name &add_edge:1 Load) (list (_starred_content (Subscript (Name &word1:1 Load) (_slice_content (Name &j:1 Load)) Load)) (_starred_content (Subscript (Name &word2:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil)) (Assign (list (Name &found:1 Store)) (Constant True None) None))) (fn_23 &word2:1 &word1:1 &found:1)) (/seq) None) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &char:3 &char_set:1) &queue:1 &ordering:1 &current_node:1 &neighbor:1 &in_degree:1 &graph:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &ordering:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &char_set:1 Load))) nil))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &ordering:1 Load))) nil))) (/seq)) (Return (Constant s_IMPOSSIBLE None))) nil None None) (/splice (fn_3 (Call (Name &find_alphabet_ordering:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &N:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (FunctionDef &toposort:0 (arguments nil (list (arg &graph:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &indegree:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &node:1 Store) (Name &graph:1 Load) (/seq (For (Name &neighbor:1 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:1 Load)) Load) (/seq (AugAssign (Subscript (Name &indegree:1 Load) (_slice_content (Name &neighbor:1 Load)) Store) Add (Constant i1 None))) (/seq) None)) (/seq) None) (/splice (fn_24 (fn_11 (Name &indegree:1 Load) &node:5 &graph:1) &queue:1 &sorted_list:1 &node:1 &graph:1 &indegree:1 &neighbor:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &sorted_list:1 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &graph:1 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq (Return (Name &sorted_list:1 Load))))) nil None None) (fn_29 &sorted_list:2 &highest_char:2 &words:2 &find_order:0 (/choiceseq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (fn_2 &i:2 &words:2 &word2:2 &word1:2 &min_len:2 &j:2 (/choiceseq (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load))) nil)))) (Assign (list (Name &sorted_list:2 Store)) (Call (Name &toposort:0 Load) (list (_starred_content (Name &graph:2 Load))) nil) None) (If (Compare (Name &sorted_list:2 Load) (list Eq) (list (Constant s_IMPOSSIBLE None))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (Assign (list (Name &unique_chars:2 Store)) (SetComp (Name &char:4 Load) (list (comprehension (Name &word:6 Store) (Name &words:2 Load) nil i0) (comprehension (Name &char:4 Store) (Name &word:6 Load) nil i0))) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &unique_chars:2 Load))) nil) (list Lt) (list (fn_16 (Call (Name g_ord Load) (list (_starred_content (Name &highest_char:2 Load))) nil)))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) (/splice (fn_18 (/seq (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:3 &L:3 &_:7 &words:3)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:3 Load)) (_starred_content (Name &L:3 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &topological_sort:0 (arguments nil (list (arg &graph:2 None None) (arg &in_degree:2 None None) (arg &unique_parents:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &order:2 Store)) (List nil Load) None) (Assign (list (Name &queue:2 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:2 Load) &node:5 &in_degree:2))) nil) None) (fn_14 (If (Compare (Subscript (Name &in_degree:2 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:2 Load) s_append Load) (list (_starred_content (Name &neighbor:2 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Subscript (Name &in_degree:2 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Constant i1 None))) (UnaryOp Not (Subscript (Name &unique_parents:2 Load) (_slice_content (Name &neighbor:2 Load)) Load)))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) &queue:2 &current:2 &order:2 &neighbor:2 &in_degree:2 &graph:2) (fn_12 &order:2 &graph:2)) nil None None) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &l:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &in_degree:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Name &unique_parents:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Lambda (arguments nil nil None nil nil None nil) (Constant True None)))) nil) None) (Assign (list (Name &max_char:1 Store)) (Constant s_a None) None) (For (Name &word:1 Store) (Name &words:1 Load) (/seq (Assign (list (Name &max_char:1 Store)) (Call (Name g_max Load) (list (_starred_content (Name &max_char:1 Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &word:1 Load))) nil))) nil) None) (For (Name &char:1 Store) (Name &word:1 Load) (/seq (If (Compare (Name &char:1 Load) (list NotIn) (list (Name &in_degree:1 Load))) (/seq (Assign (list (Subscript (Name &in_degree:1 Load) (_slice_content (Name &char:1 Load)) Store)) (Constant i0 None) None)) (/seq))) (/seq) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &words:1 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (For (Tuple (list (_starred_content (Name &char1:1 Store)) (_starred_content (Name &char2:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Subscript (Name &words:1 Load) (_slice_content (Name &i:1 Load)) Load)) (_starred_content (Subscript (Name &words:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load))) nil) (/seq (If (Compare (Name &char1:1 Load) (list NotEq) (list (Name &char2:1 Load))) (/seq (/splice (fn_21 &char2:1 &char1:1 &graph:1 &in_degree:1)) (If (Compare (Name &char2:1 Load) (list In) (list (Subscript (Name &graph:1 Load) (_slice_content (Name &char1:1 Load)) Load))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) Break) (/seq))) (fn_30 &i:1 &words:1) None)) (/seq) None) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) nil nil) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:3 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &node:3 Load))) nil)) (For (Name &neighbor:3 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:3 Load)) Load) (/seq (If (BoolOp Or (list (Compare (Name &neighbor:3 Load) (list In) (list (Name &visited:1 Load))) (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:3 Load))) nil)))) (/seq (Return (Constant False None))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Name &graph:1 Load) (_slice_content (Name &node:3 Load)) Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Subscript (Name &unique_parents:1 Load) (_slice_content (Name &neighbor:3 Load)) Store)) (Constant False None) None)) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &visited:1 Load) s_remove Load) (list (_starred_content (Name &node:3 Load))) nil)) (Return (Constant True None))) nil None None) (For (Name &node:1 Store) (Name &graph:1 Load) (/seq (If (BoolOp And (list (Compare (Name &node:1 Load) (list NotIn) (list (Name &visited:1 Load))) (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &node:1 Load))) nil)))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) (/seq) None) (Return (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &in_degree:1 Load)) (_starred_content (Name &unique_parents:1 Load))) nil))) nil None None) (/splice (fn_8 (Name g_input Load) &N:0 &L:0 &_:4 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &L:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (FunctionDef &create_graph:1 (arguments nil (list (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (Assign (list (Name &in_degree:2 Store)) (DictComp (Call (Name g_chr Load) (list (_starred_content (BinOp (Name &i:5 Load) Add (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)))) nil) (Constant i0 None) (list (comprehension (Name &i:5 Store) (Call (Name g_range Load) (list (_starred_content (fn_16 (Name &L:1 Load)))) nil) nil i0))) None) (fn_9 &i:2 &words:2 &word2:2 &word1:2 (/choiceseq (For (Tuple (list (_starred_content (Name &c1:2 Store)) (_starred_content (Name &c2:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &word1:2 Load)) (_starred_content (Name &word2:2 Load))) nil) (/seq (If (Compare (Name &c1:2 Load) (list NotEq) (list (Name &c2:2 Load))) (/seq (If (Compare (Name &c2:2 Load) (list NotIn) (list (Subscript (Name &graph:2 Load) (_slice_content (Name &c1:2 Load)) Load))) (/seq (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Name &c1:2 Load)) Load) s_add Load) (list (_starred_content (Name &c2:2 Load))) nil)) (AugAssign (Subscript (Name &in_degree:2 Load) (_slice_content (Name &c2:2 Load)) Store) Add (Constant i1 None))) (/seq)) Break) (/seq))) (/seq) None))) (Return (Tuple (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load))) Load))) nil None None) (FunctionDef &topological_sort:1 (arguments nil (list (arg &graph:3 None None) (arg &in_degree:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &queue:3 Store)) (Call (Name g_deque Load) nil nil) None) (For (Tuple (list (_starred_content (Name &node:3 Store)) (_starred_content (Name &degree:3 Store))) Store) (Call (Attribute (Name &in_degree:3 Load) s_items Load) nil nil) (/seq (If (Compare (Name &degree:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:3 Load) s_append Load) (list (_starred_content (Name &node:3 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &order:3 Store)) (List nil Load) None) (While (Name &queue:3 Load) (/seq (/splice (fn_4 &queue:3 &current:3 &neighbor:3 &in_degree:3 &graph:3 (/choiceseq (Expr (Call (Attribute (Name &order:3 Load) s_append Load) (list (_starred_content (Name &current:3 Load))) nil)))))) (/seq)) (Return (Name &order:3 Load))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &graph:1 Store)) (_starred_content (Name &in_degree:1 Store))) Store)) (Call (Name &create_graph:1 Load) (list (_starred_content (Name &words:1 Load))) nil) None) (Assign (list (Name &order:1 Store)) (Call (Name &topological_sort:1 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &in_degree:1 Load))) nil) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Lt) (list (fn_16 (Name &L:1 Load)))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Call (Name g_set Load) (list (_starred_content (ListComp (Call (Name g_chr Load) (list (_starred_content (BinOp (Name &i:6 Load) Add (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)))) nil) (list (comprehension (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (fn_16 (Name &L:1 Load)))) nil) nil i0))))) nil))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:1 Load))) nil))))))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &L:0 Store)) (_starred_content (Name &N:0 Store))) Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &L:0 Store)) (Call (Name g_ord Load) (list (_starred_content (Name &L:0 Load))) nil) None) (Assign (list (Name &words:0 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name &_:4 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order_of_alphabet:0 (arguments nil (list (arg &L:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (/splice (fn_13 &graph:1 &j:1 &word2:1 &indegree:1 &word1:1 &min_len:1 &words:1 &i:1 (/choiceseq (fn_20 &L:1 &c:3 &indegree:1)))) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) nil nil) None) (Assign (list (Name &order:1 Store)) (List nil Load) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None)) None nil nil None nil) (/seq (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &node:2 Load))) nil)) (For (Name &neighbor:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (Compare (Name &neighbor:2 Load) (list In) (list (Name &visited:1 Load))) (/seq (Return (Constant False None))) (/seq (If (Compare (Subscript (Name &indegree:1 Load) (_slice_content (Name &neighbor:2 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Subscript (Name &indegree:1 Load) (_slice_content (Name &neighbor:2 Load)) Store)) (UnaryOp USub (Constant i1 None)) None) (If (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load))) nil)) (/seq (Return (Constant False None))) (/seq))) (/seq))))) (/seq) None) (Expr (Call (Attribute (Name &order:1 Load) s_append Load) (list (_starred_content (Name &node:2 Load))) nil)) (Return (Constant True None))) nil None None) (For (Name &char:1 Store) (Name &indegree:1 Load) (/seq (If (BoolOp And (list (Compare (Subscript (Name &indegree:1 Load) (_slice_content (Name &char:1 Load)) Load) (list Eq) (list (Constant i0 None))) (Compare (Name &char:1 Load) (list NotIn) (list (Name &visited:1 Load))))) (/seq (If (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &char:1 Load))) nil)) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) (/seq))) (/seq) None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &indegree:1 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Name g_reversed Load) (list (_starred_content (Name &order:1 Load))) nil))) nil))))) nil None None) (/splice (fn_3 (Call (Name &find_order_of_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (fn_29 &order:1 &L:1 &words:1 &find_order:0 (/choiceseq (Expr (Constant s-WzcxLCAxMDUsIDExOCwgMTAxLCAxMTAsIDMyLCA5NywgMzIsIDEwOCwgMTA1LCAxMTUsIDExNiwgMzIsIDExMSwgMTAyLCAzMiwgMTE5LCAxMTEsIDExNCwgMTAwLCAxMTUsIDMyLCA5NywgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA0LCAxMDUsIDEwMywgMTA0LCAxMDEsIDExNSwgMTE2LCAzMiwgOTksIDEwNCwgOTcsIDExNCwgOTcsIDk5LCAxMTYsIDEwMSwgMTE0LCAzMiwgMTA1LCAxMTAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgNjksIDExMCwgMTAzLCAxMDgsIDEwNSwgMTE1LCAxMDQsIDMyLCA5NywgMTA4LCAxMTIsIDEwNCwgOTcsIDk4LCAxMDEsIDExNiwgNDQsIDMyLCAxMTYsIDEwNCwgMTA1LCAxMTUsIDMyLCAxMDIsIDExNywgMTEwLCA5OSwgMTE2LCAxMDUsIDExMSwgMTEwLCAzMiwgMTE0LCAxMDEsIDExNiwgMTE3LCAxMTQsIDExMCwgMTE1LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDEwMSwgMTIwLCAxMDUsIDk5LCAxMTEsIDEwMywgMTE0LCA5NywgMTEyLCAxMDQsIDEwNSwgOTksIDMyLCAxMTEsIDExNCwgMTAwLCAxMDEsIDExNCwgMzIsIDEwNSwgMTAyLCAzMiwgMTEyLCAxMTEsIDExNSwgMTE1LCAxMDUsIDk4LCAxMDgsIDEwMSwgNDQsIDMyLCAzOSwgNzMsIDc3LCA4MCwgNzksIDgzLCA4MywgNzMsIDY2LCA3NiwgNjksIDM5LCAzMiwgMTA1LCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTA1LCAxMTUsIDMyLCAxMDUsIDExMCwgOTksIDExMSwgMTEwLCAxMTUsIDEwNSwgMTE1LCAxMTYsIDEwMSwgMTEwLCAxMTYsIDQ0LCAzMiwgMTExLCAxMTQsIDMyLCAzOSwgNjUsIDc3LCA2NiwgNzMsIDcxLCA4NSwgNzksIDg1LCA4MywgMzksIDMyLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgMTA5LCAxMTcsIDEwOCwgMTE2LCAxMDUsIDExMiwgMTA4LCAxMDEsIDMyLCAxMTEsIDExNCwgMTAwLCAxMDEsIDExNCwgMTE1LCAzMiwgOTcsIDExNCwgMTAxLCAzMiwgMTEyLCAxMTEsIDExNSwgMTE1LCAxMDUsIDk4LCAxMDgsIDEwMSwgNDZd None)) (/splice (fn_17 &graph:1 &in_degree:1)) (Assign (list (Name &all_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (ListComp (Call (Name g_chr Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (fn_10 &L:1) nil i0))))) nil) None) (fn_2 &i:1 &words:1 &w2:1 &w1:1 &min_length:1 &j:1 (/choiceseq (fn_5 &j:1 &w2:1 &w1:1 &graph:1 &in_degree:1))) (Assign (list (Name &zero_in_degree:1 Store)) (BinOp (BinOp (Name &all_chars:1 Load) Sub (Call (Attribute (Name &in_degree:1 Load) s_keys Load) nil nil)) Sub (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Name &graph:1 Load) s_keys Load) nil nil))) nil)) None) (/splice (fn_1 (Name &zero_in_degree:1 Load) &zero_in_degree_queue:1 &order:1 &current:1 &neighbor:1 &in_degree:1 &graph:1)) (If (Compare (Call (Name g_set Load) (list (_starred_content (Name &order:1 Load))) nil) (list NotEq) (list (Name &all_chars:1 Load))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)))) (/splice (fn_6 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &L:0 &_:2 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load)) (_starred_content (Name &L:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 &adjacency_list:1 &in_degree:1)) (Assign (list (Name &total_chars:1 Store)) (Call (Name g_set Load) nil nil) None) (fn_9 &i:1 &words:1 &w2:1 &w1:1 (/choiceseq (Assign (list (Name &min_len:1 Store)) (fn_19 &w2:1 &w1:1) None) (Assign (list (Name &found_difference:1 Store)) (Constant False None) None) (fn_26 &j:1 &w2:1 &w1:1 &min_len:1 (/choiceseq (fn_5 &j:1 &w2:1 &w1:1 &adjacency_list:1 &in_degree:1) (Assign (list (Name &found_difference:1 Store)) (Constant True None) None))) (fn_23 &w2:1 &w1:1 &found_difference:1) (Expr (Call (Attribute (Name &total_chars:1 Load) s_update Load) (list (_starred_content (Name &w1:1 Load))) nil)) (If (Compare (Name &i:1 Load) (list Eq) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &words:1 Load))) nil) Sub (Constant i2 None)))) (/seq (Expr (Call (Attribute (Name &total_chars:1 Load) s_update Load) (list (_starred_content (Name &w2:1 Load))) nil))) (/seq)))) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &node:3 &total_chars:1) &queue:1 &order:1 &node:1 &neighbor:1 &in_degree:1 &adjacency_list:1)) (fn_12 &order:1 &total_chars:1)) nil None None) (/splice (fn_18 (/seq (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:2 &L:2 &_:4 &words:2)) (Assign (list (Name &result:2 Store)) (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:2 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:2 Load))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None) (arg &unique_chars:1 None None)) None nil nil None nil) (/seq (FunctionDef &create_graph:1 (arguments nil (list (arg &words:2 None None)) None nil nil None nil) (/seq (/splice (fn_27 (Name &unique_chars:1 Load) &graph:2 &char:4 &in_degree:2)) (fn_9 &i:2 &words:2 &word2:2 &word1:2 (/choiceseq (Assign (list (Name &min_length:2 Store)) (fn_19 &word2:2 &word1:2) None) (fn_22 &word2:2 &word1:2 &in_degree:2 &graph:2 &j:2 &min_length:2))) (Return (Tuple (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load))) Load))) nil None None) (FunctionDef &topological_sort:1 (arguments nil (list (arg &graph:3 None None) (arg &in_degree:3 None None)) None nil nil None nil) (/seq (/splice (fn_1 (ListComp (Name &node:6 Load) (list (comprehension (Tuple (list (_starred_content (Name &node:6 Store)) (_starred_content (Name &degree:6 Store))) Store) (Call (Attribute (Name &in_degree:3 Load) s_items Load) nil nil) (list (Compare (Name &degree:6 Load) (list Eq) (list (Constant i0 None)))) i0))) &queue:3 &order:3 &node:3 &next_node:3 &in_degree:3 &graph:3)) (fn_12 &order:3 &in_degree:3)) nil None None) (Assign (list (Tuple (list (_starred_content (Name &graph:1 Store)) (_starred_content (Name &in_degree:1 Store))) Store)) (Call (Name &create_graph:1 Load) (list (_starred_content (Name &words:1 Load))) nil) None) (If (BoolOp And (list (UnaryOp Not (Name &graph:1 Load)) (UnaryOp Not (Name &in_degree:1 Load)))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (Return (Call (Name &topological_sort:1 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &in_degree:1 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Assign (list (Tuple (list (_starred_content (Name &L:0 Store)) (_starred_content (Name &N:0 Store))) Store)) (Call (Attribute (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) s_split Load) nil nil) None) (Assign (list (Tuple (list (_starred_content (Name &L:0 Store)) (_starred_content (Name &N:0 Store))) Store)) (Tuple (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &L:0 Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil))) Load) None) (Assign (list (Name &unique_chars:0 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_chr Load) (list (_starred_content (Name &i:7 Load))) nil) (list (comprehension (Name &i:7 Store) (fn_10 &L:0) nil i0))))) nil) None) (Assign (list (Name &words:0 Store)) (ListComp (Call (Attribute (Call (Name g_input Load) nil nil) s_strip Load) nil nil) (list (comprehension (Name &_:5 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) nil i0))) None) (Assign (list (Name &result:0 Store)) (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load)) (_starred_content (Name &unique_chars:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &result:0 Load))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &chars:1 Store)) (Call (Name g_set Load) nil nil) None) (For (Name &word:1 Store) (Name &words:1 Load) (/seq (For (Name &char:1 Store) (Name &word:1 Load) (/seq (Expr (Call (Attribute (Name &chars:1 Load) s_add Load) (list (_starred_content (Name &char:1 Load))) nil))) (/seq) None)) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Call (Name g_len Load) (list (_starred_content (Name &words:1 Load))) nil) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Name &word1:1 Store)) (Subscript (Name &words:1 Load) (_slice_content (Name &i:1 Load)) Load) None) (Assign (list (Name &word2:1 Store)) (Subscript (Name &words:1 Load) (_slice_content (BinOp (Name &i:1 Load) Add (Constant i1 None))) Load) None) (Assign (list (Name &min_length:1 Store)) (fn_19 &word2:1 &word1:1) None) (fn_26 &j:1 &word2:1 &word1:1 &min_length:1 (/choiceseq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Subscript (Name &word1:1 Load) (_slice_content (Name &j:1 Load)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &word2:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil))))) (/seq) None) (Assign (list (Name &visited:1 Store)) (Dict nil nil) None) (Assign (list (Name &stack:1 Store)) (List nil Load) None) (Assign (list (Name &on_path:1 Store)) (Call (Name g_set Load) nil nil) None) (FunctionDef &dfs:1 (arguments nil (list (arg &node:2 None None)) None nil nil None nil) (/seq (If (Compare (Name &node:2 Load) (list In) (list (Name &visited:1 Load))) (/seq (If (UnaryOp Not (Subscript (Name &visited:1 Load) (_slice_content (Name &node:2 Load)) Load)) (/seq (Return (Constant False None))) (/seq)) (Return (Constant True None))) (/seq)) (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &node:2 Load)) Store)) (Constant False None) None) (Expr (Call (Attribute (Name &on_path:1 Load) s_add Load) (list (_starred_content (Name &node:2 Load))) nil)) (For (Name &neighbor:2 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (If (BoolOp Or (list (Compare (Name &neighbor:2 Load) (list In) (list (Name &on_path:1 Load))) (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &neighbor:2 Load))) nil)))) (/seq (Return (Constant False None))) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &on_path:1 Load) s_remove Load) (list (_starred_content (Name &node:2 Load))) nil)) (Assign (list (Subscript (Name &visited:1 Load) (_slice_content (Name &node:2 Load)) Store)) (Constant True None) None) (Expr (Call (Attribute (Name &stack:1 Load) s_append Load) (list (_starred_content (Name &node:2 Load))) nil)) (Return (Constant True None))) nil None None) (For (Name &char:1 Store) (Name &chars:1 Load) (/seq (If (Compare (Name &char:1 Load) (list NotIn) (list (Name &visited:1 Load))) (/seq (If (UnaryOp Not (Call (Name &dfs:1 Load) (list (_starred_content (Name &char:1 Load))) nil)) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) (/seq))) (/seq) None) (FunctionDef &is_unique_sorting:1 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &in_degree:3 Store)) (DictComp (Name &char:5 Load) (Constant i0 None) (list (comprehension (Name &char:5 Store) (Name &chars:1 Load) nil i0))) None) (For (Name &char:3 Store) (Name &graph:1 Load) (/seq (For (Name &neighbor:3 Store) (Subscript (Name &graph:1 Load) (_slice_content (Name &char:3 Load)) Load) (/seq (AugAssign (Subscript (Name &in_degree:3 Load) (_slice_content (Name &neighbor:3 Load)) Store) Add (Constant i1 None))) (/seq) None)) (/seq) None) (Assign (list (Name &queue:3 Store)) (Call (Name g_deque Load) (list (_starred_content (ListComp (Name &char:6 Load) (list (comprehension (Tuple (list (_starred_content (Name &char:6 Store)) (_starred_content (Name &degree:6 Store))) Store) (Call (Attribute (Name &in_degree:3 Load) s_items Load) nil nil) (list (Compare (Name &degree:6 Load) (list Eq) (list (Constant i0 None)))) i0))))) nil) None) (Assign (list (Name &count:3 Store)) (Constant i0 None) None) (While (Name &queue:3 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &queue:3 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant False None))) (/seq)) (/splice (fn_4 &queue:3 &current:3 &neighbor:3 &in_degree:3 &graph:1 (/choiceseq (AugAssign (Name &count:3 Store) Add (Constant i1 None)))))) (/seq)) (Return (Compare (Name &count:3 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &chars:1 Load))) nil))))) nil None None) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &visited:1 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &chars:1 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (Return (IfExp (Call (Name &is_unique_sorting:1 Load) nil nil) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Subscript (Name &stack:1 Load) (_slice_slice (Slice None None (UnaryOp USub (Constant i1 None)))) Load))) nil) (Constant s_AMBIGUOUS None)))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:4 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None) (arg &max_char:1 None None)) None nil nil None nil) (/seq (/splice (fn_27 (ListComp (Call (Name g_chr Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &max_char:1) nil i0))) &graph:1 &char:2 &in_degree:1)) (Assign (list (Name &found_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:1 Load))) nil))) nil) None) (fn_7 (fn_30 &i:1 &words:1) &b:1 &a:1 &graph:1 &in_degree:1 &i:1 &words:1) (/splice (fn_1 (ListComp (Name &u:4 Load) (list (comprehension (Name &u:4 Store) (Name &in_degree:1 Load) (list (BoolOp And (list (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &u:4 Load)) Load) (list Eq) (list (Constant i0 None))) (Compare (Name &u:4 Load) (list In) (list (Name &found_chars:1 Load)))))) i0))) &queue:1 &order:1 &u:1 &v:1 &in_degree:1 &graph:1)) (fn_15 &found_chars:1 &order:1) (Assign (list (Name &missing_chars:1 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Call (Name g_sorted Load) (list (_starred_content (BinOp (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Name &in_degree:1 Load) s_keys Load) nil nil))) nil) Sub (Call (Name g_set Load) (list (_starred_content (Name &order:1 Load))) nil)))) nil))) nil) None) (Return (BinOp (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:1 Load))) nil) Add (Name &missing_chars:1 Load)))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:3 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load)) (_starred_content (Name &L:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &topo_sort:0 (arguments nil (list (arg &graph:1 None None) (arg &in_degree:1 None None) (arg &unique_chars:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &order:1 Store)) (List nil Load) None) (Assign (list (Name &q:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:1 Load) &node:4 &unique_chars:1))) nil) None) (Assign (list (Name &visited:1 Store)) (Call (Name g_set Load) (list (_starred_content (Name &q:1 Load))) nil) None) (fn_14 (If (BoolOp And (list (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &neighbor:1 Load)) Load) (list Eq) (list (Constant i0 None))) (Compare (Name &neighbor:1 Load) (list NotIn) (list (Name &visited:1 Load))))) (/seq (Expr (Call (Attribute (Name &q:1 Load) s_append Load) (list (_starred_content (Name &neighbor:1 Load))) nil)) (Expr (Call (Attribute (Name &visited:1 Load) s_add Load) (list (_starred_content (Name &neighbor:1 Load))) nil))) (/seq)) &q:1 &node:1 &order:1 &neighbor:1 &in_degree:1 &graph:1) (fn_12 &order:1 &unique_chars:1)) nil None None) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (fn_20 &L:2 &c:5 &in_degree:2) (Assign (list (Name &unique_chars:2 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:2 Load))) nil))) nil) None) (fn_9 &i:2 &words:2 &word2:2 &word1:2 (/choiceseq (Assign (list (Name &min_length:2 Store)) (fn_19 &word2:2 &word1:2) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &min_length:2 Load))) nil) (/seq (If (Compare (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load) (list NotEq) (list (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load))) nil)) (AugAssign (Subscript (Name &in_degree:2 Load) (_slice_content (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load)) Store) Add (Constant i1 None)) Break) (/seq))) (/seq (fn_15 &word1:2 &word2:2)) None))) (Return (Call (Name &topo_sort:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load)) (_starred_content (Name &unique_chars:2 Load))) nil))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:3 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_29 &order:1 &unique_chars:1 &words:1 &find_order:0 (/choiceseq (/splice (fn_27 (Name &unique_chars:1 Load) &adj_list:1 &char:3 &in_degree:1)) (fn_9 &i:1 &words:1 &w2:1 &w1:1 (/choiceseq (Assign (list (Name &min_length:1 Store)) (fn_19 &w2:1 &w1:1) None) (Assign (list (Name &differ:1 Store)) (Constant False None) None) (fn_26 &j:1 &w2:1 &w1:1 &min_length:1 (/choiceseq (fn_5 &j:1 &w2:1 &w1:1 &adj_list:1 &in_degree:1) (Assign (list (Name &differ:1 Store)) (Constant True None) None))) (fn_23 &w2:1 &w1:1 &differ:1))) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &char:4 &in_degree:1) &queue:1 &order:1 &cur:1 &neighbor:1 &in_degree:1 &adj_list:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &unique_chars:1 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &unique_chars:2 Store)) (Call (Name g_set Load) (list (_starred_content (Name &L:2 Load))) nil) None) (For (Name &word:2 Store) (Name &words:2 Load) (/seq (Expr (Call (Attribute (Name &unique_chars:2 Load) s_update Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Name &word:2 Load))) nil))) nil))) (/seq) None) (Return (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:2 Load)) (_starred_content (Name &unique_chars:2 Load))) nil))) nil None None) (/splice (fn_3 (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (fn_29 &order:1 &char_range:1 &words:1 &find_order:0 (/choiceseq (/splice (fn_17 &graph:1 &in_degree:1)) (fn_7 (/seq) &c2:1 &c1:1 &graph:1 &in_degree:1 &i:1 &words:1) (/splice (fn_1 (ListComp (Name &c:4 Load) (list (comprehension (Name &c:4 Store) (Name &char_range:1 Load) (list (BoolOp And (list (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &c:4 Load)) Load) (list Eq) (list (Constant i0 None))) (Compare (Name &c:4 Load) (list In) (list (Name &graph:1 Load)))))) i0))) &queue:1 &order:1 &current:1 &neighbor:1 &in_degree:1 &graph:1)) (fn_25 &graph:1 &order:1) (For (Name &c:1 Store) (Name &char_range:1 Load) (/seq (If (Compare (Name &c:1 Load) (list NotIn) (list (Name &order:1 Load))) (/seq (Expr (Call (Attribute (Name &order:1 Load) s_append Load) (list (_starred_content (Name &c:1 Load))) nil))) (/seq))) (/seq) None))) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &N:2 None None) (arg &wordlist:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &char_range:2 Store)) (ListComp (Call (Name g_chr Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &L:2) nil i0))) None) (Return (Call (Name &find_order:0 Load) (list (_starred_content (Name &wordlist:2 Load)) (_starred_content (Name &char_range:2 Load))) nil))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:3 &wordlist:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &N:0 Load)) (_starred_content (Name &wordlist:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None) (arg &letters:1 None None)) None nil nil None nil) (/seq (/splice (fn_27 (Name &letters:1 Load) &adj:1 &char:3 &in_degree:1)) (fn_7 (/seq) &char2:1 &char1:1 &adj:1 &in_degree:1 &i:1 &words:1) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &letter:4 &letters:1) &queue:1 &ordered_letters:1 &node:1 &neighbor:1 &in_degree:1 &adj:1)) (fn_12 &ordered_letters:1 &letters:1)) nil None None) (/splice (fn_18 (/seq (/splice (fn_6 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:2 &L:2 &_:5 &words:2)) (Assign (list (Name &letters:2 Store)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_chr Load) (list (_starred_content (Name &i:6 Load))) nil) (list (comprehension (Name &i:6 Store) (fn_10 &L:2) nil i0))))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:2 Load)) (_starred_content (Name &letters:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (FunctionDef &topological_sort:0 (arguments nil (list (arg &graph:1 None None) (arg &in_degree:1 None None) (arg &total_nodes:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgODAsIDEwMSwgMTE0LCAxMDIsIDExMSwgMTE0LCAxMDksIDMyLCA5NywgMzIsIDExNiwgMTExLCAxMTIsIDExMSwgMTA4LCAxMTEsIDEwMywgMTA1LCA5OSwgOTcsIDEwOCwgMzIsIDExNSwgMTExLCAxMTQsIDExNiwgMzIsIDExMSwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTE0LCA5NywgMTEyLCAxMDQsIDMyLCAxMTYsIDExMSwgMzIsIDEwMCwgMTAxLCAxMTYsIDEwMSwgMTE0LCAxMDksIDEwNSwgMTEwLCAxMDEsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE3LCAxMTAsIDEwNSwgMTEzLCAxMTcsIDEwMSwgMzIsIDExMSwgMTE0LCAxMDAsIDEwMSwgMTE0LCAzMiwgMTExLCAxMDIsIDMyLCA5OSwgMTA0LCA5NywgMTE0LCA5NywgOTksIDExNiwgMTAxLCAxMTQsIDExNSwgMzIsIDEwNSwgMTAyLCAzMiwgMTEyLCAxMTEsIDExNSwgMTE1LCAxMDUsIDk4LCAxMDgsIDEwMSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAxMTUsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTE1LCAxMTEsIDExNCwgMTE2LCAxMDEsIDEwMCwgMzIsIDExMSwgMTE0LCAxMDAsIDEwMSwgMTE0LCAzMiwgMTExLCAxMDIsIDMyLCA5OSwgMTA0LCA5NywgMTE0LCA5NywgOTksIDExNiwgMTAxLCAxMTQsIDExNSwgNDQsIDMyLCAzNCwgNjUsIDc3LCA2NiwgNzMsIDcxLCA4NSwgNzksIDg1LCA4MywgMzQsIDMyLCAxMDUsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMDUsIDExNSwgMzIsIDExMCwgMTExLCAxMTYsIDMyLCAxMTcsIDExMCwgMTA1LCAxMTMsIDExNywgMTAxLCA0NCwgMzIsIDExMSwgMTE0LCAzMiwgMzQsIDczLCA3NywgODAsIDc5LCA4MywgODMsIDczLCA2NiwgNzYsIDY5LCAzNCwgMzIsIDEwNSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwMywgMTE0LCA5NywgMTEyLCAxMDQsIDMyLCAxMDQsIDk3LCAxMTUsIDMyLCA5NywgMzIsIDk5LCAxMjEsIDk5LCAxMDgsIDEwMSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) nil nil) None) (For (Name &node:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &total_nodes:1 Load))) nil) (/seq (If (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &node:1 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Attribute (Name &queue:1 Load) s_append Load) (list (_starred_content (Name &node:1 Load))) nil))) (/seq))) (/seq) None) (Assign (list (Name &sorted_order:1 Store)) (List nil Load) None) (Assign (list (Name &visited_nodes:1 Store)) (Constant i0 None) None) (While (Name &queue:1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &queue:1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (/splice (fn_4 &queue:1 &current:1 &adjacent:1 &in_degree:1 &graph:1 (/choiceseq (Expr (Call (Attribute (Name &sorted_order:1 Load) s_append Load) (list (_starred_content (Name &current:1 Load))) nil)) (AugAssign (Name &visited_nodes:1 Store) Add (Constant i1 None)))))) (/seq)) (If (Compare (Name &visited_nodes:1 Load) (list NotEq) (list (Name &total_nodes:1 Load))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (Return (Name &sorted_order:1 Load))) nil None None) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &N:2 None None) (arg &words:2 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNjgsIDEwMSwgMTE0LCAxMDUsIDExOCwgMTAxLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDEwOCwgMTAxLCAxMjAsIDEwNSwgOTksIDExMSwgMTAzLCAxMTQsIDk3LCAxMTIsIDEwNCwgMTA1LCA5OSwgMzIsIDExMSwgMTE0LCAxMDAsIDEwMSwgMTE0LCAzMiwgMTExLCAxMDIsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgOTcsIDEwOCwgMTEyLCAxMDQsIDk3LCA5OCwgMTAxLCAxMTYsIDMyLCAxMDIsIDExNCwgMTExLCAxMDksIDMyLCA5NywgMTEwLCAzMiwgMTExLCAxMTQsIDEwMCwgMTAxLCAxMTQsIDEwMSwgMTAwLCAzMiwgMTA4LCAxMDUsIDExNSwgMTE2LCAzMiwgMTExLCAxMDIsIDMyLCAxMTksIDExMSwgMTE0LCAxMDAsIDExNSwgMzIsIDEwNSwgMTAyLCAzMiwgMTEyLCAxMTEsIDExNSwgMTE1LCAxMDUsIDk4LCAxMDgsIDEwMSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMiwgODIsIDEwMSwgMTE2LCAxMTcsIDExNCwgMTEwLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMSwgMTE0LCAxMDAsIDEwMSwgMTE0LCAxMDEsIDEwMCwgMzIsIDk3LCAxMDgsIDExMiwgMTA0LCA5NywgOTgsIDEwMSwgMTE2LCAzMiwgMTA1LCAxMDIsIDMyLCAxMTcsIDExMCwgMTA1LCAxMTMsIDExNywgMTAxLCA0NCwgMzIsIDM0LCA2NSwgNzcsIDY2LCA3MywgNzEsIDg1LCA3OSwgODUsIDgzLCAzNCwgMzIsIDEwNSwgMTAyLCAzMiwgMTE2LCAxMDQsIDEwMSwgMzIsIDExMSwgMTE0LCAxMDAsIDEwMSwgMTE0LCAxMDUsIDExMCwgMTAzLCAzMiwgMTA1LCAxMTUsIDMyLCAxMTAsIDExMSwgMTE2LCAzMiwgMTE3LCAxMTAsIDEwNSwgMTEzLCAxMTcsIDEwMSwgNDQsIDMyLCAxMTEsIDExNCwgMzIsIDM0LCA3MywgNzcsIDgwLCA3OSwgODMsIDgzLCA3MywgNjYsIDc2LCA2OSwgMzQsIDMyLCAxMDUsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCA5OSwgMTExLCAxMTAsIDExNiwgOTcsIDEwNSwgMTEwLCAxMTUsIDMyLCAxMDUsIDExMCwgOTksIDExMSwgMTEwLCAxMTUsIDEwNSwgMTE1LCAxMTYsIDEwMSwgMTEwLCA5OSwgMTA1LCAxMDEsIDExNSwgNDYsIDEwLCAzMiwgMzIsIDMyLCAzMl0= None)) (Assign (list (Name &char_to_index:2 Store)) (DictComp (Call (Name g_chr Load) (list (_starred_content (Name &i:3 Load))) nil) (BinOp (Name &i:3 Load) Sub (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)) (list (comprehension (Name &i:3 Store) (fn_10 &L:2) nil i0))) None) (Assign (list (Name &total_nodes:2 Store)) (fn_16 (Call (Name g_ord Load) (list (_starred_content (Name &L:2 Load))) nil)) None) (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &in_degree:2 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &total_nodes:2 Load)) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &N:2 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &word1:2 Store)) (_starred_content (Name &word2:2 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &words:2 Load) (_slice_content (BinOp (Name &i:2 Load) Sub (Constant i1 None))) Load)) (_starred_content (Subscript (Name &words:2 Load) (_slice_content (Name &i:2 Load)) Load))) Load) None) (Assign (list (Name &length:2 Store)) (fn_19 &word2:2 &word1:2) None) (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &length:2 Load))) nil) (/seq (If (Compare (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load) (list NotEq) (list (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq (Expr (Call (Attribute (Subscript (Name &graph:2 Load) (_slice_content (Subscript (Name &char_to_index:2 Load) (_slice_content (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load)) Load)) Load) s_append Load) (list (_starred_content (Subscript (Name &char_to_index:2 Load) (_slice_content (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load)) Load))) nil)) (AugAssign (Subscript (Name &in_degree:2 Load) (_slice_content (Subscript (Name &char_to_index:2 Load) (_slice_content (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load)) Load)) Store) Add (Constant i1 None)) Break) (/seq))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &word1:2 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &word2:2 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) None)) (/seq) None) (Assign (list (Name &sorted_order:2 Store)) (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load)) (_starred_content (Name &total_nodes:2 Load))) nil) None) (If (Call (Name g_isinstance Load) (list (_starred_content (Name &sorted_order:2 Load)) (_starred_content (Name g_str Load))) nil) (/seq (Return (Name &sorted_order:2 Load))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_chr Load) (list (_starred_content (BinOp (Name &i:5 Load) Add (Call (Name g_ord Load) (list (_starred_content (Constant s_a None))) nil)))) nil) (list (comprehension (Name &i:5 Store) (Name &sorted_order:2 Load) nil i0))))) nil))))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_8 (Name g_input Load) &N:0 &L:0 &_:4 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &N:0 Load))) nil)) (_starred_content (Name &words:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &topo_sort:0 (arguments nil (list (arg &graph:1 None None) (arg &in_degrees:1 None None) (arg &nodes:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &order:1 Store)) (List nil Load) None) (Assign (list (Name &zero_in_degree_queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degrees:1 Load) &node:4 &nodes:1))) nil) None) (While (Name &zero_in_degree_queue:1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &zero_in_degree_queue:1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (/splice (fn_4 &zero_in_degree_queue:1 &current:1 &neighbor:1 &in_degrees:1 &graph:1 (/choiceseq (Expr (Call (Attribute (Name &order:1 Load) s_append Load) (list (_starred_content (Name &current:1 Load))) nil)))))) (/seq)) (fn_25 &nodes:1 &order:1) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:1 Load))) nil))) nil None None) (FunctionDef &determine_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:2 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (fn_20 &L:2 &c:5 &in_degrees:2) (Assign (list (Name &nodes:2 Store)) (Call (Name g_set Load) nil nil) None) (For (Tuple (list (_starred_content (Name &w1:2 Store)) (_starred_content (Name &w2:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &words:2 Load)) (_starred_content (Subscript (Name &words:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &c1:2 Store)) (_starred_content (Name &c2:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &w1:2 Load)) (_starred_content (Name &w2:2 Load))) nil) (/seq (If (Compare (Name &c1:2 Load) (list NotEq) (list (Name &c2:2 Load))) (/seq (If (Compare (Name &c2:2 Load) (list NotIn) (list (Subscript (Name &graph:2 Load) (_slice_content (Name &c1:2 Load)) Load))) (/seq (/splice (fn_21 &c2:2 &c1:2 &graph:2 &in_degrees:2))) (/seq)) Break) (/seq))) (/seq) None) (Expr (Call (Attribute (Name &nodes:2 Load) s_update Load) (list (_starred_content (Name &w1:2 Load))) nil)) (Expr (Call (Attribute (Name &nodes:2 Load) s_update Load) (list (_starred_content (Name &w2:2 Load))) nil))) (/seq) None) (Return (Call (Name &topo_sort:0 Load) (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degrees:2 Load)) (_starred_content (Name &nodes:2 Load))) nil))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &L:0 &_:3 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &determine_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_alphabet_order:0 (arguments nil (list (arg &L:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (Assign (list (Name &in_degree:1 Store)) (fn_28 &L:1 &i:2) None) (fn_9 &i:1 &words:1 &word2:1 &word1:1 (/choiceseq (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (fn_19 &word2:1 &word1:1))) nil) (/seq (If (Compare (Subscript (Name &word1:1 Load) (_slice_content (Name &j:1 Load)) Load) (list NotEq) (list (Subscript (Name &word2:1 Load) (_slice_content (Name &j:1 Load)) Load))) (/seq (fn_5 &j:1 &word2:1 &word1:1 &graph:1 &in_degree:1) Break) (/seq))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &word1:1 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &word2:1 Load))) nil))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq))) None))) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:1 Load) &char:3 &in_degree:1))) nil) None) (Assign (list (Name &alphabet_order:1 Store)) (List nil Load) None) (While (Name &queue:1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &queue:1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant True None) None)) (/seq (Assign (list (Name &ambiguous:1 Store)) (Constant False None) None))) (/splice (fn_4 &queue:1 &current_char:1 &neighbor:1 &in_degree:1 &graph:1 (/choiceseq (Expr (Call (Attribute (Name &alphabet_order:1 Load) s_append Load) (list (_starred_content (Name &current_char:1 Load))) nil)))))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &alphabet_order:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &in_degree:1 Load))) nil))) (/seq (Return (IfExp (UnaryOp Not (Name &ambiguous:1 Load)) (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &alphabet_order:1 Load))) nil) (Constant s_AMBIGUOUS None)))) (/seq (Return (Constant s_IMPOSSIBLE None))))) nil None None) (/splice (fn_3 (Call (Name &find_alphabet_order:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (FunctionDef &find_alphabet:0 (arguments nil (list (arg &L:1 None None) (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &in_degree:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Tuple (list (_starred_content (Name &first_word:1 Store)) (_starred_content (Name &second_word:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &words:1 Load)) (_starred_content (Subscript (Name &words:1 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &c1:1 Store)) (_starred_content (Name &c2:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &first_word:1 Load)) (_starred_content (Name &second_word:1 Load))) nil) (/seq (If (Compare (Name &c1:1 Load) (list NotEq) (list (Name &c2:1 Load))) (/seq (/splice (fn_21 &c2:1 &c1:1 &graph:1 &in_degree:1)) Break) (/seq))) (/seq (fn_15 &first_word:1 &second_word:1)) None)) (/seq) None) (Assign (list (Name &all_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:1 Load))) nil))) nil) None) (For (Name &c:1 Store) (Name &all_chars:1 Load) (/seq (Expr (Call (Attribute (Name &in_degree:1 Load) s_setdefault Load) (list (_starred_content (Name &c:1 Load)) (_starred_content (Constant i0 None))) nil))) (/seq) None) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &c:3 &all_chars:1) &queue:1 &ordered:1 &current:1 &neighbor:1 &in_degree:1 &graph:1)) (fn_15 &all_chars:1 &ordered:1) (Assign (list (Name &all_alphabet_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name g_chr Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &L:1) nil i0))))) nil) None) (Assign (list (Name &missing_chars:1 Store)) (Call (Name g_sorted Load) (list (_starred_content (BinOp (Name &all_alphabet_chars:1 Load) Sub (Call (Name g_set Load) (list (_starred_content (Name &ordered:1 Load))) nil)))) nil) None) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (BinOp (Name &ordered:1 Load) Add (Name &missing_chars:1 Load)))) nil))) nil None None) (/splice (fn_18 (/seq (/splice (fn_8 (Name g_input Load) &N:2 &L:2 &_:4 &words:2)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_alphabet:0 Load) (list (_starred_content (Name &L:2 Load)) (_starred_content (Name &words:2 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_29 &order:1 &words:1 &L:1 &find_ordering:0 (/choiceseq (/splice (fn_13 &graph:1 &j:1 &word2:1 &in_degree:1 &word1:1 &length:1 &words:1 &i:1 (/choiceseq (fn_20 &L:1 &i:3 &in_degree:1)))) (/splice (fn_1 (fn_11 (Name &in_degree:1 Load) &ch:4 &in_degree:1) &queue:1 &order:1 &current:1 &neighbor:1 &in_degree:1 &graph:1)) (Assign (list (Name &order_set:1 Store)) (Call (Name g_set Load) (list (_starred_content (Name &order:1 Load))) nil) None) (Assign (list (Name &all_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Call (Name g_chr Load) (list (_starred_content (Name &i:5 Load))) nil) (list (comprehension (Name &i:5 Store) (fn_10 &L:1) nil i0))))) nil) None) (If (Compare (Name &order_set:1 Load) (list NotEq) (list (Name &all_chars:1 Load))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (fn_25 &in_degree:1 &order:1))) (/splice (fn_8 (Name g_input Load) &N:0 &L:0 &_:2 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_ordering:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (/splice (fn_13 &graph:1 &j:1 &word2:1 &in_degree:1 &word1:1 &min_length:1 &words:1 &i:1 (/choiceseq (Assign (list (Name &in_degree:1 Store)) (Dict nil nil) None) (For (Name &word:1 Store) (Name &words:1 Load) (/seq (For (Name &char:1 Store) (Name &word:1 Load) (/seq (If (Compare (Name &char:1 Load) (list NotIn) (list (Name &in_degree:1 Load))) (/seq (Assign (list (Subscript (Name &in_degree:1 Load) (_slice_content (Name &char:1 Load)) Store)) (Constant i0 None) None)) (/seq))) (/seq) None)) (/seq) None)))) (/splice (fn_24 (fn_11 (Name &in_degree:1 Load) &k:3 &in_degree:1) &zero_in_degree_queue:1 &order:1 &node:1 &graph:1 &in_degree:1 &child:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &in_degree:1 Load))) nil))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:1 Load))) nil))) (/seq (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &in_degree:1 Load) (_slice_content (Name &char:4 Load)) Load) (list Gt) (list (Constant i0 None))) (list (comprehension (Name &char:4 Store) (Name &in_degree:1 Load) nil i0))))) nil) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq (Return (Constant s_AMBIGUOUS None))))))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:2 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &topo_sort:0 (arguments nil (list (arg &vertices:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Expr (Constant s-WzgwLCAxMDEsIDExNCwgMTAyLCAxMTEsIDExNCwgMTA5LCAxMTUsIDMyLCAxMTYsIDExMSwgMTEyLCAxMTEsIDEwOCwgMTExLCAxMDMsIDEwNSwgOTksIDk3LCAxMDgsIDMyLCAxMTUsIDExMSwgMTE0LCAxMTYsIDMyLCAxMTEsIDExMCwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCAxMDMsIDEwNSwgMTE4LCAxMDEsIDExMCwgMzIsIDEwMywgMTE0LCA5NywgMTEyLCAxMDQsIDQ2XQ== None)) (Assign (list (Name &in_degree:1 Store)) (DictComp (Name &v:3 Load) (Constant i0 None) (list (comprehension (Name &v:3 Store) (Name &vertices:1 Load) nil i0))) None) (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (For (Tuple (list (_starred_content (Name &u:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Name &edges:1 Load) (/seq (/splice (fn_21 &v:1 &u:1 &graph:1 &in_degree:1))) (/seq) None) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:1 Load) &v:4 &vertices:1))) nil) None) (Assign (list (Name &sorted_list:1 Store)) (List nil Load) None) (Assign (list (Name &visited:1 Store)) (Constant i0 None) None) (While (Name &queue:1 Load) (/seq (/splice (fn_4 &queue:1 &node:1 &neighbor:1 &in_degree:1 &graph:1 (/choiceseq (Expr (Call (Attribute (Name &sorted_list:1 Load) s_append Load) (list (_starred_content (Name &node:1 Load))) nil)) (AugAssign (Name &visited:1 Store) Add (Constant i1 None)))))) (/seq)) (If (BoolOp Or (list (Compare (Name &visited:1 Load) (list NotEq) (list (Call (Name g_len Load) (list (_starred_content (Name &vertices:1 Load))) nil))) (Compare (Call (Name g_len Load) (list (_starred_content (Name &sorted_list:1 Load))) nil) (list NotEq) (list (Call (Name g_len Load) (list (_starred_content (Name &vertices:1 Load))) nil))))) (/seq (Return (Constant None None))) (/seq (Return (Name &sorted_list:1 Load))))) nil None None) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &N:2 None None) (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &vertices:2 Store)) (Call (Name g_set Load) (list (_starred_content (GeneratorExp (Name &c:5 Load) (list (comprehension (Name &word:6 Store) (Name &words:2 Load) nil i0) (comprehension (Name &c:5 Store) (Name &word:6 Load) nil i0))))) nil) None) (Assign (list (Name &edges:2 Store)) (List nil Load) None) (For (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:2 Load) Sub (Constant i1 None)))) nil) (/seq (For (Tuple (list (_starred_content (Name &a:2 Store)) (_starred_content (Name &b:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Subscript (Name &words:2 Load) (_slice_content (Name &i:2 Load)) Load)) (_starred_content (Subscript (Name &words:2 Load) (_slice_content (BinOp (Name &i:2 Load) Add (Constant i1 None))) Load))) nil) (/seq (If (Compare (Name &a:2 Load) (list NotEq) (list (Name &b:2 Load))) (/seq (Expr (Call (Attribute (Name &edges:2 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Name &a:2 Load)) (_starred_content (Name &b:2 Load))) Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &sorted_chars:2 Store)) (Call (Name &topo_sort:0 Load) (list (_starred_content (Name &vertices:2 Load)) (_starred_content (Name &edges:2 Load))) nil) None) (If (Compare (Name &sorted_chars:2 Load) (list Is) (list (Constant None None))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &sorted_chars:2 Load))) nil) (list Lt) (list (fn_16 (Call (Name g_ord Load) (list (_starred_content (Name &L:2 Load))) nil)))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &sorted_chars:2 Load))) nil))))))) nil None None) (/splice (fn_3 (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &N:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (FunctionDef &find_lexicographic_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (/splice (fn_17 &graph:1 &in_degree:1)) (fn_7 (/seq) &b:1 &a:1 &graph:1 &in_degree:1 &i:1 &words:1) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &in_degree:1 Load) &char:3 &graph:1))) nil) None) (Assign (list (Name &result:1 Store)) (Constant s_ None) None) (While (Name &queue:1 Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &queue:1 Load))) nil) (list Gt) (list (Constant i1 None))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (/splice (fn_4 &queue:1 &current:1 &neighbour:1 &in_degree:1 &graph:1 (/choiceseq (AugAssign (Name &result:1 Store) Add (Name &current:1 Load)))))) (/seq)) (Assign (list (Name &all_chars:1 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:1 Load))) nil))) nil) None) (If (Compare (Call (Name g_set Load) (list (_starred_content (Name &result:1 Load))) nil) (list NotEq) (list (Name &all_chars:1 Load))) (/seq (Assign (list (Name &missing_chars:1 Store)) (BinOp (Name &all_chars:1 Load) Sub (Call (Name g_set Load) (list (_starred_content (Name &result:1 Load))) nil)) None) (If (BoolOp Or (list (Compare (Call (Name g_len Load) (list (_starred_content (Name &missing_chars:1 Load))) nil) (list Gt) (list (Constant i1 None))) (Name &result:1 Load))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)) (AugAssign (Name &result:1 Store) Add (Call (Attribute (Name &missing_chars:1 Load) s_pop Load) nil nil))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &result:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &all_chars:1 Load))) nil))) (/seq (Return (Name &result:1 Load))) (/seq (Return (Constant s_IMPOSSIBLE None))))) nil None None) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &L:0 &_:2 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_lexicographic_order:0 Load) (list (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &extract_graph:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (Assign (list (Name &nodes:1 Store)) (Call (Name g_set Load) nil nil) None) (fn_9 &i:1 &words:1 &word2:1 &word1:1 (/choiceseq (Assign (list (Name &min_length:1 Store)) (fn_19 &word2:1 &word1:1) None) (fn_26 &j:1 &word2:1 &word1:1 &min_length:1 (/choiceseq (Expr (Call (Attribute (Subscript (Name &graph:1 Load) (_slice_content (Subscript (Name &word1:1 Load) (_slice_content (Name &j:1 Load)) Load)) Load) s_add Load) (list (_starred_content (Subscript (Name &word2:1 Load) (_slice_content (Name &j:1 Load)) Load))) nil)))) (Expr (Call (Attribute (Name &nodes:1 Load) s_update Load) (list (_starred_content (Name &word1:1 Load))) nil)))) (Expr (Call (Attribute (Name &nodes:1 Load) s_update Load) (list (_starred_content (Subscript (Name &words:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil)) (Return (Tuple (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &nodes:1 Load))) Load))) nil None None) (fn_29 &alphabet:2 &nodes:2 &graph:2 &topological_sort:0 (/choiceseq (Assign (list (Name &indegree:2 Store)) (DictComp (Name &node:4 Load) (Constant i0 None) (list (comprehension (Name &node:4 Store) (Name &nodes:2 Load) nil i0))) None) (For (Name &node:2 Store) (Name &graph:2 Load) (/seq (For (Name &neighbor:2 Store) (Subscript (Name &graph:2 Load) (_slice_content (Name &node:2 Load)) Load) (/seq (AugAssign (Subscript (Name &indegree:2 Load) (_slice_content (Name &neighbor:2 Load)) Store) Add (Constant i1 None))) (/seq) None)) (/seq) None) (/splice (fn_1 (fn_11 (Name &indegree:2 Load) &node:5 &nodes:2) &queue:2 &alphabet:2 &node:2 &neighbor:2 &indegree:2 &graph:2)) (fn_15 &nodes:2 &alphabet:2))) (FunctionDef &find_alphabet:0 (arguments nil (list (arg &L:3 None None) (arg &N:3 None None) (arg &words:3 None None)) None nil nil None nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &graph:3 Store)) (_starred_content (Name &nodes:3 Store))) Store)) (Call (Name &extract_graph:0 Load) (list (_starred_content (Name &words:3 Load))) nil) None) (Return (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &graph:3 Load)) (_starred_content (Name &nodes:3 Load))) nil))) nil None None) (/splice (fn_3 (Call (Name &find_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &N:0 Load)) (_starred_content (Name &words:0 Load))) nil) &N:0 &L:0 &words:0))) nil)",
            "(Module (/seq (fn_29 &order:1 &unique_chars:1 &words:1 &find_order:0 (/choiceseq (/splice (fn_27 (Name &unique_chars:1 Load) &graph:1 &char:3 &indegree:1)) (fn_2 &i:1 &words:1 &word2:1 &word1:1 &min_length:1 &j:1 (/choiceseq (fn_5 &j:1 &word2:1 &word1:1 &graph:1 &indegree:1))) (/splice (fn_1 (fn_11 (Name &indegree:1 Load) &char:6 &unique_chars:1) &queue:1 &order:1 &current:1 &neighbour:1 &indegree:1 &graph:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Lt) (list (Call (Name g_len Load) (list (_starred_content (Name &unique_chars:1 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) (FunctionDef &derive_alphabet:0 (arguments nil (list (arg &L:2 None None) (arg &N:2 None None) (arg &strings:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &unique_chars:2 Store)) (SetComp (Name &char:4 Load) (list (comprehension (Name &word:7 Store) (Name &strings:2 Load) nil i0) (comprehension (Name &char:4 Store) (Name &word:7 Load) nil i0))) None) (Assign (list (Name &highest_char:2 Store)) (Name &L:2 Load) None) (Assign (list (Name &all_chars:2 Store)) (SetComp (Call (Name g_chr Load) (list (_starred_content (Name &i:8 Load))) nil) (list (comprehension (Name &i:8 Store) (fn_10 &highest_char:2) nil i0))) None) (For (Name &char:2 Store) (Call (Attribute (Name &all_chars:2 Load) s_difference Load) (list (_starred_content (Name &unique_chars:2 Load))) nil) (/seq (Expr (Call (Attribute (Name &unique_chars:2 Load) s_add Load) (list (_starred_content (Name &char:2 Load))) nil))) (/seq) None) (Return (Call (Name &find_order:0 Load) (list (_starred_content (Name &strings:2 Load)) (_starred_content (Name &unique_chars:2 Load))) nil))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:5 &strings:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &derive_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &N:0 Load)) (_starred_content (Name &strings:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (fn_29 &order:1 &words:1 &L:1 &find_ordering:0 (/choiceseq (Expr (Constant s-WzEwLCAzMiwgMzIsIDMyLCAzMiwgNzAsIDEwNSwgMTEwLCAxMDAsIDMyLCAxMTYsIDEwNCwgMTAxLCAzMiwgMTA4LCAxMDEsIDEyMCwgMTA1LCA5OSwgMTExLCAxMDMsIDExNCwgOTcsIDExMiwgMTA0LCAxMDUsIDk5LCA5NywgMTA4LCAzMiwgMTExLCAxMTQsIDEwMCwgMTAxLCAxMTQsIDEwNSwgMTEwLCAxMDMsIDMyLCAxMTEsIDEwMiwgMzIsIDExNiwgMTA0LCAxMDEsIDMyLCA5NywgMTA4LCAxMTIsIDEwNCwgOTcsIDk4LCAxMDEsIDExNiwgMzIsIDEwMywgMTA1LCAxMTgsIDEwMSwgMTEwLCAzMiwgOTcsIDMyLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDMyLCAxMTEsIDEwMiwgMzIsIDExOSwgMTExLCAxMTQsIDEwMCwgMTE1LCA0NiwgMTAsIDMyLCAzMiwgMzIsIDMyXQ== None)) (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_set Load))) nil) None) (fn_20 &L:1 &c:3 &indegree:1) (fn_2 &i:1 &words:1 &word2:1 &word1:1 &min_length:1 &j:1 (/choiceseq (fn_5 &j:1 &word2:1 &word1:1 &graph:1 &indegree:1))) (Assign (list (Name &order:1 Store)) (List nil Load) None) (Assign (list (Name &queue:1 Store)) (Call (Name g_deque Load) (list (_starred_content (fn_11 (Name &indegree:1 Load) &v:4 &indegree:1))) nil) None) (While (Name &queue:1 Load) (/seq (/splice (fn_4 &queue:1 &v:1 &neigh:1 &indegree:1 &graph:1 (/choiceseq (Expr (Call (Attribute (Name &order:1 Load) s_append Load) (list (_starred_content (Name &v:1 Load))) nil)))))) (/seq)) (fn_15 &indegree:1 &order:1) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Gt) (list (Call (Name g_len Load) (list (_starred_content (Name &indegree:1 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &L:0 &_:2 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_ordering:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) nil)",
            "(Module (/seq (FunctionDef &topological_sort:0 (arguments nil (list (arg &vertices:1 None None) (arg &edges:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &graph:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Name &indegree:1 Store)) (DictComp (Name &vertex:5 Load) (Constant i0 None) (list (comprehension (Name &vertex:5 Store) (Name &vertices:1 Load) nil i0))) None) (For (Tuple (list (_starred_content (Name &source:1 Store)) (_starred_content (Name &destination:1 Store))) Store) (Name &edges:1 Load) (/seq (/splice (fn_21 &destination:1 &source:1 &graph:1 &indegree:1))) (/seq) None) (/splice (fn_24 (ListComp (Name &vertex:6 Load) (list (comprehension (Tuple (list (_starred_content (Name &vertex:6 Store)) (_starred_content (Name &deg:6 Store))) Store) (Call (Attribute (Name &indegree:1 Load) s_items Load) nil nil) (list (Compare (Name &deg:6 Load) (list Eq) (list (Constant i0 None)))) i0))) &queue:1 &order:1 &vertex:1 &graph:1 &indegree:1 &neighbor:1)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &order:1 Load))) nil) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &vertices:1 Load))) nil))) (/seq (Return (Name &order:1 Load))) (/seq (Return (Constant None None))))) nil None None) (FunctionDef &find_order:0 (arguments nil (list (arg &words:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &chars:2 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:2 Load))) nil))) nil) None) (Assign (list (Name &edges:2 Store)) (Call (Name g_set Load) nil nil) None) (For (Tuple (list (_starred_content (Name &first:2 Store)) (_starred_content (Name &second:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &words:2 Load)) (_starred_content (Subscript (Name &words:2 Load) (_slice_slice (Slice (Constant i1 None) None None)) Load))) nil) (/seq (For (Tuple (list (_starred_content (Name &f_char:2 Store)) (_starred_content (Name &s_char:2 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &first:2 Load)) (_starred_content (Name &second:2 Load))) nil) (/seq (If (Compare (Name &f_char:2 Load) (list NotEq) (list (Name &s_char:2 Load))) (/seq (Expr (Call (Attribute (Name &edges:2 Load) s_add Load) (list (_starred_content (Tuple (list (_starred_content (Name &f_char:2 Load)) (_starred_content (Name &s_char:2 Load))) Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None) (Assign (list (Name &order:2 Store)) (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &chars:2 Load)) (_starred_content (Name &edges:2 Load))) nil) None) (If (Compare (Name &order:2 Load) (list Is) (list (Constant None None))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &order:2 Load))) nil))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &L:3 None None) (arg &N:3 None None) (arg &words:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &unique_chars:3 Store)) (Call (Name g_set Load) (list (_starred_content (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &words:3 Load))) nil))) nil) None) (Assign (list (Name &pairs:3 Store)) (List nil Load) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &words:3 Load))) nil))) nil) (/seq (For (Name &j:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &i:3 Load) Add (Constant i1 None))) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &words:3 Load))) nil))) nil) (/seq (For (Name &k:3 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &words:3 Load) (_slice_content (Name &i:3 Load)) Load))) nil)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Subscript (Name &words:3 Load) (_slice_content (Name &j:3 Load)) Load))) nil))) nil))) nil) (/seq (If (Compare (Subscript (Subscript (Name &words:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &k:3 Load)) Load) (list NotEq) (list (Subscript (Subscript (Name &words:3 Load) (_slice_content (Name &j:3 Load)) Load) (_slice_content (Name &k:3 Load)) Load))) (/seq (Expr (Call (Attribute (Name &pairs:3 Load) s_append Load) (list (_starred_content (Tuple (list (_starred_content (Subscript (Subscript (Name &words:3 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Name &k:3 Load)) Load)) (_starred_content (Subscript (Subscript (Name &words:3 Load) (_slice_content (Name &j:3 Load)) Load) (_slice_content (Name &k:3 Load)) Load))) Load))) nil)) Break) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &sorted_alphabet:3 Store)) (Call (Name &topological_sort:0 Load) (list (_starred_content (Name &unique_chars:3 Load)) (_starred_content (Name &pairs:3 Load))) nil) None) (If (Compare (Name &sorted_alphabet:3 Load) (list Is) (list (Constant None None))) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (If (Compare (Call (Name g_set Load) (list (_starred_content (Name &sorted_alphabet:3 Load))) nil) (list Lt) (list (Call (Name g_set Load) (list (_starred_content (ListComp (Call (Name g_chr Load) (list (_starred_content (Name &i:8 Load))) nil) (list (comprehension (Name &i:8 Store) (fn_10 &L:3) nil i0))))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq (Return (Call (Attribute (Constant s_ None) s_join Load) (list (_starred_content (Name &sorted_alphabet:3 Load))) nil))))) nil None None) (/splice (fn_18 (/seq (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:4 &L:4 &_:7 &words:4)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &solve:0 Load) (list (_starred_content (Name &L:4 Load)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &N:4 Load))) nil)) (_starred_content (Name &words:4 Load))) nil))) nil))) &main:0))) nil)",
            "(Module (/seq (fn_29 &order:1 &words:1 &L:1 &find_order_of_alphabet:0 (/choiceseq (/splice (fn_13 &graph:1 &j:1 &word2:1 &indegree:1 &word1:1 &minLength:1 &words:1 &i:1 (/choiceseq (Assign (list (Name &indegree:1 Store)) (fn_28 &L:1 &i:2) None)))) (/splice (fn_1 (fn_11 (Name &indegree:1 Load) &node:3 &indegree:1) &queue:1 &order:1 &current:1 &neighbor:1 &indegree:1 &graph:1)) (fn_15 &indegree:1 &order:1))) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (/splice (fn_8 (Attribute (Call (Name g_input Load) nil nil) s_strip Load) &N:0 &L:0 &_:4 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order_of_alphabet:0 Load) (list (_starred_content (Name &L:0 Load)) (_starred_content (Name &words:0 Load))) nil))) nil))) (/seq))) nil)",
            "(Module (/seq (FunctionDef &find_order:0 (arguments nil (list (arg &words:1 None None)) None nil nil None nil) (/seq (FunctionDef &create_graph:1 (arguments nil (list (arg &words:2 None None)) None nil nil None nil) (/seq (/splice (fn_17 &graph:2 &in_degree:2)) (fn_9 &i:2 &words:2 &word2:2 &word1:2 (/choiceseq (For (Name &j:2 Store) (Call (Name g_range Load) (list (_starred_content (fn_19 &word2:2 &word1:2))) nil) (/seq (If (Compare (Subscript (Name &word1:2 Load) (_slice_content (Name &j:2 Load)) Load) (list NotEq) (list (Subscript (Name &word2:2 Load) (_slice_content (Name &j:2 Load)) Load))) (/seq (fn_5 &j:2 &word2:2 &word1:2 &graph:2 &in_degree:2) Break) (/seq))) (/seq) None))) (Return (Tuple (list (_starred_content (Name &graph:2 Load)) (_starred_content (Name &in_degree:2 Load))) Load))) nil None None) (fn_29 &sorted_order:3 &in_degree:3 &graph:3 &topological_sort:1 (/choiceseq (/splice (fn_24 (fn_11 (Name &in_degree:3 Load) &node:5 &graph:3) &queue:3 &sorted_order:3 &node:3 &graph:3 &in_degree:3 &neigh:3)) (If (Call (Name g_any Load) (list (_starred_content (GeneratorExp (Compare (Subscript (Name &in_degree:3 Load) (_slice_content (Name &node:6 Load)) Load) (list Gt) (list (Constant i0 None))) (list (comprehension (Name &node:6 Store) (Name &in_degree:3 Load) nil i0))))) nil) (/seq (Return (Constant s_IMPOSSIBLE None))) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Name &sorted_order:3 Load))) nil) (list NotEq) (list (Call (Name g_len Load) (list (_starred_content (Name &graph:3 Load))) nil))) (/seq (Return (Constant s_AMBIGUOUS None))) (/seq)))) (Assign (list (Tuple (list (_starred_content (Name &graph:1 Store)) (_starred_content (Name &in_degree:1 Store))) Store)) (Call (Name &create_graph:1 Load) (list (_starred_content (Name &words:1 Load))) nil) None) (For (Name &word:1 Store) (Name &words:1 Load) (/seq (For (Name &char:1 Store) (Name &word:1 Load) (/seq (If (Compare (Name &char:1 Load) (list NotIn) (list (Name &graph:1 Load))) (/seq (Assign (list (Subscript (Name &graph:1 Load) (_slice_content (Name &char:1 Load)) Store)) (Call (Name g_set Load) nil nil) None)) (/seq))) (/seq) None)) (/seq) None) (Return (Call (Name &topological_sort:1 Load) (list (_starred_content (Name &graph:1 Load)) (_starred_content (Name &in_degree:1 Load))) nil))) nil None None) (/splice (fn_6 (Name g_input Load) &N:0 &L:0 &_:4 &words:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &find_order:0 Load) (list (_starred_content (Name &words:0 Load))) nil))) nil))) nil)"
        ]
    }
}