[
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None)\n    (If\n      (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n      (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil)))\n      (/seq\n        (While\n          (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))))\n          (/seq\n            (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n            (AugAssign (Name &l:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list\n              (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)\n            )\n            nil\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None)\n    (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &y:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &x:0 Store))\n      (Call (Attribute (Name &y:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None)\n    (If\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n      (/seq\n        (While\n          (BinOp\n            (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load)))\n            BitAnd\n            (Compare\n              (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None)))\n              (list Gt)\n              (list (Constant i10 None))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None)))\n              (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None)))\n              (/seq)\n            )\n            (AugAssign (Name &i:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &eights:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &elem:0 Store)\n      (Call (Name g_input Load) nil nil)\n      (/seq\n        (If\n          (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None)))\n          (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None)))\n          (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None)))\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &answer:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq Break)\n          (/seq\n            (AugAssign (Name &eights:0 Store) Sub (Constant i1 None))\n            (If\n              (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None)))\n              (/seq\n                (AugAssign (Name &others:0 Store) Sub (Constant i10 None))\n                (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n              )\n              (/seq\n                (If\n                  (Compare\n                    (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (list GtE)\n                    (list (Constant i0 None))\n                  )\n                  (/seq\n                    (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load)))\n                    (Assign (list (Name &others:0 Store)) (Constant i0 None) None)\n                    (AugAssign (Name &answer:0 Store) Add (Constant i1 None))\n                  )\n                  (/seq Break)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_os None)))\n    (Import (list (alias g_sys None)))\n    (Import (list (alias g_math None)))\n    (Import (list (alias g_heapq None)))\n    (ImportFrom s_decimal (list (alias g_* None)) i0)\n    (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0)\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (FunctionDef\n      &r:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rm:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rl:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (AugAssign\n          (Subscript\n            (Name &num:0 Load)\n            (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)\n            Store\n          )\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (Assign\n          (list (Name &tot:0 Store))\n          (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load))\n          None\n        )\n        (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None)\n        (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None)\n        (If\n          (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) nil)))\n          (/seq\n            (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None)\n            (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load))\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))\n            )\n            (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None))\n            (AugAssign\n              (Name &ans:0 Store)\n              Add\n              (IfExp\n                (Compare\n                  (BinOp\n                    (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load))\n                    Sub\n                    (Constant i1 None)\n                  )\n                  (list GtE)\n                  (list (Constant i10 None))\n                )\n                (Constant i1 None)\n                (Constant i0 None)\n              )\n            )\n            (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &k:0 Store))\n      (Call (Attribute (Name &a:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Constant i0 None) None)\n    (While\n      (BoolOp\n        And\n        (list\n          (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None)))\n          (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None)))\n        )\n      )\n      (/seq\n        (AugAssign (Name &s:0 Store) Add (Constant i1 None))\n        (AugAssign (Name &n:0 Store) Sub (Constant i11 None))\n        (AugAssign (Name &k:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_8 None)) nil)\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None)\n    (If\n      (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil)))\n      (/seq\n        (If\n          (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Name &s:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None)))\n          (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None)\n        (If\n          (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil)))\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (Constant s_8 None)) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &k:0)) (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) (/seq (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &k:0 Load) (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None))) nil)) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_str Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0 &s:0 &p:0)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (Name &p:0 Load) (Name &q:0 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &f:0 Load)) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &a:0 &y:0 &x:0)) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None)) (Name &x:0 Load)) nil)) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (/seq (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (/seq (If (Compare (Subscript (Name &s:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &nb_8:0 Load)) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (/seq (If (Compare (Call (Name g_int Load) (list (Name &elem:0 Load)) nil) (list Eq) (list (Constant i8 None))) (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (/seq (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq Break))))))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &answer:0 Load)) nil))) nil)",
      "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_heapq None))) (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil))) nil None None) (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (AugAssign (Subscript (Name &num:0 Load) (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (Constant i8 None) Load)) None) (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (If (Compare (Subscript (Name &num:0 Load) (Constant i8 None) Load) (list LtE) (list (Name &strips:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &num:0 Load) (Constant i8 None) Load)) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Sub (Name &strips:0 Load)) (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (Constant i8 None) Load) FloorDiv (Constant i11 None))) (AugAssign (Subscript (Name &num:0 Load) (Constant i8 None) Store) Mod (Constant i11 None)) (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (Constant i8 None) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) &n:0 &a:0 &k:0)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &a:0)) (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Expr (Call (Name g_print Load) (list (Call (Name g_min Load) (list (Name &a:0 Load) (Name &b:0 Load)) nil)) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &c:0)) (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Name g_int Load) (list (Name &p:0 Load)) nil)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &A:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &A:0 Store))\n          (BinOp\n            (Name &A:0 Load)\n            Add\n            (List (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) Load)\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &a:0 Store)\n      (Name &A:0 Load)\n      (/seq\n        (If\n          (BoolOp\n            Or\n            (list\n              (Compare\n                (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                (list Lt)\n                (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil))\n              )\n              (Compare\n                (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                (list Gt)\n                (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil))\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                    Mult\n                    (BinOp\n                      (BinOp\n                        (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil)\n                        FloorDiv\n                        (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &d:0 Load) Mult (Constant i2 None))) nil)))\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (Call\n                                  (Attribute (Name g_math Load) s_ceil Load)\n                                  (list (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))\n                                  nil\n                                )\n                                Mult\n                                (Name &d:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                      (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Name &d:0 Load))) nil)))\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &k:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Constant i1 None))) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load)))\n              (/seq\n                (If\n                  (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None)))\n                  (/seq\n                    (If\n                      (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None)))\n                      (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                      (/seq\n                        (Expr\n                          (Call\n                            (Name g_print Load)\n                            (list\n                              (BinOp\n                                (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                                Mult\n                                (Name &d:0 Load)\n                              )\n                            )\n                            nil\n                          )\n                        )\n                      )\n                    )\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &d:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load))\n                    Mult\n                    (Name &d:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &func:0\n      (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:1 Load) FloorDiv (Name &d:1 Load)) Add (Constant i1 None))\n                    Mult\n                    (Name &d:1 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:1 Load)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &count:2 Store))\n          (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n          None\n        )\n        (For\n          (Name &_:2 Store)\n          (Call (Name g_range Load) (list (Name &count:2 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &arr:2 Store))\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name &func:0 Load)\n                (list\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i0 None) Load)) nil)\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i1 None) Load)) nil)\n                  (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i2 None) Load)) nil)\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &main:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Name &inputs:0 Store))\n          (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i0 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &r:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i1 None) Load)) nil)\n          None\n        )\n        (Assign\n          (list (Name &d:0 Store))\n          (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i2 None) Load)) nil)\n          None\n        )\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None)\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &b:0 Load) FloorDiv (Name &c:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &c:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Constant\n            s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0=\n            None\n          )\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                    Mult\n                    (Name &d:0 Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &q:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call\n                (Attribute\n                  (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                  s_split\n                  Load\n                )\n                nil\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n        (If\n          (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load)))\n          (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None))\n          (/seq\n            (Assign\n              (list (Name &ans:0 Store))\n              (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)))\n              None\n            )\n          )\n        )\n        (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &u:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (If\n          (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n          (/seq\n            (If\n              (BoolOp\n                And\n                (list\n                  (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load)))\n                  (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load)))\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (BinOp\n                        (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None))\n                        Mult\n                        (Name &d:0 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n              )\n              (/seq\n                (If\n                  (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil)))\n                  (/seq)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) Add (Constant i1 None)) Mult (Name %1 Load))) nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) (list Lt) (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i0 None) Load)) nil))) (Compare (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) (list Gt) (list (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil))))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i1 None) Load)) nil) FloorDiv (Call (Name g_int Load) (list (Subscript (Name &a:0 Load) (Constant i2 None) Load)) nil)) Add (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &d:0 Load) Mult (Constant i2 None))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (Name &r:0 Load) Div (Name &d:0 Load))) nil) Mult (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Name &d:0 Load))) nil))))))))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &r:0 Load) Add (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (fn_1 &d:0 &r:0))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))))) (fn_1 &d:0 &r:0))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (fn_1 &d:1 &r:1) (/seq (Expr (Call (Name g_print Load) (list (Name &d:1 Load)) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (Name &count:2 Load)) nil) (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i0 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i1 None) Load)) nil) (Call (Name g_int Load) (list (Subscript (Name &arr:2 Load) (Constant i2 None) Load)) nil)) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i0 None) Load)) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i1 None) Load)) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (Subscript (Name &inputs:0 Load) (Constant i2 None) Load)) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) (fn_1 &c:0 &b:0))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (fn_1 &d:0 &r:0))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &q:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (Name &ans:0 Load)) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &u:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Assign (list (Tuple (list (Name &l:0 Store) (Name &r:0 Store) (Name &d:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (fn_1 &d:0 &r:0) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &d:0 Load)) nil))) (/seq))))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &l:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &_:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &l:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &l:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &l:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ClassDef\n      &D1AddOnATree:0\n      nil\n      nil\n      (/seq\n        (FunctionDef\n          &dfs:1\n          (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &start:2 Load) Store))\n              (Constant i1 None)\n              None\n            )\n            (For\n              (Name &x:2 Store)\n              (Subscript (Attribute (Name &self:2 Load) s_adj Load) (Name &start:2 Load) Load)\n              (/seq\n                (If\n                  (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &x:2 Load) Load)\n                  (/seq Continue)\n                  (/seq)\n                )\n                (Assign\n                  (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (Name &x:2 Load) Store))\n                  (Name &start:2 Load)\n                  None\n                )\n                (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (Name &x:2 Load)) nil))\n              )\n              (/seq)\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &solve:1\n          (arguments nil (list (arg &self:3 None None)) None nil nil None nil)\n          (/seq\n            (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0)\n            (Import (list (alias &sys:3 None)))\n            (Expr\n              (Call\n                (Attribute (Name &sys:3 Load) s_setrecursionlimit Load)\n                (list (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))\n                nil\n              )\n            )\n            (Assign\n              (list (Name &n:3 Store))\n              (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_adj Store))\n              (Call (Name &defaultdict:3 Load) (list (Name g_list Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_par Store))\n              (Call (Name &defaultdict:3 Load) (list (Name g_int Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:3 Load) s_done Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Sub (Constant i1 None))) nil)\n              (/seq\n                (Assign\n                  (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store))\n                  (ListComp\n                    (Call (Name g_int Load) (list (Name &_:4 Load)) nil)\n                    (list\n                      (comprehension\n                        (Name &_:4 Store)\n                        (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n                        nil\n                        i0\n                      )\n                    )\n                  )\n                  None\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &u:3 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &v:3 Load))\n                    nil\n                  )\n                )\n                (Expr\n                  (Call\n                    (Attribute\n                      (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &v:3 Load) Load)\n                      s_append\n                      Load\n                    )\n                    (list (Name &u:3 Load))\n                    nil\n                  )\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &u:3 Load) Store)\n                  Add\n                  (Constant i1 None)\n                )\n                (AugAssign\n                  (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &v:3 Load) Store)\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              (/seq)\n              None\n            )\n            (For\n              (Name &i:3 Store)\n              (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &i:3 Load) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n                  (/seq)\n                )\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              None\n            )\n            (Return None)\n            (Assign\n              (list (Name &v:3 Store))\n              (Call\n                (Name g_max Load)\n                (list\n                  (GeneratorExp\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:5 Load) Load))\n                      nil\n                    )\n                    (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))\n                  )\n                )\n                nil\n              )\n              None\n            )\n            (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None)\n            (For\n              (Name &p:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:3 Load) Load))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Name &v:3 Load))\n                  )\n                  (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break)\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None)\n            (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (Name &start:3 Load)) nil))\n            (Assign\n              (list (Name &cnt:3 Store))\n              (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None)))\n              None\n            )\n            (For\n              (Name &k:3 Store)\n              (Attribute (Name &self:3 Load) s_adj Load)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load)\n                    (list Eq)\n                    (list (Constant i0 None))\n                  )\n                  (/seq Continue)\n                  (/seq)\n                )\n                (If\n                  (Compare\n                    (Call\n                      (Name g_len Load)\n                      (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &k:3 Load) Load))\n                      nil\n                    )\n                    (list Eq)\n                    (list (Constant i1 None))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Subscript\n                        (Name &cnt:3 Load)\n                        (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load)\n                        Store\n                      )\n                      Add\n                      (Constant i1 None)\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Assign (list (Name &ans:3 Store)) (Constant i0 None) None)\n            (For\n              (Name &x:3 Store)\n              (Name &cnt:3 Load)\n              (/seq\n                (If\n                  (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None)))\n                  (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None)\n    (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Name &u:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &v:0 Store) Sub (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &deg:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &d:0 Store)\n      (Name &deg:0 Load)\n      (/seq\n        (If\n          (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0)\n    (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0)\n    (ImportFrom s_math (list (alias g_inf None)) i0)\n    (Assign\n      (list (Name &ri:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Name g_map Load)\n          (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n          nil\n        )\n      )\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None)\n        (For\n          (Name &_:1 Store)\n          (Call (Name g_range Load) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store))\n              (Call (Name &ri:0 Load) nil nil)\n              None\n            )\n            (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Add (Constant i1 None))\n            (AugAssign (Subscript (Name &cnt:1 Load) (Name &y:1 Load) Store) Add (Constant i1 None))\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &valid:1 Store)) (Constant True None) None)\n        (For\n          (Name &x:1 Store)\n          (Name &cnt:1 Load)\n          (/seq\n            (If\n              (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None)))\n              (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &valid:1 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i1 None) None)\n    (While\n      (Name &t:0 Load)\n      (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &tree_nums:0 Store))\n      (ListComp\n        (Constant i0 None)\n        (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a1:0 Store) (Name &a2:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a1:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &tree_nums:0 Load) (BinOp (Name &a2:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n          (/seq\n            (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n              (/seq\n                (If\n                  (Compare\n                    (Subscript (Name &tree_nums:0 Load) (Name &i:0 Load) Load)\n                    (list Eq)\n                    (list (Constant i2 None))\n                  )\n                  (/seq\n                    (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None)\n                    (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n                    Break\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (If\n              (UnaryOp Not (Name &ans_is_no:0 Load))\n              (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n              (/seq)\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &gr:0 Store))\n      (DictComp\n        (Name &i:1 Load)\n        (Constant i0 None)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &gr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &gr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &gr:0 Load)\n      (/seq\n        (If\n          (Compare (Subscript (Name &gr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &arr:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None)))\n      None\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &arr:0 Load) (Name &a:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &arr:0 Load) (Name &b:0 Load) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &g:0 Store))\n      (ListComp\n        (List nil Load)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i100001 None)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &i:2 Load)) nil)\n            (list\n              (comprehension\n                (Name &i:2 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load)\n            (list (Name &v:0 Load))\n            nil\n          )\n        )\n        (Expr\n          (Call\n            (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load)\n            (list (Name &u:0 Load))\n            nil\n          )\n        )\n        (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None))\n        (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &d:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &edges:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &edges:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &l:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n        (AugAssign\n          (Subscript (Name &l:0 Load) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) Store)\n          Add\n          (Constant i1 None)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Name &l:0 Load)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None)))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))\n            (Expr (Call (Name g_exit Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %2 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (BinOp (Name %1 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name %4 Store) (Name %3 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (AugAssign (Subscript (Name %2 Load) #1 Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %2 Load) #2 Store) Add (Constant i1 None))) (/seq) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (BinOp (Name &m:0 Load) Add (Constant i1 None))) nil) nil i0))) (Name &a:0 Load) (Name &b:0 Load) &m:0 &l:0 &b:0 &a:0 &_:0)) (If (Compare (Constant i2 None) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &start:2 Load) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (Name &start:2 Load) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (Name &x:2 Load) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (Name &x:2 Load) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (Name &x:2 Load)) nil))) (/seq) None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None))) nil)) (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (Name g_list Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (Name g_int Load)) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (BinOp (Name &n:3 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &u:3 Store) (Name &v:3 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &_:4 Load)) nil) (list (comprehension (Name &_:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &u:3 Load) Load) s_append Load) (list (Name &v:3 Load)) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &v:3 Load) Load) s_append Load) (list (Name &u:3 Load)) nil)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &u:3 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &v:3 Load) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:3 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_done Load) (Name &i:3 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (GeneratorExp (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:5 Load) Load)) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0)))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &p:3 Load) Load)) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) (/seq))) (/seq) None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (Name &start:3 Load)) nil)) (Assign (list (Name &cnt:3 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (If (Compare (Call (Name g_len Load) (list (Subscript (Attribute (Name &self:3 Load) s_adj Load) (Name &k:3 Load) Load)) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (Subscript (Attribute (Name &self:3 Load) s_par Load) (Name &k:3 Load) Load) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) (/seq) None) (For (Name &d:0 Store) (Name &deg:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (Name g_int Load)) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:1 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &x:1 Store) (Name &y:1 Store)) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (Name &y:1 Load) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (Name &x:1 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Name &valid:1 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))) (BinOp (Name &a1:0 Load) Sub (Constant i1 None)) (BinOp (Name &a2:0 Load) Sub (Constant i1 None)) &n:0 &tree_nums:0 &a2:0 &a1:0 &i:0)) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) (/seq))))))) nil)",
      "(Module (/seq (/splice (fn_1 (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) (Name &a:0 Load) (Name &b:0 Load) &n:0 &gr:0 &b:0 &a:0 &i:0)) (For (Name &i:0 Store) (Name &gr:0 Load) (/seq (If (Compare (Subscript (Name &gr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) (list (Constant i0 None)) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) (Name &a:0 Load) (Name &b:0 Load) &n:0 &arr:0 &b:0 &a:0 &_:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i100001 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &u:0 Store) (Name &v:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:2 Load)) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &u:0 Load) Load) s_append Load) (list (Name &v:0 Load)) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (Name &v:0 Load) Load) s_append Load) (list (Name &u:0 Load)) nil)) (AugAssign (Subscript (Name &d:0 Load) (Name &u:0 Load) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (Name &v:0 Load) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (AugAssign (Subscript (Name &edges:0 Load) (BinOp (Name &a:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (BinOp (Name &b:0 Load) Sub (Constant i1 None)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) (BinOp (Name &u:0 Load) Sub (Constant i1 None)) (BinOp (Name &v:0 Load) Sub (Constant i1 None)) &n:0 &l:0 &v:0 &u:0 &i:0)) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant s_NO None)) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (Constant s_YES None)) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &z:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &arr:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &min:0 Store))\n          (BinOp\n            (Subscript (Name &arr:0 Load) (Constant i0 None) Load)\n            Add\n            (Subscript (Name &arr:0 Load) (Constant i1 None) Load)\n          )\n          None\n        )\n        (Assign (list (Name &pos:0 Store)) (Constant True None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil)\n          (/seq\n            (If\n              (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list GtE) (list (Name &min:0 Load)))\n              (/seq\n                (Assign (list (Name &pos:0 Store)) (Constant False None) None)\n                (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None)\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Name &pos:0 Load)\n          (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &posf:0 Load) Add (Constant i1 None)))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &f:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n              )\n              (/seq\n                (Assign (list (Name &f:0 Store)) (Constant i1 None) None)\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &t:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:0 Store)\n          (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil)\n          (/seq\n            (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None)\n            (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (Name &l:0 Load) Load))\n              )\n              (/seq\n                (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Constant i1 None) (Constant i2 None) (BinOp (Name &i:0 Load) Add (Constant i1 None)))\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &inp:0 Store))\n      (Call\n        (Attribute\n          (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil)\n          s_split\n          Load\n        )\n        (list (Constant bCg== None))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n    (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None)\n    (FunctionDef\n      &debug:0\n      (arguments nil nil (arg &args:1 None None) nil nil None nil)\n      (/seq\n        (If\n          (Name &_DEBUG:0 Load)\n          (/seq\n            (Import (list (alias &inspect:1 None)))\n            (Assign\n              (list (Name &frame:1 Store))\n              (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil)\n              None\n            )\n            (Assign\n              (list (Name &frame:1 Store))\n              (Subscript\n                (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (Name &frame:1 Load)) nil)\n                (Constant i1 None)\n                Load\n              )\n              None\n            )\n            (Assign\n              (list (Name &string:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Attribute\n                      (Call\n                        (Attribute (Name &inspect:1 Load) s_getframeinfo Load)\n                        (list (Subscript (Name &frame:1 Load) (Constant i0 None) Load))\n                        nil\n                      )\n                      s_code_context\n                      Load\n                    )\n                    (Constant i0 None)\n                    Load\n                  )\n                  s_strip\n                  Load\n                )\n                nil\n                nil\n              )\n              None\n            )\n            (Assign\n              (list (Name &arns:1 Store))\n              (Call\n                (Attribute\n                  (Subscript\n                    (Name &string:1 Load)\n                    (Slice\n                      (BinOp\n                        (Call (Attribute (Name &string:1 Load) s_find Load) (list (Constant s-WzQwXQ== None)) nil)\n                        Add\n                        (Constant i1 None)\n                      )\n                      (UnaryOp USub (Constant i1 None))\n                      None\n                    )\n                    Load\n                  )\n                  s_split\n                  Load\n                )\n                (list (Constant s-WzQ0XQ== None))\n                nil\n              )\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))\n                (list (keyword s_end (Constant s-WzMyXQ== None)))\n              )\n            )\n            (For\n              (Tuple (list (Name &i:1 Store) (Name &j:1 Store)) Store)\n              (Call (Name g_zip Load) (list (Name &arns:1 Load) (Name &args:1 Load)) nil)\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Name &i:1 Load) (Constant s-WzMyLCA2MSwgMzJd None) (Name &j:1 Load))\n                    (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))\n                  )\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) nil nil))\n          )\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &rdln:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Global (list s__ii))\n        (AugAssign (Name g__ii Store) Add (Constant i1 None))\n        (Return (Subscript (Name &inp:0 Load) (Name g__ii Load) Load))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &inin:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call (Name g_int Load) (list (Call (Name &rdln:0 Load) nil nil)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &inar:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (ListComp\n          (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n          (list\n            (comprehension\n              (Name &x:2 Store)\n              (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &inst:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load)\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n    (For\n      (Name &_t_:0 Store)\n      (Call (Name g_range Load) (list (Name &_T_:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None)\n        (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None)\n        (Expr (Call (Name &debug:0 Load) (list (Name &n:0 Load) (Name &a:0 Load)) nil))\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load)\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &A:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &flag:0 Store)) (Constant i0 None) None)\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n          (Tuple\n            (list\n              (Subscript (Name &A:0 Load) (Constant i0 None) Load)\n              (Subscript (Name &A:0 Load) (Constant i1 None) Load)\n              (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n            )\n            Load\n          )\n          None\n        )\n        (If\n          (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load))))\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil))\n            (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n              (Tuple\n                (list\n                  (Subscript (Name &A:0 Load) (Constant i0 None) Load)\n                  (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i2 None)) Load)\n                  (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)\n                )\n                Load\n              )\n              None\n            )\n            (If\n              (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list\n                      (Constant i1 None)\n                      (BinOp (Name &n:0 Load) Sub (Constant i2 None))\n                      (BinOp (Name &n:0 Load) Sub (Constant i1 None))\n                    )\n                    nil\n                  )\n                )\n                (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)\n              )\n              (/seq)\n            )\n          )\n          (/seq)\n        )\n        (If\n          (UnaryOp Not (Name &flag:0 Load))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (While\n      (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &i:0 Store)) (Constant i0 None) None)\n        (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None)\n        (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None)\n        (For\n          (Name &it:0 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Compare\n                (BinOp\n                  (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)\n                  Add\n                  (Subscript (Name &a:0 Load) (Name &it:0 Load) Load)\n                )\n                (list LtE)\n                (list (Subscript (Name &a:0 Load) (Name &k:0 Load) Load))\n              )\n              (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break)\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None))))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp (Name &i:0 Load) Add (Constant i1 None))\n                  (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                  (BinOp (Name &k:0 Load) Add (Constant i1 None))\n                )\n                nil\n              )\n            )\n          )\n        )\n        (AugAssign (Name &t:0 Store) Sub (Constant i1 None))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &array:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &array:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &array:0 Load) (Constant i1 None) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &array:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &array:0 Load)) nil))\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil)\n      (/seq\n        (Expr (Call (Name g_input Load) nil nil))\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil))\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &a:0 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &a:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &a:0 Load) (Constant i1 None) Load)\n            )\n            (list Gt)\n            (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil))\n                nil\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &t:0 Load)) nil)\n      (/seq\n        (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &x:0 Store))\n          (ListComp\n            (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n            (list\n              (comprehension\n                (Name &x:1 Store)\n                (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n                nil\n                i0\n              )\n            )\n          )\n          None\n        )\n        (If\n          (Compare\n            (BinOp\n              (Subscript (Name &x:0 Load) (Constant i0 None) Load)\n              Add\n              (Subscript (Name &x:0 Load) (Constant i1 None) Load)\n            )\n            (list LtE)\n            (list (Subscript (Name &x:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil)))\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (/splice (fn_1 &n:0 &arr:0)) (Assign (list (Name &min:0 Store)) (BinOp (Subscript (Name &arr:0 Load) (Constant i0 None) Load) Add (Subscript (Name &arr:0 Load) (Constant i1 None) Load)) None) (Assign (list (Name &pos:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (Name &i:0 Load) Load) (list GtE) (list (Name &min:0 Load))) (/seq (Assign (list (Name &pos:0 Store)) (Constant False None) None) (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None) Break) (/seq))) (/seq) None) (If (Name &pos:0 Load) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ1LCA0OV0= None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &posf:0 Load) Add (Constant i1 None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (Constant s-WzQ5LCAzMiwgNTBd None) (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None) (Name &n:0 Load)) nil) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &l:0 Load) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (BinOp (Name &i:0 Load) Add (Constant i1 None))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inp:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_split Load) (list (Constant bCg== None)) nil) None) (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None) (FunctionDef &debug:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (If (Name &_DEBUG:0 Load) (/seq (Import (list (alias &inspect:1 None))) (Assign (list (Name &frame:1 Store)) (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil) None) (Assign (list (Name &frame:1 Store)) (Subscript (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (Name &frame:1 Load)) nil) (Constant i1 None) Load) None) (Assign (list (Name &string:1 Store)) (Call (Attribute (Subscript (Attribute (Call (Attribute (Name &inspect:1 Load) s_getframeinfo Load) (list (Subscript (Name &frame:1 Load) (Constant i0 None) Load)) nil) s_code_context Load) (Constant i0 None) Load) s_strip Load) nil nil) None) (Assign (list (Name &arns:1 Store)) (Call (Attribute (Subscript (Name &string:1 Load) (Slice (BinOp (Call (Attribute (Name &string:1 Load) s_find Load) (list (Constant s-WzQwXQ== None)) nil) Add (Constant i1 None)) (UnaryOp USub (Constant i1 None)) None) Load) s_split Load) (list (Constant s-WzQ0XQ== None)) nil) None) (Expr (Call (Name g_print Load) (list (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None)) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Tuple (list (Name &i:1 Store) (Name &j:1 Store)) Store) (Call (Name g_zip Load) (list (Name &arns:1 Load) (Name &args:1 Load)) nil) (/seq (Expr (Call (Name g_print Load) (list (Name &i:1 Load) (Constant s-WzMyLCA2MSwgMzJd None) (Name &j:1 Load)) (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil None None) (FunctionDef &rdln:0 (arguments nil nil None nil nil None nil) (/seq (Global (list s__ii)) (AugAssign (Name g__ii Store) Add (Constant i1 None)) (Return (Subscript (Name &inp:0 Load) (Name g__ii Load) Load))) nil None None) (Assign (list (Name &inin:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (Call (Name &rdln:0 Load) nil nil)) nil)) None) (Assign (list (Name &inar:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &inst:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load) nil nil)) None) (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (For (Name &_t_:0 Store) (Call (Name g_range Load) (list (Name &_T_:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None) (Expr (Call (Name &debug:0 Load) (list (Name &n:0 Load) (Name &a:0 Load)) nil)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Subscript (Name &A:0 Load) (Constant i0 None) Load) (Subscript (Name &A:0 Load) (Constant i1 None) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)) Load) None) (If (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store)) (Tuple (list (Subscript (Name &A:0 Load) (Constant i0 None) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i2 None)) Load) (Subscript (Name &A:0 Load) (UnaryOp USub (Constant i1 None)) Load)) Load) None) (If (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i2 None)) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) Add (Subscript (Name &a:0 Load) (Name &it:0 Load) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (Name &k:0 Load) Load))) (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &i:0 Load) Add (Constant i1 None)) (BinOp (Name &j:0 Load) Add (Constant i1 None)) (BinOp (Name &k:0 Load) Add (Constant i1 None))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (/splice (fn_1 &n:0 &array:0)) (If (Compare (BinOp (Subscript (Name &array:0 Load) (Constant i0 None) Load) Add (Subscript (Name &array:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &array:0 Load) (UnaryOp USub (Constant i1 None)) Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &array:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (Constant i0 None) Load) Add (Subscript (Name &a:0 Load) (Constant i1 None) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &t:0 Load)) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (BinOp (Subscript (Name &x:0 Load) (Constant i0 None) Load) Add (Subscript (Name &x:0 Load) (Constant i1 None) Load)) (list LtE) (list (Subscript (Name &x:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None) (Constant i2 None) (Name &n:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (UnaryOp USub (Constant i1 None))) nil))))) (/seq) None)) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &putin:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sol:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None)\n        (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign (list (Name &min_arr:1 Store)) (List (list (Name &x:1 Load)) Load) None)\n        (Assign (list (Name &min_part_sums:1 Store)) (List (list (Name &x:1 Load)) Load) None)\n        (Assign\n          (list (Name &part_sums:1 Store))\n          (List (list (Subscript (Name &C:1 Load) (Constant i0 None) Load)) Load)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &part_sums:1 Load) s_append Load)\n                (list\n                  (BinOp\n                    (Subscript (Name &part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                    Add\n                    (Subscript (Name &C:1 Load) (Name &i:1 Load) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &elem:1 Store)\n          (Name &B:1 Load)\n          (/seq\n            (Expr\n              (Call\n                (Attribute (Name &min_arr:1 Load) s_append Load)\n                (list\n                  (BinOp\n                    (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                    Add\n                    (Name &elem:1 Load)\n                  )\n                )\n                nil\n              )\n            )\n            (Expr\n              (Call\n                (Attribute (Name &min_part_sums:1 Load) s_append Load)\n                (list\n                  (BinOp\n                    (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                    Add\n                    (Subscript (Name &min_part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &n:1 Load)) nil)\n          (/seq\n            (If\n              (Compare\n                (Subscript (Name &min_part_sums:1 Load) (Name &i:1 Load) Load)\n                (list Gt)\n                (list (Subscript (Name &part_sums:1 Load) (Name &i:1 Load) Load))\n              )\n              (/seq (Return (Constant i0 None)))\n              (/seq)\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare\n            (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load)\n            (list Gt)\n            (list (Subscript (Name &C:1 Load) (Constant i0 None) Load))\n          )\n          (/seq (Return (Constant i0 None)))\n          (/seq)\n        )\n        (Assign\n          (list (Name &answer:1 Store))\n          (BinOp\n            (List (list (Constant i1 None)) Load)\n            Mult\n            (BinOp\n              (BinOp\n                (Subscript (Name &part_sums:1 Load) (Constant i0 None) Load)\n                Sub\n                (Call\n                  (Name g_max Load)\n                  (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load))\n                  nil\n                )\n              )\n              Add\n              (Constant i1 None)\n            )\n          )\n          None\n        )\n        (For\n          (Name &k:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &new_answer:1 Store))\n              (BinOp\n                (List (list (Constant i0 None)) Load)\n                Mult\n                (BinOp\n                  (BinOp\n                    (Subscript (Name &part_sums:1 Load) (Name &k:1 Load) Load)\n                    Sub\n                    (Call\n                      (Name g_max Load)\n                      (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Name &k:1 Load) Load))\n                      nil\n                    )\n                  )\n                  Add\n                  (Constant i1 None)\n                )\n              )\n              None\n            )\n            (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None)\n            (Assign\n              (list (Name &window:1 Store))\n              (Subscript (Name &answer:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n              None\n            )\n            (Assign\n              (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Constant i1 None)) Store))\n              (Name &window:1 Load)\n              None\n            )\n            (While\n              (Compare\n                (Name &cnt:1 Load)\n                (list LtE)\n                (list (BinOp (Call (Name g_len Load) (list (Name &new_answer:1 Load)) nil) Sub (Constant i1 None)))\n              )\n              (/seq\n                (AugAssign (Name &cnt:1 Store) Add (Constant i1 None))\n                (If\n                  (Compare\n                    (Name &cnt:1 Load)\n                    (list LtE)\n                    (list (Call (Name g_len Load) (list (Name &answer:1 Load)) nil))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &window:1 Store)\n                      Add\n                      (Subscript (Name &answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Load)\n                    )\n                  )\n                  (/seq)\n                )\n                (If\n                  (Compare\n                    (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None))\n                    (list Lt)\n                    (list (Name &cnt:1 Load))\n                  )\n                  (/seq\n                    (AugAssign\n                      (Name &window:1 Store)\n                      Sub\n                      (Subscript\n                        (Name &answer:1 Load)\n                        (BinOp\n                          (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None))\n                          Sub\n                          (Name &cnt:1 Load)\n                        )\n                        Load\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n                (Assign\n                  (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Store))\n                  (Name &window:1 Load)\n                  None\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)\n          )\n          (/seq)\n          None\n        )\n        (Assign\n          (list (Name &m:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Return (BinOp (Call (Name g_sum Load) (list (Name &answer:1 Load)) nil) Mod (Name &m:1 Load)))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &sol:0 Load) nil nil)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &C:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:1 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:2 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &Q:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i20100 None))\n        (list\n          (comprehension\n            (Name &_:3 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp:0 Load) (Constant i0 None) Load) (Constant i0 None) Store))\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None)\n    (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i20050 None)\n              (BinOp (Name &t:0 Load) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  (Name &j:0 Load)\n                  Store\n                )\n              )\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                      (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (BinOp (Name &j:0 Load) Sub (Subscript (Name &C:0 Load) (Name &i:0 Load) Load))\n                          (Constant i0 None)\n                        )\n                        nil\n                      )\n                      Load\n                    )\n                  )\n                  Sub\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n                    (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                    Load\n                  )\n                )\n                Mod\n                (Name &P:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Call (Name g_min Load) (list (BinOp (Name &t:0 Load) Sub (Constant i1 None)) (Constant i20050 None)) nil)\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  (Name &j:0 Load)\n                  Store\n                )\n              )\n              (Subscript\n                (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (Name &i:0 Load) Load))\n            (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Subscript (Subscript (Name &dp:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i0 None) Load)\n            Mod\n            (Name &P:0 Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &solve:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &MOD:1 Store))\n          (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n          None\n        )\n        (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &c:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign\n          (list (Name &b:1 Store))\n          (BinOp\n            (List (list (Constant i0 None)) Load)\n            Add\n            (Call\n              (Name g_list Load)\n              (list\n                (Call\n                  (Name g_map Load)\n                  (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                  nil\n                )\n              )\n              nil\n            )\n          )\n          None\n        )\n        (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &queries:1 Store))\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None)\n        (For\n          (Name &c1:1 Store)\n          (Name &c:1 Load)\n          (/seq\n            (Assign\n              (list (Name &maxans:1 Store))\n              (BinOp\n                (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None)))\n                Mod\n                (Name &MOD:1 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &ans:1 Store)) (Dict nil nil) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil)\n          (/seq\n            (AugAssign\n              (Subscript (Name &b:1 Load) (Name &i:1 Load) Store)\n              Add\n              (Subscript (Name &b:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load)\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil)\n          (/seq\n            (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (Name &i:1 Load) Load))\n            (Assign\n              (list (Name &lb:1 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (Name &lb:1 Load)\n                  (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (Constant i0 None) Load) None)\n        (For\n          (Name &i:1 Store)\n          (Call (Name g_range Load) (list (Name &n:1 Load)) nil)\n          (/seq\n            (AugAssign\n              (Name &s:1 Store)\n              Add\n              (BinOp\n                (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)\n                Sub\n                (Subscript (Name &b:1 Load) (Name &i:1 Load) Load)\n              )\n            )\n            (Assign\n              (list (Name &ub:1 Store))\n              (Call\n                (Name g_min Load)\n                (list\n                  (Name &ub:1 Load)\n                  (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))\n                )\n                nil\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &x:1 Store)\n          (Name &queries:1 Load)\n          (/seq\n            (If\n              (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load)))\n              (/seq (Expr (Call (Name g_print Load) (list (Name &maxans:1 Load)) nil)))\n              (/seq\n                (If\n                  (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load)))\n                  (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n                  (/seq\n                    (If\n                      (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load)))\n                      (/seq\n                        (Expr\n                          (Call (Name g_print Load) (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Load)) nil)\n                        )\n                      )\n                      (/seq\n                        (Assign\n                          (list (Name &dp0:1 Store))\n                          (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i10002 None))\n                          None\n                        )\n                        (Assign (list (Subscript (Name &dp0:1 Load) (Constant i0 None) Store)) (Constant i0 None) None)\n                        (Assign (list (Name &bd:1 Store)) (Constant i0 None) None)\n                        (For\n                          (Name &i:1 Store)\n                          (Call (Name g_range Load) (list (Name &n:1 Load)) nil)\n                          (/seq\n                            (Assign\n                              (list (Name &dp1:1 Store))\n                              (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10002 None))\n                              None\n                            )\n                            (AugAssign\n                              (Name &bd:1 Store)\n                              Add\n                              (BinOp (Subscript (Name &b:1 Load) (Name &i:1 Load) Load) Add (Name &x:1 Load))\n                            )\n                            (For\n                              (Name &j:1 Store)\n                              (Call\n                                (Name g_range Load)\n                                (list\n                                  (Call (Name g_max Load) (list (Name &bd:1 Load) (Constant i0 None)) nil)\n                                  (Constant i10001 None)\n                                )\n                                nil\n                              )\n                              (/seq\n                                (Assign\n                                  (list\n                                    (Subscript (Name &dp1:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Store)\n                                  )\n                                  (BinOp\n                                    (BinOp\n                                      (BinOp\n                                        (Subscript (Name &dp1:1 Load) (Name &j:1 Load) Load)\n                                        Add\n                                        (Subscript\n                                          (Name &dp0:1 Load)\n                                          (BinOp (Name &j:1 Load) Add (Constant i1 None))\n                                          Load\n                                        )\n                                      )\n                                      Sub\n                                      (Subscript\n                                        (Name &dp0:1 Load)\n                                        (Call\n                                          (Name g_max Load)\n                                          (list\n                                            (BinOp\n                                              (Name &j:1 Load)\n                                              Sub\n                                              (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)\n                                            )\n                                            (Constant i0 None)\n                                          )\n                                          nil\n                                        )\n                                        Load\n                                      )\n                                    )\n                                    Mod\n                                    (Name &MOD:1 Load)\n                                  )\n                                  None\n                                )\n                              )\n                              (/seq)\n                              None\n                            )\n                            (Assign\n                              (list (Name &dp0:1 Store))\n                              (Subscript (Name &dp1:1 Load) (Slice None None None) Load)\n                              None\n                            )\n                          )\n                          (/seq)\n                          None\n                        )\n                        (Assign\n                          (list (Name &a:1 Store))\n                          (Subscript (Name &dp0:1 Load) (UnaryOp USub (Constant i1 None)) Load)\n                          None\n                        )\n                        (Assign (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Store)) (Name &a:1 Load) None)\n                        (Expr (Call (Name g_print Load) (list (Name &a:1 Load)) nil))\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Import (list (alias &sys:0 None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Expr (Call (Name &solve:0 Load) nil nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          nil\n          nil\n        )\n      )\n      None\n    )\n    (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &C:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:1 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &B:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &a:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &a:2 Store)\n            (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &Q:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &P:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (Assign\n      (list (Name &dp:0 Store))\n      (ListComp\n        (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i20100 None))\n        (list\n          (comprehension\n            (Name &_:3 Store)\n            (Call (Name g_range Load) (list (BinOp (Name &N:0 Load) Add (Constant i1 None))) nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Subscript (Subscript (Name &dp:0 Load) (Constant i0 None) Load) (Constant i0 None) Store))\n      (Constant i1 None)\n      None\n    )\n    (Assign (list (Name &ans:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None)\n    (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &N:0 Load)) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Constant i20050 None)\n              (BinOp (Name &t:0 Load) Sub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq))\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  (Name &j:0 Load)\n                  Store\n                )\n              )\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                      (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                      Load\n                    )\n                    Add\n                    (Subscript\n                      (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (BinOp (Name &j:0 Load) Sub (Subscript (Name &C:0 Load) (Name &i:0 Load) Load))\n                          (Constant i0 None)\n                        )\n                        nil\n                      )\n                      Load\n                    )\n                  )\n                  Sub\n                  (Subscript\n                    (Subscript (Name &dp:0 Load) (Name &i:0 Load) Load)\n                    (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                    Load\n                  )\n                )\n                Mod\n                (Name &P:0 Load)\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list\n              (Call (Name g_min Load) (list (BinOp (Name &t:0 Load) Sub (Constant i1 None)) (Constant i20050 None)) nil)\n              (UnaryOp USub (Constant i1 None))\n              (UnaryOp USub (Constant i1 None))\n            )\n            nil\n          )\n          (/seq\n            (Assign\n              (list\n                (Subscript\n                  (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                  (Name &j:0 Load)\n                  Store\n                )\n              )\n              (Subscript\n                (Subscript (Name &dp:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                (BinOp (Name &j:0 Load) Add (Constant i1 None))\n                Load\n              )\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None))))\n          (/seq\n            (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (Name &i:0 Load) Load))\n            (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Subscript (Subscript (Name &dp:0 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i0 None) Load)\n            Mod\n            (Name &P:0 Load)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Import (list (alias g_sys None))) (Assign (list (Name %1 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_int Load) (list (Name %3 Load)) nil) (list (comprehension (Name %3 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_int Load) (list (Name %5 Load)) nil) (list (comprehension (Name %5 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %7 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %8 Store)) (Call (Name g_int Load) (list (Call (Name %1 Load) nil nil)) nil) None) (Assign (list (Name %9 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name %11 Store)) (ListComp (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i20100 None)) (list (comprehension (Name %10 Store) (Call (Name g_range Load) (list (BinOp (Name %2 Load) Add (Constant i1 None))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name %11 Load) (Constant i0 None) Load) (Constant i0 None) Store)) (Constant i1 None) None) (Assign (list (Name %12 Store)) (Constant i0 None) None) (Assign (list (Name %13 Store)) (Name %8 Load) None) (Assign (list (Name %14 Store)) (Name %13 Load) None) (For (Name %16 Store) (Call (Name g_range Load) (list (Name %2 Load)) nil) (/seq (For (Name %15 Store) (Call (Name g_range Load) (list (Constant i20050 None) (BinOp (Name %14 Load) Sub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (If (Compare (Name %15 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (Name %15 Load) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load) Add (Subscript (Subscript (Name %11 Load) (Name %16 Load) Load) (Call (Name g_max Load) (list (BinOp (Name %15 Load) Sub (Subscript (Name %4 Load) (Name %16 Load) Load)) (Constant i0 None)) nil) Load)) Sub (Subscript (Subscript (Name %11 Load) (Name %16 Load) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load)) Mod (Name %9 Load)) None)) (/seq) None) (For (Name %15 Store) (Call (Name g_range Load) (list (Call (Name g_min Load) (list (BinOp (Name %14 Load) Sub (Constant i1 None)) (Constant i20050 None)) nil) (UnaryOp USub (Constant i1 None)) (UnaryOp USub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (Name %15 Load) Store)) (Subscript (Subscript (Name %11 Load) (BinOp (Name %16 Load) Add (Constant i1 None)) Load) (BinOp (Name %15 Load) Add (Constant i1 None)) Load) None)) (/seq) None) (If (Compare (Name %16 Load) (list Lt) (list (BinOp (Name %2 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name %13 Store) Add (Subscript (Name %6 Load) (Name %16 Load) Load)) (AugAssign (Name %14 Store) Add (Name %13 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (BinOp (Subscript (Subscript (Name %11 Load) (UnaryOp USub (Constant i1 None)) Load) (Constant i0 None) Load) Mod (Name %9 Load))) nil)))",
        "sym_arity": 16,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &putin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (FunctionDef &sol:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (Call (Name &putin:0 Load) nil nil)) nil) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &min_arr:1 Store)) (List (list (Name &x:1 Load)) Load) None) (Assign (list (Name &min_part_sums:1 Store)) (List (list (Name &x:1 Load)) Load) None) (Assign (list (Name &part_sums:1 Store)) (List (list (Subscript (Name &C:1 Load) (Constant i0 None) Load)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (Expr (Call (Attribute (Name &part_sums:1 Load) s_append Load) (list (BinOp (Subscript (Name &part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Subscript (Name &C:1 Load) (Name &i:1 Load) Load))) nil))) (/seq) None) (For (Name &elem:1 Store) (Name &B:1 Load) (/seq (Expr (Call (Attribute (Name &min_arr:1 Load) s_append Load) (list (BinOp (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Name &elem:1 Load))) nil)) (Expr (Call (Attribute (Name &min_part_sums:1 Load) s_append Load) (list (BinOp (Subscript (Name &min_arr:1 Load) (UnaryOp USub (Constant i1 None)) Load) Add (Subscript (Name &min_part_sums:1 Load) (UnaryOp USub (Constant i1 None)) Load))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (If (Compare (Subscript (Name &min_part_sums:1 Load) (Name &i:1 Load) Load) (list Gt) (list (Subscript (Name &part_sums:1 Load) (Name &i:1 Load) Load))) (/seq (Return (Constant i0 None))) (/seq))) (/seq) None) (If (Compare (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load) (list Gt) (list (Subscript (Name &C:1 Load) (Constant i0 None) Load))) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (Constant i0 None) Load) Sub (Call (Name g_max Load) (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Constant i0 None) Load)) nil)) Add (Constant i1 None))) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (Assign (list (Name &new_answer:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (Name &k:1 Load) Load) Sub (Call (Name g_max Load) (list (Constant i0 None) (Subscript (Name &min_part_sums:1 Load) (Name &k:1 Load) Load)) nil)) Add (Constant i1 None))) None) (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None) (Assign (list (Name &window:1 Store)) (Subscript (Name &answer:1 Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Constant i1 None)) Store)) (Name &window:1 Load) None) (While (Compare (Name &cnt:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (Name &new_answer:1 Load)) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)) (If (Compare (Name &cnt:1 Load) (list LtE) (list (Call (Name g_len Load) (list (Name &answer:1 Load)) nil))) (/seq (AugAssign (Name &window:1 Store) Add (Subscript (Name &answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Load))) (/seq)) (If (Compare (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None)) (list Lt) (list (Name &cnt:1 Load))) (/seq (AugAssign (Name &window:1 Store) Sub (Subscript (Name &answer:1 Load) (BinOp (BinOp (Subscript (Name &C:1 Load) (Name &k:1 Load) Load) Add (Constant i1 None)) Sub (Name &cnt:1 Load)) Load))) (/seq)) (Assign (list (Subscript (Name &new_answer:1 Load) (UnaryOp USub (Name &cnt:1 Load)) Store)) (Name &window:1 Load) None)) (/seq)) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)) (/seq) None) (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Return (BinOp (Call (Name g_sum Load) (list (Name &answer:1 Load)) nil) Mod (Name &m:1 Load)))) nil None None) (Expr (Call (Name g_print Load) (list (Call (Name &sol:0 Load) nil nil)) nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &MOD:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &c:1 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &b:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Add (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil)) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil) None) (Assign (list (Name &queries:1 Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None) (For (Name &c1:1 Store) (Name &c:1 Load) (/seq (Assign (list (Name &maxans:1 Store)) (BinOp (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None))) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &ans:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (AugAssign (Subscript (Name &b:1 Load) (Name &i:1 Load) Store) Add (Subscript (Name &b:1 Load) (BinOp (Name &i:1 Load) Sub (Constant i1 None)) Load))) (/seq) None) (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Constant i1 None) (Name &n:1 Load)) nil) (/seq (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (Name &i:1 Load) Load)) (Assign (list (Name &lb:1 Store)) (Call (Name g_min Load) (list (Name &lb:1 Load) (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) None)) (/seq) None) (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (Constant i0 None) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (AugAssign (Name &s:1 Store) Add (BinOp (Subscript (Name &c:1 Load) (Name &i:1 Load) Load) Sub (Subscript (Name &b:1 Load) (Name &i:1 Load) Load))) (Assign (list (Name &ub:1 Store)) (Call (Name g_min Load) (list (Name &ub:1 Load) (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None)))) nil) None)) (/seq) None) (For (Name &x:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &maxans:1 Load)) nil))) (/seq (If (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Load)) nil))) (/seq (Assign (list (Name &dp0:1 Store)) (BinOp (List (list (Constant i1 None)) Load) Mult (Constant i10002 None)) None) (Assign (list (Subscript (Name &dp0:1 Load) (Constant i0 None) Store)) (Constant i0 None) None) (Assign (list (Name &bd:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (Name &n:1 Load)) nil) (/seq (Assign (list (Name &dp1:1 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Constant i10002 None)) None) (AugAssign (Name &bd:1 Store) Add (BinOp (Subscript (Name &b:1 Load) (Name &i:1 Load) Load) Add (Name &x:1 Load))) (For (Name &j:1 Store) (Call (Name g_range Load) (list (Call (Name g_max Load) (list (Name &bd:1 Load) (Constant i0 None)) nil) (Constant i10001 None)) nil) (/seq (Assign (list (Subscript (Name &dp1:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp1:1 Load) (Name &j:1 Load) Load) Add (Subscript (Name &dp0:1 Load) (BinOp (Name &j:1 Load) Add (Constant i1 None)) Load)) Sub (Subscript (Name &dp0:1 Load) (Call (Name g_max Load) (list (BinOp (Name &j:1 Load) Sub (Subscript (Name &c:1 Load) (Name &i:1 Load) Load)) (Constant i0 None)) nil) Load)) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &dp0:1 Store)) (Subscript (Name &dp1:1 Load) (Slice None None None) Load) None)) (/seq) None) (Assign (list (Name &a:1 Store)) (Subscript (Name &dp0:1 Load) (UnaryOp USub (Constant i1 None)) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (Name &x:1 Load) Store)) (Name &a:1 Load) None) (Expr (Call (Name g_print Load) (list (Name &a:1 Load)) nil))))))))) (/seq) None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &num:0 Store) (Name &wiz:0 Store) (Name &per:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare\n        (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None))\n        (list Lt)\n        (list (Name &per:0 Load))\n      )\n      (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None)))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (AugAssign (Name &y:0 Store) Div (Constant i100 None))\n    (Assign (list (Name &c:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (If\n          (Compare\n            (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load))\n            (list GtE)\n            (list (Name &y:0 Load))\n          )\n          (/seq Break)\n          (/seq)\n        )\n        (AugAssign (Name &c:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &z:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil)))\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &z:0 Store)) (Name g_input Load) None)\n    (Assign\n      (list (Name &mod:0 Store))\n      (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))\n      None\n    )\n    (ImportFrom s_collections (list (alias &*:0 None)) i0)\n    (ImportFrom s_queue (list (alias &*:0 None)) i0)\n    (ImportFrom s_sys (list (alias &*:0 None)) i0)\n    (ImportFrom s_collections (list (alias &*:0 None)) i0)\n    (ImportFrom s_math (list (alias &*:0 None)) i0)\n    (ImportFrom s_heapq (list (alias &*:0 None)) i0)\n    (ImportFrom s_itertools (list (alias &*:0 None)) i0)\n    (ImportFrom s_bisect (list (alias &*:0 None)) i0)\n    (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0)\n    (ImportFrom s_math (list (alias s_factorial &f:0)) i0)\n    (FunctionDef\n      &lcd:0\n      (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load))\n            FloorDiv\n            (Call (Name g_gcd Load) (list (Name &xnum1:1 Load) (Name &xnum2:1 Load)) nil)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Expr\n      (Constant\n        s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ==\n        None\n      )\n    )\n    (For\n      (Name &_:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None)\n        (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None)\n        (Assign\n          (list (Name &t:0 Store))\n          (Call\n            (Name g_ceil Load)\n            (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n            nil\n          )\n          None\n        )\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &t:0 Load) Sub (Name &x:0 Load))) nil))\n            nil\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &percentage:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load))) nil)\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Expr\n      (Constant\n        s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd\n        None\n      )\n    )\n    (Import (list (alias &os:0 None)))\n    (Import (list (alias &sys:0 None)))\n    (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0)\n    (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None)\n    (FunctionDef\n      &inp:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &inlt:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &insr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None)\n        (Return\n          (Call\n            (Name g_list Load)\n            (list\n              (Subscript\n                (Name &s:3 Load)\n                (Slice None (BinOp (Call (Name g_len Load) (list (Name &s:3 Load)) nil) Sub (Constant i1 None)) None)\n                Load\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &invr:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (ImportFrom s_math (list (alias &ceil:0 None)) i0)\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Try\n          (/seq\n            (Assign\n              (list (Tuple (list (Name &n:4 Store) (Name &x:4 Store) (Name &y:4 Store)) Store))\n              (Call (Name &invr:0 Load) nil nil)\n              None\n            )\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Call\n                    (Name g_max Load)\n                    (list\n                      (Constant i0 None)\n                      (BinOp\n                        (Call\n                          (Name &ceil:0 Load)\n                          (list (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None)))\n                          nil\n                        )\n                        Sub\n                        (Name &x:4 Load)\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (list\n            (ExceptHandler\n              (Name g_Exception Load)\n              &e:4\n              (/seq (Expr (Call (Name g_print Load) (list (Name &e:4 Load)) nil)))\n            )\n          )\n          (/seq)\n          (/seq)\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None)\n    (ClassDef\n      &FastIO:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None)\n        (FunctionDef\n          &__init__:1\n          (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:5 Load) s__fd Store))\n              (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil)\n              None\n            )\n            (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None)\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_writable Store))\n              (BoolOp\n                Or\n                (list\n                  (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load)))\n                  (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load)))\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:5 Load) s_write Store))\n              (IfExp\n                (Attribute (Name &self:5 Load) s_writable Load)\n                (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load)\n                (Constant None None)\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &read:1\n          (arguments nil (list (arg &self:6 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Constant True None)\n              (/seq\n                (Assign\n                  (list (Name &b:6 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:6 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:6 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq))\n                (Assign\n                  (list (Name &ptr:6 Store))\n                  (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:6 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:6 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n            (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None)\n            (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &readline:1\n          (arguments nil (list (arg &self:7 None None)) None nil nil None nil)\n          (/seq\n            (While\n              (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None)))\n              (/seq\n                (Assign\n                  (list (Name &b:7 Store))\n                  (Call\n                    (Attribute (Name &os:0 Load) s_read Load)\n                    (list\n                      (Attribute (Name &self:7 Load) s__fd Load)\n                      (Call\n                        (Name g_max Load)\n                        (list\n                          (Attribute\n                            (Call\n                              (Attribute (Name &os:0 Load) s_fstat Load)\n                              (list (Attribute (Name &self:7 Load) s__fd Load))\n                              nil\n                            )\n                            s_st_size\n                            Load\n                          )\n                          (Name &BUFSIZE:0 Load)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n                (Assign\n                  (list (Attribute (Name &self:7 Load) s_newlines Store))\n                  (BinOp\n                    (Call (Attribute (Name &b:7 Load) s_count Load) (list (Constant bCg== None)) nil)\n                    Add\n                    (UnaryOp Not (Name &b:7 Load))\n                  )\n                  None\n                )\n                (Assign\n                  (list (Name &ptr:7 Store))\n                  (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil)\n                  None\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None) (Constant i2 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load)\n                        (list (Name &b:7 Load))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load)\n                        (list (Name &ptr:7 Load))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n            (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None))\n            (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))\n          )\n          nil\n          None\n          None\n        )\n        (FunctionDef\n          &flush:1\n          (arguments nil (list (arg &self:8 None None)) None nil nil None nil)\n          (/seq\n            (If\n              (Attribute (Name &self:8 Load) s_writable Load)\n              (/seq\n                (Expr\n                  (Call\n                    (Attribute (Name &os:0 Load) s_write Load)\n                    (list\n                      (Attribute (Name &self:8 Load) s__fd Load)\n                      (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil)\n                    )\n                    nil\n                  )\n                )\n                (Expr\n                  (Tuple\n                    (list\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                      (Call\n                        (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load)\n                        (list (Constant i0 None))\n                        nil\n                      )\n                    )\n                    Load\n                  )\n                )\n              )\n              (/seq)\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (ClassDef\n      &IOWrapper:0\n      (list (Name &IOBase:0 Load))\n      nil\n      (/seq\n        (FunctionDef\n          &__init__:2\n          (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil)\n          (/seq\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_buffer Store))\n              (Call (Name &FastIO:0 Load) (list (Name &file:9 Load)) nil)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_flush Store))\n              (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_writable Store))\n              (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load)\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_write Store))\n              (Lambda\n                (arguments nil (list (arg &s:10 None None)) None nil nil None nil)\n                (Call\n                  (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load)\n                  (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_read Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n            (Assign\n              (list (Attribute (Name &self:9 Load) s_readline Store))\n              (Lambda\n                (arguments nil nil None nil nil None nil)\n                (Call\n                  (Attribute\n                    (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil)\n                    s_decode\n                    Load\n                  )\n                  (list (Constant s_ascii None))\n                  nil\n                )\n              )\n              None\n            )\n          )\n          nil\n          None\n          None\n        )\n      )\n      nil\n    )\n    (Assign\n      (list\n        (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)\n      )\n      (Tuple\n        (list\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil)\n          (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)\n        )\n        Load\n      )\n      None\n    )\n    (Assign\n      (list (Name &input:0 Store))\n      (Lambda\n        (arguments nil nil None nil nil None nil)\n        (Call\n          (Attribute\n            (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil)\n            s_rstrip\n            Load\n          )\n          (list (Constant s-WzEzLCAxMF0= None))\n          nil\n        )\n      )\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &d:0 Store))\n      (Call\n        (Attribute (Name g_math Load) s_ceil Load)\n        (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))\n        nil\n      )\n      None\n    )\n    (If\n      (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list Gt) (list (Name &x:0 Load)))\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (BinOp (Call (Name g_int Load) (list (Name &d:0 Load)) nil) Sub (Name &x:0 Load)))\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list LtE) (list (Name &x:0 Load)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n          (/seq)\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (ImportFrom s_math (list (alias g_ceil None)) i0)\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (IfExp\n            (Compare\n              (BinOp\n                (Call\n                  (Name g_ceil Load)\n                  (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n                  nil\n                )\n                Sub\n                (Name &x:0 Load)\n              )\n              (list Gt)\n              (list (Constant i0 None))\n            )\n            (BinOp\n              (Call\n                (Name g_ceil Load)\n                (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n                nil\n              )\n              Sub\n              (Name &x:0 Load)\n            )\n            (Constant i0 None)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Call\n            (Name g_max Load)\n            (list\n              (BinOp\n                (Call\n                  (Attribute (Name g_math Load) s_ceil Load)\n                  (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))\n                  nil\n                )\n                Sub\n                (Name &x:0 Load)\n              )\n              (Constant i0 None)\n            )\n            nil\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store) (Name &c:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (IfExp\n            (Compare\n              (Call\n                (Attribute (Name g_math Load) s_ceil Load)\n                (list\n                  (BinOp\n                    (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None))\n                    Sub\n                    (Name &b:0 Load)\n                  )\n                )\n                nil\n              )\n              (list Gt)\n              (list (Constant i0 None))\n            )\n            (Call\n              (Attribute (Name g_math Load) s_ceil Load)\n              (list\n                (BinOp\n                  (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None))\n                  Sub\n                  (Name &b:0 Load)\n                )\n              )\n              nil\n            )\n            (Constant i0 None)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (Name %3 Store) (Name %2 Store) (Name %1 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &per:0 &wiz:0 &num:0) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &per:0 Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &k:0 Load)) nil))) nil)",
      "(Module (/seq (fn_1 &y:0 &x:0 &n:0) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (Name &y:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &z:0 Load) Sub (Name &x:0 Load))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &z:0 Store)) (Name g_input Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_queue (list (alias &*:0 None)) i0) (ImportFrom s_sys (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &*:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_itertools (list (alias &*:0 None)) i0) (ImportFrom s_bisect (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0) (ImportFrom s_math (list (alias s_factorial &f:0)) i0) (FunctionDef &lcd:0 (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load)) FloorDiv (Call (Name g_gcd Load) (list (Name &xnum1:1 Load) (Name &xnum2:1 Load)) nil)))) nil None None) (Expr (Constant s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ== None)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (Constant i1 None)) nil) (/seq (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &t:0 Load) Sub (Name &x:0 Load))) nil)) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &percentage:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None))) nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load))) nil)) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd None)) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (Call (Name &input:0 Load) nil nil)) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil)) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Call (Name g_list Load) (list (Subscript (Name &s:3 Load) (Slice None (BinOp (Call (Name g_len Load) (list (Name &s:3 Load)) nil) Sub (Constant i1 None)) None) Load)) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (Name &n:4 Store) (Name &x:4 Store) (Name &y:4 Store)) Store)) (Call (Name &invr:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (Constant i0 None) (BinOp (Call (Name &ceil:0 Load) (list (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None))) nil) Sub (Name &x:4 Load))) nil)) nil))) (list (ExceptHandler (Name g_Exception Load) &e:4 (/seq (Expr (Call (Name g_print Load) (list (Name &e:4 Load)) nil))))) (/seq) (/seq))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s__fd Store)) (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:5 Load) s_write Store)) (IfExp (Attribute (Name &self:5 Load) s_writable Load) (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:6 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:6 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq)) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (Name &b:6 Load)) nil) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (Name &ptr:6 Load)) nil)) Load))) (/seq)) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (Attribute (Name &self:7 Load) s__fd Load) (Call (Name g_max Load) (list (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (Attribute (Name &self:7 Load) s__fd Load)) nil) s_st_size Load) (Name &BUFSIZE:0 Load)) nil)) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:7 Load) s_count Load) (list (Constant bCg== None)) nil) Add (UnaryOp Not (Name &b:7 Load))) None) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Constant i0 None) (Constant i2 None)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (Name &b:7 Load)) nil) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (Name &ptr:7 Load)) nil)) Load))) (/seq)) (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:8 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (Attribute (Name &self:8 Load) s__fd Load) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil)) nil)) (Expr (Tuple (list (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load) (list (Constant i0 None)) nil) (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load) (list (Constant i0 None)) nil)) Load))) (/seq))) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (Name &file:9 Load)) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_flush Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:9 Load) s_writable Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:9 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (Call (Attribute (Name &s:10 Load) s_encode Load) (list (Constant s_ascii None)) nil)) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (Constant s_ascii None)) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (Attribute (Name &sys:0 Load) s_stdin Store) (Attribute (Name &sys:0 Load) s_stdout Store)) Store)) (Tuple (list (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdin Load)) nil) (Call (Name &IOWrapper:0 Load) (list (Attribute (Name &sys:0 Load) s_stdout Load)) nil)) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (Constant s-WzEzLCAxMF0= None)) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load))) nil) None) (If (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_int Load) (list (Name &d:0 Load)) nil) Sub (Name &x:0 Load))) nil))) (/seq (If (Compare (Call (Name g_int Load) (list (Name &d:0 Load)) nil) (list LtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (Name &n:0 Store) (Name &x:0 Store) (Name &y:0 Store)) Store)) (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (BinOp (Call (Name g_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (Constant i0 None))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &y:0 &x:0 &n:0) (Expr (Call (Name g_print Load) (list (Call (Name g_max Load) (list (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None))) nil) Sub (Name &x:0 Load)) (Constant i0 None)) nil)) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &c:0 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load))) nil) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name g_math Load) s_ceil Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load))) nil) (Constant i0 None))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (IfExp\n            (Compare (Constant s_I None) (list In) (list (Name &s:0 Load)))\n            (Call\n              (Name g_int Load)\n              (list\n                (Compare\n                  (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_I None)) nil)\n                  (list Eq)\n                  (list (Constant i1 None))\n                )\n              )\n              nil\n            )\n            (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_A None)) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &c:0 Load) s_count Load) (list (Constant s_I None)) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (Expr\n          (Call\n            (Name g_print Load)\n            (list (Call (Attribute (Name &c:0 Load) s_count Load) (list (Constant s_A None)) nil))\n            nil\n          )\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &c:0 Load) s_count Load) (list (Constant s_I None)) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &cows:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &bets:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &i:0 Store))\n      (Call (Attribute (Name &bets:0 Load) s_count Load) (list (Constant s_I None)) nil)\n      None\n    )\n    (If\n      (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list (Call (Attribute (Name &bets:0 Load) s_count Load) (list (Constant s_A None)) nil))\n                nil\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_A None)) nil)\n        (list Eq)\n        (list (Constant i0 None))\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil)\n            (list Eq)\n            (list (Constant i1 None))\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (If\n              (Compare\n                (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil)\n                (list Gt)\n                (list (Constant i1 None))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_A None)) nil))\n                    nil\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &p:0 Store))\n      (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0)))\n      None\n    )\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_A None)) nil)\n      None\n    )\n    (Assign\n      (list (Name &i:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_I None)) nil)\n      None\n    )\n    (Assign\n      (list (Name &f:0 Store))\n      (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_F None)) nil)\n      None\n    )\n    (If\n      (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Name &a:0 Load)) nil)))\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &i:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &status:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &allin:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_A None)) nil)\n      None\n    )\n    (Assign\n      (list (Name &folded:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_F None)) nil)\n      None\n    )\n    (Assign\n      (list (Name &In:0 Store))\n      (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_I None)) nil)\n      None\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq)\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Eq) (list (Constant i1 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n      (/seq)\n    )\n    (If\n      (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Name &allin:0 Load)) nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_A None)) nil)\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_I None)) nil)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (Subscript\n            (List\n              (list\n                (Name &a:0 Load)\n                (Subscript\n                  (List (list (Constant i1 None) (Constant i0 None)) Load)\n                  (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None)))\n                  Load\n                )\n              )\n              Load\n            )\n            (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))\n            Load\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &Is:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n      (/seq\n        (If\n          (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_I None)))\n          (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None)))\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n      (/seq\n        (If\n          (Compare (Name &Is:0 Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq\n            (Assign (list (Name &count:0 Store)) (Constant i0 None) None)\n            (For\n              (Name &i:0 Store)\n              (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil)\n              (/seq\n                (If\n                  (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_A None)))\n                  (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None)))\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n            (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil))\n          )\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (Dict\n        (list (Constant s_A None) (Constant s_F None) (Constant s_I None))\n        (list (Constant i0 None) (Constant i0 None) (Constant i0 None))\n      )\n      None\n    )\n    (For\n      (Name &ch:0 Store)\n      (Call (Name g_input Load) nil nil)\n      (/seq (AugAssign (Subscript (Name &c:0 Load) (Name &ch:0 Load) Store) Add (Constant i1 None)))\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Subscript (Name &c:0 Load) (Constant s_I None) Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &c:0 Load) (Constant s_A None) Load)) nil)))\n      (/seq\n        (If\n          (Compare (Subscript (Name &c:0 Load) (Constant s_I None) Load) (list Eq) (list (Constant i1 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (If\n      (Compare\n        (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil)\n        (list Eq)\n        (list (Constant i1 None))\n      )\n      (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil)))\n      (/seq\n        (If\n          (Compare\n            (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil)\n            (list Eq)\n            (list (Constant i0 None))\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (BinOp\n                    (Name &a:0 Load)\n                    Sub\n                    (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_F None)) nil)\n                  )\n                )\n                nil\n              )\n            )\n          )\n          (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil)))\n        )\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(If (Compare #1 (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list #2) nil))) (/seq (If (Compare #1 (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list #0) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 3,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (IfExp (Compare (Constant s_I None) (list In) (list (Name &s:0 Load))) (Call (Name g_int Load) (list (Compare (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Eq) (list (Constant i1 None)))) nil) (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_A None)) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None) (fn_1 (Constant i1 None) (Call (Attribute (Name &c:0 Load) s_count Load) (list (Constant s_I None)) nil) (Call (Attribute (Name &c:0 Load) s_count Load) (list (Constant s_A None)) nil))) nil)",
      "(Module (/seq (Assign (list (Name &cows:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &bets:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &bets:0 Load) s_count Load) (list (Constant s_I None)) nil) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name &bets:0 Load) s_count Load) (list (Constant s_A None)) nil)) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_A None)) nil) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_A None)) nil)) nil))))))))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_A None)) nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_I None)) nil) None) (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (Constant s_F None)) nil) None) (fn_1 (Name &i:0 Load) (Name &i:0 Load) (Name &a:0 Load))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &status:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &allin:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_A None)) nil) None) (Assign (list (Name &folded:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_F None)) nil) None) (Assign (list (Name &In:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (Constant s_I None)) nil) None) (If (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &allin:0 Load)) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_A None)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (Constant s_I None)) nil) None) (Expr (Call (Name g_print Load) (list (Subscript (List (list (Name &a:0 Load) (Subscript (List (list (Constant i1 None) (Constant i0 None)) Load) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None))) Load)) Load) (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None))) Load)) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &Is:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_I None))) (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))) (/seq (If (Compare (Name &Is:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &a:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list Eq) (list (Constant s_A None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (Name &count:0 Load)) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &c:0 Store)) (Dict (list (Constant s_A None) (Constant s_F None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &ch:0 Store) (Call (Name g_input Load) nil nil) (/seq (AugAssign (Subscript (Name &c:0 Load) (Name &ch:0 Load) Store) Add (Constant i1 None))) (/seq) None) (fn_1 (Constant i1 None) (Subscript (Name &c:0 Load) (Constant s_I None) Load) (Subscript (Name &c:0 Load) (Constant s_A None) Load))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (Call (Name g_input Load) nil nil)) nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (Constant i1 None)) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_I None)) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Call (Attribute (Name &t:0 Load) s_count Load) (list (Constant s_F None)) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (Constant i0 None)) nil))))))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &c:0 Store) (Name &s:0 Store)) Store))\n      (Tuple (list (Name &a:0 Load) (Constant i0 None)) Load)\n      None\n    )\n    (While\n      (Compare (Name &a:0 Load) (list GtE) (list (Name &b:0 Load)))\n      (/seq\n        (AugAssign (Name &s:0 Store) Add (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)))\n        (Assign\n          (list (Name &a:0 Store))\n          (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)) Add (BinOp (Name &a:0 Load) Mod (Name &b:0 Load)))\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (BinOp (Name &s:0 Load) Add (Name &c:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &h:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &x:0 Store) Sub (Constant i1 None))\n        (AugAssign (Name &b:0 Store) Add (Constant i1 None))\n        (If\n          (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load)))\n          (/seq\n            (Assign (list (Name &b:0 Store)) (Constant i0 None) None)\n            (AugAssign (Name &x:0 Store) Add (Constant i1 None))\n          )\n          (/seq)\n        )\n        (AugAssign (Name &h:0 Store) Add (Constant i1 None))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &h:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None)\n    (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None)\n    (While\n      (Compare (Name &melt:0 Load) (list GtE) (list (Name &b:0 Load)))\n      (/seq\n        (AugAssign (Name &hrs:0 Store) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load)))\n        (Assign\n          (list (Name &melt:0 Store))\n          (BinOp\n            (BinOp (Name &melt:0 Load) Mod (Name &b:0 Load))\n            Add\n            (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &hrs:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_math None)))\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None)\n    (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None)\n    (While\n      (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (Assign\n          (list (Name &n:0 Store))\n          (Call (Attribute (Name g_math Load) s_floor Load) (list (BinOp (Name &l:0 Load) Div (Name &m:0 Load))) nil)\n          None\n        )\n        (Assign\n          (list (Name &l:0 Store))\n          (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load))\n          None\n        )\n        (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None)\n    (Assign (list (Name &d:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None)\n        (AugAssign (Name &c:0 Store) Add (Name &x:0 Load))\n        (Assign\n          (list (Name &n:0 Store))\n          (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load)))\n          None\n        )\n        (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None)\n    (While\n      (Name &a:0 Load)\n      (/seq\n        (AugAssign (Name &r:0 Store) Add (Name &a:0 Load))\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &l:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) FloorDiv (Name &b:0 Load))\n              (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) Mod (Name &b:0 Load))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &i:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &i:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &res:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &k:0 Store)) (Constant i0 None) None)\n    (While\n      (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None)))\n      (/seq\n        (AugAssign (Name &res:0 Store) Add (Name &a:0 Load))\n        (Assign\n          (list (Tuple (list (Name &a:0 Store) (Name &k:0 Store)) Store))\n          (Tuple\n            (list\n              (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) FloorDiv (Name &b:0 Load))\n              (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Mod (Name &b:0 Load))\n            )\n            Load\n          )\n          None\n        )\n      )\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (ImportFrom s_math (list (alias g_log None)) i0)\n    (FunctionDef\n      &gcd:0\n      (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq))\n        (Return (Call (Name &gcd:0 Load) (list (BinOp (Name &b:1 Load) Mod (Name &a:1 Load)) (Name &a:1 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Name &fast_reader:0 Store))\n      (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load)\n      None\n    )\n    (Assign\n      (list (Name &fast_writer:0 Store))\n      (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load)\n      None\n    )\n    (FunctionDef\n      &input:0\n      (arguments nil nil None nil nil None nil)\n      (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil)))\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &print:0\n      (arguments nil nil (arg &argv:2 None None) nil nil None nil)\n      (/seq\n        (Expr\n          (Call\n            (Name &fast_writer:0 Load)\n            (list\n              (Call\n                (Attribute (Constant s-WzMyXQ== None) s_join Load)\n                (list\n                  (GeneratorExp\n                    (Call (Name g_str Load) (list (Name &i:3 Load)) nil)\n                    (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0))\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n        (Expr (Call (Name &fast_writer:0 Load) (list (Constant s-WzEwXQ== None)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &ans:0 Store))\n      (BinOp\n        (Name &a:0 Load)\n        Add\n        (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))\n      )\n      None\n    )\n    (Expr (Call (Name &print:0 Load) (list (Name &ans:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &t:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &u:0 Store)) (Constant i0 None) None)\n    (While\n      (Constant True None)\n      (/seq\n        (AugAssign (Name &u:0 Store) Add (Name &a:0 Load))\n        (AugAssign (Name &t:0 Store) Add (Name &a:0 Load))\n        (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None)\n        (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)))\n        (If\n          (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &t:0 Load)) nil)) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store))\n      (Call\n        (Name g_map Load)\n        (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None))\n            FloorDiv\n            (BinOp (Name &b:0 Load) Sub (Constant i1 None))\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple (list (Name %2 Store) (Name %1 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Tuple (list (Name &c:0 Store) (Name &s:0 Store)) Store)) (Tuple (list (Name &a:0 Load) (Constant i0 None)) Load) None) (While (Compare (Name &a:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)) Add (BinOp (Name &a:0 Load) Mod (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (BinOp (Name &s:0 Load) Add (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (Constant i0 None) None) (While (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Sub (Constant i1 None)) (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (If (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (AugAssign (Name &x:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &h:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &h:0 Load)) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None) (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None) (While (Compare (Name &melt:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &hrs:0 Store) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &melt:0 Store)) (BinOp (BinOp (Name &melt:0 Load) Mod (Name &b:0 Load)) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (Name &hrs:0 Load)) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 &m:0 &n:0) (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Name g_math Load) s_floor Load) (list (BinOp (Name &l:0 Load) Div (Name &m:0 Load))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load)) None) (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &s:0 Load)) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (Name &n:0 Store) (Name &m:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None) (AugAssign (Name &c:0 Store) Add (Name &x:0 Load)) (Assign (list (Name &n:0 Store)) (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load))) None) (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (Name &c:0 Load)) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None) (While (Name &a:0 Load) (/seq (AugAssign (Name &r:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (Name &a:0 Store) (Name &l:0 Store)) Store)) (Tuple (list (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) FloorDiv (Name &b:0 Load)) (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) Mod (Name &b:0 Load))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (Name &r:0 Load)) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (ListComp (Call (Name g_int Load) (list (Name &i:1 Load)) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (Name &a:0 Store) (Name &k:0 Store)) Store)) (Tuple (list (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) FloorDiv (Name &b:0 Load)) (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Mod (Name &b:0 Load))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (Name &res:0 Load)) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_log None)) i0) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq)) (Return (Call (Name &gcd:0 Load) (list (BinOp (Name &b:1 Load) Mod (Name &a:1 Load)) (Name &a:1 Load)) nil))) nil None None) (Assign (list (Name &fast_reader:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &fast_writer:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print:0 (arguments nil nil (arg &argv:2 None None) nil nil None nil) (/seq (Expr (Call (Name &fast_writer:0 Load) (list (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (GeneratorExp (Call (Name g_str Load) (list (Name &i:3 Load)) nil) (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0)))) nil)) nil)) (Expr (Call (Name &fast_writer:0 Load) (list (Constant s-WzEwXQ== None)) nil))) nil None None) (Assign (list (Tuple (list (Name &a:0 Store) (Name &b:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil)) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))) None) (Expr (Call (Name &print:0 Load) (list (Name &ans:0 Load)) nil))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (AugAssign (Name &u:0 Store) Add (Name &a:0 Load)) (AugAssign (Name &t:0 Store) Add (Name &a:0 Load)) (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None) (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (Name &t:0 Load)) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (fn_1 &b:0 &a:0) (Expr (Call (Name g_print Load) (list (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c_sum:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load))) nil))\n    (Expr (Call (Name g_print Load) (list (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load))) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign (list (Name &l1:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (Assign (list (Name &l2:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Store))\n          (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Store))\n          (Call (Name g_int Load) (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Store))\n          (Call (Name g_int Load) (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Load)) nil)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil))\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) None) Break)\n          (/seq)\n        )\n        (If\n          (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &x:0 Store))\n              (Subscript (Name &l:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load) None) Break)\n          (/seq)\n        )\n        (If\n          (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &y:0 Store))\n              (Subscript (Name &l1:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i2 None)) Load)\n              None\n            )\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))\n    (Expr (Call (Name g_print Load) (list (Name &y:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list\n              (Name g_int Load)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Call (Name g_sum Load) (list (Name &a:0 Load)) nil)\n            Sub\n            (Call (Name g_sum Load) (list (Name &b:0 Load)) nil)\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Call (Name g_sum Load) (list (Name &b:0 Load)) nil)\n            Sub\n            (Call (Name g_sum Load) (list (Name &c:0 Load)) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &li1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &li2:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &li3:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Call (Name g_sum Load) (list (Name &li1:0 Load)) nil)\n            Sub\n            (Call (Name g_sum Load) (list (Name &li2:0 Load)) nil)\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (BinOp\n            (Call (Name g_sum Load) (list (Name &li2:0 Load)) nil)\n            Sub\n            (Call (Name g_sum Load) (list (Name &li3:0 Load)) nil)\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign (list (Name &flag1:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil))\n            (Assign (list (Name &flag1:0 Store)) (Constant False None) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load)) nil))\n      )\n      (/seq)\n    )\n    (Assign (list (Name &flag2:0 Store)) (Constant True None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &c:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq\n            (Expr (Call (Name g_print Load) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)) nil))\n            (Assign (list (Name &flag2:0 Store)) (Constant False None) None)\n            Break\n          )\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None)))\n      (/seq\n        (Expr (Call (Name g_print Load) (list (Subscript (Name &b:0 Load) (UnaryOp USub (Constant i1 None)) Load)) nil))\n      )\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Import (list (alias g_sys None)))\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i3 None)) nil)\n      (/seq\n        (Assign\n          (list (Subscript (Name &alist:0 Load) (Name &i:0 Load) Store))\n          (Call\n            (Name g_sorted Load)\n            (list\n              (Call\n                (Name g_list Load)\n                (list\n                  (Call\n                    (Name g_map Load)\n                    (list\n                      (Name g_int Load)\n                      (Call\n                        (Attribute\n                          (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil)\n                          s_split\n                          Load\n                        )\n                        nil\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i2 None)) nil)\n      (/seq\n        (For\n          (Name &j:0 Store)\n          (Call\n            (Name g_range Load)\n            (list (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))\n            nil\n          )\n          (/seq\n            (If\n              (Compare\n                (Subscript (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load)\n                (list NotEq)\n                (list\n                  (Subscript\n                    (Subscript (Name &alist:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load)\n                    (Name &j:0 Load)\n                    Load\n                  )\n                )\n              )\n              (/seq\n                (Expr\n                  (Call\n                    (Name g_print Load)\n                    (list (Subscript (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load))\n                    nil\n                  )\n                )\n                Break\n              )\n              (/seq)\n            )\n          )\n          (/seq\n            (Expr\n              (Call\n                (Name g_print Load)\n                (list\n                  (Subscript\n                    (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load)\n                    (UnaryOp USub (Constant i1 None))\n                    Load\n                  )\n                )\n                nil\n              )\n            )\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign\n      (list (Name &initial_len:0 Store))\n      (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil)\n      None\n    )\n    (Assign\n      (list (Name &initial_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &second_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &third_list:0 Store))\n      (Call\n        (Name g_sorted Load)\n        (list\n          (Call\n            (Name g_list Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (For\n      (Tuple (list (Name &index:0 Store) (Name &item:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &initial_list:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &second_list:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare\n                (Name &item:0 Load)\n                (list NotEq)\n                (list (Subscript (Name &second_list:0 Load) (Name &index:0 Load) Load))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)) Break)\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (For\n      (Tuple (list (Name &index:0 Store) (Name &item:0 Store)) Store)\n      (Call (Name g_enumerate Load) (list (Name &second_list:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &third_list:0 Load)) nil)))\n          (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)))\n          (/seq\n            (If\n              (Compare\n                (Name &item:0 Load)\n                (list NotEq)\n                (list (Subscript (Name &third_list:0 Load) (Name &index:0 Load) Load))\n              )\n              (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)) Break)\n              (/seq)\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (Call\n        (Name g_sum Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &lst_1:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &lst_2:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &lst_3:0 Store))\n      (Call\n        (Name g_list Load)\n        (list\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n        )\n        nil\n      )\n      None\n    )\n    (Assign\n      (list (Name &first_mistake:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (Name &lst_1:0 Load)) nil)\n        Sub\n        (Call (Name g_sum Load) (list (Name &lst_2:0 Load)) nil)\n      )\n      None\n    )\n    (Assign\n      (list (Name &second_mistake:0 Store))\n      (BinOp\n        (Call (Name g_sum Load) (list (Name &lst_2:0 Load)) nil)\n        Sub\n        (Call (Name g_sum Load) (list (Name &lst_3:0 Load)) nil)\n      )\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list (Name &first_mistake:0 Load) (Constant s-WzEwXQ== None) (Name &second_mistake:0 Load))\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None)\n    (Assign\n      (list (Name &a:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:1 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:1 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &b:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:2 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:2 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (Call (Name g_int Load) (list (Name &x:3 Load)) nil)\n        (list\n          (comprehension\n            (Name &x:3 Store)\n            (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n            nil\n            i0\n          )\n        )\n      )\n      None\n    )\n    (Assign (list (Name &x:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &y:0 Store)) (Constant i0 None) None)\n    (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil))\n    (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil))\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &b:0 Load)) nil)) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load) None))\n      (/seq)\n    )\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &c:0 Load)) nil)) nil)\n      (/seq\n        (If\n          (Compare\n            (Subscript (Name &c:0 Load) (Name &i:0 Load) Load)\n            (list NotEq)\n            (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))\n          )\n          (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) None) Break)\n          (/seq)\n        )\n      )\n      (/seq)\n      None\n    )\n    (If\n      (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None)))\n      (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (UnaryOp USub (Constant i1 None)) Load) None))\n      (/seq)\n    )\n    (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil))\n    (Expr (Call (Name g_print Load) (list (Name &y:0 Load)) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) #0 None) (Assign (list (Name %4 Store)) #0 None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_sum Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) &n:0 &a_sum:0 &b_sum:0 &c_sum:0)) (Expr (Call (Name g_print Load) (list (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &n:0 &l:0 &l1:0 &l2:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Store)) (Call (Name g_int Load) (list (Subscript (Name &l:0 Load) (Name &i:0 Load) Load)) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Store)) (Call (Name g_int Load) (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load)) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil) (/seq (Assign (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Store)) (Call (Name g_int Load) (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Load)) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil)) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (Name &i:0 Load) Load) None) Break) (/seq)) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) Load) None)) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil) (/seq (If (Compare (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &l2:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (Name &i:0 Load) Load) None) Break) (/seq)) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (BinOp (Name &n:0 Load) Sub (Constant i2 None)) Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &y:0 Load)) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (Constant s-WzMyXQ== None)) nil)) nil)) nil) &t:0 &a:0 &b:0 &c:0)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_sum Load) (list (Name &a:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &b:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_sum Load) (list (Name &b:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &c:0 Load)) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) &n:0 &li1:0 &li2:0 &li3:0)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_sum Load) (list (Name &li1:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &li2:0 Load)) nil))) nil)) (Expr (Call (Name g_print Load) (list (BinOp (Call (Name g_sum Load) (list (Name &li2:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &li3:0 Load)) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil)) nil) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &flag1:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (Name &i:0 Load) Load)) nil)) (Assign (list (Name &flag1:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load)) nil))) (/seq)) (Assign (list (Name &flag2:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (BinOp (Name &n:0 Load) Sub (Constant i2 None))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &c:0 Load) (Name &i:0 Load) Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load)) nil)) (Assign (list (Name &flag2:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Name &b:0 Load) (UnaryOp USub (Constant i1 None)) Load)) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i3 None)) nil) (/seq (Assign (list (Subscript (Name &alist:0 Load) (Name &i:0 Load) Store)) (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil)) nil)) nil)) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i2 None)) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None))) nil) (/seq (If (Compare (Subscript (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load) (list NotEq) (list (Subscript (Subscript (Name &alist:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Load) (Name &j:0 Load) Load))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load) (Name &j:0 Load) Load)) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (Subscript (Subscript (Name &alist:0 Load) (Name &i:0 Load) Load) (UnaryOp USub (Constant i1 None)) Load)) nil))) None)) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil)) nil) &initial_len:0 &initial_list:0 &second_list:0 &third_list:0)) (For (Tuple (list (Name &index:0 Store) (Name &item:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &initial_list:0 Load)) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &second_list:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &second_list:0 Load) (Name &index:0 Load) Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)) Break) (/seq))))) (/seq) None) (For (Tuple (list (Name &index:0 Store) (Name &item:0 Store)) Store) (Call (Name g_enumerate Load) (list (Name &second_list:0 Load)) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (Name &third_list:0 Load)) nil))) (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &third_list:0 Load) (Name &index:0 Load) Load))) (/seq (Expr (Call (Name g_print Load) (list (Name &item:0 Load)) nil)) Break) (/seq))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sum Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) None) (Expr (Call (Name g_print Load) (list (BinOp (Name &a:0 Load) Sub (Name &b:0 Load)) (BinOp (Name &b:0 Load) Sub (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil)) nil) &a:0 &lst_1:0 &lst_2:0 &lst_3:0)) (Assign (list (Name &first_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (Name &lst_1:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &lst_2:0 Load)) nil)) None) (Assign (list (Name &second_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (Name &lst_2:0 Load)) nil) Sub (Call (Name g_sum Load) (list (Name &lst_3:0 Load)) nil)) None) (Expr (Call (Name g_print Load) (list (Name &first_mistake:0 Load) (Constant s-WzEwXQ== None) (Name &second_mistake:0 Load)) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:1 Load)) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:2 Load)) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (ListComp (Call (Name g_int Load) (list (Name &x:3 Load)) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &b:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (Name &i:0 Load) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (UnaryOp USub (Constant i1 None)) Load) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Call (Name g_len Load) (list (Name &c:0 Load)) nil)) nil) (/seq (If (Compare (Subscript (Name &c:0 Load) (Name &i:0 Load) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (Name &i:0 Load) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (Name &i:0 Load) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (UnaryOp USub (Constant i1 None)) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (Name &x:0 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &y:0 Load)) nil))) nil)"
    ]
  },
  {
    "code": [
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq))\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Constant s-WzQwXQ== None)\n                      Add\n                      (Call (Name g_str Load) (list (Subscript (Name &X:0 Load) (Constant i0 None) Load)) nil)\n                    )\n                    Add\n                    (Constant s-WzQzXQ== None)\n                  )\n                  Add\n                  (Call (Name &f:0 Load) (list (Constant i1 None)) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None)\n                  Add\n                  (Call (Name g_str Load) (list (BinOp (Name &x:1 Load) Sub (Constant i1 None))) nil)\n                )\n                Add\n                (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              )\n              Add\n              (Call (Name g_str Load) (list (Name &x:1 Load)) nil)\n            )\n            Add\n            (Constant s-WzQxLCA0MSwgNDFd None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &tmp:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (Name &x:1 Load) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (BinOp (Name &x:1 Load) Sub (Constant i1 None)) Load)\n            )\n            FloorDiv\n            (Constant i2 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &re:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (Name &x:1 Load) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (BinOp (Name &x:1 Load) Sub (Constant i1 None)) Load)\n            )\n            Sub\n            (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &X:0 Load) (Name &x:1 Load) Store) Sub (Name &re:1 Load))\n        (If\n          (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &tmp:1 Store))\n              (BinOp\n                (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil))\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil))\n                      Add\n                      (Constant s-WzQyXQ== None)\n                    )\n                    Add\n                    (Name &ss:1 Load)\n                  )\n                  Add\n                  (Constant s-WzQxXQ== None)\n                )\n                Add\n                (Constant s-WzQzXQ== None)\n              )\n              Add\n              (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Call (Name &f:0 Load) (list (BinOp (Name &x:1 Load) Add (Constant i1 None))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (Name &x:5 Load)) nil)\n          (list\n            (comprehension\n              (Name &x:5 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (ListComp\n        (Subscript (Subscript (Name &c:0 Load) (Name &i:3 Load) Load) (Constant i0 None) Load)\n        (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (ListComp\n        (Subscript (Subscript (Name &c:0 Load) (Name &i:4 Load) Load) (Constant i1 None) Load)\n        (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &f:0 Load) (list (Constant i0 None)) nil)) nil))\n    (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None)\n    (Expr (Call (Name g_print Load) (list (Call (Name &f:0 Load) (list (Constant i0 None)) nil)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &canonise:0\n      (arguments nil (list (arg &t:1 None None)) None nil nil None nil)\n      (/seq\n        (If\n          (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA0OCwgNDVd None)\n                  Add\n                  (Call (Name &canonise:0 Load) (list (UnaryOp USub (Name &t:1 Load))) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign (list (Name &ans:1 Store)) (Constant s_ None) None)\n        (While\n          (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None)))\n          (/seq\n            (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None))\n            (AugAssign (Name &t:1 Store) Sub (Constant i50 None))\n          )\n          (/seq)\n        )\n        (Return\n          (BinOp\n            (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (Name &t:1 Load)) nil))\n            Add\n            (BinOp\n              (Constant s-WzQxXQ== None)\n              Mult\n              (BinOp (Call (Name g_len Load) (list (Name &ans:1 Load)) nil) FloorDiv (Constant i4 None))\n            )\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &cxes:0 Store)) (List nil Load) None)\n    (Assign (list (Name &cyes:0 Store)) (List nil Load) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store) (Name &r:0 Store)) Store))\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n        (For\n          (Name &dx:0 Store)\n          (Call (Name g_range Load) (list (Constant i2 None)) nil)\n          (/seq\n            (For\n              (Name &dy:0 Store)\n              (Call (Name g_range Load) (list (Constant i2 None)) nil)\n              (/seq\n                (If\n                  (BoolOp\n                    And\n                    (list\n                      (Compare\n                        (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None))\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                      (Compare\n                        (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None))\n                        (list Eq)\n                        (list (Constant i0 None))\n                      )\n                    )\n                  )\n                  (/seq\n                    (Expr\n                      (Call\n                        (Attribute (Name &cxes:0 Load) s_append Load)\n                        (list (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None)))\n                        nil\n                      )\n                    )\n                    (Expr\n                      (Call\n                        (Attribute (Name &cyes:0 Load) s_append Load)\n                        (list (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None)))\n                        nil\n                      )\n                    )\n                  )\n                  (/seq)\n                )\n              )\n              (/seq)\n              None\n            )\n          )\n          (/seq)\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign\n      (list (Name &coeffx:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None)))\n      None\n    )\n    (Assign\n      (list (Name &coeffy:0 Store))\n      (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None)))\n      None\n    )\n    (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None)\n    (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (If\n          (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load))\n            (AugAssign\n              (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n              Sub\n              (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n            )\n            (AugAssign\n              (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store)\n              Add\n              (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n            )\n            (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))\n            (AugAssign\n              (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n              Sub\n              (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n            )\n            (AugAssign\n              (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store)\n              Add\n              (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n            )\n          )\n          (/seq\n            (If\n              (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None))))\n              (/seq\n                (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load))\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n                  Sub\n                  (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n                  Sub\n                  (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n                )\n              )\n              (/seq\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n                  Sub\n                  (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load))\n                )\n                (AugAssign\n                  (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store)\n                  Add\n                  (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store)\n                  Sub\n                  (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))\n                )\n                (AugAssign\n                  (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store)\n                  Add\n                  (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)\n                )\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Assign (list (Name &rx:0 Store)) (Constant s_ None) None)\n    (Assign (list (Name &ry:0 Store)) (Constant s_ None) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n      (/seq\n        (Assign\n          (list (Name &s:0 Store))\n          (JoinedStr\n            (list\n              (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              (FormattedValue (Name &i:0 Load) i-1 None)\n              (Constant s-WzQxLCA0MV0= None)\n            )\n          )\n          None\n        )\n        (If\n          (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load)))\n          (/seq\n            (AugAssign\n              (Name &rx:0 Store)\n              Add\n              (JoinedStr\n                (list\n                  (Constant s-WzQwLCA0MF0= None)\n                  (FormattedValue (Name &s:0 Load) i-1 None)\n                  (Constant s-WzQyXQ== None)\n                  (FormattedValue\n                    (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Load)) nil)\n                    i-1\n                    None\n                  )\n                  (Constant s-WzQxLCA0M10= None)\n                )\n              )\n            )\n            (AugAssign\n              (Name &ry:0 Store)\n              Add\n              (JoinedStr\n                (list\n                  (Constant s-WzQwLCA0MF0= None)\n                  (FormattedValue (Name &s:0 Load) i-1 None)\n                  (Constant s-WzQyXQ== None)\n                  (FormattedValue\n                    (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Load)) nil)\n                    i-1\n                    None\n                  )\n                  (Constant s-WzQxLCA0M10= None)\n                )\n              )\n            )\n          )\n          (/seq\n            (AugAssign\n              (Name &rx:0 Store)\n              Add\n              (BinOp\n                (JoinedStr\n                  (list\n                    (Constant s-WzQwXQ== None)\n                    (FormattedValue (Name &s:0 Load) i-1 None)\n                    (Constant s-WzQyXQ== None)\n                    (FormattedValue\n                      (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Load)) nil)\n                      i-1\n                      None\n                    )\n                    (Constant s-WzQxXQ== None)\n                  )\n                )\n                Add\n                (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              )\n            )\n            (AugAssign\n              (Name &ry:0 Store)\n              Add\n              (BinOp\n                (JoinedStr\n                  (list\n                    (Constant s-WzQwXQ== None)\n                    (FormattedValue (Name &s:0 Load) i-1 None)\n                    (Constant s-WzQyXQ== None)\n                    (FormattedValue\n                      (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Load)) nil)\n                      i-1\n                      None\n                    )\n                    (Constant s-WzQxXQ== None)\n                  )\n                )\n                Add\n                (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))\n              )\n            )\n          )\n        )\n      )\n      (/seq)\n      None\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (JoinedStr\n            (list\n              (Constant s-WzQwXQ== None)\n              (FormattedValue (Name &rx:0 Load) i-1 None)\n              (Constant s-WzQzXQ== None)\n              (FormattedValue (Call (Name &canonise:0 Load) (list (Name &cfx:0 Load)) nil) i-1 None)\n              (Constant s-WzQxXQ== None)\n            )\n          )\n        )\n        nil\n      )\n    )\n    (Expr\n      (Call\n        (Name g_print Load)\n        (list\n          (JoinedStr\n            (list\n              (Constant s-WzQwXQ== None)\n              (FormattedValue (Name &ry:0 Load) i-1 None)\n              (Constant s-WzQzXQ== None)\n              (FormattedValue (Call (Name &canonise:0 Load) (list (Name &cfy:0 Load)) nil) i-1 None)\n              (Constant s-WzQxXQ== None)\n            )\n          )\n        )\n        nil\n      )\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign (list (Name &x:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (Assign (list (Name &y:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None)\n    (For\n      (Name &i:0 Store)\n      (Call (Name g_range Load) (list (Name &n:0 Load)) nil)\n      (/seq\n        (Assign\n          (list\n            (Tuple\n              (list\n                (Subscript (Name &x:0 Load) (Name &i:0 Load) Store)\n                (Subscript (Name &y:0 Load) (Name &i:0 Load) Store)\n                (Name &r:0 Store)\n              )\n              Store\n            )\n          )\n          (Call\n            (Name g_map Load)\n            (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))\n            nil\n          )\n          None\n        )\n      )\n      (/seq)\n      None\n    )\n    (FunctionDef\n      &sum:0\n      (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Name &s2:1 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &minus:0\n      (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None))\n              Add\n              (Name &s2:2 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &mult:0\n      (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None))\n              Add\n              (Name &s2:3 Load)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &sabs:0\n      (arguments nil (list (arg &s1:4 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (BinOp\n            (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load))\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &stand:0\n      (arguments nil (list (arg &x:5 None None)) None nil nil None nil)\n      (/seq\n        (Return\n          (Call\n            (Name &sum:0 Load)\n            (list\n              (Call\n                (Name &minus:0 Load)\n                (list\n                  (Constant s_1 None)\n                  (Call\n                    (Name &sabs:0 Load)\n                    (list (Call (Name &minus:0 Load) (list (Constant s_t None) (Name &x:5 Load)) nil))\n                    nil\n                  )\n                )\n                nil\n              )\n              (Call\n                (Name &sabs:0 Load)\n                (list\n                  (Call\n                    (Name &minus:0 Load)\n                    (list\n                      (Call\n                        (Name &sabs:0 Load)\n                        (list (Call (Name &minus:0 Load) (list (Constant s_t None) (Name &x:5 Load)) nil))\n                        nil\n                      )\n                      (Constant s_1 None)\n                    )\n                    nil\n                  )\n                )\n                nil\n              )\n            )\n            nil\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &ans:0\n      (arguments nil (list (arg &v:6 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &s:6 Store)) (Constant s_ None) None)\n        (For\n          (Name &i:6 Store)\n          (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil)\n          (/seq\n            (If\n              (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None)))\n              (/seq\n                (Assign\n                  (list (Name &s:6 Store))\n                  (Call\n                    (Name &mult:0 Load)\n                    (list\n                      (Call\n                        (Name g_str Load)\n                        (list\n                          (BinOp\n                            (Subscript (Name &v:6 Load) (BinOp (Name &i:6 Load) Sub (Constant i1 None)) Load)\n                            FloorDiv\n                            (Constant i2 None)\n                          )\n                        )\n                        nil\n                      )\n                      (Call (Name &stand:0 Load) (list (Call (Name g_str Load) (list (Name &i:6 Load)) nil)) nil)\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n              (/seq\n                (Assign\n                  (list (Name &s:6 Store))\n                  (Call\n                    (Name &sum:0 Load)\n                    (list\n                      (Name &s:6 Load)\n                      (Call\n                        (Name &mult:0 Load)\n                        (list\n                          (Call\n                            (Name g_str Load)\n                            (list\n                              (BinOp\n                                (Subscript (Name &v:6 Load) (BinOp (Name &i:6 Load) Sub (Constant i1 None)) Load)\n                                FloorDiv\n                                (Constant i2 None)\n                              )\n                            )\n                            nil\n                          )\n                          (Call (Name &stand:0 Load) (list (Call (Name g_str Load) (list (Name &i:6 Load)) nil)) nil)\n                        )\n                        nil\n                      )\n                    )\n                    nil\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &s:6 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (Expr (Call (Name &ans:0 Load) (list (Name &x:0 Load)) nil))\n    (Expr (Call (Name &ans:0 Load) (list (Name &y:0 Load)) nil))\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &ex:0\n      (arguments nil (list (arg &values:1 None None)) None nil nil None nil)\n      (/seq\n        (Assign (list (Name &e:1 Store)) (Constant None None) None)\n        (For\n          (Tuple (list (Name &i:1 Store) (Name &v:1 Store)) Store)\n          (Call (Name g_enumerate Load) (list (Name &values:1 Load)) nil)\n          (/seq\n            (Assign\n              (list (Name &e_:1 Store))\n              (JoinedStr\n                (list\n                  (Constant s-WzQwXQ== None)\n                  (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None)\n                  (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None)\n                  (FormattedValue (Name &i:1 Load) i-1 None)\n                  (Constant\n                    s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd\n                    None\n                  )\n                  (FormattedValue (Name &i:1 Load) i-1 None)\n                  (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None)\n                )\n              )\n              None\n            )\n            (If\n              (Compare (Name &e:1 Load) (list Is) (list (Constant None None)))\n              (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None))\n              (/seq\n                (Assign\n                  (list (Name &e:1 Store))\n                  (JoinedStr\n                    (list\n                      (Constant s-WzQwXQ== None)\n                      (FormattedValue (Name &e:1 Load) i-1 None)\n                      (Constant s-WzQzXQ== None)\n                      (FormattedValue (Name &e_:1 Load) i-1 None)\n                      (Constant s-WzQxXQ== None)\n                    )\n                  )\n                  None\n                )\n              )\n            )\n          )\n          (/seq)\n          None\n        )\n        (Return (Name &e:1 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &solve:0\n      (arguments nil (list (arg &circles:2 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &xs:2 Store))\n          (ListComp\n            (Subscript (Name &c:5 Load) (Constant i0 None) Load)\n            (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Name &ys:2 Store))\n          (ListComp\n            (Subscript (Name &c:6 Load) (Constant i1 None) Load)\n            (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))\n          )\n          None\n        )\n        (Return\n          (Tuple\n            (list\n              (Call (Name &ex:0 Load) (list (Name &xs:2 Load)) nil)\n              (Call (Name &ex:0 Load) (list (Name &ys:2 Load)) nil)\n            )\n            Load\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &pc:0\n      (arguments nil (list (arg &line:3 None None)) None nil nil None nil)\n      (/seq\n        (Assign\n          (list (Name &t:3 Store))\n          (Call\n            (Name g_tuple Load)\n            (list\n              (Call\n                (Name g_map Load)\n                (list (Name g_int Load) (Call (Attribute (Name &line:3 Load) s_split Load) nil nil))\n                nil\n              )\n            )\n            nil\n          )\n          None\n        )\n        (Assert\n          (Compare (Call (Name g_len Load) (list (Name &t:3 Load)) nil) (list Eq) (list (Constant i3 None)))\n          (JoinedStr\n            (list\n              (Constant\n                s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ==\n                None\n              )\n              (FormattedValue (Name &line:3 Load) i-1 None)\n            )\n          )\n        )\n        (Return (Name &t:3 Load))\n      )\n      nil\n      None\n      None\n    )\n    (FunctionDef\n      &main:0\n      (arguments nil nil None nil nil None nil)\n      (/seq\n        (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n        (Assign\n          (list (Name &circles:4 Store))\n          (ListComp\n            (Call (Name &pc:0 Load) (list (Call (Name g_input Load) nil nil)) nil)\n            (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (Name &n:4 Load)) nil) nil i0))\n          )\n          None\n        )\n        (Assign\n          (list (Tuple (list (Name &f:4 Store) (Name &g:4 Store)) Store))\n          (Call (Name &solve:0 Load) (list (Name &circles:4 Load)) nil)\n          None\n        )\n        (Expr (Call (Name g_print Load) (list (Name &f:4 Load)) nil))\n        (Expr (Call (Name g_print Load) (list (Name &g:4 Load)) nil))\n      )\n      nil\n      None\n      None\n    )\n    (If\n      (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None)))\n      (/seq (Expr (Call (Name &main:0 Load) nil nil)))\n      (/seq)\n    )\n  )\n  nil\n)",
      "(Module\n  (/seq\n    (FunctionDef\n      &f:0\n      (arguments nil (list (arg &x:1 None None)) None nil nil None nil)\n      (/seq\n        (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq))\n        (If\n          (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None)))\n          (/seq\n            (Return\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (Constant s-WzQwXQ== None)\n                      Add\n                      (Call (Name g_str Load) (list (Subscript (Name &X:0 Load) (Constant i0 None) Load)) nil)\n                    )\n                    Add\n                    (Constant s-WzQzXQ== None)\n                  )\n                  Add\n                  (Call (Name &f:0 Load) (list (Constant i1 None)) nil)\n                )\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None)\n                  Add\n                  (Call (Name g_str Load) (list (BinOp (Name &x:1 Load) Sub (Constant i1 None))) nil)\n                )\n                Add\n                (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)\n              )\n              Add\n              (Call (Name g_str Load) (list (Name &x:1 Load)) nil)\n            )\n            Add\n            (Constant s-WzQxLCA0MSwgNDFd None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &tmp:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (Name &x:1 Load) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (BinOp (Name &x:1 Load) Sub (Constant i1 None)) Load)\n            )\n            FloorDiv\n            (Constant i2 None)\n          )\n          None\n        )\n        (Assign\n          (list (Name &re:1 Store))\n          (BinOp\n            (BinOp\n              (Subscript (Name &X:0 Load) (Name &x:1 Load) Load)\n              Sub\n              (Subscript (Name &X:0 Load) (BinOp (Name &x:1 Load) Sub (Constant i1 None)) Load)\n            )\n            Sub\n            (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))\n          )\n          None\n        )\n        (AugAssign (Subscript (Name &X:0 Load) (Name &x:1 Load) Store) Sub (Name &re:1 Load))\n        (If\n          (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None)))\n          (/seq\n            (Assign\n              (list (Name &tmp:1 Store))\n              (BinOp\n                (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil))\n                Add\n                (Constant s-WzQxXQ== None)\n              )\n              None\n            )\n          )\n          (/seq)\n        )\n        (Assign\n          (list (Name &ss:1 Store))\n          (BinOp\n            (BinOp\n              (BinOp\n                (BinOp\n                  (BinOp\n                    (BinOp\n                      (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil))\n                      Add\n                      (Constant s-WzQyXQ== None)\n                    )\n                    Add\n                    (Name &ss:1 Load)\n                  )\n                  Add\n                  (Constant s-WzQxXQ== None)\n                )\n                Add\n                (Constant s-WzQzXQ== None)\n              )\n              Add\n              (Call (Name g_str Load) (list (Name &tmp:1 Load)) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n          None\n        )\n        (Return\n          (BinOp\n            (BinOp\n              (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None))\n              Add\n              (Call (Name &f:0 Load) (list (BinOp (Name &x:1 Load) Add (Constant i1 None))) nil)\n            )\n            Add\n            (Constant s-WzQxXQ== None)\n          )\n        )\n      )\n      nil\n      None\n      None\n    )\n    (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None)\n    (Assign\n      (list (Name &c:0 Store))\n      (ListComp\n        (ListComp\n          (Call (Name g_int Load) (list (Name &x:5 Load)) nil)\n          (list\n            (comprehension\n              (Name &x:5 Store)\n              (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)\n              nil\n              i0\n            )\n          )\n        )\n        (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &X:0 Store))\n      (ListComp\n        (Subscript (Subscript (Name &c:0 Load) (Name &i:3 Load) Load) (Constant i0 None) Load)\n        (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Assign\n      (list (Name &Y:0 Store))\n      (ListComp\n        (Subscript (Subscript (Name &c:0 Load) (Name &i:4 Load) Load) (Constant i1 None) Load)\n        (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) nil i0))\n      )\n      None\n    )\n    (Expr (Call (Name g_print Load) (list (Call (Name &f:0 Load) (list (Constant i0 None)) nil)) nil))\n    (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None)\n    (Expr (Call (Name g_print Load) (list (Call (Name &f:0 Load) (list (Constant i0 None)) nil)) nil))\n  )\n  nil\n)"
    ],
    "abstractions": [
      {
        "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq (Return (Constant s_0 None))) (/seq)) (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Call (Name g_str Load) (list (Subscript (Name %4 Load) (Constant i0 None) Load)) nil)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (Constant i1 None)) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None) Add (Call (Name g_str Load) (list (BinOp (Name %2 Load) Sub (Constant i1 None))) nil)) Add (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)) Add (Call (Name g_str Load) (list (Name %2 Load)) nil)) Add (Constant s-WzQxLCA0MSwgNDFd None)) None) (Assign (list (Name %6 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (Name %2 Load) Load) Sub (Subscript (Name %4 Load) (BinOp (Name %2 Load) Sub (Constant i1 None)) Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name %7 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (Name %2 Load) Load) Sub (Subscript (Name %4 Load) (BinOp (Name %2 Load) Sub (Constant i1 None)) Load)) Sub (BinOp (Constant i2 None) Mult (Name %6 Load))) None) (AugAssign (Subscript (Name %4 Load) (Name %2 Load) Store) Sub (Name %7 Load)) (If (Compare (Name %6 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name %6 Store)) (BinOp (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (Name %6 Load)) nil)) Add (Constant s-WzQxXQ== None)) None)) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (Name %6 Load)) nil)) Add (Constant s-WzQyXQ== None)) Add (Name %5 Load)) Add (Constant s-WzQxXQ== None)) Add (Constant s-WzQzXQ== None)) Add (Call (Name g_str Load) (list (Name %6 Load)) nil)) Add (Constant s-WzQxXQ== None)) None) (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name %5 Load)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (BinOp (Name %2 Load) Add (Constant i1 None))) nil)) Add (Constant s-WzQxXQ== None)))) nil None None) (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name %10 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (Name %9 Load)) nil) (list (comprehension (Name %9 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name %8 Store) (Call (Name g_range Load) (list (Name %1 Load)) nil) nil i0))) None) (Assign (list (Name %4 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (Name %11 Load) Load) (Constant i0 None) Load) (list (comprehension (Name %11 Store) (Call (Name g_range Load) (list (Name %1 Load)) nil) nil i0))) None) (Assign (list (Name %13 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (Name %12 Load) Load) (Constant i1 None) Load) (list (comprehension (Name %12 Store) (Call (Name g_range Load) (list (Name %1 Load)) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (Call (Name %3 Load) (list (Constant i0 None)) nil)) nil)) (Assign (list (Name %4 Store)) (Name %13 Load) None) (Expr (Call (Name g_print Load) (list (Call (Name %3 Load) (list (Constant i0 None)) nil)) nil)))",
        "sym_arity": 13,
        "dfa_symvars": [
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X",
          "X"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)",
      "(Module (/seq (FunctionDef &canonise:0 (arguments nil (list (arg &t:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (Constant s-WzQwLCA0OCwgNDVd None) Add (Call (Name &canonise:0 Load) (list (UnaryOp USub (Name &t:1 Load))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_ None) None) (While (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None)) (AugAssign (Name &t:1 Store) Sub (Constant i50 None))) (/seq)) (Return (BinOp (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (Name &t:1 Load)) nil)) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Call (Name g_len Load) (list (Name &ans:1 Load)) nil) FloorDiv (Constant i4 None)))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &cxes:0 Store)) (List nil Load) None) (Assign (list (Name &cyes:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Name &x:0 Store) (Name &y:0 Store) (Name &r:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None) (For (Name &dx:0 Store) (Call (Name g_range Load) (list (Constant i2 None)) nil) (/seq (For (Name &dy:0 Store) (Call (Name g_range Load) (list (Constant i2 None)) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Attribute (Name &cxes:0 Load) s_append Load) (list (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None))) nil)) (Expr (Call (Attribute (Name &cyes:0 Load) s_append Load) (list (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None))) nil))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &coeffx:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &coeffy:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None) (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))) (/seq (AugAssign (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load))) (AugAssign (Subscript (Name &coeffx:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store) Add (Subscript (Name &cxes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i1 None)) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))) (AugAssign (Subscript (Name &coeffy:0 Load) (BinOp (Name &i:0 Load) Add (Constant i2 None)) Store) Add (Subscript (Name &cyes:0 Load) (Name &i:0 Load) Load))))))) (/seq) None) (Assign (list (Name &rx:0 Store)) (Constant s_ None) None) (Assign (list (Name &ry:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (Assign (list (Name &s:0 Store)) (JoinedStr (list (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzQxLCA0MV0= None))) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load))) (/seq (AugAssign (Name &rx:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Load)) nil) i-1 None) (Constant s-WzQxLCA0M10= None)))) (AugAssign (Name &ry:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Load)) nil) i-1 None) (Constant s-WzQxLCA0M10= None))))) (/seq (AugAssign (Name &rx:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffx:0 Load) (Name &i:0 Load) Load)) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))))) (AugAssign (Name &ry:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Subscript (Name &coeffy:0 Load) (Name &i:0 Load) Load)) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &rx:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Name &cfx:0 Load)) nil) i-1 None) (Constant s-WzQxXQ== None)))) nil)) (Expr (Call (Name g_print Load) (list (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &ry:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (Name &cfy:0 Load)) nil) i-1 None) (Constant s-WzQxXQ== None)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (BinOp (List (list (Constant i0 None)) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (Name &n:0 Load)) nil) (/seq (Assign (list (Tuple (list (Subscript (Name &x:0 Load) (Name &i:0 Load) Store) (Subscript (Name &y:0 Load) (Name &i:0 Load) Store) (Name &r:0 Store)) Store)) (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil)) nil) None)) (/seq) None) (FunctionDef &sum:0 (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Name &s2:1 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &minus:0 (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None)) Add (Name &s2:2 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &mult:0 (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None)) Add (Name &s2:3 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &sabs:0 (arguments nil (list (arg &s1:4 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &stand:0 (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (/seq (Return (Call (Name &sum:0 Load) (list (Call (Name &minus:0 Load) (list (Constant s_1 None) (Call (Name &sabs:0 Load) (list (Call (Name &minus:0 Load) (list (Constant s_t None) (Name &x:5 Load)) nil)) nil)) nil) (Call (Name &sabs:0 Load) (list (Call (Name &minus:0 Load) (list (Call (Name &sabs:0 Load) (list (Call (Name &minus:0 Load) (list (Constant s_t None) (Name &x:5 Load)) nil)) nil) (Constant s_1 None)) nil)) nil)) nil))) nil None None) (FunctionDef &ans:0 (arguments nil (list (arg &v:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:6 Store)) (Constant s_ None) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (Constant i1 None) (BinOp (Name &n:0 Load) Add (Constant i1 None))) nil) (/seq (If (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None))) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &mult:0 Load) (list (Call (Name g_str Load) (list (BinOp (Subscript (Name &v:6 Load) (BinOp (Name &i:6 Load) Sub (Constant i1 None)) Load) FloorDiv (Constant i2 None))) nil) (Call (Name &stand:0 Load) (list (Call (Name g_str Load) (list (Name &i:6 Load)) nil)) nil)) nil) None)) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &sum:0 Load) (list (Name &s:6 Load) (Call (Name &mult:0 Load) (list (Call (Name g_str Load) (list (BinOp (Subscript (Name &v:6 Load) (BinOp (Name &i:6 Load) Sub (Constant i1 None)) Load) FloorDiv (Constant i2 None))) nil) (Call (Name &stand:0 Load) (list (Call (Name g_str Load) (list (Name &i:6 Load)) nil)) nil)) nil)) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (Name &s:6 Load)) nil))) nil None None) (Expr (Call (Name &ans:0 Load) (list (Name &x:0 Load)) nil)) (Expr (Call (Name &ans:0 Load) (list (Name &y:0 Load)) nil))) nil)",
      "(Module (/seq (FunctionDef &ex:0 (arguments nil (list (arg &values:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &e:1 Store)) (Constant None None) None) (For (Tuple (list (Name &i:1 Store) (Name &v:1 Store)) Store) (Call (Name g_enumerate Load) (list (Name &values:1 Load)) nil) (/seq (Assign (list (Name &e_:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None) (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None))) None) (If (Compare (Name &e:1 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None)) (/seq (Assign (list (Name &e:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &e:1 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Name &e_:1 Load) i-1 None) (Constant s-WzQxXQ== None))) None)))) (/seq) None) (Return (Name &e:1 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &circles:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &xs:2 Store)) (ListComp (Subscript (Name &c:5 Load) (Constant i0 None) Load) (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))) None) (Assign (list (Name &ys:2 Store)) (ListComp (Subscript (Name &c:6 Load) (Constant i1 None) Load) (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))) None) (Return (Tuple (list (Call (Name &ex:0 Load) (list (Name &xs:2 Load)) nil) (Call (Name &ex:0 Load) (list (Name &ys:2 Load)) nil)) Load))) nil None None) (FunctionDef &pc:0 (arguments nil (list (arg &line:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &t:3 Store)) (Call (Name g_tuple Load) (list (Call (Name g_map Load) (list (Name g_int Load) (Call (Attribute (Name &line:3 Load) s_split Load) nil nil)) nil)) nil) None) (Assert (Compare (Call (Name g_len Load) (list (Name &t:3 Load)) nil) (list Eq) (list (Constant i3 None))) (JoinedStr (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ== None) (FormattedValue (Name &line:3 Load) i-1 None)))) (Return (Name &t:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (Call (Name g_input Load) nil nil)) nil) None) (Assign (list (Name &circles:4 Store)) (ListComp (Call (Name &pc:0 Load) (list (Call (Name g_input Load) nil nil)) nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (Name &n:4 Load)) nil) nil i0))) None) (Assign (list (Tuple (list (Name &f:4 Store) (Name &g:4 Store)) Store)) (Call (Name &solve:0 Load) (list (Name &circles:4 Load)) nil) None) (Expr (Call (Name g_print Load) (list (Name &f:4 Load)) nil)) (Expr (Call (Name g_print Load) (list (Name &g:4 Load)) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)"
    ]
  }
]