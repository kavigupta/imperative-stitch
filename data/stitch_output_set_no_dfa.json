[
  {
    "code": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &k:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) (/seq (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) nil))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &p:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &y:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &x:0 Store)) (Call (Attribute (Name &y:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None))) (_starred_content (Name &x:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (/seq (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &nb_8:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &elem:0 Load))) nil) (list Eq) (list (Constant i8 None))) (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (/seq (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq Break))))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_heapq None))) (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) None) (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list LtE) (list (Name &strips:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Sub (Name &strips:0 Load)) (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) FloorDiv (Constant i11 None))) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Mod (Constant i11 None)) (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &k:0 Store)) (Call (Attribute (Name &a:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &c:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &p:0 Load))) nil))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) (Call (Attribute (Name %2 Load) s_count Load) (list (_starred_content (Constant s_8 None))) nil) None))",
        "sym_arity": 3,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &k:0)) (Assign (list (Name &l:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &k:0 Load)) None) (If (Compare (Name &k:0 Load) (list LtE) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) (/seq (While (Compare (Name &k:0 Load) (list Gt) (list (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) (/seq (AugAssign (Name &k:0 Store) Sub (Constant i1 None)) (AugAssign (Name &l:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &k:0 Load)) (_starred_content (BinOp (Name &l:0 Load) FloorDiv (Constant i10 None)))) nil))) nil))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_str Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &n:0 &s:0 &p:0)) (Assign (list (Name &q:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Assign (list (Name &f:0 Store)) (Call (Name g_min Load) (list (_starred_content (Name &p:0 Load)) (_starred_content (Name &q:0 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &a:0 &y:0 &x:0)) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &a:0 Load) FloorDiv (Constant i11 None))) (_starred_content (Name &x:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &nb_8:0 Store)) (Constant i0 None) None) (If (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))) (/seq (While (BinOp (Compare (Name &i:0 Load) (list Lt) (list (Name &n:0 Load))) BitAnd (Compare (BinOp (Name &n:0 Load) Sub (BinOp (Name &nb_8:0 Load) Mult (Constant i11 None))) (list Gt) (list (Constant i10 None)))) (/seq (If (Compare (Subscript (Name &s:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_8 None))) (/seq (AugAssign (Name &nb_8:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &i:0 Store) Add (Constant i1 None))) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &nb_8:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &eights:0 Store)) (Constant i0 None) None) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (For (Name &elem:0 Store) (Call (Name g_input Load) nil nil) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &elem:0 Load))) nil) (list Eq) (list (Constant i8 None))) (/seq (AugAssign (Name &eights:0 Store) Add (Constant i1 None))) (/seq (AugAssign (Name &others:0 Store) Add (Constant i1 None))))) (/seq) None) (Assign (list (Name &answer:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (Name &eights:0 Load) (list Eq) (list (Constant i0 None))) (/seq Break) (/seq (AugAssign (Name &eights:0 Store) Sub (Constant i1 None)) (If (Compare (Name &others:0 Load) (list GtE) (list (Constant i10 None))) (/seq (AugAssign (Name &others:0 Store) Sub (Constant i10 None)) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq (If (Compare (BinOp (Name &eights:0 Load) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (list GtE) (list (Constant i0 None))) (/seq (AugAssign (Name &eights:0 Store) Sub (BinOp (Constant i10 None) Sub (Name &others:0 Load))) (Assign (list (Name &others:0 Store)) (Constant i0 None) None) (AugAssign (Name &answer:0 Store) Add (Constant i1 None))) (/seq Break))))))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &answer:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_os None))) (Import (list (alias g_sys None))) (Import (list (alias g_math None))) (Import (list (alias g_heapq None))) (ImportFrom s_decimal (list (alias g_* None)) i0) (ImportFrom s_io (list (alias g_BytesIO None) (alias g_IOBase None)) i0) (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (FunctionDef &r:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil None None) (FunctionDef &rm:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &rl:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name &r:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &num:0 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Assign (list (Name &tot:0 Store)) (BinOp (Name &n:0 Load) Sub (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) None) (Assign (list (Name &strips:0 Store)) (BinOp (Name &tot:0 Load) FloorDiv (Constant i10 None)) None) (Assign (list (Name &rem:0 Store)) (BinOp (Name &tot:0 Load) Mod (Constant i10 None)) None) (If (Compare (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) (list LtE) (list (Name &strips:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load))) nil))) (/seq (Assign (list (Name &ans:0 Store)) (Name &strips:0 Load) None) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Sub (Name &strips:0 Load)) (AugAssign (Name &ans:0 Store) Add (BinOp (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load) FloorDiv (Constant i11 None))) (AugAssign (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Store) Mod (Constant i11 None)) (AugAssign (Name &ans:0 Store) Add (IfExp (Compare (BinOp (BinOp (Name &rem:0 Load) Add (Subscript (Name &num:0 Load) (_slice_content (Constant i8 None)) Load)) Sub (Constant i1 None)) (list GtE) (list (Constant i10 None))) (Constant i1 None) (Constant i0 None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))))))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) &n:0 &a:0 &k:0)) (Assign (list (Name &s:0 Store)) (Constant i0 None) None) (While (BoolOp And (list (Compare (Name &k:0 Load) (list Gt) (list (Constant i0 None))) (Compare (Name &n:0 Load) (list Gt) (list (Constant i10 None))))) (/seq (AugAssign (Name &s:0 Store) Add (Constant i1 None)) (AugAssign (Name &n:0 Store) Sub (Constant i11 None)) (AugAssign (Name &k:0 Store) Sub (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &a:0)) (Assign (list (Name &b:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (Name &a:0 Load)) (_starred_content (Name &b:0 Load))) nil))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_input Load) nil nil) &n:0 &s:0 &c:0)) (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)) None) (If (Compare (Name &c:0 Load) (list GtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &n:0 Load) FloorDiv (Constant i11 None)))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Name &s:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant s_8 None))) (/seq (Assign (list (Name &count:0 Store)) (BinOp (Name &count:0 Load) Add (Constant i1 None)) None)) (/seq))) (/seq) None) (If (Compare (Name &count:0 Load) (list NotEq) (list (Constant i0 None))) (/seq (Assign (list (Name &p:0 Store)) (BinOp (Name &N:0 Load) Div (Constant i11 None)) None) (If (Compare (Name &p:0 Load) (list Gt) (list (Name &count:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Name &p:0 Load))) nil))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) nil)"
    ],
    "inputs": [
      "22\n0011223344556677889988\n",
      "11\n00000000008\n",
      "11\n31415926535\n",
      "51\n882889888888689888850888388887688788888888888858888\n",
      "55\n7271714707719515303911625619272900050990324951111943573\n",
      "72\n888488888888823288848804883838888888887888888888228888218488897809784868\n",
      "65\n44542121362830719677175203560438858260878894083124543850593761845\n",
      "54\n438283821340622774637957966575424773837418828888614203\n",
      "100\n1976473621569903172721407763737179639055561746310369779167351419713916160700096173622427077757986026\n",
      "100\n2833898888858387469888804083887280788584887487186899808436848018181838884988432785338497585788803883\n",
      "42\n885887846290886288816884858898812858495482\n",
      "75\n878909759892888846183608689257806813376950958863798487856148633095072259838\n",
      "11\n55814018693\n",
      "31\n0868889888343881888987888838808\n",
      "21\n888888888888000000000\n",
      "62\n18888883884288488882387888486858887882838885288886472818688888\n",
      "77\n11111111111111111111111111111111111111111111111111111111111111111111111111111\n",
      "30\n888888888888888888888888888888\n",
      "64\n8885984815868480968883818886281846682409262501034555933863969284\n",
      "44\n15920309219313427633220119270900111650391207\n",
      "97\n4088468966684435599488804806521288358953088399738904557539253573051442198885776802972628197705081\n",
      "100\n8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
      "50\n88888888888888888888888888888888888888888888888888\n",
      "20\n88888888888888888888\n",
      "32\n88888888888888888888888888888888\n",
      "82\n8889809888888888485881851986857288588888888881988888868888836888887858888888888878\n",
      "91\n8828880888888884883888488888888888888881888888888884888888848588888808888888888888888880888\n",
      "87\n311753415808202195240425076966761033489788093280714672959929008324554784724650182457298\n",
      "85\n6888887655188885918863889822590788834182048952565514598298586848861396753319582883848\n",
      "100\n8088888818885808888888848829886788884187188858898888888788988688884828586988888888288078638898728181\n",
      "21\n888111111111111111111\n",
      "1\n8\n",
      "93\n888088898748888038885888818882806848806887888888882087481868888888177809288888889648468888188\n",
      "77\n11233392925013001334679215120076714945221576003953746107506364475115045309091\n",
      "40\n8888888888888888888888888888888888888888\n",
      "33\n888800000000000000000000000000000\n",
      "21\n881234567900123456790\n",
      "98\n87247250157776241281197787785951754485531639139778166755966603305697265958800376912432893847612736\n",
      "90\n888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\n",
      "22\n4215079217017196952791\n",
      "99\n509170332523502565755650047942914747120102240396245453406790272793996913905060450414255616791704320\n",
      "96\n812087553199958040928832802441581868680188987878748641868838838835609806814288472573117388803351\n",
      "1\n0\n",
      "100\n8888888888828188888888888888888808888888888888888888891888888768888888888288888885886888838888888888\n",
      "11\n80000000000\n",
      "86\n84065885114540280210185082984888812185222886689129308815942798404861082196041321701260\n",
      "92\n86888880558884738878888381088888888895888881888888888368878888888884888768881888888888808888\n",
      "76\n7900795570936733366353829649382870728119825830883973668601071678041634916557\n",
      "32\n88000000000000000000000000000000\n",
      "70\n8888888888888888888888888888888888888888888888888888888888888888888888\n",
      "11\n88888888888\n",
      "21\n888000000000000000000\n",
      "66\n747099435917145962031075767196746707764157706291155762576312312094\n",
      "22\n8899999999999999999999\n",
      "11\n81234567123\n",
      "41\n78888884888874788841882882888088888588888\n",
      "10\n8888888888\n",
      "100\n2867878187889776883889958480848802884888888878218089281860321588888888987288888884288488988628618888\n",
      "66\n157941266854773786962397310504192100434183957442977444078457168272\n",
      "44\n30153452341853403190257244993442815171970194\n",
      "63\n728385948188688801288285888788852829888898565895847689806684688\n",
      "100\n1835563855281170226095294644116563180561156535623048783710060508361834822227075869575873675232708159\n",
      "21\n888888555555555555555\n",
      "100\n8881888389882878867888888888888888888886388888888870888884878888089888883898887888808688888487888888\n",
      "53\n85838985300863473289888099788588319484149888886832906\n",
      "60\n888888888888888888888888888888888888888888888888888888888888\n",
      "100\n8820286285185244938452488887088871457098945874486988698468788381417332842888928188688887641132194956\n",
      "11\n24572366390\n",
      "84\n181288888282608548858058871581888853888486785801381108858832882809848798828837386086\n",
      "32\n88257478884887437239023185588797\n",
      "99\n097167815527663544905782574817314139311067328533970663873718450545467450059059869618211361469505108\n",
      "43\n7404899846883344886153727489084158470112581\n",
      "100\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008\n",
      "8\n12345678\n",
      "88\n2694079127792970410465292300936220976260790323517221561516591792566791677970332966660472\n",
      "21\n582586788289484878588\n",
      "33\n270375004567749549929235905225024\n",
      "50\n88000000000000000000000000000000000000000000000000\n",
      "33\n429980628264468835720540136177288\n",
      "27\n888000000000000000000000000\n",
      "10\n8000000000\n",
      "74\n70988894874867688968816582886488688881063425288316858438189808828755218508\n",
      "22\n6188156585823394680191\n",
      "81\n808888883488887888888808888888888888188888888388888888888888868688888488888882888\n",
      "57\n888888888888888888888888888888888888888888888888888888888\n",
      "100\n6451941807833681891890004306065158148809856572066617888008875119881621810329816763604830895480467878\n",
      "83\n88584458884288808888588388818938838468960248387898182887888867888888888886088895788\n",
      "11\n81234567090\n",
      "21\n880000000000000000000\n",
      "94\n8188948828818938226378510887848897889883818858778688882933888883888898198978868888808082461388\n",
      "52\n8878588869084488848898838898788838337877898817818888\n",
      "61\n8880888836888988888988888887388888888888868898887888818888888\n",
      "71\n88888888888888888888888188888805848888788088888883888883187888838888888\n",
      "95\n29488352815808808845913584782288724288898869488882098428839370889284838688458247785878848884289\n",
      "73\n2185806538483837898808836883483888818818988881880688028788888081888907898\n",
      "80\n88888888888888888888888888888888888888888888888888888888888888888888888888888888\n",
      "55\n3982037603326093160114589190899881252765957832414122484\n",
      "100\n8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\n",
      "51\n1732111733638718702525811518175029394157760329139501\n",
      "55\n8150965228922987149322123425550549439018369681986057802\n"
    ],
    "outputs": [
      "2\n",
      "1\n",
      "0\n",
      "4\n",
      "0\n",
      "6\n",
      "5\n",
      "4\n",
      "1\n",
      "9\n",
      "3\n",
      "6\n",
      "1\n",
      "2\n",
      "1\n",
      "5\n",
      "0\n",
      "2\n",
      "5\n",
      "0\n",
      "8\n",
      "2\n",
      "4\n",
      "1\n",
      "2\n",
      "7\n",
      "8\n",
      "7\n",
      "7\n",
      "9\n",
      "1\n",
      "0\n",
      "8\n",
      "0\n",
      "3\n",
      "3\n",
      "1\n",
      "8\n",
      "8\n",
      "0\n",
      "0\n",
      "8\n",
      "0\n",
      "9\n",
      "1\n",
      "7\n",
      "8\n",
      "6\n",
      "2\n",
      "6\n",
      "1\n",
      "1\n",
      "0\n",
      "2\n",
      "1\n",
      "3\n",
      "0\n",
      "9\n",
      "5\n",
      "2\n",
      "5\n",
      "9\n",
      "1\n",
      "9\n",
      "4\n",
      "5\n",
      "9\n",
      "0\n",
      "7\n",
      "2\n",
      "9\n",
      "3\n",
      "1\n",
      "0\n",
      "0\n",
      "1\n",
      "0\n",
      "2\n",
      "3\n",
      "2\n",
      "0\n",
      "6\n",
      "2\n",
      "7\n",
      "5\n",
      "9\n",
      "7\n",
      "1\n",
      "1\n",
      "8\n",
      "4\n",
      "5\n",
      "6\n",
      "8\n",
      "6\n",
      "7\n",
      "5\n",
      "9\n",
      "4\n",
      "5\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Lt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Gt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) FloorDiv (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None)))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))) nil) Mult (Name &d:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load)))) nil))))))))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &k:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None)) Mult (Name &d:0 Load)))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None)) Mult (Name &d:0 Load)))) nil))))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:1 Load) FloorDiv (Name &d:1 Load)) Add (Constant i1 None)) Mult (Name &d:1 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &count:2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &count:2 Load))) nil) (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load))) nil))) nil))) (/seq) None)) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &b:0 Load) FloorDiv (Name &c:0 Load)) Add (Constant i1 None)) Mult (Name &c:0 Load)))) nil))))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None)) Mult (Name &d:0 Load)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &q:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &u:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) Add (Constant i1 None)) Mult (Name &d:0 Load)))) nil))) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq))))))) (/seq) None)) nil)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name %2 Load) FloorDiv (Name %1 Load)) Add (Constant i1 None)) Mult (Name %1 Load)))) nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(Assign (list (Tuple #0 Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "[L]"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) #0 (/seq) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "seqS"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      },
      {
        "body": "(Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      }
    ],
    "rewritten": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &A:0 Store)) (BinOp (Name &A:0 Load) Add (List (list (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) Load)) None)) (/seq) None) (For (Name &a:0 Store) (Name &A:0 Load) (/seq (If (BoolOp Or (list (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Lt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load))) nil))) (Compare (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) (list Gt) (list (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil))))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil) Mult (BinOp (BinOp (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load))) nil) FloorDiv (Call (Name g_int Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Constant i2 None)) Load))) nil)) Add (Constant i1 None))))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (For (Name &_:0 Store) (fn_4) (/seq (fn_2 (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store)))) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Lt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (Compare (Name &r:0 Load) (list Eq) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (Constant i2 None)))) nil))) (/seq (If (Compare (BinOp (Name &r:0 Load) Mod (Name &d:0 Load)) (list NotEq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (Name &r:0 Load) Div (Name &d:0 Load)))) nil) Mult (Name &d:0 Load)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Name &d:0 Load)))) nil))))))))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &k:0 Store) (fn_4) (/seq (fn_2 (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store)))) (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i1 None))) (/seq (If (Compare (Name &l:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &r:0 Load) Add (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))))) (/seq (If (Compare (Name &l:0 Load) (list GtE) (list (Name &d:0 Load))) (/seq (If (Compare (BinOp (Name &l:0 Load) Mod (Name &d:0 Load)) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (BinOp (Name &l:0 Load) FloorDiv (Name &d:0 Load)) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))))) (fn_1 &d:0 &r:0))))) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_3 (/seq (fn_2 (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store)))) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) FloorDiv (Name &d:0 Load)) Mult (Name &d:0 Load)))) nil))))) &t:0 &i:0))) nil)",
      "(Module (/seq (FunctionDef &func:0 (arguments nil (list (arg &l:1 None None) (arg &r:1 None None) (arg &d:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &l:1 Load) (list LtE) (list (Name &d:1 Load))) (fn_1 &d:1 &r:1) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:1 Load))) nil))))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (/splice (fn_3 (/seq (Assign (list (Name &arr:2 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Expr (Call (Name &func:0 Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i0 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i1 None)) Load))) nil)) (_starred_content (Call (Name g_int Load) (list (_starred_content (Subscript (Name &arr:2 Load) (_slice_content (Constant i2 None)) Load))) nil))) nil))) &count:2 &_:2))) nil None None) (Expr (Call (Name &main:0 Load) nil nil))) nil)",
      "(Module (/seq (/splice (fn_3 (/seq (Assign (list (Name &inputs:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i0 None)) Load))) nil) None) (Assign (list (Name &r:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i1 None)) Load))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &inputs:0 Load) (_slice_content (Constant i2 None)) Load))) nil) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &r:0 Load) FloorDiv (Name &d:0 Load)) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &d:0 Load) Mult (BinOp (Name &x:0 Load) Add (Constant i1 None))))) nil))))) &q:0 &i:0))) nil)",
      "(Module (/seq (/splice (fn_3 (/seq (fn_2 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)))) (If (Compare (Name &c:0 Load) (list Gt) (list (Name &b:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (/seq (If (Compare (Name &c:0 Load) (list Lt) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) (fn_1 &c:0 &b:0))))) &n:0 &i:0))) nil)",
      "(Module (/seq (/splice (fn_3 (/seq (fn_2 (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store)))) (Expr (Constant s-Wzk3LCAzMiwgNjEsIDMyLCAxMDgsIDMyLCA0NywgNDcsIDMyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTgsIDMyLCA2MSwgMzIsIDExNCwgMzIsIDQ3LCA0NywgMzIsIDEwMCwgMTAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYxLCAzMiwgOTcsIDQyLCAxMDAsIDEwLCAzMiwgMzIsIDMyLCAzMiwgOTcsIDExMCwgMTE1LCA1MCwgMzIsIDYxLCAzMiwgOTgsIDQyLCAxMDAsIDEwLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDEwNSwgMTAyLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDYwLCAzMiwgMTA4LCAzMiwgOTcsIDExMCwgMTAwLCAzMiwgOTcsIDExMCwgMTE1LCA0OSwgMzIsIDMzLCA2MSwgMzIsIDQ4LCA1OCwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDQ5LCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDUsIDEwMiwgMzIsIDk3LCAxMTAsIDExNSwgNTAsIDMyLCA2MiwgMzIsIDExNCwgNTgsIDEwLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMTIsIDExNCwgMTA1LCAxMTAsIDExNiwgNDAsIDk3LCAxMTAsIDExNSwgNTAsIDQxLCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAxMDEsIDEwOCwgMTE1LCAxMDEsIDU4LCAxMCwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMzIsIDMyLCAzMiwgMTEyLCAxMTQsIDEwNSwgMTEwLCAxMTYsIDQwLCA5NywgMTEwLCAxMTUsIDUwLCA0MywgMTAwLCA0MSwgMTAsIDMyLCAzMiwgMzIsIDMyLCAzMl0= None)) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (fn_1 &d:0 &r:0))) &n:0 &i:0))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (/splice (fn_3 (/seq (Assign (list (Tuple (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (If (Compare (Name &l:0 Load) (list Gt) (list (Name &d:0 Load))) (/seq (Assign (list (Name &ans:0 Store)) (Name &d:0 Load) None)) (/seq (Assign (list (Name &ans:0 Store)) (BinOp (BinOp (Name &r:0 Load) Add (Name &d:0 Load)) Sub (BinOp (Name &r:0 Load) Mod (Name &d:0 Load))) None))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &ans:0 Load))) nil))) &q:0 &i:0))) nil)",
      "(Module (/seq (For (Name &u:0 Store) (fn_4) (/seq (fn_2 (list (_starred_content (Name &l:0 Store)) (_starred_content (Name &r:0 Store)) (_starred_content (Name &d:0 Store)))) (If (Compare (Name &d:0 Load) (list Lt) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq (If (BoolOp And (list (Compare (Name &d:0 Load) (list GtE) (list (Name &l:0 Load))) (Compare (Name &d:0 Load) (list LtE) (list (Name &r:0 Load))))) (fn_1 &d:0 &r:0) (/seq (If (Compare (Name &d:0 Load) (list Gt) (list (Name &r:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &d:0 Load))) nil))) (/seq))))))) (/seq) None)) nil)"
    ],
    "inputs": [
      "5\n2 4 2\n5 10 4\n3 10 1\n1 2 3\n4 6 5\n",
      "20\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n1 1000000000 2\n",
      "1\n78 79 79\n",
      "1\n6 6 6\n",
      "20\n1 1 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n",
      "1\n78 1000 1\n",
      "1\n77 10000 1\n",
      "20\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "10\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "1\n78 80 1\n",
      "20\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n",
      "1\n1 1 123456789\n",
      "1\n80 100 1\n",
      "5\n1000000000 1000000000 1\n1000000000 1000000000 1\n1000000000 1000000000 1\n1000000000 1000000000 1\n1000000000 1000000000 1\n",
      "1\n78 10000 1\n",
      "1\n79 80 100\n",
      "5\n1 1000000000 1\n1 999999999 1\n1 999999998 1\n1 999999997 1\n1 999999996 1\n",
      "5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n",
      "30\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n",
      "1\n78 89 34\n",
      "1\n1 1 1\n",
      "1\n1 3 2\n",
      "10\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n1 999999998 1\n",
      "4\n1 999999999 1\n1 999999998 1\n1 999999997 1\n1 999999996 1\n",
      "5\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "2\n1 1 2\n1 1 2\n",
      "1\n80 100 80\n",
      "25\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n",
      "30\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "16\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "1\n1 1000000000 6\n",
      "1\n5 5 5\n",
      "1\n2 5 6\n",
      "8\n1 999999998 1\n1 999999997 1\n1 999999996 1\n1 999999995 1\n1 999999994 1\n1 999999993 1\n1 999999992 1\n1 999999991 1\n",
      "5\n80 100 10\n5 10 4\n3 10 1\n1 2 3\n4 6 5\n",
      "1\n1 1000000000 1017\n",
      "1\n1 1000000000 2\n",
      "1\n78 1 79\n",
      "1\n2 6 6\n",
      "20\n1 1 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 832136582 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n1 999999999 1\n",
      "1\n78 1100 1\n",
      "1\n77 10000 2\n",
      "20\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000100000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "10\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000010 1\n1 1000000000 1\n",
      "20\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000010 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n1 1000000000 3\n",
      "1\n0 1 123456789\n",
      "5\n1000000000 1000000000 1\n1000000000 1000000000 1\n1000000000 1100000000 1\n1000000000 1000000000 1\n1000000000 1000000000 1\n",
      "1\n79 144 100\n",
      "5\n1 1000000000 1\n1 999999999 1\n1 999999998 1\n2 999999997 1\n1 999999996 1\n",
      "5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 4 5\n",
      "30\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 749549584 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n",
      "1\n69 89 34\n",
      "1\n0 3 2\n",
      "4\n1 999999999 1\n1 999999998 2\n1 999999997 1\n1 999999996 1\n",
      "5\n1 1000000000 1\n2 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "2\n1 1 4\n1 1 2\n",
      "1\n80 000 80\n",
      "25\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 639799271 1000000000\n5 6 5\n",
      "30\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 2\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "16\n1 1000000000 1\n1 1000000000 1\n1 1000100000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "1\n1 1000010000 2\n",
      "1\n5 5 6\n",
      "8\n1 999999998 1\n1 999999997 1\n1 999999996 1\n1 999999995 1\n1 999999994 1\n1 999999993 1\n1 999999992 2\n1 999999991 1\n",
      "5\n80 101 10\n5 10 4\n3 10 1\n1 2 3\n4 6 5\n",
      "1\n1 1000000010 1017\n",
      "1\n1 1000000000 4\n",
      "5\n2 4 2\n5 10 4\n3 10 1\n2 2 3\n4 6 5\n",
      "1\n78 1 125\n",
      "20\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n2 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000100000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "1\n79 263 100\n",
      "5\n1 1100000000 1\n1 999999999 1\n1 999999998 1\n2 999999997 1\n1 999999996 1\n",
      "5\n2 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 4 5\n",
      "1\n69 89 56\n",
      "4\n1 474817329 1\n1 999999998 2\n1 999999997 1\n1 999999996 1\n",
      "1\n80 000 109\n",
      "25\n1 1000000000 1\n1 0000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 999999999 1000000000\n5 6 5\n1 1000000000 1\n1 1000000000 1000000000\n2 1000000000 1\n1 639799271 1000000000\n5 6 5\n",
      "16\n2 1000000000 1\n1 1000000000 1\n1 1000100000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n",
      "1\n5 5 8\n",
      "8\n1 999999998 1\n1 999999997 1\n1 402421533 1\n1 999999995 1\n1 999999994 1\n1 999999993 1\n1 999999992 2\n1 999999991 1\n",
      "1\n1 1000000010 1391\n",
      "1\n1 1000001000 4\n",
      "1\n0 2 227752323\n",
      "1\n79 306 100\n",
      "5\n2 1100000000 1\n1 999999999 1\n1 999999998 1\n2 999999997 1\n1 999999996 1\n",
      "30\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 1467985723 2\n1 999999999 2\n1 749549584 2\n2 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n1 999999999 2\n",
      "1\n6 89 56\n",
      "1\n1 2 3\n",
      "4\n1 474817329 1\n1 999999998 2\n1 999999997 1\n2 999999996 1\n",
      "16\n2 1000000000 1\n1 1000000000 1\n1 1000100000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1000000000 1\n1 1001000000 1\n1 1000000000 1\n",
      "5\n62 101 10\n5 10 4\n1 10 1\n1 2 3\n4 6 5\n",
      "1\n1 1000000000 3\n",
      "5\n1100000000 1000000000 1\n1000000000 1000000000 1\n1000000000 1100000000 2\n1000000000 1000000001 1\n1000000000 1000000000 1\n",
      "1\n110 306 100\n",
      "5\n1 1100000000 1\n1 999999999 1\n1 999999998 1\n2 999999997 1\n1 440567035 1\n",
      "5\n2 1000000000 1\n1 1000000000 1001000000\n2 1000000000 1\n2 999999999 1000000000\n5 4 5\n",
      "4\n1 474817329 1\n1 999999998 1\n1 999999997 1\n2 999999996 1\n",
      "1\n4 4 7\n",
      "5\n62 101 10\n5 10 4\n1 10 2\n1 2 3\n4 6 5\n",
      "1\n0 1000000010 2440\n",
      "1\n1 1000000000 1\n"
    ],
    "outputs": [
      "6\n4\n1\n3\n10\n",
      "1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n",
      "158\n",
      "12\n",
      "2\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n",
      "1\n",
      "1\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1\n",
      "1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n",
      "123456789\n",
      "1\n",
      "1\n1\n1\n1\n1\n",
      "1\n",
      "100\n",
      "1000000001\n1000000000\n999999999\n999999998\n999999997\n",
      "1000000001\n2000000000\n1\n1000000000\n10\n",
      "1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n",
      "34\n",
      "2\n",
      "4\n",
      "999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n999999999\n",
      "1000000000\n999999999\n999999998\n999999997\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "2\n2\n",
      "160\n",
      "1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000000002\n",
      "10\n",
      "6\n",
      "999999999\n999999998\n999999997\n999999996\n999999995\n999999994\n999999993\n999999992\n",
      "10\n4\n1\n3\n10\n",
      "1000000845\n",
      "1000000002\n",
      "79\n",
      "12\n",
      "2\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n832136583\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n",
      "1\n",
      "2\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000100001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000011\n1000000001\n",
      "1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000011\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n1000000002\n",
      "123456789\n",
      "1\n1\n1\n1\n1\n",
      "200\n",
      "1000000001\n1000000000\n999999999\n1\n999999997\n",
      "1000000001\n2000000000\n1\n1000000000\n5\n",
      "1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n749549586\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n",
      "34\n",
      "4\n",
      "1000000000\n1000000000\n999999998\n999999997\n",
      "1000000001\n1\n1000000001\n1000000001\n1000000001\n",
      "4\n2\n",
      "80\n",
      "1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000002\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000000001\n1000000001\n1000100001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "1000010002\n",
      "6\n",
      "999999999\n999999998\n999999997\n999999996\n999999995\n999999994\n999999994\n999999992\n",
      "10\n4\n1\n3\n10\n",
      "1000000845\n",
      "1000000004\n",
      "6\n4\n1\n3\n10\n",
      "125\n",
      "1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000100001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "300\n",
      "1100000001\n1000000000\n999999999\n1\n999999997\n",
      "1\n2000000000\n1\n1000000000\n5\n",
      "56\n",
      "474817330\n1000000000\n999999998\n999999997\n",
      "109\n",
      "1000000001\n1000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n1000000001\n2000000000\n1\n1000000000\n10\n",
      "1\n1000000001\n1000100001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n",
      "8\n",
      "999999999\n999999998\n402421534\n999999996\n999999995\n999999994\n999999994\n999999992\n",
      "1000001028\n",
      "1000001004\n",
      "227752323\n",
      "400\n",
      "1\n1000000000\n999999999\n1\n999999997\n",
      "1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1467985724\n1000000000\n749549586\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000\n",
      "112\n",
      "3\n",
      "474817330\n1000000000\n999999998\n1\n",
      "1\n1000000001\n1000100001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1000000001\n1001000001\n1000000001\n",
      "10\n4\n11\n3\n10\n",
      "1000000002\n",
      "1\n1\n2\n1\n1\n",
      "100\n",
      "1100000001\n1000000000\n999999999\n1\n440567036\n",
      "1\n1001000000\n1\n1000000000\n5\n",
      "474817330\n999999999\n999999998\n1\n",
      "7\n",
      "10\n4\n12\n3\n10\n",
      "1000002280\n",
      "1000000001\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Name &m:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &l:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Constant i2 None) (list In) (list (Name &l:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))) (/seq) None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))) nil)) (Assign (list (Name &n:3 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:3 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:3 Store)) (_starred_content (Name &v:3 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &_:4 Load))) nil) (list (comprehension (Name &_:4 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &u:3 Load)) Load) s_append Load) (list (_starred_content (Name &v:3 Load))) nil)) (Expr (Call (Attribute (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &v:3 Load)) Load) s_append Load) (list (_starred_content (Name &u:3 Load))) nil)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &u:3 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &v:3 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:3 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_done Load) (_slice_content (Name &i:3 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:5 Load)) Load))) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load))) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) (/seq))) (/seq) None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil)) (Assign (list (Name &cnt:3 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:3 Load) Add (Constant i1 None))) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (_slice_content (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &deg:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &deg:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &d:0 Store) (Name &deg:0 Load) (/seq (If (Compare (Name &d:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Name &valid:1 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &tree_nums:0 Store)) (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a1:0 Store)) (_starred_content (Name &a2:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a1:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &tree_nums:0 Load) (_slice_content (BinOp (Name &a2:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) (/seq))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &gr:0 Store)) (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &gr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &gr:0 Load) (/seq (If (Compare (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i1 None))) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &a:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &arr:0 Load) (_slice_content (Name &b:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:2 Load))) nil) (list (comprehension (Name &i:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &u:0 Load)) Load) s_append Load) (list (_starred_content (Name &v:0 Load))) nil)) (Expr (Call (Attribute (Subscript (Name &g:0 Load) (_slice_content (Name &v:0 Load)) Load) s_append Load) (list (_starred_content (Name &u:0 Load))) nil)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &u:0 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &d:0 Load) (_slice_content (Name &v:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Constant i2 None) (list In) (list (Name &edges:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &u:0 Store)) (_starred_content (Name &v:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &u:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &v:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (For (Name &i:0 Store) (Name &l:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) nil nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) ?0 (AugAssign (Subscript (Name %2 Load) #1 Store) Add (Constant i1 None)) (AugAssign (Subscript (Name %2 Load) #2 Store) Add (Constant i1 None))) (/seq) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E",
          "SliceRoot",
          "SliceRoot"
        ],
        "dfa_choicevars": [
          "seqS"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      },
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content #0)) nil) None) ?0 (For (Name %5 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name %4 Store)) (_starred_content (Name %3 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %2 Load))) nil) (list (comprehension (Name %2 Store) (Call (Attribute #0 s_split Load) nil nil) nil i0))) None) (Expr (Call (Attribute (Subscript #1 (_slice_content (Name %4 Load)) Load) s_append Load) (list (_starred_content (Name %3 Load))) nil)) (Expr (Call (Attribute (Subscript #1 (_slice_content (Name %3 Load)) Load) s_append Load) (list (_starred_content (Name %4 Load))) nil)) (AugAssign (Subscript #2 (_slice_content (Name %4 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript #2 (_slice_content (Name %3 Load)) Store) Add (Constant i1 None))) (/seq) None))",
        "sym_arity": 5,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E",
          "E",
          "E"
        ],
        "dfa_choicevars": [
          "seqS"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      },
      {
        "body": "(/subseq (For (Name %2 Store) (Name %1 Load) (/seq (If (Compare #1 (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) (Expr (Call (Name g_exit Load) #0 nil))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "[StarredRoot]",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      },
      {
        "body": "(For (Name %1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Subscript #0 (_slice_content (Name %1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))) None)",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(If (Compare (Constant i2 None) (list In) (list (Name %1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil))))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      },
      {
        "body": "(BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name %1 Load) Add (Constant i1 None)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      },
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s_YES None))) nil)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Constant s_NO None))) nil))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      },
      {
        "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &m:0 Load) Add (Constant i1 None)))) nil) nil i0))) (_slice_content (Name &a:0 Load)) (_slice_content (Name &b:0 Load)) &m:0 &l:0 &b:0 &a:0 &_:0 (/choiceseq))) (fn_5 &l:0)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ClassDef &D1AddOnATree:0 nil nil (/seq (FunctionDef &dfs:1 (arguments nil (list (arg &self:2 None None) (arg &start:2 None None)) None nil nil None nil) (/seq (Assign (list (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &start:2 Load)) Store)) (Constant i1 None) None) (For (Name &x:2 Store) (Subscript (Attribute (Name &self:2 Load) s_adj Load) (_slice_content (Name &start:2 Load)) Load) (/seq (If (Subscript (Attribute (Name &self:2 Load) s_done Load) (_slice_content (Name &x:2 Load)) Load) (/seq Continue) (/seq)) (Assign (list (Subscript (Attribute (Name &self:2 Load) s_par Load) (_slice_content (Name &x:2 Load)) Store)) (Name &start:2 Load) None) (Expr (Call (Attribute (Name &self:2 Load) s_dfs Load) (list (_starred_content (Name &x:2 Load))) nil))) (/seq) None)) nil None None) (FunctionDef &solve:1 (arguments nil (list (arg &self:3 None None)) None nil nil None nil) (/seq (ImportFrom s_collections (list (alias &defaultdict:3 None)) i0) (Import (list (alias &sys:3 None))) (Expr (Call (Attribute (Name &sys:3 Load) s_setrecursionlimit Load) (list (_starred_content (BinOp (BinOp (Constant i10 None) Pow (Constant i5 None)) Add (Constant i5 None)))) nil)) (/splice (fn_2 (Call (Name &input:0 Load) nil nil) (Attribute (Name &self:3 Load) s_adj Load) (Attribute (Name &self:3 Load) s_done Load) &n:3 &_:4 &v:3 &u:3 &i:3 (/choiceseq (Assign (list (Attribute (Name &self:3 Load) s_adj Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_list Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_par Store)) (Call (Name &defaultdict:3 Load) (list (_starred_content (Name g_int Load))) nil) None) (Assign (list (Attribute (Name &self:3 Load) s_done Store)) (fn_6 &n:3) None)))) (fn_4 (Attribute (Name &self:3 Load) s_done Load) &i:3 &n:3) (Return None) (Assign (list (Name &v:3 Store)) (Call (Name g_max Load) (list (_starred_content (GeneratorExp (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:5 Load)) Load))) nil) (list (comprehension (Name &p:5 Store) (Attribute (Name &self:3 Load) s_adj Load) nil i0))))) nil) None) (Assign (list (Name &start:3 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &p:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &p:3 Load)) Load))) nil) (list Eq) (list (Name &v:3 Load))) (/seq (Assign (list (Name &start:3 Store)) (Name &p:3 Load) None) Break) (/seq))) (/seq) None) (Assert (Compare (Name &start:3 Load) (list NotEq) (list (UnaryOp USub (Constant i1 None)))) None) (Expr (Call (Attribute (Name &self:3 Load) s_dfs Load) (list (_starred_content (Name &start:3 Load))) nil)) (Assign (list (Name &cnt:3 Store)) (fn_6 &n:3) None) (For (Name &k:3 Store) (Attribute (Name &self:3 Load) s_adj Load) (/seq (If (Compare (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load) (list Eq) (list (Constant i0 None))) (/seq Continue) (/seq)) (If (Compare (Call (Name g_len Load) (list (_starred_content (Subscript (Attribute (Name &self:3 Load) s_adj Load) (_slice_content (Name &k:3 Load)) Load))) nil) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Subscript (Name &cnt:3 Load) (_slice_content (Subscript (Attribute (Name &self:3 Load) s_par Load) (_slice_content (Name &k:3 Load)) Load)) Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Assign (list (Name &ans:3 Store)) (Constant i0 None) None) (For (Name &x:3 Store) (Name &cnt:3 Load) (/seq (If (Compare (Name &x:3 Load) (list Eq) (list (Constant i1 None))) (/seq (AugAssign (Name &ans:3 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &ans:3 Load) (list Eq) (list (Constant i0 None))) (fn_7) (/seq (fn_8)))) nil None None)) nil) (Assign (list (Name &solver:0 Store)) (Call (Name &D1AddOnATree:0 Load) nil nil) None) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Expr (Call (Attribute (Name &solver:0 Load) s_solve Load) nil nil))) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) (_slice_content (Name &u:0 Load)) (_slice_content (Name &v:0 Load)) &n:0 &deg:0 &v:0 &u:0 &i:0 (/choiceseq (AugAssign (Name &u:0 Store) Sub (Constant i1 None)) (AugAssign (Name &v:0 Store) Sub (Constant i1 None))))) (/splice (fn_3 (list (_starred_content (Constant i0 None))) (Name &d:0 Load) &deg:0 &d:0))) nil)",
      "(Module (/seq (ImportFrom s_collections (list (alias g_defaultdict None) (alias g_deque None)) i0) (ImportFrom s_heapq (list (alias g_heappush None) (alias g_heappop None)) i0) (ImportFrom s_math (list (alias g_inf None)) i0) (Assign (list (Name &ri:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (fn_9)) None) (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cnt:1 Store)) (Call (Name g_defaultdict Load) (list (_starred_content (Name g_int Load))) nil) None) (For (Name &_:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:1 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:1 Store)) (_starred_content (Name &y:1 Store))) Store)) (Call (Name &ri:0 Load) nil nil) None) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &cnt:1 Load) (_slice_content (Name &y:1 Load)) Store) Add (Constant i1 None))) (/seq) None) (Assign (list (Name &valid:1 Store)) (Constant True None) None) (For (Name &x:1 Store) (Name &cnt:1 Load) (/seq (If (Compare (Subscript (Name &cnt:1 Load) (_slice_content (Name &x:1 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &valid:1 Store)) (Constant False None) None)) (/seq))) (/seq) None) (If (Name &valid:1 Load) (fn_7) (/seq (fn_8)))) nil None None) (Assign (list (Name &t:0 Store)) (Constant i1 None) None) (While (Name &t:0 Load) (/seq (AugAssign (Name &t:0 Store) Sub (Constant i1 None)) (Expr (Call (Name &solve:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_1 (ListComp (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) (_slice_content (BinOp (Name &a1:0 Load) Sub (Constant i1 None))) (_slice_content (BinOp (Name &a2:0 Load) Sub (Constant i1 None))) &n:0 &tree_nums:0 &a2:0 &a1:0 &i:0 (/choiceseq))) (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i2 None))) (fn_7) (/seq (If (Compare (Name &n:0 Load) (list Eq) (list (Constant i3 None))) (/seq (fn_8)) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant False None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &tree_nums:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant i2 None))) (/seq (Assign (list (Name &ans_is_no:0 Store)) (Constant True None) None) (fn_8) Break) (/seq))) (/seq) None) (If (UnaryOp Not (Name &ans_is_no:0 Load)) (fn_7) (/seq))))))) nil)",
      "(Module (/seq (/splice (fn_1 (DictComp (Name &i:1 Load) (Constant i0 None) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) (_slice_content (Name &a:0 Load)) (_slice_content (Name &b:0 Load)) &n:0 &gr:0 &b:0 &a:0 &i:0 (/choiceseq))) (/splice (fn_3 (list (_starred_content (Constant i0 None))) (Subscript (Name &gr:0 Load) (_slice_content (Name &i:0 Load)) Load) &gr:0 &i:0))) nil)",
      "(Module (/seq (/splice (fn_1 (fn_6 &n:0) (_slice_content (Name &a:0 Load)) (_slice_content (Name &b:0 Load)) &n:0 &arr:0 &b:0 &a:0 &_:0 (/choiceseq))) (fn_4 (Name &arr:0 Load) &i:0 &n:0)) nil)",
      "(Module (/seq (/splice (fn_2 (Call (Name g_input Load) nil nil) (Name &g:0 Load) (Name &d:0 Load) &n:0 &i:2 &v:0 &u:0 &i:0 (/choiceseq (Assign (list (Name &g:0 Store)) (ListComp (List nil Load) (list (comprehension (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Name &d:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i100001 None)) None)))) (For (Name &i:0 Store) (Name &d:0 Load) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i2 None))) (/seq (fn_8) Break) (/seq))) (fn_7) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &edges:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (fn_9))) nil) None) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &a:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None)) (AugAssign (Subscript (Name &edges:0 Load) (_slice_content (BinOp (Name &b:0 Load) Sub (Constant i1 None))) Store) Add (Constant i1 None))) (/seq) None) (fn_5 &edges:0)) nil)",
      "(Module (/seq (/splice (fn_1 (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) (_slice_content (BinOp (Name &u:0 Load) Sub (Constant i1 None))) (_slice_content (BinOp (Name &v:0 Load) Sub (Constant i1 None))) &n:0 &l:0 &v:0 &u:0 &i:0 (/choiceseq))) (/splice (fn_3 nil (Name &i:0 Load) &l:0 &i:0))) nil)"
    ],
    "inputs": [
      "2\n1 2\n",
      "3\n1 2\n2 3\n",
      "5\n1 2\n1 3\n1 4\n2 5\n",
      "6\n1 2\n1 3\n1 4\n2 5\n2 6\n",
      "50\n16 4\n17 9\n31 19\n22 10\n8 1\n40 30\n3 31\n20 29\n47 27\n22 25\n32 34\n12 15\n40 32\n10 33\n47 12\n6 24\n46 41\n14 23\n12 35\n31 42\n46 28\n31 20\n46 37\n1 39\n29 49\n37 47\n40 6\n42 36\n47 2\n24 46\n2 13\n8 45\n41 3\n32 17\n4 7\n47 26\n28 8\n41 50\n34 44\n33 21\n25 5\n16 40\n3 14\n8 18\n28 11\n32 22\n2 38\n3 48\n44 43\n",
      "10\n8 1\n1 2\n8 9\n8 5\n1 3\n1 10\n1 6\n1 7\n8 4\n",
      "5\n5 1\n5 4\n4 3\n1 2\n",
      "7\n1 2\n2 3\n1 4\n1 5\n3 6\n3 7\n",
      "3\n1 3\n2 3\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n59 29\n53 9\n38 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n30 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n26 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n2 3\n3 4\n3 5\n1 6\n1 7\n",
      "20\n19 16\n19 18\n20 7\n9 4\n6 17\n14 2\n9 15\n2 13\n5 11\n19 12\n12 20\n16 9\n11 8\n19 5\n3 1\n19 14\n5 3\n12 10\n19 6\n",
      "7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n",
      "10\n9 5\n7 1\n9 10\n7 2\n5 4\n9 6\n2 9\n10 8\n1 3\n",
      "4\n2 4\n2 3\n2 1\n",
      "4\n1 4\n3 2\n1 3\n",
      "3\n1 2\n1 3\n",
      "5\n1 2\n1 5\n1 3\n1 4\n",
      "20\n14 9\n12 13\n10 15\n2 1\n20 19\n16 6\n16 3\n17 14\n3 5\n2 11\n3 10\n15 8\n14 2\n6 4\n3 20\n5 18\n1 7\n1 16\n4 12\n",
      "20\n7 5\n14 13\n17 6\n3 8\n16 12\n18 9\n3 18\n14 1\n17 3\n15 2\n17 4\n9 11\n2 7\n15 17\n3 20\n16 10\n17 14\n2 16\n1 19\n",
      "8\n1 2\n2 3\n3 4\n1 7\n1 8\n4 5\n4 6\n",
      "5\n5 1\n5 2\n5 3\n5 4\n",
      "50\n49 6\n43 7\n1 27\n19 35\n15 37\n16 12\n19 21\n16 28\n49 9\n48 39\n13 1\n2 48\n9 50\n44 3\n41 32\n48 31\n49 33\n6 11\n13 20\n49 22\n13 41\n48 29\n13 46\n15 47\n34 2\n49 13\n48 14\n34 24\n16 36\n13 40\n49 34\n49 17\n43 25\n11 23\n10 15\n19 26\n34 44\n16 42\n19 18\n46 8\n29 38\n1 45\n12 43\n13 16\n46 30\n15 5\n49 10\n11 19\n32 4\n",
      "20\n13 1\n18 2\n3 7\n18 5\n20 16\n3 12\n18 9\n3 10\n18 11\n13 6\n3 18\n20 15\n20 17\n3 13\n3 4\n13 14\n3 20\n18 8\n3 19\n",
      "10\n8 2\n5 6\n1 8\n2 9\n1 4\n8 10\n10 5\n2 7\n2 3\n",
      "50\n16 4\n17 9\n31 19\n3 10\n8 1\n40 30\n3 31\n20 29\n47 27\n22 25\n32 34\n12 15\n40 32\n10 33\n47 12\n6 24\n46 41\n14 23\n12 35\n31 42\n46 28\n31 20\n46 37\n1 39\n29 49\n37 47\n40 6\n42 36\n47 2\n24 46\n2 13\n8 45\n41 3\n32 17\n4 7\n47 26\n28 8\n41 50\n34 44\n33 21\n25 5\n16 40\n3 14\n8 18\n28 11\n32 22\n2 38\n3 48\n44 43\n",
      "7\n1 2\n1 3\n2 4\n2 5\n1 6\n2 7\n",
      "5\n5 1\n5 4\n4 3\n2 2\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n59 29\n53 9\n38 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n26 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n2 4\n3 4\n3 5\n1 6\n1 7\n",
      "7\n1 2\n1 3\n2 4\n2 5\n1 6\n3 7\n",
      "10\n9 5\n4 1\n9 10\n7 2\n5 4\n9 6\n2 9\n10 8\n1 3\n",
      "4\n3 4\n2 3\n2 1\n",
      "6\n1 2\n1 3\n2 4\n2 5\n2 6\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n59 29\n53 9\n38 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n49 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "10\n9 5\n4 1\n9 10\n7 1\n5 4\n9 6\n2 9\n10 8\n1 3\n",
      "6\n1 2\n1 3\n2 4\n4 5\n2 6\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n59 29\n53 9\n59 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n49 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n1 3\n2 4\n3 5\n1 6\n2 7\n",
      "6\n1 2\n1 3\n2 4\n4 5\n1 6\n",
      "60\n26 6\n59 30\n31 12\n32 3\n38 23\n59 29\n53 9\n59 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n49 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n1 1\n2 4\n3 5\n1 6\n2 7\n",
      "10\n8 1\n1 2\n8 9\n8 5\n1 3\n2 10\n1 6\n1 7\n8 4\n",
      "20\n19 16\n19 18\n20 7\n9 4\n6 17\n14 2\n9 15\n2 13\n5 11\n19 12\n12 20\n16 9\n11 8\n19 5\n3 1\n19 14\n5 3\n18 10\n19 6\n",
      "7\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n",
      "4\n4 4\n2 3\n2 1\n",
      "4\n1 4\n2 2\n1 3\n",
      "20\n14 9\n12 13\n10 15\n2 1\n20 19\n16 6\n16 3\n17 8\n3 5\n2 11\n3 10\n15 8\n14 2\n6 4\n3 20\n5 18\n1 7\n1 16\n4 12\n",
      "20\n7 5\n14 13\n17 6\n3 8\n16 12\n18 9\n3 18\n14 1\n17 3\n15 2\n17 4\n2 11\n2 7\n15 17\n3 20\n16 10\n17 14\n2 16\n1 19\n",
      "50\n49 6\n43 7\n1 27\n19 35\n15 37\n16 12\n19 21\n16 28\n49 9\n48 39\n13 1\n2 48\n9 50\n44 3\n41 32\n48 31\n49 33\n6 11\n13 20\n49 22\n13 41\n48 29\n13 46\n15 47\n34 2\n49 13\n48 14\n34 24\n16 36\n13 40\n49 34\n49 17\n43 25\n19 23\n10 15\n19 26\n34 44\n16 42\n19 18\n46 8\n29 38\n1 45\n12 43\n13 16\n46 30\n15 5\n49 10\n11 19\n32 4\n",
      "10\n1 2\n5 6\n1 8\n2 9\n1 4\n8 10\n10 5\n2 7\n2 3\n",
      "5\n1 3\n1 3\n1 4\n4 5\n",
      "50\n16 4\n17 9\n31 19\n3 10\n8 1\n40 30\n3 31\n20 29\n47 27\n22 25\n32 34\n12 15\n40 32\n20 33\n47 12\n6 24\n46 41\n14 23\n12 35\n31 42\n46 28\n31 20\n46 37\n1 39\n29 49\n37 47\n40 6\n42 36\n47 2\n24 46\n2 13\n8 45\n41 3\n32 17\n4 7\n47 26\n28 8\n41 50\n34 44\n33 21\n25 5\n16 40\n3 14\n8 18\n28 11\n32 22\n2 38\n3 48\n44 43\n",
      "5\n5 1\n5 4\n4 3\n2 3\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n55 29\n53 9\n38 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n26 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n1 3\n2 4\n2 5\n1 6\n1 7\n",
      "6\n1 2\n1 3\n2 4\n4 2\n2 6\n",
      "60\n26 6\n59 30\n31 12\n32 3\n38 23\n59 29\n53 9\n59 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n49 46\n17 33\n30 31\n30 39\n26 19\n24 36\n8 49\n38 14\n",
      "7\n1 2\n1 1\n3 4\n3 5\n1 6\n2 7\n",
      "10\n8 2\n1 2\n8 9\n8 5\n1 3\n2 10\n1 6\n1 7\n8 4\n",
      "4\n1 4\n2 2\n1 4\n",
      "20\n14 9\n12 13\n10 15\n2 1\n20 19\n16 6\n16 3\n17 8\n3 5\n2 11\n3 10\n2 8\n14 2\n6 4\n3 20\n5 18\n1 7\n1 16\n4 12\n",
      "20\n7 5\n14 14\n17 6\n3 8\n16 12\n18 9\n3 18\n14 1\n17 3\n15 2\n17 4\n2 11\n2 7\n15 17\n3 20\n16 10\n17 14\n2 16\n1 19\n",
      "50\n49 6\n43 7\n1 27\n19 35\n15 37\n16 12\n19 21\n16 28\n49 9\n48 39\n13 1\n2 48\n9 50\n44 3\n41 32\n48 31\n49 33\n6 11\n13 20\n49 22\n13 41\n48 29\n13 46\n15 47\n34 2\n49 13\n48 14\n34 24\n16 36\n23 40\n49 34\n49 17\n43 25\n19 23\n10 15\n19 26\n34 44\n16 42\n19 18\n46 8\n29 38\n1 45\n12 43\n13 16\n46 30\n15 5\n49 10\n11 19\n32 4\n",
      "5\n1 2\n1 3\n1 4\n4 5\n",
      "6\n1 2\n1 3\n2 4\n4 2\n1 6\n",
      "10\n8 2\n1 4\n8 9\n8 5\n1 3\n2 10\n1 6\n1 7\n8 4\n",
      "4\n1 4\n2 2\n2 4\n",
      "20\n14 9\n8 13\n10 15\n2 1\n20 19\n16 6\n16 3\n17 8\n3 5\n2 11\n3 10\n2 8\n14 2\n6 4\n3 20\n5 18\n1 7\n1 16\n4 12\n",
      "20\n7 5\n14 14\n17 6\n3 8\n16 12\n18 9\n3 18\n14 1\n11 3\n15 2\n17 4\n2 11\n2 7\n15 17\n3 20\n16 10\n17 14\n2 16\n1 19\n",
      "50\n49 6\n43 7\n1 27\n19 35\n15 37\n16 12\n19 21\n16 28\n49 17\n48 39\n13 1\n2 48\n9 50\n44 3\n41 32\n48 31\n49 33\n6 11\n13 20\n49 22\n13 41\n48 29\n13 46\n15 47\n34 2\n49 13\n48 14\n34 24\n16 36\n23 40\n49 34\n49 17\n43 25\n19 23\n10 15\n19 26\n34 44\n16 42\n19 18\n46 8\n29 38\n1 45\n12 43\n13 16\n46 30\n15 5\n49 10\n11 19\n32 4\n",
      "5\n1 1\n1 3\n1 4\n4 5\n",
      "10\n8 1\n1 2\n8 9\n7 5\n1 3\n1 10\n1 6\n1 7\n8 4\n",
      "7\n1 2\n3 3\n1 4\n1 5\n3 6\n3 7\n",
      "7\n1 2\n2 3\n3 5\n3 5\n1 6\n1 7\n",
      "7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n",
      "10\n9 5\n7 1\n9 10\n7 2\n9 4\n9 6\n2 9\n10 8\n1 3\n",
      "5\n1 2\n1 5\n2 3\n1 4\n",
      "8\n1 2\n2 3\n3 4\n1 7\n1 8\n4 5\n2 6\n",
      "50\n49 6\n43 7\n1 27\n19 35\n15 37\n16 12\n19 21\n16 28\n49 9\n48 39\n13 1\n2 48\n9 50\n44 3\n41 32\n48 31\n49 33\n6 11\n13 20\n49 22\n13 41\n1 29\n13 46\n15 47\n34 2\n49 13\n48 14\n34 24\n16 36\n13 40\n49 34\n49 17\n43 25\n11 23\n10 15\n19 26\n34 44\n16 42\n19 18\n46 8\n29 38\n1 45\n12 43\n13 16\n46 30\n15 5\n49 10\n11 19\n32 4\n",
      "5\n1 2\n1 3\n1 4\n1 5\n",
      "5\n5 1\n5 4\n4 2\n2 2\n",
      "7\n1 2\n2 4\n3 4\n5 5\n1 6\n1 7\n",
      "7\n1 2\n1 3\n2 1\n2 5\n1 6\n3 7\n",
      "6\n1 2\n2 3\n2 4\n4 5\n2 6\n",
      "6\n1 4\n1 3\n2 4\n4 5\n1 6\n",
      "10\n8 1\n1 2\n8 9\n8 5\n1 3\n3 10\n1 6\n1 7\n8 4\n",
      "10\n1 2\n5 6\n1 8\n2 9\n1 4\n8 10\n10 5\n2 7\n3 3\n",
      "5\n5 1\n1 4\n4 3\n2 3\n",
      "60\n26 6\n59 30\n31 12\n31 3\n38 23\n55 29\n53 9\n38 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n47 10\n53 60\n10 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n26 46\n17 33\n30 31\n26 39\n26 19\n24 36\n8 49\n38 14\n",
      "60\n26 6\n59 30\n31 12\n32 3\n38 23\n59 29\n53 9\n59 56\n53 54\n29 21\n17 55\n59 38\n26 16\n24 59\n24 25\n17 35\n24 41\n30 15\n31 27\n8 44\n26 5\n26 48\n8 32\n53 17\n3 34\n3 51\n20 28\n52 10\n53 60\n36 42\n24 53\n59 22\n53 40\n26 52\n36 4\n59 8\n29 37\n36 20\n17 47\n53 18\n3 50\n30 2\n17 7\n8 58\n59 1\n31 11\n24 26\n24 43\n53 57\n59 45\n47 13\n49 46\n17 33\n30 31\n30 39\n26 19\n24 36\n8 49\n38 14\n",
      "10\n8 2\n1 2\n8 9\n8 5\n1 3\n2 10\n1 6\n2 7\n8 4\n",
      "20\n14 9\n12 13\n10 15\n2 1\n20 19\n2 6\n16 3\n17 8\n3 5\n2 11\n3 10\n2 8\n14 2\n6 4\n3 20\n5 18\n1 7\n1 16\n4 12\n",
      "20\n7 5\n14 14\n17 6\n3 8\n16 12\n18 9\n3 18\n14 1\n17 3\n15 2\n17 4\n2 11\n2 7\n15 17\n3 17\n16 10\n17 14\n2 16\n1 19\n"
    ],
    "outputs": [
      "YES",
      "NO",
      "NO",
      "YES",
      "NO",
      "YES",
      "NO",
      "NO",
      "NO",
      "YES",
      "NO",
      "NO",
      "NO",
      "NO",
      "YES",
      "NO",
      "NO",
      "YES",
      "NO",
      "NO",
      "NO",
      "YES",
      "NO",
      "YES",
      "NO",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "NO\n",
      "YES\n",
      "NO\n",
      "NO\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &z:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &arr:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &min:0 Store)) (BinOp (Subscript (Name &arr:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &arr:0 Load) (_slice_content (Constant i1 None)) Load)) None) (Assign (list (Name &pos:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list GtE) (list (Name &min:0 Load))) (/seq (Assign (list (Name &pos:0 Store)) (Constant False None) None) (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None) Break) (/seq))) (/seq) None) (If (Name &pos:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &posf:0 Load) Add (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &l:0 Load)) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inp:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_split Load) (list (_starred_content (Constant bCg== None))) nil) None) (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None) (FunctionDef &debug:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (If (Name &_DEBUG:0 Load) (/seq (Import (list (alias &inspect:1 None))) (Assign (list (Name &frame:1 Store)) (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil) None) (Assign (list (Name &frame:1 Store)) (Subscript (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (_starred_content (Name &frame:1 Load))) nil) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &string:1 Store)) (Call (Attribute (Subscript (Attribute (Call (Attribute (Name &inspect:1 Load) s_getframeinfo Load) (list (_starred_content (Subscript (Name &frame:1 Load) (_slice_content (Constant i0 None)) Load))) nil) s_code_context Load) (_slice_content (Constant i0 None)) Load) s_strip Load) nil nil) None) (Assign (list (Name &arns:1 Store)) (Call (Attribute (Subscript (Name &string:1 Load) (_slice_slice (Slice (BinOp (Call (Attribute (Name &string:1 Load) s_find Load) (list (_starred_content (Constant s-WzQwXQ== None))) nil) Add (Constant i1 None)) (UnaryOp USub (Constant i1 None)) None)) Load) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &j:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &arns:1 Load)) (_starred_content (Name &args:1 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Constant s-WzMyLCA2MSwgMzJd None)) (_starred_content (Name &j:1 Load))) (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil None None) (FunctionDef &rdln:0 (arguments nil nil None nil nil None nil) (/seq (Global (list s__ii)) (AugAssign (Name g__ii Store) Add (Constant i1 None)) (Return (Subscript (Name &inp:0 Load) (_slice_content (Name g__ii Load)) Load))) nil None None) (Assign (list (Name &inin:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (_starred_content (Call (Name &rdln:0 Load) nil nil))) nil)) None) (Assign (list (Name &inar:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &inst:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load) nil nil)) None) (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (For (Name &_t_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &_T_:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None) (Expr (Call (Name &debug:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &it:0 Load)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load))) (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &array:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (BinOp (Subscript (Name &array:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &array:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &array:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Constant i1 None)) Load)) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (If (Compare (BinOp (Subscript (Name &x:0 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name &x:0 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name &x:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))) (/seq) None)) nil)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(If (Compare (BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load)) (list LtE) (list (Subscript (Name %1 Load) #1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) #0) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil))))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [
          "StarredRoot",
          "SliceRoot"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "S"
      },
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (UnaryOp USub (Constant i1 None)))) nil)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(BinOp (Subscript (Name %1 Load) (_slice_content (Constant i0 None)) Load) Add (Subscript (Name %1 Load) (_slice_content (Constant i1 None)) Load))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      },
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (For (Name %2 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) #0 (/seq) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "seqS"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (fn_5 (/seq (/splice (fn_1 &n:0 &arr:0)) (Assign (list (Name &min:0 Store)) (fn_4 &arr:0) None) (Assign (list (Name &pos:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Subscript (Name &arr:0 Load) (_slice_content (Name &i:0 Load)) Load) (list GtE) (list (Name &min:0 Load))) (/seq (Assign (list (Name &pos:0 Store)) (Constant False None) None) (Assign (list (Name &posf:0 Store)) (Name &i:0 Load) None) Break) (/seq))) (/seq) None) (If (Name &pos:0 Load) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ1LCA0OV0= None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &posf:0 Load) Add (Constant i1 None)))) nil))))) &t:0 &z:0) nil)",
      "(Module (fn_5 (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &f:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (fn_4 &a:0) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &f:0 Store)) (Constant i1 None) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzQ5LCAzMiwgNTBd None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &f:0 Load) (list Eq) (list (Constant i0 None))) (fn_3) (/seq))) &t:0 &_:0) nil)",
      "(Module (/seq (For (Name &t:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Name &l:0 Store)) (Name &i:0 Load) None) (Assign (list (Name &r:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (If (Compare (fn_4 &a:0) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &l:0 Load)) Load))) (/seq (AugAssign (Name &c:0 Store) Add (Constant i1 None)) (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None)))) nil)) Break) (/seq))) (/seq) None) (If (Compare (Name &c:0 Load) (list Eq) (list (Constant i0 None))) (fn_3) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &inp:0 Store)) (Call (Attribute (Call (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_read Load) nil nil) s_split Load) (list (_starred_content (Constant bCg== None))) nil) None) (Assign (list (Name &_ii:0 Store)) (UnaryOp USub (Constant i1 None)) None) (Assign (list (Name &_DEBUG:0 Store)) (Constant i0 None) None) (FunctionDef &debug:0 (arguments nil nil (arg &args:1 None None) nil nil None nil) (/seq (If (Name &_DEBUG:0 Load) (/seq (Import (list (alias &inspect:1 None))) (Assign (list (Name &frame:1 Store)) (Call (Attribute (Name &inspect:1 Load) s_currentframe Load) nil nil) None) (Assign (list (Name &frame:1 Store)) (Subscript (Call (Attribute (Name &inspect:1 Load) s_getouterframes Load) (list (_starred_content (Name &frame:1 Load))) nil) (_slice_content (Constant i1 None)) Load) None) (Assign (list (Name &string:1 Store)) (Call (Attribute (Subscript (Attribute (Call (Attribute (Name &inspect:1 Load) s_getframeinfo Load) (list (_starred_content (Subscript (Name &frame:1 Load) (_slice_content (Constant i0 None)) Load))) nil) s_code_context Load) (_slice_content (Constant i0 None)) Load) s_strip Load) nil nil) None) (Assign (list (Name &arns:1 Store)) (Call (Attribute (Subscript (Name &string:1 Load) (_slice_slice (Slice (BinOp (Call (Attribute (Name &string:1 Load) s_find Load) (list (_starred_content (Constant s-WzQwXQ== None))) nil) Add (Constant i1 None)) (UnaryOp USub (Constant i1 None)) None)) Load) s_split Load) (list (_starred_content (Constant s-WzQ0XQ== None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Constant s-WzMyLCAzMiwgMzIsIDMyLCAzNSwgMTAwLCAxMDEsIDk4LCAxMTcsIDEwMywgNThd None))) (list (keyword s_end (Constant s-WzMyXQ== None))))) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &j:1 Store))) Store) (Call (Name g_zip Load) (list (_starred_content (Name &arns:1 Load)) (_starred_content (Name &args:1 Load))) nil) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:1 Load)) (_starred_content (Constant s-WzMyLCA2MSwgMzJd None)) (_starred_content (Name &j:1 Load))) (list (keyword s_end (Constant s-WzQ0LCAzMl0= None)))))) (/seq) None) (Expr (Call (Name g_print Load) nil nil))) (/seq))) nil None None) (FunctionDef &rdln:0 (arguments nil nil None nil nil None nil) (/seq (Global (list s__ii)) (AugAssign (Name g__ii Store) Add (Constant i1 None)) (Return (Subscript (Name &inp:0 Load) (_slice_content (Name g__ii Load)) Load))) nil None None) (Assign (list (Name &inin:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Name g_int Load) (list (_starred_content (Call (Name &rdln:0 Load) nil nil))) nil)) None) (Assign (list (Name &inar:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_split Load) nil nil) nil i0)))) None) (Assign (list (Name &inst:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Call (Name &rdln:0 Load) nil nil) s_strip Load) nil nil) s_decode Load) nil nil)) None) (Assign (list (Name &_T_:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (For (Name &_t_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &_T_:0 Load))) nil) (/seq (Assign (list (Name &n:0 Store)) (Call (Name &inin:0 Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name &inar:0 Load) nil nil) None) (Expr (Call (Name &debug:0 Load) (list (_starred_content (Name &n:0 Load)) (_starred_content (Name &a:0 Load))) nil)) (If (Compare (fn_4 &a:0) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil))))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_buffer Load) s_readline Load) None) (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &t:0 Load))) nil) (/seq (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &A:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &flag:0 Store)) (Constant i0 None) None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i1 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (Name &c:0 Load) (list GtE) (list (BinOp (Name &a:0 Load) Add (Name &b:0 Load)))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Name &n:0 Load))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Tuple (list (_starred_content (Subscript (Name &A:0 Load) (_slice_content (Constant i0 None)) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i2 None))) Load)) (_starred_content (Subscript (Name &A:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) Load) None) (If (Compare (BinOp (Name &c:0 Load) Sub (Name &b:0 Load)) (list GtE) (list (Name &a:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil)) (Assign (list (Name &flag:0 Store)) (Constant i1 None) None)) (/seq))) (/seq)) (If (UnaryOp Not (Name &flag:0 Load)) (fn_3) (/seq))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (While (Compare (Name &t:0 Load) (list Gt) (list (Constant i0 None))) (/seq (/splice (fn_1 &n:0 &a:0)) (Assign (list (Name &i:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (BinOp (Name &n:0 Load) Sub (Constant i1 None)) None) (Assign (list (Name &j:0 Store)) (UnaryOp USub (Constant i1 None)) None) (For (Name &it:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (BinOp (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) Add (Subscript (Name &a:0 Load) (_slice_content (Name &it:0 Load)) Load)) (list LtE) (list (Subscript (Name &a:0 Load) (_slice_content (Name &k:0 Load)) Load))) (/seq (Assign (list (Name &j:0 Store)) (Name &it:0 Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &j:0 Load) (list Eq) (list (UnaryOp USub (Constant i1 None)))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) (_starred_content (BinOp (Name &k:0 Load) Add (Constant i1 None)))) nil)))) (AugAssign (Name &t:0 Store) Sub (Constant i1 None))) (/seq))) nil)",
      "(Module (fn_5 (/seq (/splice (fn_1 &n:0 &array:0)) (fn_2 (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &array:0 Load))) nil)) (_slice_content (UnaryOp USub (Constant i1 None))) &array:0)) &t:0 &_:0) nil)",
      "(Module (/seq (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil))) nil) (/seq (Expr (Call (Name g_input Load) nil nil)) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (fn_2 (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil)) (_slice_content (UnaryOp USub (Constant i1 None))) &a:0)) (/seq) None)) nil)",
      "(Module (fn_5 (/seq (/splice (fn_1 &n:0 &a:0)) (If (Compare (fn_4 &a:0) (list Gt) (list (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) (fn_3) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None)) (_starred_content (Constant i2 None)) (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil))))) &t:0 &_:0) nil)",
      "(Module (fn_5 (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (fn_2 (_starred_content (Name &n:0 Load)) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) &x:0)) &t:0 &i:0) nil)"
    ],
    "inputs": [
      "3\n7\n4 6 11 11 15 18 20\n4\n10 10 10 11\n3\n1 1 1000000000\n",
      "3\n7\n4 6 11 11 15 18 20\n4\n10 10 10 11\n3\n1 1 1000000000\n",
      "1\n6\n1 1 1 2 2 3\n",
      "1\n3\n21 78868 80000\n",
      "1\n14\n1 2 2 2 2 2 2 2 2 2 2 2 2 4\n",
      "1\n3\n78788 78788 157577\n",
      "1\n3\n5623 5624 10000000\n",
      "1\n10\n1 7 7 7 7 9 9 9 9 9\n",
      "1\n3\n5739271 5739272 20000000\n",
      "1\n3\n1 65535 10000000\n",
      "1\n3\n78788 78788 100000\n",
      "1\n15\n3 4 7 8 9 10 11 12 13 14 15 16 32 36 39\n",
      "3\n7\n4 6 11 11 15 18 34\n4\n10 10 10 11\n3\n1 1 1000000000\n",
      "1\n3\n39 78868 80000\n",
      "1\n3\n78788 143221 157577\n",
      "1\n15\n1 4 7 8 9 10 11 12 13 14 15 16 32 36 39\n",
      "1\n6\n1 1 1 2 3 3\n",
      "1\n14\n1 2 2 2 2 2 3 2 2 2 2 2 2 4\n",
      "1\n3\n2371445 5739272 20000000\n",
      "1\n3\n0 65535 10000000\n",
      "1\n3\n78788 78788 100001\n",
      "1\n3\n41 78868 80000\n",
      "1\n3\n78788 143221 157133\n",
      "1\n3\n2371445 8707440 20000000\n",
      "1\n3\n0 65535 10000010\n",
      "1\n3\n78788 27726 100001\n",
      "1\n3\n41 78868 114692\n",
      "1\n3\n57031 143221 157133\n",
      "1\n3\n2371445 16783800 20000000\n",
      "1\n3\n41 78868 147790\n",
      "1\n3\n44253 143221 157133\n",
      "1\n3\n2371445 16783800 33781975\n",
      "1\n3\n41 50312 147790\n",
      "1\n3\n20990 143221 157133\n",
      "1\n3\n45 50312 147790\n",
      "1\n3\n45 14841 147790\n",
      "3\n7\n4 6 11 14 15 18 20\n4\n10 10 10 11\n3\n1 1 1000000000\n",
      "1\n3\n21 78868 147140\n",
      "1\n3\n93176 78788 157577\n",
      "1\n3\n5623 6921 10000000\n",
      "1\n3\n0 5554 10000000\n",
      "3\n7\n4 6 11 11 15 18 34\n4\n10 10 8 11\n3\n1 1 1000000000\n",
      "1\n3\n11 78868 80000\n",
      "1\n3\n782303 5739272 20000000\n",
      "1\n3\n-1 65535 10000000\n",
      "1\n3\n78788 73766 100001\n",
      "1\n15\n1 4 7 8 9 10 11 12 13 27 15 16 32 36 39\n",
      "1\n3\n44 78868 80000\n",
      "1\n3\n2371445 8707440 9994392\n",
      "1\n3\n0 65535 10000011\n",
      "1\n3\n78788 31481 100001\n",
      "1\n3\n41 78868 172649\n",
      "1\n3\n57031 136922 157133\n",
      "1\n3\n44087 143221 157133\n",
      "1\n3\n2371445 3872228 33781975\n",
      "1\n3\n41 50312 132889\n",
      "1\n3\n20990 156419 157133\n",
      "1\n3\n27 50312 147790\n",
      "1\n3\n80 14841 147790\n",
      "1\n3\n21 78868 173333\n",
      "1\n3\n93176 145467 157577\n",
      "1\n3\n5623 6921 10001000\n",
      "1\n3\n0 3609 10000000\n",
      "3\n7\n4 6 11 11 15 18 37\n4\n10 10 8 11\n3\n1 1 1000000000\n",
      "1\n3\n782303 5739272 32847632\n",
      "1\n3\n78788 113399 100001\n",
      "1\n15\n1 4 7 8 9 10 11 12 13 27 15 24 32 36 39\n",
      "1\n3\n1332631 8707440 9994392\n",
      "1\n3\n119951 31481 100001\n",
      "1\n3\n57031 136922 92175\n",
      "1\n3\n870181 3872228 33781975\n",
      "1\n3\n41 50312 158884\n",
      "1\n3\n16341 156419 157133\n",
      "1\n3\n80 14841 30176\n",
      "1\n3\n24 78868 173333\n",
      "1\n3\n0 3609 10100000\n",
      "3\n7\n4 6 11 11 15 18 37\n4\n10 17 8 11\n3\n1 1 1000000000\n",
      "1\n15\n1 4 7 8 9 10 11 12 13 27 15 29 32 36 39\n",
      "1\n3\n1332631 8707440 10149311\n",
      "1\n3\n119951 34048 100001\n",
      "1\n3\n870181 3872228 63608249\n",
      "1\n3\n44 50312 158884\n",
      "1\n3\n80 14841 53482\n",
      "1\n3\n24 78868 212878\n",
      "1\n3\n0 3609 10100100\n",
      "1\n3\n119951 34048 100000\n",
      "1\n3\n60 50312 158884\n",
      "1\n3\n80 18913 53482\n",
      "1\n3\n24 78868 289066\n",
      "1\n3\n-1 3609 10100100\n",
      "1\n3\n60 88534 158884\n",
      "1\n3\n24 91169 289066\n",
      "1\n3\n-2 3609 10100100\n",
      "1\n3\n80 88534 158884\n",
      "1\n3\n24 127104 289066\n",
      "3\n7\n4 6 11 6 15 18 20\n4\n10 10 10 11\n3\n1 1 1000000000\n",
      "1\n3\n71145 78788 157577\n",
      "1\n3\n2586 5624 10000000\n",
      "1\n3\n1 93914 10000000\n",
      "1\n3\n78788 78788 100100\n"
    ],
    "outputs": [
      "1 2 7\n-1\n1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 6\n",
      "1 2 3\n",
      "1 2 14\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 10\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 15\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 15\n",
      "1 2 6\n",
      "1 2 14\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 15\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "-1\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 15\n",
      "-1\n",
      "-1\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 15\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 7\n-1\n1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "1 2 3\n",
      "-1\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (FunctionDef &putin:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (FunctionDef &sol:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &min_arr:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &min_part_sums:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &part_sums:1 Store)) (List (list (_starred_content (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &C:1 Load) (_slice_content (Name &i:1 Load)) Load)))) nil))) (/seq) None) (For (Name &elem:1 Store) (Name &B:1 Load) (/seq (Expr (Call (Attribute (Name &min_arr:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Name &elem:1 Load)))) nil)) (Expr (Call (Attribute (Name &min_part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &min_part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Gt) (list (Subscript (Name &part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (Return (Constant i0 None))) (/seq))) (/seq) None) (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant i1 None))) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &new_answer:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil)) Add (Constant i1 None))) None) (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None) (Assign (list (Name &window:1 Store)) (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store)) (Name &window:1 Load) None) (While (Compare (Name &cnt:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &new_answer:1 Load))) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)) (If (Compare (Name &cnt:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name &answer:1 Load))) nil))) (/seq (AugAssign (Name &window:1 Store) Add (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Load))) (/seq)) (If (Compare (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) (list Lt) (list (Name &cnt:1 Load))) (/seq (AugAssign (Name &window:1 Store) Sub (Subscript (Name &answer:1 Load) (_slice_content (BinOp (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) Sub (Name &cnt:1 Load))) Load))) (/seq)) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Store)) (Name &window:1 Load) None)) (/seq)) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)) (/seq) None) (Assign (list (Name &m:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Return (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &answer:1 Load))) nil) Mod (Name &m:1 Load)))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &sol:0 Load) nil nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &C:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil) (list (comprehension (Name &a:1 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &B:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &a:2 Load))) nil) (list (comprehension (Name &a:2 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &Q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &P:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &dp:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None)) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i20050 None)) (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load) Add (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &j:0 Load) Sub (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Sub (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) Mod (Name &P:0 Load)) None)) (/seq) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) (_starred_content (Constant i20050 None))) nil)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Store)) (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load) None)) (/seq) None) (If (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Mod (Name &P:0 Load)))) nil))) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &MOD:1 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &c:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &b:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil)) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &queries:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None) (For (Name &c1:1 Store) (Name &c:1 Load) (/seq (Assign (list (Name &maxans:1 Store)) (BinOp (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None))) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &ans:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &b:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq) None) (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Assign (list (Name &lb:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &lb:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Add (BinOp (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Assign (list (Name &ub:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ub:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (For (Name &x:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxans:1 Load))) nil))) (/seq (If (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Load))) nil))) (/seq (Assign (list (Name &dp0:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Constant i10002 None)) None) (Assign (list (Subscript (Name &dp0:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (Assign (list (Name &bd:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &dp1:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10002 None)) None) (AugAssign (Name &bd:1 Store) Add (BinOp (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Name &x:1 Load))) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &bd:1 Load)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Constant i10001 None))) nil) (/seq (Assign (list (Subscript (Name &dp1:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp1:1 Load) (_slice_content (Name &j:1 Load)) Load) Add (Subscript (Name &dp0:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load)) Sub (Subscript (Name &dp0:1 Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &j:1 Load) Sub (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &dp0:1 Store)) (Subscript (Name &dp1:1 Load) (_slice_slice (Slice None None None)) Load) None)) (/seq) None) (Assign (list (Name &a:1 Store)) (Subscript (Name &dp0:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Store)) (Name &a:1 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:1 Load))) nil))))))))) (/seq) None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name &N:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &C:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &a:1 Load))) nil) (list (comprehension (Name &a:1 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &B:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &a:2 Load))) nil) (list (comprehension (Name &a:2 Store) (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &Q:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &P:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name &dp:0 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None)) (list (comprehension (Name &_:3 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &N:0 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Name &ans:0 Store)) (Constant i0 None) None) (Assign (list (Name &s:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &t:0 Store)) (Name &s:0 Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &N:0 Load))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i20050 None)) (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name &j:0 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load) Add (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &j:0 Load) Sub (Subscript (Name &C:0 Load) (_slice_content (Name &i:0 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Sub (Subscript (Subscript (Name &dp:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load)) Mod (Name &P:0 Load)) None)) (/seq) None) (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name &t:0 Load) Sub (Constant i1 None))) (_starred_content (Constant i20050 None))) nil)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Store)) (Subscript (Subscript (Name &dp:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name &j:0 Load) Add (Constant i1 None))) Load) None)) (/seq) None) (If (Compare (Name &i:0 Load) (list Lt) (list (BinOp (Name &N:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &s:0 Store) Add (Subscript (Name &B:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &t:0 Store) Add (Name &s:0 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Name &dp:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Mod (Name &P:0 Load)))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Import (list (alias g_sys None))) (Assign (list (Name %1 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Assign (list (Name %2 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %4 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %3 Load))) nil) (list (comprehension (Name %3 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %6 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %5 Load))) nil) (list (comprehension (Name %5 Store) (Call (Attribute (Call (Name %1 Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name %7 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %8 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name %1 Load) nil nil))) nil) None) (Assign (list (Name %9 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (Assign (list (Name %11 Store)) (ListComp (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i20100 None)) (list (comprehension (Name %10 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil) nil i0))) None) (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (Constant i0 None)) Load) (_slice_content (Constant i0 None)) Store)) (Constant i1 None) None) (Assign (list (Name %12 Store)) (Constant i0 None) None) (Assign (list (Name %13 Store)) (Name %8 Load) None) (Assign (list (Name %14 Store)) (Name %13 Load) None) (For (Name %16 Store) (Call (Name g_range Load) (list (_starred_content (Name %2 Load))) nil) (/seq (For (Name %15 Store) (Call (Name g_range Load) (list (_starred_content (Constant i20050 None)) (_starred_content (BinOp (Name %14 Load) Sub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (If (Compare (Name %15 Load) (list Lt) (list (Constant i0 None))) (/seq Break) (/seq)) (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (Name %15 Load)) Store)) (BinOp (BinOp (BinOp (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load) Add (Subscript (Subscript (Name %11 Load) (_slice_content (Name %16 Load)) Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name %15 Load) Sub (Subscript (Name %4 Load) (_slice_content (Name %16 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Sub (Subscript (Subscript (Name %11 Load) (_slice_content (Name %16 Load)) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load)) Mod (Name %9 Load)) None)) (/seq) None) (For (Name %15 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_min Load) (list (_starred_content (BinOp (Name %14 Load) Sub (Constant i1 None))) (_starred_content (Constant i20050 None))) nil)) (_starred_content (UnaryOp USub (Constant i1 None))) (_starred_content (UnaryOp USub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (Name %15 Load)) Store)) (Subscript (Subscript (Name %11 Load) (_slice_content (BinOp (Name %16 Load) Add (Constant i1 None))) Load) (_slice_content (BinOp (Name %15 Load) Add (Constant i1 None))) Load) None)) (/seq) None) (If (Compare (Name %16 Load) (list Lt) (list (BinOp (Name %2 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name %13 Store) Add (Subscript (Name %6 Load) (_slice_content (Name %16 Load)) Load)) (AugAssign (Name %14 Store) Add (Name %13 Load))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Subscript (Subscript (Name %11 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) (_slice_content (Constant i0 None)) Load) Mod (Name %9 Load)))) nil)))",
        "sym_arity": 16,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      },
      {
        "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call #0 nil nil) s_split Load) nil nil))) nil)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "E"
      }
    ],
    "rewritten": [
      "(Module (/seq (FunctionDef &putin:0 (arguments nil nil None nil nil None nil) (/seq (Return (fn_3 (Name g_input Load)))) nil None None) (FunctionDef &sol:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &C:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &B:1 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name &putin:0 Load) nil nil))) nil) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &min_arr:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &min_part_sums:1 Store)) (List (list (_starred_content (Name &x:1 Load))) Load) None) (Assign (list (Name &part_sums:1 Store)) (List (list (_starred_content (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Expr (Call (Attribute (Name &part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &C:1 Load) (_slice_content (Name &i:1 Load)) Load)))) nil))) (/seq) None) (For (Name &elem:1 Store) (Name &B:1 Load) (/seq (Expr (Call (Attribute (Name &min_arr:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Name &elem:1 Load)))) nil)) (Expr (Call (Attribute (Name &min_part_sums:1 Load) s_append Load) (list (_starred_content (BinOp (Subscript (Name &min_arr:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) Add (Subscript (Name &min_part_sums:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load)))) nil))) (/seq) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load) (list Gt) (list (Subscript (Name &part_sums:1 Load) (_slice_content (Name &i:1 Load)) Load))) (/seq (Return (Constant i0 None))) (/seq))) (/seq) None) (If (Compare (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load) (list Gt) (list (Subscript (Name &C:1 Load) (_slice_content (Constant i0 None)) Load))) (/seq (Return (Constant i0 None))) (/seq)) (Assign (list (Name &answer:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Constant i0 None)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant i1 None))) None) (For (Name &k:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &new_answer:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (BinOp (Subscript (Name &part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load) Sub (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (Subscript (Name &min_part_sums:1 Load) (_slice_content (Name &k:1 Load)) Load))) nil)) Add (Constant i1 None))) None) (Assign (list (Name &cnt:1 Store)) (Constant i1 None) None) (Assign (list (Name &window:1 Store)) (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Store)) (Name &window:1 Load) None) (While (Compare (Name &cnt:1 Load) (list LtE) (list (BinOp (Call (Name g_len Load) (list (_starred_content (Name &new_answer:1 Load))) nil) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cnt:1 Store) Add (Constant i1 None)) (If (Compare (Name &cnt:1 Load) (list LtE) (list (Call (Name g_len Load) (list (_starred_content (Name &answer:1 Load))) nil))) (/seq (AugAssign (Name &window:1 Store) Add (Subscript (Name &answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Load))) (/seq)) (If (Compare (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) (list Lt) (list (Name &cnt:1 Load))) (/seq (AugAssign (Name &window:1 Store) Sub (Subscript (Name &answer:1 Load) (_slice_content (BinOp (BinOp (Subscript (Name &C:1 Load) (_slice_content (Name &k:1 Load)) Load) Add (Constant i1 None)) Sub (Name &cnt:1 Load))) Load))) (/seq)) (Assign (list (Subscript (Name &new_answer:1 Load) (_slice_content (UnaryOp USub (Name &cnt:1 Load))) Store)) (Name &window:1 Load) None)) (/seq)) (Assign (list (Name &answer:1 Store)) (Call (Attribute (Name &new_answer:1 Load) s_copy Load) nil nil) None)) (/seq) None) (Assign (list (Name &m:1 Store)) (fn_2) None) (Return (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &answer:1 Load))) nil) Mod (Name &m:1 Load)))) nil None None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &sol:0 Load) nil nil))) nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)",
      "(Module (/seq (FunctionDef &solve:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &MOD:1 Store)) (fn_2) None) (Assign (list (Name &n:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &c:1 Store)) (Call (Name g_list Load) (list (_starred_content (fn_3 (Name &input:0 Load)))) nil) None) (Assign (list (Name &b:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Add (Call (Name g_list Load) (list (_starred_content (fn_3 (Name &input:0 Load)))) nil)) None) (Assign (list (Name &q:1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil) None) (Assign (list (Name &queries:1 Store)) (Call (Name g_list Load) (list (_starred_content (fn_3 (Name &input:0 Load)))) nil) None) (Assign (list (Name &maxans:1 Store)) (Constant i1 None) None) (For (Name &c1:1 Store) (Name &c:1 Load) (/seq (Assign (list (Name &maxans:1 Store)) (BinOp (BinOp (Name &maxans:1 Load) Mult (BinOp (Name &c1:1 Load) Add (Constant i1 None))) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &ans:1 Store)) (Dict nil nil) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Store) Add (Subscript (Name &b:1 Load) (_slice_content (BinOp (Name &i:1 Load) Sub (Constant i1 None))) Load))) (/seq) None) (Assign (list (Name &s:1 Store) (Name &lb:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load)) (Assign (list (Name &lb:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &lb:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (Assign (list (Name &s:1 Store) (Name &ub:1 Store)) (Subscript (Name &c:1 Load) (_slice_content (Constant i0 None)) Load) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (AugAssign (Name &s:1 Store) Add (BinOp (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load) Sub (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load))) (Assign (list (Name &ub:1 Store)) (Call (Name g_min Load) (list (_starred_content (Name &ub:1 Load)) (_starred_content (BinOp (Name &s:1 Load) FloorDiv (BinOp (Name &i:1 Load) Add (Constant i1 None))))) nil) None)) (/seq) None) (For (Name &x:1 Store) (Name &queries:1 Load) (/seq (If (Compare (Name &x:1 Load) (list LtE) (list (Name &lb:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &maxans:1 Load))) nil))) (/seq (If (Compare (Name &x:1 Load) (list Gt) (list (Name &ub:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &x:1 Load) (list In) (list (Name &ans:1 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Load))) nil))) (/seq (Assign (list (Name &dp0:1 Store)) (BinOp (List (list (_starred_content (Constant i1 None))) Load) Mult (Constant i10002 None)) None) (Assign (list (Subscript (Name &dp0:1 Load) (_slice_content (Constant i0 None)) Store)) (Constant i0 None) None) (Assign (list (Name &bd:1 Store)) (Constant i0 None) None) (For (Name &i:1 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:1 Load))) nil) (/seq (Assign (list (Name &dp1:1 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Constant i10002 None)) None) (AugAssign (Name &bd:1 Store) Add (BinOp (Subscript (Name &b:1 Load) (_slice_content (Name &i:1 Load)) Load) Add (Name &x:1 Load))) (For (Name &j:1 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Name &bd:1 Load)) (_starred_content (Constant i0 None))) nil)) (_starred_content (Constant i10001 None))) nil) (/seq (Assign (list (Subscript (Name &dp1:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Store)) (BinOp (BinOp (BinOp (Subscript (Name &dp1:1 Load) (_slice_content (Name &j:1 Load)) Load) Add (Subscript (Name &dp0:1 Load) (_slice_content (BinOp (Name &j:1 Load) Add (Constant i1 None))) Load)) Sub (Subscript (Name &dp0:1 Load) (_slice_content (Call (Name g_max Load) (list (_starred_content (BinOp (Name &j:1 Load) Sub (Subscript (Name &c:1 Load) (_slice_content (Name &i:1 Load)) Load))) (_starred_content (Constant i0 None))) nil)) Load)) Mod (Name &MOD:1 Load)) None)) (/seq) None) (Assign (list (Name &dp0:1 Store)) (Subscript (Name &dp1:1 Load) (_slice_slice (Slice None None None)) Load) None)) (/seq) None) (Assign (list (Name &a:1 Store)) (Subscript (Name &dp0:1 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None) (Assign (list (Subscript (Name &ans:1 Load) (_slice_content (Name &x:1 Load)) Store)) (Name &a:1 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:1 Load))) nil))))))))) (/seq) None)) nil None None) (Import (list (alias &sys:0 None))) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) nil nil)) None) (Expr (Call (Name &solve:0 Load) nil nil))) nil)",
      "(Module (fn_1 &input:0 &N:0 &a:1 &C:0 &a:2 &B:0 &Q:0 &x:0 &P:0 &_:3 &dp:0 &ans:0 &s:0 &t:0 &j:0 &i:0) nil)"
    ],
    "inputs": [
      "3\n2 3 4\n2 1\n1\n-1\n",
      "100\n95 54 23 27 51 58 94 34 29 95 53 53 8 5 64 32 17 62 14 37 26 95 27 85 94 37 85 72 88 69 43 9 60 3 48 26 81 48 89 56 34 28 2 63 26 6 13 19 99 41 70 24 92 41 9 73 52 42 34 98 16 82 7 81 28 80 18 33 90 69 19 13 51 96 8 21 86 32 96 7 5 42 52 87 24 82 14 88 4 69 7 69 4 16 55 14 27 89 32 42\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n44\n",
      "50\n22 43 83 63 10 95 45 4 6 73 41 86 77 90 0 79 44 9 95 40 79 81 95 39 52 36 49 25 24 17 50 46 69 92 22 20 22 48 76 36 39 27 73 37 9 95 59 49 26 32\n3 4 5 2 3 1 5 5 3 5 4 3 4 2 2 1 2 2 2 1 1 2 4 5 2 1 4 4 4 5 1 2 3 2 0 0 0 1 1 1 0 0 0 1 5 5 2 5 1\n1\n-62\n",
      "20\n88 74 27 3 73 12 63 14 8 33 27 57 49 91 81 1 69 45 21 100\n1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 1 0 1 0\n1\n-100000\n",
      "20\n12 46 89 16 75 93 35 2 43 68 24 37 83 46 82 49 49 25 4 53\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n-50\n",
      "30\n62 48 36 36 7 90 52 14 100 3 90 79 79 1 69 100 74 69 93 65 11 98 50 54 61 31 38 65 14 98\n3 0 3 2 1 2 2 3 0 2 3 2 0 0 1 2 3 3 0 2 0 3 1 3 1 1 0 0 2\n1\n-20\n",
      "2\n7 28\n83\n1\n-46\n",
      "20\n54 52 44 46 92 3 45 82 95 6 72 86 37 55 91 55 65 85 52 6\n1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 0\n1\n24\n",
      "40\n48 62 9 44 65 93 94 54 41 44 37 43 78 79 74 56 81 95 10 64 50 6 5 86 57 90 27 12 75 41 71 15 35 42 65 73 67 45 15 25\n0 3 3 3 3 4 1 1 4 2 2 4 2 2 3 4 2 3 1 2 4 4 4 4 2 1 4 3 1 3 0 4 0 4 3 4 3 0 1\n1\n-44\n",
      "60\n99 63 10 93 9 69 81 82 41 3 52 49 6 72 61 95 86 44 20 83 50 52 41 20 22 94 33 79 40 31 22 89 92 69 78 82 87 98 14 55 100 62 77 83 63 70 14 65 17 69 23 73 55 76 30 70 67 26 63 68\n1 2 0 3 1 1 2 2 5 1 0 0 5 0 2 4 5 1 1 1 5 2 3 1 0 0 1 4 1 4 0 3 4 2 5 2 5 1 5 0 0 2 1 4 1 3 5 1 4 5 1 5 4 2 1 2 5 1 3\n1\n-11\n",
      "20\n48 55 46 38 12 63 24 34 54 97 35 68 36 74 12 95 34 33 7 59\n3 5 2 3 3 0 0 5 2 0 5 5 5 4 4 6 3 1 6\n1\n2\n",
      "10\n26 10 19 71 11 48 81 100 96 85\n3 0 5 5 0 4 4 1 0\n1\n-12\n",
      "20\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n2 1 3 1 3 3 3 3 0 3 0 2 2 1 1 3 1 2 2\n1\n100000\n",
      "20\n17 83 51 51 66 64 2 18 64 70 22 92 96 23 61 2 100 7 60 79\n4 3 0 5 6 4 9 8 8 9 4 4 1 0 5 6 4 9 5\n1\n-15\n",
      "20\n42 69 54 74 18 35 55 12 43 49 20 35 71 91 23 45 70 66 57 11\n1 0 1 0 0 1 1 0 1 1 1 1 0 1 0 0 0 0 1\n1\n-2\n",
      "70\n40 75 61 51 0 1 60 90 99 23 62 45 60 56 49 36 8 86 92 36 86 8 49 2 20 82 74 71 92 24 72 14 51 75 63 53 32 51 33 33 42 53 47 91 31 35 26 63 7 32 63 49 2 11 93 41 79 67 24 39 33 54 21 8 64 44 11 78 1 84\n1 0 0 1 4 1 0 3 4 2 2 5 5 1 5 0 4 5 0 3 2 0 4 2 1 2 5 0 0 1 0 4 2 5 5 1 4 3 2 1 2 5 2 4 2 5 5 5 5 0 4 0 1 4 0 5 0 5 4 0 4 0 2 0 5 0 3 0 2\n1\n-41\n",
      "40\n37 40 93 32 34 41 79 65 48 36 25 77 18 14 0 41 60 81 9 51 46 35 2 92 1 48 13 81 41 73 50 81 16 25 64 89 61 60 62 94\n3 2 2 4 4 4 4 2 0 0 2 1 1 4 4 1 3 4 4 1 1 1 1 4 1 1 2 1 4 1 2 1 0 2 3 2 4 2 4\n1\n-3\n",
      "100\n45 21 34 56 15 0 46 59 40 39 78 83 29 77 19 30 60 39 90 64 11 47 10 47 35 79 30 13 21 31 26 68 0 67 52 43 29 94 100 76 16 61 74 34 62 63 4 41 78 31 77 21 90 2 43 70 53 15 53 29 47 87 33 20 23 30 55 57 13 25 19 89 10 17 92 24 47 6 4 91 52 9 11 25 81 14 82 75 46 49 66 62 28 84 88 57 0 19 34 94\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n21\n",
      "20\n33 94 53 35 47 78 90 32 54 98 3 65 12 12 21 55 94 5 36 83\n0 0 0 2 2 2 2 2 1 2 2 2 1 0 0 1 1 0 2\n1\n19\n",
      "20\n57 42 39 79 84 90 23 96 40 18 65 1 90 67 0 27 48 32 55 86\n8 4 4 8 1 5 7 4 2 8 6 10 9 7 6 4 2 10 5\n1\n-23\n",
      "100\n17 9 8 16 34 17 52 66 41 2 43 16 18 2 6 16 73 35 48 79 31 13 74 63 91 87 14 49 18 61 94 2 76 97 40 100 32 53 33 31 64 96 12 53 64 71 25 85 44 6 93 88 32 17 90 65 14 70 45 5 11 86 58 58 83 92 24 4 90 25 14 45 24 42 37 4 35 79 30 31 88 13 68 56 3 58 64 75 1 8 9 90 74 77 29 97 36 69 17 88\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n1\n",
      "70\n53 6 86 15 90 85 33 71 97 20 63 86 77 74 73 6 39 35 40 25 79 85 60 66 39 37 0 83 94 86 96 93 5 72 36 57 10 80 84 54 22 9 23 74 74 45 76 74 42 30 21 36 36 32 25 19 77 27 0 53 29 26 52 92 94 88 61 37 21 14\n4 1 3 4 0 2 3 0 2 0 4 3 3 5 3 5 3 3 3 0 5 4 1 1 4 2 3 1 4 2 4 2 5 0 0 5 2 0 5 2 3 5 2 4 5 0 4 5 5 5 2 5 2 1 3 4 3 0 1 5 3 0 1 1 2 3 5 3 5\n1\n-85\n",
      "100\n45 4 100 7 62 78 23 54 97 21 41 14 0 20 23 85 30 94 26 23 38 15 9 48 72 54 21 52 28 11 98 47 17 77 29 10 95 31 26 24 67 27 50 91 37 52 93 58 18 33 73 40 43 51 31 96 68 85 97 10 80 49 51 70 6 8 35 44 49 72 79 62 13 97 6 69 40 70 10 22 59 71 94 53 16 47 28 51 73 69 41 51 6 59 90 24 97 12 72 8\n0 1 0 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 0\n1\n5\n",
      "20\n97 76 80 25 49 7 76 39 49 19 67 25 68 31 46 45 31 32 5 88\n1 1 1 0 1 1 0 1 1 0 0 1 0 1 1 0 1 1 1\n1\n36\n",
      "20\n79 33 19 90 72 83 79 78 81 59 33 91 13 76 81 28 76 90 71 41\n0 1 10 1 8 2 9 8 0 4 5 5 2 2 5 0 9 9 2\n1\n-9\n",
      "10\n4 56 67 26 94 57 56 67 84 76\n0 5 2 1 3 0 5 0 2\n1\n4\n",
      "10\n77 16 42 68 100 38 40 99 75 67\n0 1 0 2 1 1 0 0 0\n1\n43\n",
      "100\n31 4 40 53 75 6 10 72 62 52 92 37 63 19 12 52 21 63 90 78 32 7 98 68 53 60 26 68 40 62 2 47 44 40 43 12 74 76 87 61 52 40 59 86 44 17 12 17 39 77 94 22 61 43 98 15 93 51 57 12 70 3 1 17 84 96 13 7 12 12 70 84 0 51 23 58 92 62 63 64 82 87 82 10 8 20 39 25 85 17 38 63 17 73 94 28 34 21 27 2\n0 0 1 1 0 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0\n1\n-11\n",
      "2\n8 70\n90\n1\n-10044\n",
      "15\n32 93 82 70 57 2 54 62 31 40 45 23 49 51 24\n2 1 2 1 1 2 1 2 1 0 1 0 1 0\n1\n30\n",
      "20\n39 6 41 50 22 11 24 35 4 46 23 80 88 33 63 3 71 97 76 91\n5 0 0 5 0 3 4 7 3 1 2 5 6 0 2 3 0 5 1\n1\n4\n",
      "20\n70 79 36 48 68 10 79 84 96 72 35 89 39 5 92 96 38 12 56 3\n2 4 3 2 4 1 2 3 1 2 5 3 3 3 2 3 5 2 0\n1\n5\n",
      "10\n8 39 84 74 25 3 75 39 19 51\n1 2 2 2 2 2 1 0 0\n1\n-6\n",
      "30\n45 63 41 0 9 11 50 83 33 74 62 85 42 29 17 26 4 0 33 85 16 11 46 98 87 81 70 50 0 22\n1 3 0 1 2 2 0 1 2 1 3 2 0 1 1 2 0 0 2 1 0 2 0 1 3 1 0 3 1\n1\n19\n",
      "60\n29 25 14 70 34 23 42 4 23 89 57 5 0 9 75 24 54 14 61 51 66 90 19 89 5 37 25 76 91 31 16 3 42 47 8 86 52 26 96 28 83 61 22 67 79 40 92 3 87 9 13 33 62 95 1 47 43 50 82 47\n5 2 4 2 0 2 4 0 2 0 2 3 1 0 2 5 0 4 3 1 2 3 4 1 0 3 5 5 4 2 0 4 5 3 5 0 3 5 5 0 5 2 4 2 1 1 4 4 1 0 4 5 3 5 1 4 3 3 3\n1\n-65\n",
      "2\n73 16\n25\n1\n9988\n",
      "100\n63 7 18 73 45 1 30 16 100 61 76 95 15 3 4 15 1 46 100 34 72 36 15 67 44 65 27 46 79 91 71 0 23 80 45 37 3 12 6 61 93 19 66 73 42 24 48 55 52 18 25 67 8 18 20 72 58 17 70 35 39 8 89 53 88 76 67 93 1 53 42 33 82 26 24 10 14 7 24 81 23 48 58 71 42 17 91 89 78 93 97 20 13 79 39 31 7 9 9 97\n1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 1\n1\n-18\n",
      "2\n9 59\n22\n1\n9\n",
      "20\n24 80 16 48 46 37 91 66 37 13 2 77 97 15 61 97 98 69 4 26\n3 3 0 4 4 4 2 1 4 0 3 0 3 0 3 1 0 4 2\n1\n8\n",
      "20\n79 3 74 58 91 63 79 83 12 22 3 9 21 13 41 65 1 48 20 38\n1 0 2 2 0 2 2 3 2 1 3 2 1 0 3 1 0 0 1\n1\n17\n",
      "50\n41 51 1 29 15 13 7 83 74 32 55 69 16 44 41 11 38 6 96 28 29 94 15 98 84 4 35 89 82 67 31 16 79 33 80 59 81 53 7 89 96 67 12 85 12 9 52 94 57 15\n5 4 3 2 0 3 1 3 2 3 5 1 5 4 3 5 5 0 5 0 2 1 2 3 1 5 4 2 5 1 2 2 1 2 4 3 2 4 5 2 1 0 3 4 3 5 0 4 4\n1\n-28\n",
      "15\n1 90 89 8 53 49 67 44 96 10 25 22 93 77 24\n1 2 0 0 1 2 1 0 2 0 2 0 1 2\n1\n-4\n",
      "100\n95 54 23 27 51 58 94 34 29 95 53 53 8 5 64 32 17 62 14 37 26 95 27 85 94 37 85 72 88 69 43 9 60 3 48 26 81 48 89 56 34 28 2 63 26 6 13 19 99 41 70 24 92 41 9 73 52 42 34 98 16 82 7 81 28 80 18 33 90 69 19 13 51 96 8 21 86 32 96 7 5 42 52 87 24 82 14 88 4 69 7 69 4 16 55 14 27 89 32 42\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n44\n",
      "50\n22 43 83 63 10 95 45 4 6 73 41 86 77 90 0 79 44 9 95 40 79 81 95 39 52 36 23 25 24 17 50 46 69 92 22 20 22 48 76 36 39 27 73 37 9 95 59 49 26 32\n3 4 5 2 3 1 5 5 3 5 4 3 4 2 2 1 2 2 2 1 1 2 4 5 2 1 4 4 4 5 1 2 3 2 0 0 0 1 1 1 0 0 0 1 5 5 2 5 1\n1\n-62\n",
      "20\n88 74 27 3 73 12 63 14 8 33 27 57 49 91 81 1 69 45 21 100\n1 0 1 1 1 1 0 0 0 1 0 0 1 1 0 1 0 1 0\n1\n-29744\n",
      "20\n12 46 89 16 75 93 35 2 43 68 24 37 83 46 82 49 49 25 4 53\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n1\n-50\n",
      "30\n62 48 36 36 7 90 52 8 100 3 90 79 79 1 69 100 74 69 93 65 11 98 50 54 61 31 38 65 14 98\n3 0 3 2 1 2 2 3 0 2 3 2 0 0 1 2 3 3 0 2 0 3 1 3 1 1 0 0 2\n1\n-20\n",
      "2\n7 28\n26\n1\n-46\n",
      "20\n54 52 44 46 92 3 45 82 95 6 72 86 37 55 91 55 65 85 52 6\n1 1 1 1 0 0 0 1 1 0 1 2 1 1 1 1 0 0 0\n1\n24\n",
      "40\n48 62 9 44 65 93 94 54 41 44 37 43 78 79 74 56 81 95 10 64 50 6 5 86 57 90 27 12 75 41 71 15 58 42 65 73 67 45 15 25\n0 3 3 3 3 4 1 1 4 2 2 4 2 2 3 4 2 3 1 2 4 4 4 4 2 1 4 3 1 3 0 4 0 4 3 4 3 0 1\n1\n-44\n",
      "60\n99 63 10 93 9 69 81 82 41 3 52 49 6 72 61 95 86 44 20 38 50 52 41 20 22 94 33 79 40 31 22 89 92 69 78 82 87 98 14 55 100 62 77 83 63 70 14 65 17 69 23 73 55 76 30 70 67 26 63 68\n1 2 0 3 1 1 2 2 5 1 0 0 5 0 2 4 5 1 1 1 5 2 3 1 0 0 1 4 1 4 0 3 4 2 5 2 5 1 5 0 0 2 1 4 1 3 5 1 4 5 1 5 4 2 1 2 5 1 3\n1\n-11\n",
      "20\n48 55 46 38 12 63 24 34 54 97 35 68 36 74 12 95 34 33 7 59\n3 5 2 3 3 0 0 5 2 0 5 5 5 4 4 6 3 2 6\n1\n2\n",
      "10\n26 10 19 71 11 48 81 100 96 85\n3 1 5 5 0 4 4 1 0\n1\n-12\n",
      "20\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n2 1 3 1 3 3 3 1 0 3 0 2 2 1 1 3 1 2 2\n1\n100000\n",
      "20\n17 83 51 51 66 64 2 18 64 70 22 92 96 23 87 2 100 7 60 79\n4 3 0 5 6 4 9 8 8 9 4 4 1 0 5 6 4 9 5\n1\n-15\n",
      "20\n42 69 54 74 18 44 55 12 43 49 20 35 71 91 23 45 70 66 57 11\n1 0 1 0 0 1 1 0 1 1 1 1 0 1 0 0 0 0 1\n1\n-2\n",
      "40\n37 40 93 32 34 41 79 65 48 36 25 77 18 14 0 41 60 81 9 51 46 35 2 92 1 48 13 81 41 73 50 81 16 25 64 89 61 60 62 94\n3 2 2 4 4 4 4 2 0 0 2 1 1 4 4 1 3 4 4 1 1 1 1 2 1 1 2 1 4 1 2 1 0 2 3 2 4 2 4\n1\n-3\n",
      "100\n45 21 34 56 15 0 46 59 40 39 78 83 29 77 19 30 60 39 90 64 11 47 10 47 35 79 30 13 21 31 26 68 0 67 52 43 29 94 100 76 16 61 74 34 62 63 4 41 78 31 77 21 90 2 43 70 53 15 53 29 47 87 33 20 23 30 55 57 13 25 19 89 10 17 92 24 47 6 4 91 52 9 11 25 81 14 82 75 46 84 66 62 28 84 88 57 0 19 34 94\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n21\n",
      "20\n33 94 53 35 47 78 90 32 54 98 3 65 12 12 21 55 94 5 36 83\n0 0 0 2 2 2 2 2 1 2 2 2 1 0 0 1 1 0 2\n1\n30\n",
      "20\n57 42 39 79 84 90 23 96 40 9 65 1 90 67 0 27 48 32 55 86\n8 4 4 8 1 5 7 4 2 8 6 10 9 7 6 4 2 10 5\n1\n-23\n",
      "100\n17 9 8 16 34 17 52 66 41 2 43 16 18 2 6 16 73 35 48 79 31 13 74 63 91 87 14 49 18 61 94 2 76 97 40 100 32 53 33 31 64 96 12 53 64 71 25 85 44 6 93 88 32 17 90 65 14 70 45 5 11 86 58 58 83 92 24 4 90 25 14 45 24 42 37 4 35 79 30 31 88 13 68 56 3 58 39 75 1 8 9 90 74 77 29 97 36 69 17 88\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n1\n",
      "70\n53 6 86 15 90 85 33 71 97 20 63 86 77 74 73 6 39 35 40 25 79 85 60 66 39 37 0 83 94 86 96 93 5 72 36 57 10 80 84 54 22 9 23 74 74 45 76 74 42 30 21 36 36 32 25 19 77 19 0 53 29 26 52 92 94 88 61 37 21 14\n4 1 3 4 0 2 3 0 2 0 4 3 3 5 3 5 3 3 3 0 5 4 1 1 4 2 3 1 4 2 4 2 5 0 0 5 2 0 5 2 3 5 2 4 5 0 4 5 5 5 2 5 2 1 3 4 3 0 1 5 3 0 1 1 2 3 5 3 5\n1\n-85\n",
      "100\n45 4 100 7 62 78 23 54 97 21 41 14 0 20 23 85 30 94 26 23 38 15 9 48 72 54 21 52 28 11 98 47 17 77 29 10 95 31 26 24 67 27 50 91 37 52 93 58 18 33 73 40 43 51 31 96 68 85 97 10 80 49 51 70 6 8 54 44 49 72 79 62 13 97 6 69 40 70 10 22 59 71 94 53 16 47 28 51 73 69 41 51 6 59 90 24 97 12 72 8\n0 1 0 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 0\n1\n5\n",
      "20\n79 33 19 90 72 83 79 78 81 59 33 91 13 76 81 28 76 90 71 41\n0 1 10 2 8 2 9 8 0 4 5 5 2 2 5 0 9 9 2\n1\n-9\n",
      "10\n4 98 67 26 94 57 56 67 84 76\n0 5 2 1 3 0 5 0 2\n1\n4\n",
      "10\n77 14 42 68 100 38 40 99 75 67\n0 1 0 2 1 1 0 0 0\n1\n43\n",
      "100\n31 4 40 53 75 6 10 72 62 52 92 37 63 19 12 52 21 63 90 78 32 7 98 68 53 60 26 68 40 62 2 47 44 40 43 12 74 76 87 61 52 40 59 86 44 17 12 17 39 77 94 22 61 43 98 15 93 51 57 12 70 3 1 17 84 96 13 7 12 12 70 84 0 51 23 58 92 62 63 64 82 87 82 10 8 20 39 25 85 17 38 63 17 73 94 28 34 21 27 2\n0 0 1 0 0 0 1 1 1 1 1 0 1 1 0 0 0 1 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0\n1\n-11\n",
      "15\n32 104 82 70 57 2 54 62 31 40 45 23 49 51 24\n2 1 2 1 1 2 1 2 1 0 1 0 1 0\n1\n30\n",
      "20\n39 1 41 50 22 11 24 35 4 46 23 80 88 33 63 3 71 97 76 91\n5 0 0 5 0 3 4 7 3 1 2 5 6 0 2 3 0 5 1\n1\n4\n",
      "20\n70 79 36 48 68 10 79 84 96 72 35 76 39 5 92 96 38 12 56 3\n2 4 3 2 4 1 2 3 1 2 5 3 3 3 2 3 5 2 0\n1\n5\n",
      "10\n8 39 84 74 25 3 75 39 3 51\n1 2 2 2 2 2 1 0 0\n1\n-6\n",
      "30\n45 63 41 0 9 11 50 83 33 74 62 85 42 29 17 26 4 0 33 85 16 11 46 98 87 81 33 50 0 22\n1 3 0 1 2 2 0 1 2 1 3 2 0 1 1 2 0 0 2 1 0 2 0 1 3 1 0 3 1\n1\n19\n",
      "60\n29 25 14 70 34 23 42 4 23 89 57 5 0 9 75 24 54 14 61 51 66 90 19 89 5 37 25 76 91 31 16 3 42 47 8 86 52 26 96 28 83 61 22 67 79 40 92 3 87 9 13 33 62 95 1 47 43 50 82 47\n5 2 4 2 0 2 4 0 2 0 2 3 1 0 2 5 0 4 3 1 2 3 4 1 0 3 5 5 4 2 0 4 5 3 5 0 3 5 5 0 5 2 4 2 1 1 4 2 1 0 4 5 3 5 1 4 3 3 3\n1\n-65\n",
      "100\n63 7 18 73 45 1 30 16 100 61 76 95 15 3 4 15 1 46 100 34 72 36 15 67 44 65 27 46 79 91 71 0 23 80 45 37 3 12 6 61 93 19 66 73 42 24 48 55 52 18 25 67 8 18 20 72 58 17 70 35 39 8 89 53 88 76 67 93 1 53 42 33 82 26 24 10 14 7 24 81 23 48 58 71 42 17 91 89 78 93 97 20 13 79 39 31 7 9 9 97\n1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 1 1 0 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 0 0 1 1 0 0 0 0 1 1 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 0 0 0 0 1 1\n1\n-18\n",
      "20\n24 80 16 48 46 37 91 66 37 21 2 77 97 15 61 97 98 69 4 26\n3 3 0 4 4 4 2 1 4 0 3 0 3 0 3 1 0 4 2\n1\n8\n",
      "20\n79 3 74 58 91 63 79 83 12 22 3 9 21 13 41 65 1 48 20 38\n1 0 2 2 0 1 2 3 2 1 3 2 1 0 3 1 0 0 1\n1\n17\n",
      "50\n41 51 1 29 15 13 7 83 74 32 55 109 16 44 41 11 38 6 96 28 29 94 15 98 84 4 35 89 82 67 31 16 79 33 80 59 81 53 7 89 96 67 12 85 12 9 52 94 57 15\n5 4 3 2 0 3 1 3 2 3 5 1 5 4 3 5 5 0 5 0 2 1 2 3 1 5 4 2 5 1 2 2 1 2 4 3 2 4 5 2 1 0 3 4 3 5 0 4 4\n1\n-28\n",
      "15\n1 90 89 8 53 49 67 44 96 10 25 22 93 77 24\n1 2 0 0 1 2 1 0 2 0 2 -1 1 2\n1\n-4\n",
      "3\n2 3 4\n4 1\n1\n-1\n",
      "100\n95 54 23 27 51 58 94 34 29 95 53 53 8 5 64 32 17 62 14 37 26 95 27 85 94 37 85 72 88 69 43 9 60 3 48 26 81 48 89 56 34 28 2 63 26 6 24 19 99 41 70 24 92 41 9 73 52 42 34 98 16 82 7 81 28 80 18 33 90 69 19 13 51 96 8 21 86 32 96 7 5 42 52 87 24 82 14 88 4 69 7 69 4 16 55 14 27 89 32 42\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n44\n",
      "50\n22 43 83 63 10 95 45 4 6 73 41 86 77 90 0 79 44 9 95 40 79 81 95 39 52 36 23 25 24 17 50 46 69 92 22 39 22 48 76 36 39 27 73 37 9 95 59 49 26 32\n3 4 5 2 3 1 5 5 3 5 4 3 4 2 2 1 2 2 2 1 1 2 4 5 2 1 4 4 4 5 1 2 3 2 0 0 0 1 1 1 0 0 0 1 5 5 2 5 1\n1\n-62\n",
      "20\n12 46 89 16 75 93 35 2 43 68 24 67 83 46 82 49 49 25 4 53\n0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0\n1\n-50\n",
      "30\n62 48 36 36 7 90 52 8 100 3 90 79 79 1 69 100 74 69 93 65 11 98 50 54 61 31 38 65 14 98\n3 0 3 2 1 2 2 3 0 2 3 2 0 0 1 2 3 3 0 2 0 3 1 3 1 2 0 0 2\n1\n-20\n",
      "20\n54 52 44 46 92 3 45 82 95 6 72 86 37 55 91 55 65 85 52 6\n1 1 1 1 0 0 0 1 1 -1 1 2 1 1 1 1 0 0 0\n1\n24\n",
      "40\n48 62 9 44 65 93 94 54 41 44 37 43 78 69 74 56 81 95 10 64 50 6 5 86 57 90 27 12 75 41 71 15 58 42 65 73 67 45 15 25\n0 3 3 3 3 4 1 1 4 2 2 4 2 2 3 4 2 3 1 2 4 4 4 4 2 1 4 3 1 3 0 4 0 4 3 4 3 0 1\n1\n-44\n",
      "60\n99 63 10 93 9 69 81 82 41 3 52 49 6 72 61 95 86 44 20 38 50 52 41 20 22 94 33 79 40 31 22 89 92 69 78 82 87 98 14 55 100 62 77 83 63 70 14 65 17 69 23 73 55 76 30 70 67 26 63 68\n1 2 0 3 1 1 2 2 5 1 0 0 5 0 2 4 5 1 1 1 5 2 3 1 0 0 1 4 1 4 0 3 4 2 5 2 5 0 5 0 0 2 1 4 1 3 5 1 4 5 1 5 4 2 1 2 5 1 3\n1\n-11\n",
      "20\n48 55 46 38 12 63 24 34 54 97 35 68 36 74 3 95 34 33 7 59\n3 5 2 3 3 0 0 5 2 0 5 5 5 4 4 6 3 2 6\n1\n2\n",
      "10\n26 10 19 71 11 48 81 100 96 165\n3 1 5 5 0 4 4 1 0\n1\n-12\n",
      "20\n17 83 51 51 66 64 2 18 64 70 22 92 96 23 87 2 100 7 60 79\n4 3 0 5 6 4 9 8 8 9 4 4 1 0 5 6 4 9 5\n1\n-30\n",
      "20\n42 69 54 74 18 44 55 12 43 49 20 35 71 91 23 45 70 66 57 11\n1 0 1 0 0 1 1 0 1 1 1 1 0 1 0 0 0 -1 1\n1\n-2\n",
      "40\n37 40 93 32 34 41 79 65 48 36 25 77 18 14 0 41 60 81 9 51 46 35 2 92 1 67 13 81 41 73 50 81 16 25 64 89 61 60 62 94\n3 2 2 4 4 4 4 2 0 0 2 1 1 4 4 1 3 4 4 1 1 1 1 2 1 1 2 1 4 1 2 1 0 2 3 2 4 2 4\n1\n-3\n",
      "100\n45 21 34 56 15 0 46 59 40 39 78 83 29 77 19 30 60 39 90 64 11 47 10 47 35 79 30 13 21 31 26 68 0 67 52 43 29 94 100 76 16 61 74 34 62 63 4 41 78 31 77 21 90 2 43 70 53 15 53 29 47 87 33 20 23 30 55 57 13 25 19 89 10 17 92 24 47 6 4 91 52 9 11 25 81 14 82 75 46 84 66 62 28 84 7 57 0 19 34 94\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1\n21\n",
      "20\n33 94 53 35 47 78 90 32 54 98 3 113 12 12 21 55 94 5 36 83\n0 0 0 2 2 2 2 2 1 2 2 2 1 0 0 1 1 0 2\n1\n30\n",
      "20\n57 42 39 79 84 90 23 96 15 9 65 1 90 67 0 27 48 32 55 86\n8 4 4 8 1 5 7 4 2 8 6 10 9 7 6 4 2 10 5\n1\n-23\n",
      "100\n17 9 8 16 34 17 52 66 41 2 43 16 18 2 6 16 73 35 48 79 31 13 74 63 91 87 14 49 18 61 94 2 76 97 40 100 32 53 33 31 64 96 12 53 64 71 25 85 44 6 93 88 32 17 90 65 14 70 45 5 11 86 58 58 83 92 24 4 90 25 14 45 24 42 37 4 35 79 30 31 88 13 68 56 3 58 39 75 1 8 9 90 74 77 29 97 36 69 17 88\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n1\n1\n",
      "70\n53 6 86 15 90 85 33 71 97 20 63 86 77 74 73 6 39 35 40 25 79 85 60 66 39 37 0 83 94 86 96 93 5 72 36 57 10 125 84 54 22 9 23 74 74 45 76 74 42 30 21 36 36 32 25 19 77 19 0 53 29 26 52 92 94 88 61 37 21 14\n4 1 3 4 0 2 3 0 2 0 4 3 3 5 3 5 3 3 3 0 5 4 1 1 4 2 3 1 4 2 4 2 5 0 0 5 2 0 5 2 3 5 2 4 5 0 4 5 5 5 2 5 2 1 3 4 3 0 1 5 3 0 1 1 2 3 5 3 5\n1\n-85\n",
      "100\n45 4 100 7 62 78 23 54 97 21 41 14 0 20 23 85 30 94 26 23 38 15 9 48 72 54 21 52 28 11 98 47 17 77 29 10 95 31 26 24 67 27 50 91 37 52 93 58 18 33 73 40 43 51 31 96 68 85 97 10 80 49 51 70 6 8 54 44 49 72 79 62 13 97 6 69 40 70 10 22 59 71 94 53 16 18 28 51 73 69 41 51 6 59 90 24 97 12 72 8\n0 1 0 0 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 0 0 1 1 1 0 1 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 1 1 0 0 1 0 1 1 1 0 0 1 0 1 0 1 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 0 1 1 0 0 0\n1\n5\n",
      "20\n79 33 19 90 72 83 79 78 81 59 33 91 13 76 81 28 76 90 71 41\n0 1 10 2 8 2 9 8 1 4 5 5 2 2 5 0 9 9 2\n1\n-9\n",
      "10\n77 14 42 68 100 38 40 99 75 67\n0 1 0 2 1 1 0 1 0\n1\n43\n",
      "100\n31 4 40 53 75 6 10 72 62 52 92 37 63 19 12 52 21 63 90 78 32 7 98 68 53 60 26 68 40 62 2 47 44 40 43 12 74 76 87 61 52 40 59 86 44 17 12 17 39 77 94 22 61 43 98 15 93 51 57 12 70 3 1 17 84 96 13 7 12 12 70 84 0 51 23 58 92 62 63 64 82 87 82 10 8 20 39 25 85 17 38 63 17 73 94 28 34 21 27 2\n0 0 1 0 0 0 1 1 1 1 1 0 1 1 0 0 0 2 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 1 1 1 0 0 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 1 0 0 0 1 0 1 1 1 1 0 0 1 0 0 1 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0\n1\n-11\n"
    ],
    "outputs": [
      "56\n",
      "907807822\n",
      "408830248\n",
      "789889900\n",
      "123629641\n",
      "832833773\n",
      "232\n",
      "57024642\n",
      "306268707\n",
      "517730103\n",
      "614879607\n",
      "367574431\n",
      "0\n",
      "970766156\n",
      "3235671\n",
      "6060798\n",
      "398097764\n",
      "505914704\n",
      "114801142\n",
      "218316571\n",
      "590810078\n",
      "128076327\n",
      "181290753\n",
      "725187430\n",
      "492539982\n",
      "57117241\n",
      "764609643\n",
      "227004414\n",
      "639\n",
      "414551113\n",
      "819983018\n",
      "580682236\n",
      "682295888\n",
      "286438863\n",
      "354295915\n",
      "0\n",
      "388832500\n",
      "29\n",
      "618918958\n",
      "190959448\n",
      "119200780\n",
      "225489981\n",
      "169824048\n",
      "927322670\n",
      "789889900\n",
      "123629641\n",
      "894938418\n",
      "232\n",
      "493875887\n",
      "420681216\n",
      "723224586\n",
      "274036331\n",
      "367482064\n",
      "0\n",
      "428924688\n",
      "354374544\n",
      "679992149\n",
      "586864986\n",
      "972991708\n",
      "539877066\n",
      "955793873\n",
      "879695772\n",
      "119553404\n",
      "836632788\n",
      "522075555\n",
      "438736837\n",
      "982055373\n",
      "701482937\n",
      "301056751\n",
      "431502073\n",
      "136141315\n",
      "472045048\n",
      "211137126\n",
      "363693474\n",
      "328893870\n",
      "694749\n",
      "784003019\n",
      "653347931\n",
      "19\n",
      "796119079\n",
      "238298188\n",
      "694916203\n",
      "294130203\n",
      "384258419\n",
      "796929200\n",
      "591777345\n",
      "484646892\n",
      "11737354\n",
      "510849849\n",
      "738253709\n",
      "191230015\n",
      "688822985\n",
      "430211347\n",
      "893134893\n",
      "862269833\n",
      "885695189\n",
      "74845381\n",
      "286718015\n",
      "8778647\n",
      "656476524\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &num:0 Store)) (_starred_content (Name &wiz:0 Store)) (_starred_content (Name &per:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &per:0 Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (Name &y:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &z:0 Load) Sub (Name &x:0 Load)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &z:0 Store)) (Name g_input Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_queue (list (alias &*:0 None)) i0) (ImportFrom s_sys (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &*:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_itertools (list (alias &*:0 None)) i0) (ImportFrom s_bisect (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0) (ImportFrom s_math (list (alias s_factorial &f:0)) i0) (FunctionDef &lcd:0 (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load)) FloorDiv (Call (Name g_gcd Load) (list (_starred_content (Name &xnum1:1 Load)) (_starred_content (Name &xnum2:1 Load))) nil)))) nil None None) (Expr (Constant s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ== None)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &t:0 Load) Sub (Name &x:0 Load)))) nil))) nil))) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &percentage:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Name &percentage:0 Load) Sub (Name &x:0 Load)))) nil))) nil))) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd None)) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Call (Name g_list Load) (list (_starred_content (Subscript (Name &s:3 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil) Sub (Constant i1 None)) None)) Load))) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store)) (Call (Name &invr:0 Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp (Call (Name &ceil:0 Load) (list (_starred_content (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:4 Load)))) nil))) nil))) (list (ExceptHandler (Name g_Exception Load) &e:4 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:4 Load))) nil))))) (/seq) (/seq))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s__fd Store)) (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:5 Load) s_write Store)) (IfExp (Attribute (Name &self:5 Load) s_writable Load) (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq)) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:6 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:6 Load))) nil))) Load))) (/seq)) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:7 Load) s_count Load) (list (_starred_content (Constant bCg== None))) nil) Add (UnaryOp Not (Name &b:7 Load))) None) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:7 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:7 Load))) nil))) Load))) (/seq)) (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:8 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (_starred_content (Attribute (Name &self:8 Load) s__fd Load)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil))) nil)) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load) (list (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None))) nil))) Load))) (/seq))) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (_starred_content (Name &file:9 Load))) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_flush Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:9 Load) s_writable Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:9 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (_starred_content (Call (Attribute (Name &s:10 Load) s_encode Load) (list (_starred_content (Constant s_ascii None))) nil))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Store)) (_starred_content (Attribute (Name &sys:0 Load) s_stdout Store))) Store)) (Tuple (list (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Load))) nil)) (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdout Load))) nil))) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (_starred_content (Constant s-WzEzLCAxMF0= None))) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) Sub (Name &x:0 Load)))) nil))) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list LtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)) (list Gt) (list (Constant i0 None))) (BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)) (Constant i0 None)))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load))) (_starred_content (Constant i0 None))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load)))) nil) (list Gt) (list (Constant i0 None))) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load)))) nil) (Constant i0 None)))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple #0 Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "[L]"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare #0 (list Gt) (list (Constant i0 None))) #0 (Constant i0 None)))) nil))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (Constant i0 None)) (_starred_content (BinOp #0 Sub (Name %1 Load)))) nil))) nil))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 (list (_starred_content (Name &num:0 Store)) (_starred_content (Name &wiz:0 Store)) (_starred_content (Name &per:0 Store)))) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (BinOp (BinOp (BinOp (Name &k:0 Load) Add (Name &wiz:0 Load)) Div (Name &num:0 Load)) Mult (Constant i100 None)) (list Lt) (list (Name &per:0 Load))) (/seq (AugAssign (Name &k:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &k:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (AugAssign (Name &y:0 Store) Div (Constant i100 None)) (Assign (list (Name &c:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (If (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &c:0 Load)) Div (Name &n:0 Load)) (list GtE) (list (Name &y:0 Load))) (/seq Break) (/seq)) (AugAssign (Name &c:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (Assign (list (Name &z:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Name &x:0 Load) (list GtE) (list (Name &z:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &z:0 Load) Sub (Name &x:0 Load)))) nil))))) nil)",
      "(Module (/seq (Assign (list (Name &z:0 Store)) (Name g_input Load) None) (Assign (list (Name &mod:0 Store)) (BinOp (BinOp (Constant i10 None) Pow (Constant i9 None)) Add (Constant i7 None)) None) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_queue (list (alias &*:0 None)) i0) (ImportFrom s_sys (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias &*:0 None)) i0) (ImportFrom s_math (list (alias &*:0 None)) i0) (ImportFrom s_heapq (list (alias &*:0 None)) i0) (ImportFrom s_itertools (list (alias &*:0 None)) i0) (ImportFrom s_bisect (list (alias &*:0 None)) i0) (ImportFrom s_collections (list (alias s_Counter &cc:0)) i0) (ImportFrom s_math (list (alias s_factorial &f:0)) i0) (FunctionDef &lcd:0 (arguments nil (list (arg &xnum1:1 None None) (arg &xnum2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Name &xnum1:1 Load) Mult (Name &xnum2:1 Load)) FloorDiv (Call (Name g_gcd Load) (list (_starred_content (Name &xnum1:1 Load)) (_starred_content (Name &xnum2:1 Load))) nil)))) nil None None) (Expr (Constant s-WzEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDIsIDExMSwgMTE0LCAzMiwgOTUsIDMyLCAxMDUsIDExMCwgMzIsIDExNCwgOTcsIDExMCwgMTAzLCAxMDEsIDQwLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCA0MSwgNTgsIDEwLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMDgsIDEwNSwgMTE1LCAxMTYsIDQwLCAxMDksIDk3LCAxMTIsIDQwLCAxMDUsIDExMCwgMTE2LCA0NCwgMTIyLCA0MCwgNDEsIDQ2LCAxMTUsIDExMiwgMTA4LCAxMDUsIDExNiwgNDAsIDQxLCA0MSwgNDEsIDEwLCAxMCwgMTEwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDEwLCA5NywgNDQsIDk4LCA2MSwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDEwLCAxMCwgMTA4LCA2MSwgMTE1LCAxMDEsIDExNiwgNDAsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCA0MSwgMTAsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDEwLCAxMTgsIDExMSwgMTE5LCAxMDEsIDEwOCwgNjEsIDEyMywgMzksIDk3LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDEwMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDUsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTExLCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExNywgMzksIDU4LCA0OCwgMTI1LCAxMCwgMTAsIDk5LCAxMTEsIDEwOCwgMTExLCAxMTQsIDQ1LCA1MiwgNjEsIDkxLCAzNCwgNzEsIDM0LCA0NCwgMzIsIDM0LCA3MSwgNjYsIDM0LCA0NCwgMzIsIDM0LCA4OSwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgNzMsIDM0LCA0NCwgMzIsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDM0LCAzMiwgNDQsIDM0LCA3OSwgODksIDcxLCA2NiwgNzMsIDg2LCAzNCwgNDQsIDM5LCA4MiwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzksIDMyLCA5MywgMTAsIDEwXQ== None)) (For (Name &_:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None))) nil) (/seq (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (Assign (list (Name &w:0 Store)) (Name &x:0 Load) None) (Assign (list (Name &m:0 Store)) (BinOp (Name &n:0 Load) Sub (Name &x:0 Load)) None) (Assign (list (Name &t:0 Store)) (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) None) (fn_3 (Name &t:0 Load) &x:0)) (/seq) None)) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (Assign (list (Name &percentage:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Mult (Name &n:0 Load)) Div (Constant i100 None)))) nil) None) (fn_3 (Name &percentage:0 Load) &x:0)) nil)",
      "(Module (/seq (Expr (Constant s-WzEwLCAzMiwgMTAsIDExMCwgNjEsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDEwLCAzMiwgMTAsIDEwMiwgMTExLCAxMTQsIDMyLCA5NSwgMzIsIDEwNSwgMTEwLCAzMiwgMTE0LCA5NywgMTEwLCAxMDMsIDEwMSwgNDAsIDEwNSwgMTEwLCAxMTYsIDQwLCAxMjIsIDQwLCA0MSwgNDEsIDQxLCA1OCwgMTAsIDMyLCAxMCwgMTIwLCA2MSwgMTA1LCAxMTAsIDExNiwgNDAsIDEyMiwgNDAsIDQxLCA0MSwgMTAsIDMyLCAxMCwgMTA4LCA2MSwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMTAsIDYxLCAxMDUsIDExMCwgMTE2LCA0MCwgMTIyLCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDExMSwgMTE0LCAxMTYsIDEwMSwgMTAwLCA0MCwgMTA4LCAxMDUsIDExNSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCA0MSwgOTEsIDU4LCA1OCwgNDUsIDQ5LCA5MywgMTAsIDMyLCAxMCwgOTcsIDQ0LCA5OCwgNjEsIDEwOSwgOTcsIDExMiwgNDAsIDEwNSwgMTEwLCAxMTYsIDQ0LCAxMjIsIDQwLCA0MSwgNDYsIDExNSwgMTEyLCAxMDgsIDEwNSwgMTE2LCA0MCwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDYxLCAxMTUsIDEwMSwgMTE2LCA0MCwgMTA5LCA5NywgMTEyLCA0MCwgMTA1LCAxMTAsIDExNiwgNDQsIDEyMiwgNDAsIDQxLCA0NiwgMTE1LCAxMTIsIDEwOCwgMTA1LCAxMTYsIDQwLCA0MSwgNDEsIDQxLCAxMCwgMzIsIDEwLCAxMDgsIDEwMSwgMTAwLCA2MSwgNDAsIDU0LCA0NCwgNTAsIDQ0LCA1MywgNDQsIDUzLCA0NCwgNTIsIDQ0LCA1MywgNDQsIDU0LCA0NCwgNTEsIDQ0LCA1NSwgNDQsIDU0LCA0MSwgMTAsIDMyLCAxMCwgMTE4LCAxMTEsIDExOSwgMTAxLCAxMDgsIDYxLCAxMjMsIDM5LCA5NywgMzksIDU4LCA0OCwgNDQsIDM5LCAxMDEsIDM5LCA1OCwgNDgsIDQ0LCAzOSwgMTA1LCAzOSwgNTgsIDQ4LCA0NCwgMzksIDExMSwgMzksIDU4LCA0OCwgNDQsIDM5LCAxMTcsIDM5LCA1OCwgNDgsIDEyNSwgMTAsIDMyLCAxMCwgOTksIDExMSwgMTA4LCAxMTEsIDExNCwgNTIsIDYxLCA5MSwgMzQsIDcxLCAzNCwgNDQsIDMyLCAzNCwgNzEsIDY2LCAzNCwgNDQsIDMyLCAzNCwgODksIDcxLCA2NiwgMzQsIDQ0LCAzMiwgMzQsIDg5LCA3MSwgNjYsIDczLCAzNCwgNDQsIDMyLCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCAzNCwgMzIsIDQ0LCAzNCwgNzksIDg5LCA3MSwgNjYsIDczLCA4NiwgMzQsIDQ0LCAzOSwgODIsIDc5LCA4OSwgNzEsIDY2LCA3MywgODYsIDM5LCAzMiwgOTMsIDEwLCAzMiwgMTBd None)) (Import (list (alias &os:0 None))) (Import (list (alias &sys:0 None))) (ImportFrom s_io (list (alias &BytesIO:0 None) (alias &IOBase:0 None)) i0) (Assign (list (Name &input:0 Store)) (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) None) (FunctionDef &inp:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_int Load) (list (_starred_content (Call (Name &input:0 Load) nil nil))) nil))) nil None None) (FunctionDef &inlt:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil None None) (FunctionDef &insr:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &s:3 Store)) (Call (Name &input:0 Load) nil nil) None) (Return (Call (Name g_list Load) (list (_starred_content (Subscript (Name &s:3 Load) (_slice_slice (Slice None (BinOp (Call (Name g_len Load) (list (_starred_content (Name &s:3 Load))) nil) Sub (Constant i1 None)) None)) Load))) nil))) nil None None) (FunctionDef &invr:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil))) nil None None) (ImportFrom s_math (list (alias &ceil:0 None)) i0) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Try (/seq (Assign (list (Tuple (list (_starred_content (Name &n:4 Store)) (_starred_content (Name &x:4 Store)) (_starred_content (Name &y:4 Store))) Store)) (Call (Name &invr:0 Load) nil nil) None) (fn_3 (Call (Name &ceil:0 Load) (list (_starred_content (BinOp (BinOp (Name &y:4 Load) Mult (Name &n:4 Load)) Div (Constant i100 None)))) nil) &x:4)) (list (ExceptHandler (Name g_Exception Load) &e:4 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &e:4 Load))) nil))))) (/seq) (/seq))) nil None None) (Assign (list (Name &BUFSIZE:0 Store)) (Constant i8192 None) None) (ClassDef &FastIO:0 (list (Name &IOBase:0 Load)) nil (/seq (Assign (list (Name &newlines:1 Store)) (Constant i0 None) None) (FunctionDef &__init__:1 (arguments nil (list (arg &self:5 None None) (arg &file:5 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:5 Load) s__fd Store)) (Call (Attribute (Name &file:5 Load) s_fileno Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_buffer Store)) (Call (Name &BytesIO:0 Load) nil nil) None) (Assign (list (Attribute (Name &self:5 Load) s_writable Store)) (BoolOp Or (list (Compare (Constant s_x None) (list In) (list (Attribute (Name &file:5 Load) s_mode Load))) (Compare (Constant s_r None) (list NotIn) (list (Attribute (Name &file:5 Load) s_mode Load))))) None) (Assign (list (Attribute (Name &self:5 Load) s_write Store)) (IfExp (Attribute (Name &self:5 Load) s_writable Load) (Attribute (Attribute (Name &self:5 Load) s_buffer Load) s_write Load) (Constant None None)) None)) nil None None) (FunctionDef &read:1 (arguments nil (list (arg &self:6 None None)) None nil nil None nil) (/seq (While (Constant True None) (/seq (Assign (list (Name &b:6 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:6 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (If (UnaryOp Not (Name &b:6 Load)) (/seq Break) (/seq)) (Assign (list (Name &ptr:6 Store)) (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:6 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:6 Load))) nil))) Load))) (/seq)) (Assign (list (Attribute (Name &self:6 Load) s_newlines Store)) (Constant i0 None) None) (Return (Call (Attribute (Attribute (Name &self:6 Load) s_buffer Load) s_read Load) nil nil))) nil None None) (FunctionDef &readline:1 (arguments nil (list (arg &self:7 None None)) None nil nil None nil) (/seq (While (Compare (Attribute (Name &self:7 Load) s_newlines Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &b:7 Store)) (Call (Attribute (Name &os:0 Load) s_read Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load)) (_starred_content (Call (Name g_max Load) (list (_starred_content (Attribute (Call (Attribute (Name &os:0 Load) s_fstat Load) (list (_starred_content (Attribute (Name &self:7 Load) s__fd Load))) nil) s_st_size Load)) (_starred_content (Name &BUFSIZE:0 Load))) nil))) nil) None) (Assign (list (Attribute (Name &self:7 Load) s_newlines Store)) (BinOp (Call (Attribute (Name &b:7 Load) s_count Load) (list (_starred_content (Constant bCg== None))) nil) Add (UnaryOp Not (Name &b:7 Load))) None) (Assign (list (Name &ptr:7 Store)) (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_tell Load) nil nil) None) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None)) (_starred_content (Constant i2 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_write Load) (list (_starred_content (Name &b:7 Load))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_seek Load) (list (_starred_content (Name &ptr:7 Load))) nil))) Load))) (/seq)) (AugAssign (Attribute (Name &self:7 Load) s_newlines Store) Sub (Constant i1 None)) (Return (Call (Attribute (Attribute (Name &self:7 Load) s_buffer Load) s_readline Load) nil nil))) nil None None) (FunctionDef &flush:1 (arguments nil (list (arg &self:8 None None)) None nil nil None nil) (/seq (If (Attribute (Name &self:8 Load) s_writable Load) (/seq (Expr (Call (Attribute (Name &os:0 Load) s_write Load) (list (_starred_content (Attribute (Name &self:8 Load) s__fd Load)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_getvalue Load) nil nil))) nil)) (Expr (Tuple (list (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_truncate Load) (list (_starred_content (Constant i0 None))) nil)) (_starred_content (Call (Attribute (Attribute (Name &self:8 Load) s_buffer Load) s_seek Load) (list (_starred_content (Constant i0 None))) nil))) Load))) (/seq))) nil None None)) nil) (ClassDef &IOWrapper:0 (list (Name &IOBase:0 Load)) nil (/seq (FunctionDef &__init__:2 (arguments nil (list (arg &self:9 None None) (arg &file:9 None None)) None nil nil None nil) (/seq (Assign (list (Attribute (Name &self:9 Load) s_buffer Store)) (Call (Name &FastIO:0 Load) (list (_starred_content (Name &file:9 Load))) nil) None) (Assign (list (Attribute (Name &self:9 Load) s_flush Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_flush Load) None) (Assign (list (Attribute (Name &self:9 Load) s_writable Store)) (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_writable Load) None) (Assign (list (Attribute (Name &self:9 Load) s_write Store)) (Lambda (arguments nil (list (arg &s:10 None None)) None nil nil None nil) (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_write Load) (list (_starred_content (Call (Attribute (Name &s:10 Load) s_encode Load) (list (_starred_content (Constant s_ascii None))) nil))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_read Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_read Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None) (Assign (list (Attribute (Name &self:9 Load) s_readline Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &self:9 Load) s_buffer Load) s_readline Load) nil nil) s_decode Load) (list (_starred_content (Constant s_ascii None))) nil)) None)) nil None None)) nil) (Assign (list (Tuple (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Store)) (_starred_content (Attribute (Name &sys:0 Load) s_stdout Store))) Store)) (Tuple (list (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdin Load))) nil)) (_starred_content (Call (Name &IOWrapper:0 Load) (list (_starred_content (Attribute (Name &sys:0 Load) s_stdout Load))) nil))) Load) None) (Assign (list (Name &input:0 Store)) (Lambda (arguments nil nil None nil nil None nil) (Call (Attribute (Call (Attribute (Attribute (Name &sys:0 Load) s_stdin Load) s_readline Load) nil nil) s_rstrip Load) (list (_starred_content (Constant s-WzEzLCAxMF0= None))) nil)) None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (Assign (list (Name &d:0 Store)) (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Div (Constant i100 None)) Mult (Name &n:0 Load)))) nil) None) (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list Gt) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) Sub (Name &x:0 Load)))) nil))) (/seq (If (Compare (Call (Name g_int Load) (list (_starred_content (Name &d:0 Load))) nil) (list LtE) (list (Name &x:0 Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq))))) nil)",
      "(Module (/seq (ImportFrom s_math (list (alias g_ceil None)) i0) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (fn_2 (BinOp (Call (Name g_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load)))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)))) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name g_max Load) (list (_starred_content (BinOp (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Mult (Name &y:0 Load)) Div (Constant i100 None)))) nil) Sub (Name &x:0 Load))) (_starred_content (Constant i0 None))) nil))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)) (_starred_content (Name &c:0 Store)))) (fn_2 (Call (Attribute (Name g_math Load) s_ceil Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &c:0 Load)) Div (Constant i100 None)) Sub (Name &b:0 Load)))) nil))) nil)"
    ],
    "inputs": [
      "1000 352 146\n",
      "10 1 14\n",
      "20 10 50\n",
      "7879 2590 2818\n",
      "78 28 27\n",
      "9178 2255 7996\n",
      "6571 6449 8965\n",
      "6151 6148 3746\n",
      "6487 5670 8\n",
      "4890 1112 5\n",
      "4909 2111 8860\n",
      "10000 10000 10000\n",
      "78 55 96\n",
      "3271 5 50\n",
      "1 1 10000\n",
      "8484 6400 547\n",
      "10000 10000 1\n",
      "9678 6173 5658\n",
      "8403 7401 4769\n",
      "10000 1 10000\n",
      "7261 5328 10\n",
      "2379 1436 9663\n",
      "11 9 60\n",
      "71 49 65\n",
      "3871 3795 7\n",
      "10000 1 1\n",
      "54 4 38\n",
      "78 73 58\n",
      "3 1 69\n",
      "1 1 1\n",
      "8890 5449 8734\n",
      "7835 6710 1639\n",
      "4470 2543 6\n",
      "68 65 20\n",
      "7878 4534 9159\n",
      "67 1 3\n",
      "70 38 66\n",
      "1138 570 6666\n",
      "2765 768 9020\n",
      "3478 1728 9727\n",
      "7754 204 9038\n",
      "9620 6557 6\n",
      "13372 2590 2818\n",
      "78 28 44\n",
      "9178 2255 2041\n",
      "6571 10325 8965\n",
      "6151 6148 1348\n",
      "12786 5670 8\n",
      "1879 2111 8860\n",
      "3271 0 50\n",
      "1 1 10001\n",
      "15152 6400 547\n",
      "13765 6173 5658\n",
      "16485 7401 4769\n",
      "10000 2 10000\n",
      "2379 1436 8446\n",
      "98 49 65\n",
      "10000 2 1\n",
      "63 4 38\n",
      "78 17 58\n",
      "2 1 69\n",
      "6874 6710 1639\n",
      "7878 6286 9159\n",
      "70 0 66\n",
      "1138 113 6666\n",
      "2765 768 5875\n",
      "3478 1728 16162\n",
      "1000 152 146\n",
      "22247 2590 2818\n",
      "78 28 45\n",
      "9178 2255 218\n",
      "1829 10325 8965\n",
      "6151 11631 1348\n",
      "1879 2307 8860\n",
      "5324 0 50\n",
      "1 2 10001\n",
      "15152 6400 973\n",
      "13765 43 5658\n",
      "16485 10573 4769\n",
      "2379 1436 5829\n",
      "186 49 65\n",
      "92 4 38\n",
      "6874 6710 2202\n",
      "8743 6286 9159\n",
      "67 2 6\n",
      "70 0 132\n",
      "1138 113 227\n",
      "3478 1728 7736\n",
      "13 1 18\n",
      "64 10 50\n",
      "3142 2590 2818\n",
      "9178 2255 137\n",
      "1829 10325 17617\n",
      "8925 11631 1348\n",
      "7390 353 5\n",
      "1879 3729 8860\n",
      "5324 -1 50\n",
      "4602 6400 973\n",
      "13765 43 4295\n",
      "12248 10573 4769\n"
    ],
    "outputs": [
      "1108\n",
      "1\n",
      "0\n",
      "219441\n",
      "0\n",
      "731618\n",
      "582642\n",
      "224269\n",
      "0\n",
      "0\n",
      "432827\n",
      "990000\n",
      "20\n",
      "1631\n",
      "99\n",
      "40008\n",
      "0\n",
      "541409\n",
      "393339\n",
      "999999\n",
      "0\n",
      "228447\n",
      "0\n",
      "0\n",
      "0\n",
      "99\n",
      "17\n",
      "0\n",
      "2\n",
      "0\n",
      "771004\n",
      "121706\n",
      "0\n",
      "0\n",
      "717013\n",
      "2\n",
      "9\n",
      "75290\n",
      "248635\n",
      "336578\n",
      "700603\n",
      "0\n",
      "374233\n",
      "7\n",
      "185068\n",
      "578766\n",
      "76768\n",
      "0\n",
      "164369\n",
      "1636\n",
      "100\n",
      "76482\n",
      "772651\n",
      "778769\n",
      "999998\n",
      "199495\n",
      "15\n",
      "98\n",
      "20\n",
      "29\n",
      "1\n",
      "105955\n",
      "715261\n",
      "47\n",
      "75747\n",
      "161676\n",
      "560387\n",
      "1308\n",
      "624331\n",
      "8\n",
      "17754\n",
      "153645\n",
      "71285\n",
      "164173\n",
      "2662\n",
      "99\n",
      "141029\n",
      "778781\n",
      "775597\n",
      "137236\n",
      "72\n",
      "31\n",
      "144656\n",
      "794486\n",
      "3\n",
      "93\n",
      "2471\n",
      "267331\n",
      "2\n",
      "22\n",
      "85952\n",
      "10319\n",
      "311890\n",
      "108678\n",
      "17\n",
      "162751\n",
      "2663\n",
      "38378\n",
      "591164\n",
      "573535\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Constant s_I None) (list In) (list (Name &s:0 Load))) (Call (Name g_int Load) (list (_starred_content (Compare (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))))) nil) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))) (/seq (If (Compare (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &cows:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &bets:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_input Load) nil nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) (list Eq) (list (Constant i0 None))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))))))))) nil)",
      "(Module (/seq (Assign (list (Name &c:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None) (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &a:0 Load))) nil))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &i:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &status:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &allin:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &folded:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None) (Assign (list (Name &In:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &allin:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Subscript (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None)))) Load))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))) Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &Is:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_I None))) (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))) (/seq (If (Compare (Name &Is:0 Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_A None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (Dict (list (Constant s_A None) (Constant s_F None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &ch:0 Store) (Call (Name g_input Load) nil nil) (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &ch:0 Load)) Store) Add (Constant i1 None))) (/seq) None) (If (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &c:0 Load) (_slice_content (Constant s_A None)) Load))) nil))) (/seq (If (Compare (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil))))))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/seq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) ?0 (If (Compare #1 (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) #2 nil))) (/seq (If (Compare #1 (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) #0 nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))))))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [
          "[StarredRoot]",
          "E",
          "[StarredRoot]"
        ],
        "dfa_choicevars": [
          "seqS"
        ],
        "choice_arity": 1,
        "arity": 3,
        "dfa_root": "seqS"
      },
      {
        "body": "(If (Compare #1 (list Eq) (list (Constant i1 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i1 None))) nil))) #0)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "seqS",
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "S"
      },
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) (Call (Name g_input Load) nil nil) None))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Constant i0 None))) nil)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_4 &n:0 &s:0)) (Expr (Call (Name g_print Load) (list (_starred_content (IfExp (Compare (Constant s_I None) (list In) (list (Name &s:0 Load))) (Call (Name g_int Load) (list (_starred_content (Compare (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i1 None))))) nil) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil)))) nil))) nil)",
      "(Module (fn_1 (list (_starred_content (Constant i1 None))) (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list (_starred_content (Call (Attribute (Name &c:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) &n:0 (/choiceseq (Assign (list (Name &c:0 Store)) (Call (Name g_input Load) nil nil) None))) nil)",
      "(Module (/seq (/splice (fn_4 &cows:0 &bets:0)) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &i:0 Load) (list Gt) (list (Constant i1 None))) (fn_5) (/seq (fn_2 (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &bets:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))) (Name &i:0 Load))))) nil)",
      "(Module (/seq (/splice (fn_4 &n:0 &t:0)) (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) (list Eq) (list (Constant i0 None))) (/seq (fn_2 (fn_5) (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil))) (/seq (fn_2 (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Gt) (list (Constant i1 None))) (fn_5) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil))) nil))))) (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil))))) nil)",
      "(Module (fn_1 (list (_starred_content (Name &i:0 Load))) (Name &i:0 Load) (list (_starred_content (Name &a:0 Load))) &c:0 (/choiceseq (Assign (list (Name &s:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &p:0 Store)) (ListComp (Name &i:1 Load) (list (comprehension (Name &i:1 Store) (Name &s:0 Load) nil i0))) None) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &i:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Assign (list (Name &f:0 Store)) (Call (Attribute (Name &p:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None))) nil)",
      "(Module (/seq (/splice (fn_3 &n:0 &status:0)) (Assign (list (Name &allin:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &folded:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil) None) (Assign (list (Name &In:0 Store)) (Call (Attribute (Name &status:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (If (Compare (Name &In:0 Load) (list Gt) (list (Constant i1 None))) (fn_5) (/seq)) (fn_2 (/seq) (Name &In:0 Load)) (If (Compare (Name &In:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &allin:0 Load))) nil))) (/seq))) nil)",
      "(Module (/seq (/splice (fn_4 &n:0 &s:0)) (Assign (list (Name &a:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_A None))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Attribute (Name &s:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (List (list (_starred_content (Name &a:0 Load)) (_starred_content (Subscript (List (list (_starred_content (Constant i1 None)) (_starred_content (Constant i0 None))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i1 None)))) Load))) Load) (_slice_content (Compare (Name &b:0 Load) (list NotEq) (list (Constant i0 None)))) Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_3 &n:0 &a:0)) (Assign (list (Name &Is:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_I None))) (/seq (AugAssign (Name &Is:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (If (Compare (Name &Is:0 Load) (list GtE) (list (Constant i2 None))) (fn_5) (/seq (fn_2 (/seq (Assign (list (Name &count:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &a:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list Eq) (list (Constant s_A None))) (/seq (AugAssign (Name &count:0 Store) Add (Constant i1 None))) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &count:0 Load))) nil))) (Name &Is:0 Load))))) nil)",
      "(Module (fn_1 (list (_starred_content (Constant i1 None))) (Subscript (Name &c:0 Load) (_slice_content (Constant s_I None)) Load) (list (_starred_content (Subscript (Name &c:0 Load) (_slice_content (Constant s_A None)) Load))) &n:0 (/choiceseq (Assign (list (Name &c:0 Store)) (Dict (list (Constant s_A None) (Constant s_F None) (Constant s_I None)) (list (Constant i0 None) (Constant i0 None) (Constant i0 None))) None) (For (Name &ch:0 Store) (Call (Name g_input Load) nil nil) (/seq (AugAssign (Subscript (Name &c:0 Load) (_slice_content (Name &ch:0 Load)) Store) Add (Constant i1 None))) (/seq) None))) nil)",
      "(Module (/seq (/splice (fn_3 &a:0 &t:0)) (fn_2 (/seq (If (Compare (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_F None))) nil)))) nil))) (fn_5))) (Call (Attribute (Name &t:0 Load) s_count Load) (list (_starred_content (Constant s_I None))) nil))) nil)"
    ],
    "inputs": [
      "3\nAFI\n",
      "6\nAFFAAA\n",
      "2\nFF\n",
      "5\nIIIIF\n",
      "5\nFAFFF\n",
      "2\nFA\n",
      "3\nAAA\n",
      "5\nFAIAF\n",
      "5\nAIFFF\n",
      "3\nFFF\n",
      "3\nFIF\n",
      "3\nIII\n",
      "5\nFAAII\n",
      "2\nIF\n",
      "8\nAFFFFIAF\n",
      "5\nIIIII\n",
      "3\nIAA\n",
      "10\nAAAAAAAAAA\n",
      "3\nIIF\n",
      "8\nIAAIFFFI\n",
      "3\nAFF\n",
      "3\nIIA\n",
      "5\nAFAFA\n",
      "5\nAAAAI\n",
      "5\nAIAIF\n",
      "100\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n",
      "5\nFFFAF\n",
      "5\nIIAAF\n",
      "5\nAAFFA\n",
      "6\nAAAFFA\n",
      "2\nAF\n",
      "8\nIFFFIAAI\n",
      "3\nFFA\n",
      "3\nAII\n",
      "5\nIAAAA\n",
      "3\nIFA\n",
      "5\nFFFFA\n",
      "5\nAFFFF\n",
      "3\nIFF\n",
      "2\nFI\n",
      "3\nAAI\n",
      "5\nFAAFA\n",
      "3\nFIA\n",
      "5\nAFFAA\n",
      "3\nFAI\n",
      "5\nFIIII\n",
      "5\nIAFAF\n",
      "8\nIFAIFAFI\n",
      "3\nIAF\n",
      "5\nFFAFF\n",
      "5\nAAFAF\n",
      "3\nFFI\n",
      "3\nAIF\n",
      "5\nAAFIF\n",
      "8\nIFAFIAFI\n",
      "5\nFIFAA\n",
      "5\nFAIIA\n",
      "8\nFAIFFFFA\n",
      "3\nAIA\n",
      "8\nFAAIFFII\n",
      "5\nAFAAF\n",
      "5\nIAAIF\n",
      "3\nFAF\n",
      "5\nAIAAA\n",
      "8\nIFAFIFAI\n",
      "8\nIIFFIAAF\n",
      "6\nAFAFAA\n",
      "6\nAAFAFA\n",
      "5\nIFIII\n",
      "5\nFAIFA\n",
      "8\nAFIFFFAF\n",
      "5\nAAIAA\n",
      "5\nFIAIA\n",
      "5\nAAAIA\n",
      "5\nFAFAI\n",
      "5\nFAFAA\n",
      "5\nAIFFA\n",
      "5\nAAAFF\n",
      "5\nAFIAF\n",
      "8\nAAIFFFFF\n",
      "5\nFIAAI\n",
      "8\nIAFIFFAI\n",
      "5\nFFAAA\n",
      "5\nAIIAF\n",
      "8\nFAAIIFFI\n",
      "6\nAFAAFA\n",
      "8\nIAFIFAFI\n",
      "5\nIAFFA\n",
      "5\nFAAAF\n",
      "5\nFIAFA\n",
      "8\nIAFIFFIA\n",
      "8\nIAFIAFFI\n",
      "8\nIFFAIFAI\n",
      "5\nAAFII\n",
      "8\nFFAFFIAF\n",
      "6\nFAAAFA\n",
      "6\nAFAAAF\n",
      "5\nAAIFF\n",
      "8\nFFFFFIAA\n",
      "5\nIAAFI\n"
    ],
    "outputs": [
      "1",
      "4",
      "0",
      "0",
      "1",
      "1",
      "3",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "1",
      "1",
      "0",
      "1",
      "10",
      "0",
      "0",
      "1",
      "0",
      "3",
      "1",
      "0",
      "100",
      "1\n",
      "0\n",
      "3\n",
      "4\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "3\n",
      "1\n",
      "3\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "3\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "0\n",
      "3\n",
      "0\n",
      "1\n",
      "1\n",
      "0\n",
      "0\n",
      "4\n",
      "4\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "3\n",
      "1\n",
      "3\n",
      "1\n",
      "1\n",
      "0\n",
      "0\n",
      "3\n",
      "0\n",
      "0\n",
      "4\n",
      "0\n",
      "1\n",
      "3\n",
      "1\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "1\n",
      "4\n",
      "4\n",
      "1\n",
      "1\n",
      "0\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i0 None))) Load) None) (While (Compare (Name &a:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &s:0 Store) Add (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &a:0 Store)) (BinOp (BinOp (Name &a:0 Load) FloorDiv (Name &b:0 Load)) Add (BinOp (Name &a:0 Load) Mod (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (Constant i0 None) None) (While (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Sub (Constant i1 None)) (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (If (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (AugAssign (Name &x:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &h:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None) (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None) (While (Compare (Name &melt:0 Load) (list GtE) (list (Name &b:0 Load))) (/seq (AugAssign (Name &hrs:0 Store) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) (Assign (list (Name &melt:0 Store)) (BinOp (BinOp (Name &melt:0 Load) Mod (Name &b:0 Load)) Add (BinOp (Name &melt:0 Load) FloorDiv (Name &b:0 Load))) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &hrs:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Name g_math Load) s_floor Load) (list (_starred_content (BinOp (Name &l:0 Load) Div (Name &m:0 Load)))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load)) None) (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None) (AugAssign (Name &c:0 Store) Add (Name &x:0 Load)) (Assign (list (Name &n:0 Store)) (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load))) None) (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None) (While (Name &a:0 Load) (/seq (AugAssign (Name &r:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &l:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) FloorDiv (Name &b:0 Load))) (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &l:0 Load)) Mod (Name &b:0 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &r:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &i:1 Load))) nil) (list (comprehension (Name &i:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (While (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &res:0 Store) Add (Name &a:0 Load)) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &k:0 Store))) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) FloorDiv (Name &b:0 Load))) (_starred_content (BinOp (BinOp (Name &a:0 Load) Add (Name &k:0 Load)) Mod (Name &b:0 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &res:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_log None)) i0) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq)) (Return (Call (Name &gcd:0 Load) (list (_starred_content (BinOp (Name &b:1 Load) Mod (Name &a:1 Load))) (_starred_content (Name &a:1 Load))) nil))) nil None None) (Assign (list (Name &fast_reader:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &fast_writer:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print:0 (arguments nil nil (arg &argv:2 None None) nil nil None nil) (/seq (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0))))) nil))) nil)) (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (AugAssign (Name &u:0 Store) Add (Name &a:0 Load)) (AugAssign (Name &t:0 Store) Add (Name &a:0 Load)) (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None) (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None))))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(Assign (list (Tuple #0 Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "[L]"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(Assign (list (Tuple #0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name %1 Load))) nil) (list (comprehension (Name %1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None)",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [
          "[L]"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(/subseq (While #0 (/seq (AugAssign (Name %2 Store) Add (Name %1 Load)) (Assign (list (Tuple (list (_starred_content (Name %1 Store)) (_starred_content (Name %4 Store))) Store)) (Tuple (list (_starred_content (BinOp (BinOp (Name %1 Load) Add (Name %4 Load)) FloorDiv (Name %3 Load))) (_starred_content (BinOp (BinOp (Name %1 Load) Add (Name %4 Load)) Mod (Name %3 Load)))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name %2 Load))) nil)))",
        "sym_arity": 4,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      },
      {
        "body": "(While (Compare (Name %2 Load) (list GtE) (list (Name %1 Load))) (/seq (AugAssign (Name %3 Store) Add (BinOp (Name %2 Load) FloorDiv (Name %1 Load))) (Assign (list (Name %2 Store)) (BinOp (BinOp (Name %2 Load) #1 (Name %1 Load)) Add (BinOp (Name %2 Load) #0 (Name %1 Load))) None)) (/seq))",
        "sym_arity": 3,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "O",
          "O"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "S"
      }
    ],
    "rewritten": [
      "(Module (/seq (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)))) (Assign (list (Tuple (list (_starred_content (Name &c:0 Store)) (_starred_content (Name &s:0 Store))) Store)) (Tuple (list (_starred_content (Name &a:0 Load)) (_starred_content (Constant i0 None))) Load) None) (fn_4 Mod FloorDiv &b:0 &a:0 &s:0) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &s:0 Load) Add (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (fn_2 (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store))) &x:1) (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (Assign (list (Name &h:0 Store)) (Constant i0 None) None) (While (Compare (Name &x:0 Load) (list Gt) (list (Constant i0 None))) (/seq (AugAssign (Name &x:0 Store) Sub (Constant i1 None)) (AugAssign (Name &b:0 Store) Add (Constant i1 None)) (If (Compare (Name &b:0 Load) (list Eq) (list (Name &y:0 Load))) (/seq (Assign (list (Name &b:0 Store)) (Constant i0 None) None) (AugAssign (Name &x:0 Store) Add (Constant i1 None))) (/seq)) (AugAssign (Name &h:0 Store) Add (Constant i1 None))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &h:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)))) (Assign (list (Name &hrs:0 Store)) (Name &a:0 Load) None) (Assign (list (Name &melt:0 Store)) (Name &a:0 Load) None) (fn_4 FloorDiv Mod &b:0 &melt:0 &hrs:0) (Expr (Call (Name g_print Load) (list (_starred_content (Name &hrs:0 Load))) nil))) nil)",
      "(Module (/seq (Import (list (alias g_math None))) (fn_1 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store)))) (Assign (list (Name &s:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &l:0 Store)) (Name &n:0 Load) None) (While (Compare (Name &n:0 Load) (list Gt) (list (Constant i0 None))) (/seq (Assign (list (Name &n:0 Store)) (Call (Attribute (Name g_math Load) s_floor Load) (list (_starred_content (BinOp (Name &l:0 Load) Div (Name &m:0 Load)))) nil) None) (Assign (list (Name &l:0 Store)) (BinOp (BinOp (Name &l:0 Load) Mod (Name &m:0 Load)) Add (Name &n:0 Load)) None) (AugAssign (Name &s:0 Store) Add (Name &n:0 Load))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:0 Load))) nil))) nil)",
      "(Module (/seq (fn_2 (list (_starred_content (Name &n:0 Store)) (_starred_content (Name &m:0 Store))) &i:1) (Assign (list (Name &c:0 Store)) (Name &n:0 Load) None) (Assign (list (Name &d:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (Assign (list (Name &x:0 Store)) (BinOp (Name &n:0 Load) FloorDiv (Name &m:0 Load)) None) (AugAssign (Name &c:0 Store) Add (Name &x:0 Load)) (Assign (list (Name &n:0 Store)) (BinOp (Name &x:0 Load) Add (BinOp (Name &n:0 Load) Mod (Name &m:0 Load))) None) (If (Compare (Name &n:0 Load) (list Lt) (list (Name &m:0 Load))) (/seq Break) (/seq))) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &c:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)))) (Assign (list (Name &r:0 Store) (Name &l:0 Store)) (Constant i0 None) None) (/splice (fn_3 (Name &a:0 Load) &a:0 &r:0 &b:0 &l:0))) nil)",
      "(Module (/seq (fn_2 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) &i:1) (Assign (list (Name &res:0 Store)) (Constant i0 None) None) (Assign (list (Name &k:0 Store)) (Constant i0 None) None) (/splice (fn_3 (Compare (Name &a:0 Load) (list Gt) (list (Constant i0 None))) &a:0 &res:0 &b:0 &k:0))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (ImportFrom s_math (list (alias g_log None)) i0) (FunctionDef &gcd:0 (arguments nil (list (arg &a:1 None None) (arg &b:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &a:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (Name &b:1 Load))) (/seq)) (Return (Call (Name &gcd:0 Load) (list (_starred_content (BinOp (Name &b:1 Load) Mod (Name &a:1 Load))) (_starred_content (Name &a:1 Load))) nil))) nil None None) (Assign (list (Name &fast_reader:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) None) (Assign (list (Name &fast_writer:0 Store)) (Attribute (Attribute (Name g_sys Load) s_stdout Load) s_write Load) None) (FunctionDef &input:0 (arguments nil nil None nil nil None nil) (/seq (Return (Call (Attribute (Call (Name &fast_reader:0 Load) nil nil) s_strip Load) nil nil))) nil None None) (FunctionDef &print:0 (arguments nil nil (arg &argv:2 None None) nil nil None nil) (/seq (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Call (Attribute (Constant s-WzMyXQ== None) s_join Load) (list (_starred_content (GeneratorExp (Call (Name g_str Load) (list (_starred_content (Name &i:3 Load))) nil) (list (comprehension (Name &i:3 Store) (Name &argv:2 Load) nil i0))))) nil))) nil)) (Expr (Call (Name &fast_writer:0 Load) (list (_starred_content (Constant s-WzEwXQ== None))) nil))) nil None None) (Assign (list (Tuple (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name &input:0 Load) nil nil) s_split Load) nil nil))) nil) None) (Assign (list (Name &ans:0 Store)) (BinOp (Name &a:0 Load) Add (BinOp (BinOp (Name &a:0 Load) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None)))) None) (Expr (Call (Name &print:0 Load) (list (_starred_content (Name &ans:0 Load))) nil))) nil)",
      "(Module (/seq (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)))) (Assign (list (Name &t:0 Store)) (Constant i0 None) None) (Assign (list (Name &u:0 Store)) (Constant i0 None) None) (While (Constant True None) (/seq (AugAssign (Name &u:0 Store) Add (Name &a:0 Load)) (AugAssign (Name &t:0 Store) Add (Name &a:0 Load)) (Assign (list (Name &a:0 Store)) (BinOp (Name &u:0 Load) FloorDiv (Name &b:0 Load)) None) (AugAssign (Name &u:0 Store) Sub (BinOp (Name &a:0 Load) Mult (Name &b:0 Load))) (If (Compare (Name &a:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &t:0 Load))) nil)) Break) (/seq))) (/seq))) nil)",
      "(Module (/seq (fn_1 (list (_starred_content (Name &a:0 Store)) (_starred_content (Name &b:0 Store)))) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (BinOp (BinOp (Name &a:0 Load) Mult (Name &b:0 Load)) Sub (Constant i1 None)) FloorDiv (BinOp (Name &b:0 Load) Sub (Constant i1 None))))) nil))) nil)"
    ],
    "inputs": [
      "4 2\n",
      "6 3\n",
      "5 3\n",
      "1000 3\n",
      "777 17\n",
      "4 3\n",
      "2 2\n",
      "100 4\n",
      "10 4\n",
      "999 2\n",
      "6 4\n",
      "1 2\n",
      "17 3\n",
      "1 4\n",
      "26 8\n",
      "91 5\n",
      "1 3\n",
      "1000 2\n",
      "20 3\n",
      "9 4\n",
      "123 5\n",
      "1000 1000\n",
      "3 2\n",
      "3 3\n",
      "80 970\n",
      "1000 4\n",
      "1 1000\n",
      "777 20\n",
      "110 4\n",
      "12 4\n",
      "500 2\n",
      "11 4\n",
      "1 8\n",
      "26 11\n",
      "91 4\n",
      "20 4\n",
      "123 10\n",
      "7 4\n",
      "7 3\n",
      "4 5\n",
      "777 9\n",
      "110 8\n",
      "12 2\n",
      "2 8\n",
      "26 16\n",
      "91 8\n",
      "123 12\n",
      "14 4\n",
      "200 9\n",
      "100 8\n",
      "14 5\n",
      "12 16\n",
      "162 8\n",
      "123 16\n",
      "4 4\n",
      "200 14\n",
      "111 8\n",
      "162 3\n",
      "123 6\n",
      "23 14\n",
      "111 11\n",
      "12 8\n",
      "321 3\n",
      "80 6\n",
      "37 14\n",
      "371 3\n",
      "80 9\n",
      "46 14\n",
      "11 12\n",
      "371 5\n",
      "80 7\n",
      "58 14\n",
      "8 17\n",
      "371 8\n",
      "80 12\n",
      "21 14\n",
      "158 12\n",
      "158 23\n",
      "3 14\n",
      "158 7\n",
      "12 5\n",
      "2 4\n",
      "2 16\n",
      "14 8\n",
      "4 16\n",
      "12 15\n",
      "4 24\n",
      "14 2\n",
      "011 11\n",
      "11 8\n",
      "5 24\n",
      "8 4\n",
      "001 11\n",
      "5 17\n",
      "20 2\n",
      "001 2\n",
      "11 15\n",
      "11 30\n",
      "4 17\n",
      "9 14\n"
    ],
    "outputs": [
      "7\n",
      "8\n",
      "7\n",
      "1499\n",
      "825\n",
      "5\n",
      "3\n",
      "133\n",
      "13\n",
      "1997\n",
      "7\n",
      "1\n",
      "25\n",
      "1\n",
      "29\n",
      "113\n",
      "1\n",
      "1999\n",
      "29\n",
      "11\n",
      "153\n",
      "1001\n",
      "5\n",
      "4\n",
      "80\n",
      "1333\n",
      "1\n",
      "817\n",
      "146\n",
      "15\n",
      "999\n",
      "14\n",
      "1\n",
      "28\n",
      "121\n",
      "26\n",
      "136\n",
      "9\n",
      "10\n",
      "4\n",
      "874\n",
      "125\n",
      "23\n",
      "2\n",
      "27\n",
      "103\n",
      "134\n",
      "18\n",
      "224\n",
      "114\n",
      "17\n",
      "12\n",
      "185\n",
      "131\n",
      "5\n",
      "215\n",
      "126\n",
      "242\n",
      "147\n",
      "24\n",
      "122\n",
      "13\n",
      "481\n",
      "95\n",
      "39\n",
      "556\n",
      "89\n",
      "49\n",
      "11\n",
      "463\n",
      "93\n",
      "62\n",
      "8\n",
      "423\n",
      "87\n",
      "22\n",
      "172\n",
      "165\n",
      "3\n",
      "184\n",
      "14\n",
      "2\n",
      "2\n",
      "15\n",
      "4\n",
      "12\n",
      "4\n",
      "27\n",
      "12\n",
      "12\n",
      "5\n",
      "10\n",
      "1\n",
      "5\n",
      "39\n",
      "1\n",
      "11\n",
      "11\n",
      "4\n",
      "9\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a_sum:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &b_sum:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &c_sum:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &l:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l1:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (Assign (list (Name &l2:0 Store)) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (Assign (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil)) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq)) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) None)) (/seq))) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq)) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) None)) (/seq))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &t:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &a:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &b:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &c:0 Load))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &li1:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &li2:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &li3:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &li1:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &li2:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &li3:0 Load))) nil)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &flag1:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag1:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (/seq)) (Assign (list (Name &flag2:0 Store)) (Constant True None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (If (Compare (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag2:0 Store)) (Constant False None) None) Break) (/seq))) (/seq) None) (If (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (Assign (list (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))) nil) (/seq (If (Compare (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list NotEq) (list (Subscript (Subscript (Name &alist:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load))) nil)) Break) (/seq))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil))) None)) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &initial_len:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &initial_list:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &second_list:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (Assign (list (Name &third_list:0 Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &initial_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &second_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &second_list:0 Load) (_slice_content (Name &index:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break) (/seq))))) (/seq) None) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &second_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &third_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (/seq (If (Compare (Name &item:0 Load) (list NotEq) (list (Subscript (Name &third_list:0 Load) (_slice_content (Name &index:0 Load)) Load))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil)) Break) (/seq))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load))) (_starred_content (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &a:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &lst_1:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &lst_2:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &lst_3:0 Store)) (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil))) nil) None) (Assign (list (Name &first_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_1:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil)) None) (Assign (list (Name &second_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_3:0 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &first_mistake:0 Load)) (_starred_content (Constant s-WzEwXQ== None)) (_starred_content (Name &second_mistake:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil))) nil) (/seq (If (Compare (Subscript (Name &c:0 Load) (_slice_content (Name &i:0 Load)) Load) (list NotEq) (list (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None) Break) (/seq))) (/seq) None) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/subseq (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %2 Store)) #0 None) (Assign (list (Name %3 Store)) #0 None) (Assign (list (Name %4 Store)) #0 None))",
        "sym_arity": 4,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      },
      {
        "body": "(list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "[StarredRoot]"
      },
      {
        "body": "(Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Call (Name g_sum Load) (list (_starred_content (Name %2 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name %1 Load))) nil)))) nil))",
        "sym_arity": 2,
        "dfa_symvars": [
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "S"
      },
      {
        "body": "(For (Name %1 Store) (Call (Name g_range Load) #0 nil) (/seq (If (Compare (Subscript (Name %3 Load) (_slice_content (Name %1 Load)) Load) (list NotEq) (list (Subscript (Name %2 Load) (_slice_content (Name %1 Load)) Load))) (/seq ?0 Break) (/seq)) ?1) (/seq) None)",
        "sym_arity": 3,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [
          "[StarredRoot]"
        ],
        "dfa_choicevars": [
          "seqS",
          "seqS"
        ],
        "choice_arity": 2,
        "arity": 1,
        "dfa_root": "S"
      },
      {
        "body": "(/seq (If (Compare #0 (list NotEq) #1) (/seq (Expr (Call (Name g_print Load) (list (_starred_content #0)) nil)) Break) (/seq)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E",
          "[E]"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 2,
        "dfa_root": "seqS"
      },
      {
        "body": "(/seq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript #0 (_slice_content (UnaryOp USub (Constant i1 None))) Load))) nil)))",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "seqS"
      }
    ],
    "rewritten": [
      "(Module (/seq (/splice (fn_1 (Call (Name g_sum Load) (fn_2) nil) &n:0 &a_sum:0 &b_sum:0 &c_sum:0)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a_sum:0 Load) Sub (Name &b_sum:0 Load)))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &b_sum:0 Load) Sub (Name &c_sum:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) &n:0 &l:0 &l1:0 &l2:0)) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) nil) (/seq (Assign (list (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) nil) (/seq (Assign (list (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_int Load) (list (_starred_content (Subscript (Name &l2:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) None)) (/seq) None) (Expr (Call (Attribute (Name &l:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l1:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &l2:0 Load) s_sort Load) nil nil)) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (fn_4 (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) &i:0 &l1:0 &l:0 (/choiceseq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/choiceseq (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &l:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i1 None))) Load) None)) (/seq)))) (fn_4 (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) &i:0 &l2:0 &l1:0 (/choiceseq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/choiceseq (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &l1:0 Load) (_slice_content (BinOp (Name &n:0 Load) Sub (Constant i2 None))) Load) None)) (/seq)))) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) (list (_starred_content (Constant s-WzMyXQ== None))) nil))) nil))) nil) &t:0 &a:0 &b:0 &c:0)) (fn_3 &b:0 &a:0) (fn_3 &c:0 &b:0)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (fn_2) nil) &n:0 &li1:0 &li2:0 &li3:0)) (fn_3 &li2:0 &li1:0) (fn_3 &li3:0 &li2:0)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (fn_2) nil))) nil) &n:0 &a:0 &b:0 &c:0)) (Assign (list (Name &flag1:0 Store)) (Constant True None) None) (fn_4 (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) &i:0 &a:0 &b:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag1:0 Store)) (Constant False None) None)) (/choiceseq)) (If (Compare (Name &flag1:0 Load) (list Eq) (list (Constant True None))) (fn_6 (Name &a:0 Load)) (/seq)) (Assign (list (Name &flag2:0 Store)) (Constant True None) None) (fn_4 (list (_starred_content (BinOp (Name &n:0 Load) Sub (Constant i2 None)))) &i:0 &c:0 &b:0 (/choiceseq (Expr (Call (Name g_print Load) (list (_starred_content (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil)) (Assign (list (Name &flag2:0 Store)) (Constant False None) None)) (/choiceseq)) (If (Compare (Name &flag2:0 Load) (list Eq) (list (Constant True None))) (fn_6 (Name &b:0 Load)) (/seq))) nil)",
      "(Module (/seq (Import (list (alias g_sys None))) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &alist:0 Store)) (Call (Name g_dict Load) nil nil) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i3 None))) nil) (/seq (Assign (list (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Store)) (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Attribute (Attribute (Name g_sys Load) s_stdin Load) s_readline Load) nil nil) s_split Load) nil nil))) nil))) nil))) nil) None)) (/seq) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &j:0 Store) (Call (Name g_range Load) (list (_starred_content (BinOp (BinOp (Name &n:0 Load) Sub (Name &i:0 Load)) Sub (Constant i1 None)))) nil) (fn_5 (Subscript (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load) (_slice_content (Name &j:0 Load)) Load) (list (Subscript (Subscript (Name &alist:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Load) (_slice_content (Name &j:0 Load)) Load))) (fn_6 (Subscript (Name &alist:0 Load) (_slice_content (Name &i:0 Load)) Load)) None)) (/seq) None)) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_sorted Load) (list (_starred_content (Call (Name g_list Load) (fn_2) nil))) nil) &initial_len:0 &initial_list:0 &second_list:0 &third_list:0)) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &initial_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &second_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (fn_5 (Name &item:0 Load) (list (Subscript (Name &second_list:0 Load) (_slice_content (Name &index:0 Load)) Load))))) (/seq) None) (For (Tuple (list (_starred_content (Name &index:0 Store)) (_starred_content (Name &item:0 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &second_list:0 Load))) nil) (/seq (If (Compare (Name &index:0 Load) (list Eq) (list (Call (Name g_len Load) (list (_starred_content (Name &third_list:0 Load))) nil))) (/seq (Expr (Call (Name g_print Load) (list (_starred_content (Name &item:0 Load))) nil))) (fn_5 (Name &item:0 Load) (list (Subscript (Name &third_list:0 Load) (_slice_content (Name &index:0 Load)) Load))))) (/seq) None)) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (Call (Name g_sum Load) (fn_2) nil) None) (Assign (list (Name &b:0 Store)) (Call (Name g_sum Load) (fn_2) nil) None) (Assign (list (Name &c:0 Store)) (Call (Name g_sum Load) (fn_2) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (BinOp (Name &a:0 Load) Sub (Name &b:0 Load))) (_starred_content (BinOp (Name &b:0 Load) Sub (Name &c:0 Load)))) nil))) nil)",
      "(Module (/seq (/splice (fn_1 (Call (Name g_list Load) (fn_2) nil) &a:0 &lst_1:0 &lst_2:0 &lst_3:0)) (Assign (list (Name &first_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_1:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil)) None) (Assign (list (Name &second_mistake:0 Store)) (BinOp (Call (Name g_sum Load) (list (_starred_content (Name &lst_2:0 Load))) nil) Sub (Call (Name g_sum Load) (list (_starred_content (Name &lst_3:0 Load))) nil)) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &first_mistake:0 Load)) (_starred_content (Constant s-WzEwXQ== None)) (_starred_content (Name &second_mistake:0 Load))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_input Load) nil nil) None) (Assign (list (Name &a:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:1 Load))) nil) (list (comprehension (Name &x:1 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &b:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:2 Load))) nil) (list (comprehension (Name &x:2 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &c:0 Store)) (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:3 Load))) nil) (list (comprehension (Name &x:3 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) None) (Assign (list (Name &x:0 Store)) (Constant i0 None) None) (Assign (list (Name &y:0 Store)) (Constant i0 None) None) (Expr (Call (Attribute (Name &a:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &b:0 Load) s_sort Load) nil nil)) (Expr (Call (Attribute (Name &c:0 Load) s_sort Load) nil nil)) (fn_4 (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &b:0 Load))) nil))) &i:0 &b:0 &a:0 (/choiceseq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/choiceseq)) (If (Compare (Name &x:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &x:0 Store)) (Subscript (Name &a:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (fn_4 (list (_starred_content (Call (Name g_len Load) (list (_starred_content (Name &c:0 Load))) nil))) &i:0 &b:0 &c:0 (/choiceseq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (Name &i:0 Load)) Load) None)) (/choiceseq)) (If (Compare (Name &y:0 Load) (list Eq) (list (Constant i0 None))) (/seq (Assign (list (Name &y:0 Store)) (Subscript (Name &b:0 Load) (_slice_content (UnaryOp USub (Constant i1 None))) Load) None)) (/seq)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)"
    ],
    "inputs": [
      "6\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n",
      "5\n1 5 8 123 7\n123 7 5 1\n5 1 7\n",
      "3\n1 2 3\n3 2\n2\n",
      "3\n84 30 9\n9 84\n9\n",
      "4\n1 5 7 8\n1 5 7\n1 5\n",
      "3\n796067435 964699482 819602309\n964699482 796067435\n964699482\n",
      "10\n460626451 802090732 277246428 661369649 388684428 784303821 376287098 656422756 9301599 25720377\n277246428 388684428 661369649 460626451 656422756 802090732 9301599 784303821 376287098\n376287098 802090732 388684428 9301599 656422756 784303821 460626451 277246428\n",
      "6\n5 4 3 3 5 5\n3 5 5 4 3\n3 5 4 3\n",
      "3\n168638990 939116221 323703261\n168638990 323703261\n168638990\n",
      "3\n77 77 77\n77 77\n77\n",
      "3\n374054998 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n77 42 77\n77 77\n77\n",
      "3\n77 31 77\n77 77\n77\n",
      "4\n1 5 7 12\n1 5 7\n1 5\n",
      "3\n77 77 140\n77 77\n77\n",
      "4\n1 5 7 4\n1 5 7\n1 5\n",
      "3\n84 28 9\n9 84\n9\n",
      "3\n11 77 77\n77 77\n77\n",
      "3\n77 28 77\n77 77\n77\n",
      "3\n77 26 77\n77 77\n77\n",
      "3\n7 77 77\n77 77\n77\n",
      "3\n77 22 77\n77 77\n77\n",
      "3\n10 77 77\n77 77\n77\n",
      "6\n5 4 3 3 10 5\n3 5 5 4 3\n3 5 4 3\n",
      "3\n77 77 132\n77 77\n77\n",
      "3\n385751174 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n77 77 147\n77 77\n77\n",
      "4\n1 5 7 4\n1 5 7\n1 7\n",
      "3\n84 23 9\n9 84\n9\n",
      "3\n77 77 226\n77 77\n77\n",
      "3\n633890371 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n5116641 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n796067435 964699482 948201176\n964699482 796067435\n964699482\n",
      "3\n77 77 103\n77 77\n77\n",
      "3\n77 35 77\n77 77\n77\n",
      "3\n84 51 9\n9 84\n9\n",
      "3\n77 77 175\n77 77\n77\n",
      "3\n237279512 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n2 2 3\n3 2\n2\n",
      "3\n796067435 964699482 629662177\n964699482 796067435\n964699482\n",
      "3\n77 24 77\n77 77\n77\n",
      "3\n84 20 9\n9 84\n9\n",
      "3\n77 29 77\n77 77\n77\n",
      "3\n77 77 129\n77 77\n77\n",
      "3\n77 77 93\n77 77\n77\n",
      "3\n84 40 9\n9 84\n9\n",
      "3\n2 1 3\n3 2\n2\n",
      "3\n84 37 9\n9 84\n9\n",
      "3\n84 64 9\n9 84\n9\n",
      "3\n168638990 8998374 323703261\n168638990 323703261\n168638990\n",
      "4\n1 5 7 2\n1 5 7\n1 5\n",
      "6\n5 4 3 3 11 5\n3 5 5 4 3\n3 5 4 3\n",
      "3\n84 33 9\n9 84\n9\n",
      "3\n77 1 77\n77 77\n77\n",
      "3\n84 21 9\n9 84\n9\n",
      "6\n4 5 3 3 5 5\n3 5 5 4 3\n3 5 4 3\n",
      "6\n4 5 3 3 9 5\n3 5 5 4 3\n3 5 4 3\n",
      "3\n77 77 104\n77 77\n77\n",
      "4\n1 5 7 1\n1 5 7\n1 5\n",
      "3\n9 77 77\n77 77\n77\n",
      "3\n77 77 65\n77 77\n77\n",
      "4\n1 5 7 7\n1 5 7\n1 7\n",
      "3\n77 77 79\n77 77\n77\n",
      "3\n796067435 964699482 117085886\n964699482 796067435\n964699482\n",
      "3\n84 48 9\n9 84\n9\n",
      "3\n84 25 9\n9 84\n9\n",
      "3\n168638990 14343393 323703261\n168638990 323703261\n168638990\n",
      "3\n77 2 77\n77 77\n77\n",
      "3\n84 14 9\n9 84\n9\n",
      "3\n77 77 90\n77 77\n77\n",
      "3\n84 7 9\n9 84\n9\n",
      "3\n84 60 9\n9 84\n9\n",
      "3\n77 77 38\n77 77\n77\n",
      "3\n77 19 77\n77 77\n77\n",
      "3\n77 77 66\n77 77\n77\n",
      "3\n216349438 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n77 77 143\n77 77\n77\n",
      "4\n1 5 7 8\n1 5 7\n1 7\n",
      "3\n77 77 139\n77 77\n77\n",
      "3\n77 77 70\n77 77\n77\n",
      "3\n279847456 726316780 902899520\n902899520 726316780\n726316780\n",
      "3\n77 77 121\n77 77\n77\n",
      "3\n77 77 114\n77 77\n77\n",
      "5\n1 5 7 123 7\n123 7 5 1\n5 1 7\n",
      "3\n16 77 77\n77 77\n77\n",
      "3\n2 2 3\n3 2\n3\n",
      "3\n84 36 9\n9 84\n9\n",
      "3\n84 10 9\n9 84\n9\n",
      "6\n2 4 3 3 5 5\n3 5 5 4 3\n3 5 4 3\n",
      "3\n168638990 8046203 323703261\n168638990 323703261\n168638990\n",
      "3\n84 54 9\n9 84\n9\n",
      "3\n84 11 9\n9 84\n9\n",
      "6\n4 5 3 3 5 5\n3 5 5 4 3\n3 5 4 5\n",
      "3\n8 77 77\n77 77\n77\n",
      "3\n796067435 964699482 188036649\n964699482 796067435\n964699482\n",
      "3\n77 77 39\n77 77\n77\n",
      "3\n77 80 77\n77 77\n77\n",
      "3\n546853328 726316780 902899520\n902899520 726316780\n726316780\n",
      "6\n5 4 3 3 5 4\n3 5 5 4 3\n3 5 4 3\n",
      "6\n4 4 3 3 5 5\n3 5 5 4 3\n3 5 4 3\n"
    ],
    "outputs": [
      "1\n3\n",
      "8\n123\n",
      "1\n3\n",
      "30\n84\n",
      "8\n7\n",
      "819602309\n796067435\n",
      "25720377\n661369649\n",
      "5\n5\n",
      "939116221\n323703261\n",
      "77\n77\n",
      "374054998\n902899520\n",
      "42\n77\n",
      "31\n77\n",
      "12\n7\n",
      "140\n77\n",
      "4\n7\n",
      "28\n84\n",
      "11\n77\n",
      "28\n77\n",
      "26\n77\n",
      "7\n77\n",
      "22\n77\n",
      "10\n77\n",
      "10\n5\n",
      "132\n77\n",
      "385751174\n902899520\n",
      "147\n77\n",
      "4\n5\n",
      "23\n84\n",
      "226\n77\n",
      "633890371\n902899520\n",
      "5116641\n902899520\n",
      "948201176\n796067435\n",
      "103\n77\n",
      "35\n77\n",
      "51\n84\n",
      "175\n77\n",
      "237279512\n902899520\n",
      "2\n3\n",
      "629662177\n796067435\n",
      "24\n77\n",
      "20\n84\n",
      "29\n77\n",
      "129\n77\n",
      "93\n77\n",
      "40\n84\n",
      "1\n3\n",
      "37\n84\n",
      "64\n84\n",
      "8998374\n323703261\n",
      "2\n7\n",
      "11\n5\n",
      "33\n84\n",
      "1\n77\n",
      "21\n84\n",
      "5\n5\n",
      "9\n5\n",
      "104\n77\n",
      "1\n7\n",
      "9\n77\n",
      "65\n77\n",
      "7\n5\n",
      "79\n77\n",
      "117085886\n796067435\n",
      "48\n84\n",
      "25\n84\n",
      "14343393\n323703261\n",
      "2\n77\n",
      "14\n84\n",
      "90\n77\n",
      "7\n84\n",
      "60\n84\n",
      "38\n77\n",
      "19\n77\n",
      "66\n77\n",
      "216349438\n902899520\n",
      "143\n77\n",
      "8\n5\n",
      "139\n77\n",
      "70\n77\n",
      "279847456\n902899520\n",
      "121\n77\n",
      "114\n77\n",
      "7\n123\n",
      "16\n77\n",
      "2\n2\n",
      "36\n84\n",
      "10\n84\n",
      "2\n5\n",
      "8046203\n323703261\n",
      "54\n84\n",
      "11\n84\n",
      "5\n3\n",
      "8\n77\n",
      "188036649\n796067435\n",
      "39\n77\n",
      "80\n77\n",
      "546853328\n902899520\n",
      "4\n5\n",
      "4\n5\n"
    ]
  },
  {
    "code": [
      "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq)) (If (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzQzXQ== None)) Add (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ss:1 Store)) (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None) Add (Call (Name g_str Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Constant i1 None)))) nil)) Add (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)) Add (Call (Name g_str Load) (list (_starred_content (Name &x:1 Load))) nil)) Add (Constant s-WzQxLCA0MSwgNDFd None)) None) (Assign (list (Name &tmp:1 Store)) (BinOp (BinOp (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load) Sub (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &re:1 Store)) (BinOp (BinOp (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load) Sub (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)) Sub (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))) None) (AugAssign (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Store) Sub (Name &re:1 Load)) (If (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &tmp:1 Store)) (BinOp (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQxXQ== None)) None)) (/seq)) (Assign (list (Name &ss:1 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQyXQ== None)) Add (Name &ss:1 Load)) Add (Constant s-WzQxXQ== None)) Add (Constant s-WzQzXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQxXQ== None)) None) (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))) nil)) Add (Constant s-WzQxXQ== None)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &X:0 Store)) (ListComp (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &Y:0 Store)) (ListComp (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &i:4 Load)) Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))) nil)) (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))) nil))) nil)",
      "(Module (/seq (FunctionDef &canonise:0 (arguments nil (list (arg &t:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (Constant s-WzQwLCA0OCwgNDVd None) Add (Call (Name &canonise:0 Load) (list (_starred_content (UnaryOp USub (Name &t:1 Load)))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_ None) None) (While (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None)) (AugAssign (Name &t:1 Store) Sub (Constant i50 None))) (/seq)) (Return (BinOp (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (_starred_content (Name &t:1 Load))) nil)) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &ans:1 Load))) nil) FloorDiv (Constant i4 None)))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cxes:0 Store)) (List nil Load) None) (Assign (list (Name &cyes:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None) (For (Name &dx:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &dy:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Attribute (Name &cxes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None)))) nil)) (Expr (Call (Attribute (Name &cyes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None)))) nil))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &coeffx:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &coeffy:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None) (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))))))) (/seq) None) (Assign (list (Name &rx:0 Store)) (Constant s_ None) None) (Assign (list (Name &ry:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &s:0 Store)) (JoinedStr (list (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzQxLCA0MV0= None))) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load))) (/seq (AugAssign (Name &rx:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None)))) (AugAssign (Name &ry:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None))))) (/seq (AugAssign (Name &rx:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))))) (AugAssign (Name &ry:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &rx:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfx:0 Load))) nil) i-1 None) (Constant s-WzQxXQ== None))))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &ry:0 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfy:0 Load))) nil) i-1 None) (Constant s-WzQxXQ== None))))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Name &r:0 Store))) Store)) (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil) None)) (/seq) None) (FunctionDef &sum:0 (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Name &s2:1 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &minus:0 (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None)) Add (Name &s2:2 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &mult:0 (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None)) Add (Name &s2:3 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &sabs:0 (arguments nil (list (arg &s1:4 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &stand:0 (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (/seq (Return (Call (Name &sum:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_1 None)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil))) nil)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil)) (_starred_content (Constant s_1 None))) nil))) nil))) nil))) nil None None) (FunctionDef &ans:0 (arguments nil (list (arg &v:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:6 Store)) (Constant s_ None) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None))) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil) None)) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &sum:0 Load) (list (_starred_content (Name &s:6 Load)) (_starred_content (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:6 Load))) nil))) nil None None) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &ex:0 (arguments nil (list (arg &values:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &e:1 Store)) (Constant None None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &values:1 Load))) nil) (/seq (Assign (list (Name &e_:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None) (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None))) None) (If (Compare (Name &e:1 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None)) (/seq (Assign (list (Name &e:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &e:1 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue (Name &e_:1 Load) i-1 None) (Constant s-WzQxXQ== None))) None)))) (/seq) None) (Return (Name &e:1 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &circles:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &xs:2 Store)) (ListComp (Subscript (Name &c:5 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))) None) (Assign (list (Name &ys:2 Store)) (ListComp (Subscript (Name &c:6 Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))) None) (Return (Tuple (list (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &xs:2 Load))) nil)) (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &ys:2 Load))) nil))) Load))) nil None None) (FunctionDef &pc:0 (arguments nil (list (arg &line:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &t:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &line:3 Load) s_split Load) nil nil))) nil))) nil) None) (Assert (Compare (Call (Name g_len Load) (list (_starred_content (Name &t:3 Load))) nil) (list Eq) (list (Constant i3 None))) (JoinedStr (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ== None) (FormattedValue (Name &line:3 Load) i-1 None)))) (Return (Name &t:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &circles:4 Store)) (ListComp (Call (Name &pc:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &g:4 Store))) Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &circles:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:4 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:4 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (/seq (FunctionDef &f:0 (arguments nil (list (arg &x:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &x:1 Load) (list Eq) (list (Name &n:0 Load))) (/seq (Return (Constant s_0 None))) (/seq)) (If (Compare (Name &x:1 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name &X:0 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzQzXQ== None)) Add (Call (Name &f:0 Load) (list (_starred_content (Constant i1 None))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ss:1 Store)) (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None) Add (Call (Name g_str Load) (list (_starred_content (BinOp (Name &x:1 Load) Sub (Constant i1 None)))) nil)) Add (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)) Add (Call (Name g_str Load) (list (_starred_content (Name &x:1 Load))) nil)) Add (Constant s-WzQxLCA0MSwgNDFd None)) None) (Assign (list (Name &tmp:1 Store)) (BinOp (BinOp (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load) Sub (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name &re:1 Store)) (BinOp (BinOp (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Load) Sub (Subscript (Name &X:0 Load) (_slice_content (BinOp (Name &x:1 Load) Sub (Constant i1 None))) Load)) Sub (BinOp (Constant i2 None) Mult (Name &tmp:1 Load))) None) (AugAssign (Subscript (Name &X:0 Load) (_slice_content (Name &x:1 Load)) Store) Sub (Name &re:1 Load)) (If (Compare (Name &tmp:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name &tmp:1 Store)) (BinOp (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQxXQ== None)) None)) (/seq)) (Assign (list (Name &ss:1 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQyXQ== None)) Add (Name &ss:1 Load)) Add (Constant s-WzQxXQ== None)) Add (Constant s-WzQzXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name &tmp:1 Load))) nil)) Add (Constant s-WzQxXQ== None)) None) (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &ss:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Call (Name &f:0 Load) (list (_starred_content (BinOp (Name &x:1 Load) Add (Constant i1 None)))) nil)) Add (Constant s-WzQxXQ== None)))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &c:0 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name &x:5 Load))) nil) (list (comprehension (Name &x:5 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name &i:2 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &X:0 Store)) (ListComp (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &i:3 Load)) Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &i:3 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Assign (list (Name &Y:0 Store)) (ListComp (Subscript (Subscript (Name &c:0 Load) (_slice_content (Name &i:4 Load)) Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &i:4 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))) nil)) (Assign (list (Name &X:0 Store)) (Name &Y:0 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name &f:0 Load) (list (_starred_content (Constant i0 None))) nil))) nil))) nil)"
    ],
    "abstractions": [
      {
        "body": "(/seq (FunctionDef %3 (arguments nil (list (arg %2 None None)) None nil nil None nil) (/seq (If (Compare (Name %2 Load) (list Eq) (list (Name %1 Load))) (/seq (Return (Constant s_0 None))) (/seq)) (If (Compare (Name %2 Load) (list Eq) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Call (Name g_str Load) (list (_starred_content (Subscript (Name %4 Load) (_slice_content (Constant i0 None)) Load))) nil)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (_starred_content (Constant i1 None))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA5NywgOTgsIDExNSwgNDAsIDQwLCAxMTYsIDQ1XQ== None) Add (Call (Name g_str Load) (list (_starred_content (BinOp (Name %2 Load) Sub (Constant i1 None)))) nil)) Add (Constant s-WzQxLCA0MSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None)) Add (Call (Name g_str Load) (list (_starred_content (Name %2 Load))) nil)) Add (Constant s-WzQxLCA0MSwgNDFd None)) None) (Assign (list (Name %6 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) FloorDiv (Constant i2 None)) None) (Assign (list (Name %7 Store)) (BinOp (BinOp (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Load) Sub (Subscript (Name %4 Load) (_slice_content (BinOp (Name %2 Load) Sub (Constant i1 None))) Load)) Sub (BinOp (Constant i2 None) Mult (Name %6 Load))) None) (AugAssign (Subscript (Name %4 Load) (_slice_content (Name %2 Load)) Store) Sub (Name %7 Load)) (If (Compare (Name %6 Load) (list Lt) (list (Constant i0 None))) (/seq (Assign (list (Name %6 Store)) (BinOp (BinOp (Constant s-WzQwLCA0OF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQxXQ== None)) None)) (/seq)) (Assign (list (Name %5 Store)) (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwLCA0MF0= None) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQyXQ== None)) Add (Name %5 Load)) Add (Constant s-WzQxXQ== None)) Add (Constant s-WzQzXQ== None)) Add (Call (Name g_str Load) (list (_starred_content (Name %6 Load))) nil)) Add (Constant s-WzQxXQ== None)) None) (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name %5 Load)) Add (Constant s-WzQzXQ== None)) Add (Call (Name %3 Load) (list (_starred_content (BinOp (Name %2 Load) Add (Constant i1 None)))) nil)) Add (Constant s-WzQxXQ== None)))) nil None None) (Assign (list (Name %1 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name %10 Store)) (ListComp (ListComp (Call (Name g_int Load) (list (_starred_content (Name %9 Load))) nil) (list (comprehension (Name %9 Store) (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil) nil i0))) (list (comprehension (Name %8 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %4 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (_slice_content (Name %11 Load)) Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name %11 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Assign (list (Name %13 Store)) (ListComp (Subscript (Subscript (Name %10 Load) (_slice_content (Name %12 Load)) Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name %12 Store) (Call (Name g_range Load) (list (_starred_content (Name %1 Load))) nil) nil i0))) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i0 None))) nil))) nil)) (Assign (list (Name %4 Store)) (Name %13 Load) None) (Expr (Call (Name g_print Load) (list (_starred_content (Call (Name %3 Load) (list (_starred_content (Constant i0 None))) nil))) nil)))",
        "sym_arity": 13,
        "dfa_symvars": [
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name",
          "Name"
        ],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "seqS"
      },
      {
        "body": "(Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Call (Name g_input Load) nil nil) s_split Load) nil nil))) nil)",
        "sym_arity": 0,
        "dfa_symvars": [],
        "dfa_metavars": [],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 0,
        "dfa_root": "E"
      },
      {
        "body": "(JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name %1 Load) i-1 None) (Constant s-WzQzXQ== None) (FormattedValue #0 i-1 None) (Constant s-WzQxXQ== None)))",
        "sym_arity": 1,
        "dfa_symvars": [
          "Name"
        ],
        "dfa_metavars": [
          "E"
        ],
        "dfa_choicevars": [],
        "choice_arity": 0,
        "arity": 1,
        "dfa_root": "E"
      }
    ],
    "rewritten": [
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)",
      "(Module (/seq (FunctionDef &canonise:0 (arguments nil (list (arg &t:1 None None)) None nil nil None nil) (/seq (If (Compare (Name &t:1 Load) (list Lt) (list (Constant i0 None))) (/seq (Return (BinOp (BinOp (Constant s-WzQwLCA0OCwgNDVd None) Add (Call (Name &canonise:0 Load) (list (_starred_content (UnaryOp USub (Name &t:1 Load)))) nil)) Add (Constant s-WzQxXQ== None)))) (/seq)) (Assign (list (Name &ans:1 Store)) (Constant s_ None) None) (While (Compare (Name &t:1 Load) (list Gt) (list (Constant i50 None))) (/seq (AugAssign (Name &ans:1 Store) Add (Constant s-WzQwLCA1MywgNDgsIDQzXQ== None)) (AugAssign (Name &t:1 Store) Sub (Constant i50 None))) (/seq)) (Return (BinOp (BinOp (Name &ans:1 Load) Add (Call (Name g_str Load) (list (_starred_content (Name &t:1 Load))) nil)) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Call (Name g_len Load) (list (_starred_content (Name &ans:1 Load))) nil) FloorDiv (Constant i4 None)))))) nil None None) (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &cxes:0 Store)) (List nil Load) None) (Assign (list (Name &cyes:0 Store)) (List nil Load) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Name &x:0 Store)) (_starred_content (Name &y:0 Store)) (_starred_content (Name &r:0 Store))) Store)) (fn_2) None) (For (Name &dx:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (For (Name &dy:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i2 None))) nil) (/seq (If (BoolOp And (list (Compare (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))) (Compare (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) Mod (Constant i2 None)) (list Eq) (list (Constant i0 None))))) (/seq (Expr (Call (Attribute (Name &cxes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &x:0 Load) Add (Name &dx:0 Load)) FloorDiv (Constant i2 None)))) nil)) (Expr (Call (Attribute (Name &cyes:0 Load) s_append Load) (list (_starred_content (BinOp (BinOp (Name &y:0 Load) Add (Name &dy:0 Load)) FloorDiv (Constant i2 None)))) nil))) (/seq))) (/seq) None)) (/seq) None)) (/seq) None) (Assign (list (Name &coeffx:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &coeffy:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (BinOp (Name &n:0 Load) Add (Constant i2 None))) None) (Assign (list (Name &cfx:0 Store)) (Constant i0 None) None) (Assign (list (Name &cfy:0 Store)) (Constant i0 None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (Constant i0 None))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (If (Compare (Name &i:0 Load) (list Eq) (list (BinOp (Name &n:0 Load) Sub (Constant i1 None)))) (/seq (AugAssign (Name &cfx:0 Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Name &cfy:0 Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (/seq (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffx:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cxes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load)) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i1 None))) Store) Sub (BinOp (Constant i2 None) Mult (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))) (AugAssign (Subscript (Name &coeffy:0 Load) (_slice_content (BinOp (Name &i:0 Load) Add (Constant i2 None))) Store) Add (Subscript (Name &cyes:0 Load) (_slice_content (Name &i:0 Load)) Load))))))) (/seq) None) (Assign (list (Name &rx:0 Store)) (Constant s_ None) None) (Assign (list (Name &ry:0 Store)) (Constant s_ None) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (Assign (list (Name &s:0 Store)) (JoinedStr (list (Constant s-Wzk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:0 Load) i-1 None) (Constant s-WzQxLCA0MV0= None))) None) (If (Compare (Name &i:0 Load) (list NotEq) (list (Name &n:0 Load))) (/seq (AugAssign (Name &rx:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None)))) (AugAssign (Name &ry:0 Store) Add (JoinedStr (list (Constant s-WzQwLCA0MF0= None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxLCA0M10= None))))) (/seq (AugAssign (Name &rx:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffx:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None))))) (AugAssign (Name &ry:0 Store) Add (BinOp (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (Name &s:0 Load) i-1 None) (Constant s-WzQyXQ== None) (FormattedValue (Call (Name &canonise:0 Load) (list (_starred_content (Subscript (Name &coeffy:0 Load) (_slice_content (Name &i:0 Load)) Load))) nil) i-1 None) (Constant s-WzQxXQ== None))) Add (BinOp (Constant s-WzQxXQ== None) Mult (BinOp (Name &n:0 Load) Sub (Constant i1 None)))))))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (fn_3 (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfx:0 Load))) nil) &rx:0))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (fn_3 (Call (Name &canonise:0 Load) (list (_starred_content (Name &cfy:0 Load))) nil) &ry:0))) nil))) nil)",
      "(Module (/seq (Assign (list (Name &n:0 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &x:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (Assign (list (Name &y:0 Store)) (BinOp (List (list (_starred_content (Constant i0 None))) Load) Mult (Name &n:0 Load)) None) (For (Name &i:0 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:0 Load))) nil) (/seq (Assign (list (Tuple (list (_starred_content (Subscript (Name &x:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Subscript (Name &y:0 Load) (_slice_content (Name &i:0 Load)) Store)) (_starred_content (Name &r:0 Store))) Store)) (fn_2) None)) (/seq) None) (FunctionDef &sum:0 (arguments nil (list (arg &s1:1 None None) (arg &s2:1 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:1 Load)) Add (Constant s-WzQzXQ== None)) Add (Name &s2:1 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &minus:0 (arguments nil (list (arg &s1:2 None None) (arg &s2:2 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:2 Load)) Add (Constant s-WzQ1XQ== None)) Add (Name &s2:2 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &mult:0 (arguments nil (list (arg &s1:3 None None) (arg &s2:3 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (BinOp (BinOp (Constant s-WzQwXQ== None) Add (Name &s1:3 Load)) Add (Constant s-WzQyXQ== None)) Add (Name &s2:3 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &sabs:0 (arguments nil (list (arg &s1:4 None None)) None nil nil None nil) (/seq (Return (BinOp (BinOp (Constant s-Wzk3LCA5OCwgMTE1LCA0MF0= None) Add (Name &s1:4 Load)) Add (Constant s-WzQxXQ== None)))) nil None None) (FunctionDef &stand:0 (arguments nil (list (arg &x:5 None None)) None nil nil None nil) (/seq (Return (Call (Name &sum:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_1 None)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil))) nil)) (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Call (Name &sabs:0 Load) (list (_starred_content (Call (Name &minus:0 Load) (list (_starred_content (Constant s_t None)) (_starred_content (Name &x:5 Load))) nil))) nil)) (_starred_content (Constant s_1 None))) nil))) nil))) nil))) nil None None) (FunctionDef &ans:0 (arguments nil (list (arg &v:6 None None)) None nil nil None nil) (/seq (Assign (list (Name &s:6 Store)) (Constant s_ None) None) (For (Name &i:6 Store) (Call (Name g_range Load) (list (_starred_content (Constant i1 None)) (_starred_content (BinOp (Name &n:0 Load) Add (Constant i1 None)))) nil) (/seq (If (Compare (Name &s:6 Load) (list Eq) (list (Constant s_ None))) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil) None)) (/seq (Assign (list (Name &s:6 Store)) (Call (Name &sum:0 Load) (list (_starred_content (Name &s:6 Load)) (_starred_content (Call (Name &mult:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (BinOp (Subscript (Name &v:6 Load) (_slice_content (BinOp (Name &i:6 Load) Sub (Constant i1 None))) Load) FloorDiv (Constant i2 None)))) nil)) (_starred_content (Call (Name &stand:0 Load) (list (_starred_content (Call (Name g_str Load) (list (_starred_content (Name &i:6 Load))) nil))) nil))) nil))) nil) None)))) (/seq) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &s:6 Load))) nil))) nil None None) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &x:0 Load))) nil)) (Expr (Call (Name &ans:0 Load) (list (_starred_content (Name &y:0 Load))) nil))) nil)",
      "(Module (/seq (FunctionDef &ex:0 (arguments nil (list (arg &values:1 None None)) None nil nil None nil) (/seq (Assign (list (Name &e:1 Store)) (Constant None None) None) (For (Tuple (list (_starred_content (Name &i:1 Store)) (_starred_content (Name &v:1 Store))) Store) (Call (Name g_enumerate Load) (list (_starred_content (Name &values:1 Load))) nil) (/seq (Assign (list (Name &e_:1 Store)) (JoinedStr (list (Constant s-WzQwXQ== None) (FormattedValue (BinOp (Name &v:1 Load) FloorDiv (Constant i2 None)) i-1 None) (Constant s-WzQyLCA0MCwgNDAsIDQ5LCA0NSwgOTcsIDk4LCAxMTUsIDQwLCA0MCwgMTE2LCA0NV0= None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQzLCA5NywgOTgsIDExNSwgNDAsIDQwLCA0OSwgNDUsIDk3LCA5OCwgMTE1LCA0MCwgNDAsIDExNiwgNDVd None) (FormattedValue (Name &i:1 Load) i-1 None) (Constant s-WzQxLCA0MSwgNDEsIDQxLCA0MSwgNDFd None))) None) (If (Compare (Name &e:1 Load) (list Is) (list (Constant None None))) (/seq (Assign (list (Name &e:1 Store)) (Name &e_:1 Load) None)) (/seq (Assign (list (Name &e:1 Store)) (fn_3 (Name &e_:1 Load) &e:1) None)))) (/seq) None) (Return (Name &e:1 Load))) nil None None) (FunctionDef &solve:0 (arguments nil (list (arg &circles:2 None None)) None nil nil None nil) (/seq (Assign (list (Name &xs:2 Store)) (ListComp (Subscript (Name &c:5 Load) (_slice_content (Constant i0 None)) Load) (list (comprehension (Name &c:5 Store) (Name &circles:2 Load) nil i0))) None) (Assign (list (Name &ys:2 Store)) (ListComp (Subscript (Name &c:6 Load) (_slice_content (Constant i1 None)) Load) (list (comprehension (Name &c:6 Store) (Name &circles:2 Load) nil i0))) None) (Return (Tuple (list (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &xs:2 Load))) nil)) (_starred_content (Call (Name &ex:0 Load) (list (_starred_content (Name &ys:2 Load))) nil))) Load))) nil None None) (FunctionDef &pc:0 (arguments nil (list (arg &line:3 None None)) None nil nil None nil) (/seq (Assign (list (Name &t:3 Store)) (Call (Name g_tuple Load) (list (_starred_content (Call (Name g_map Load) (list (_starred_content (Name g_int Load)) (_starred_content (Call (Attribute (Name &line:3 Load) s_split Load) nil nil))) nil))) nil) None) (Assert (Compare (Call (Name g_len Load) (list (_starred_content (Name &t:3 Load))) nil) (list Eq) (list (Constant i3 None))) (JoinedStr (list (Constant s-WzczLCAxMTAsIDExOCwgOTcsIDEwOCwgMTA1LCAxMDAsIDMyLCA5OSwgMTA1LCAxMTQsIDk5LCAxMDgsIDEwMSwgNTgsIDMyXQ== None) (FormattedValue (Name &line:3 Load) i-1 None)))) (Return (Name &t:3 Load))) nil None None) (FunctionDef &main:0 (arguments nil nil None nil nil None nil) (/seq (Assign (list (Name &n:4 Store)) (Call (Name g_int Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) None) (Assign (list (Name &circles:4 Store)) (ListComp (Call (Name &pc:0 Load) (list (_starred_content (Call (Name g_input Load) nil nil))) nil) (list (comprehension (Name &_:7 Store) (Call (Name g_range Load) (list (_starred_content (Name &n:4 Load))) nil) nil i0))) None) (Assign (list (Tuple (list (_starred_content (Name &f:4 Store)) (_starred_content (Name &g:4 Store))) Store)) (Call (Name &solve:0 Load) (list (_starred_content (Name &circles:4 Load))) nil) None) (Expr (Call (Name g_print Load) (list (_starred_content (Name &f:4 Load))) nil)) (Expr (Call (Name g_print Load) (list (_starred_content (Name &g:4 Load))) nil))) nil None None) (If (Compare (Name g___name__ Load) (list Eq) (list (Constant s___main__ None))) (/seq (Expr (Call (Name &main:0 Load) nil nil))) (/seq))) nil)",
      "(Module (fn_1 &n:0 &x:1 &f:0 &X:0 &ss:1 &tmp:1 &re:1 &i:2 &x:5 &c:0 &i:3 &i:4 &Y:0) nil)"
    ],
    "inputs": [
      "3\n0 10 4\n10 0 4\n20 10 4\n",
      "3\n9 5 8\n8 9 10\n9 5 2\n",
      "50\n48 45 42\n32 45 8\n15 41 47\n32 29 38\n7 16 48\n19 9 21\n18 40 5\n39 40 7\n37 0 6\n42 15 37\n9 33 37\n40 41 33\n25 43 2\n23 21 38\n30 20 32\n28 15 5\n47 9 19\n47 22 26\n26 9 18\n24 23 24\n11 29 5\n38 44 9\n49 22 42\n1 15 32\n18 25 21\n8 48 39\n48 7 26\n3 30 26\n34 21 47\n34 14 4\n36 43 40\n49 19 12\n33 8 30\n42 35 28\n47 21 14\n36 11 27\n40 46 17\n7 12 32\n47 5 4\n9 33 43\n35 31 3\n3 48 43\n2 19 9\n29 15 36\n1 13 2\n28 28 19\n31 33 21\n9 33 18\n7 12 22\n45 14 23\n",
      "3\n3 3 3\n5 9 3\n49 1 7\n",
      "5\n0 0 2\n1 1 2\n3 3 2\n40 40 2\n50 50 50\n",
      "3\n0 10 4\n10 0 4\n20 10 4\n",
      "50\n1 1 2\n1 1 42\n0 0 46\n1 1 16\n1 0 9\n0 0 43\n1 0 39\n1 1 41\n1 1 6\n1 1 43\n0 1 25\n0 1 40\n0 0 11\n0 1 27\n1 0 5\n1 0 9\n1 1 49\n0 0 25\n0 0 32\n0 1 6\n0 1 31\n1 1 22\n0 0 47\n0 1 6\n0 0 6\n0 1 49\n1 0 44\n0 0 50\n1 0 3\n0 1 15\n1 0 37\n0 0 14\n1 1 28\n1 1 49\n1 0 9\n0 1 12\n0 0 35\n1 0 42\n1 1 28\n0 1 20\n1 1 24\n1 1 33\n0 0 38\n1 0 17\n0 1 21\n0 0 22\n1 1 37\n0 1 34\n0 1 46\n1 1 21\n",
      "5\n2 0 4\n5 6 10\n7 2 8\n3 10 8\n8 2 9\n",
      "49\n48 9 48\n9 38 8\n27 43 43\n19 48 2\n35 3 11\n25 3 37\n26 40 20\n30 28 46\n19 35 44\n20 28 43\n34 40 37\n12 45 47\n28 2 38\n13 32 31\n50 10 28\n12 6 19\n31 50 5\n38 22 8\n25 33 50\n32 1 42\n8 37 26\n31 27 25\n21 4 25\n3 1 47\n21 15 42\n40 21 27\n43 20 9\n9 29 21\n15 35 36\n9 30 6\n46 39 22\n41 40 47\n11 5 32\n12 47 23\n24 2 27\n15 9 24\n0 8 45\n4 11 3\n28 13 27\n12 43 30\n23 42 40\n38 24 9\n13 46 42\n20 50 41\n29 32 11\n35 21 12\n10 34 47\n24 29 3\n46 4 7\n",
      "10\n7 3 5\n2 1 6\n8 6 2\n1 2 6\n2 0 9\n10 9 2\n2 6 4\n10 3 6\n4 6 3\n9 9 2\n",
      "50\n7 13 2\n41 17 2\n49 32 2\n22 16 2\n11 16 2\n2 10 2\n15 2 2\n8 12 2\n1 17 2\n22 44 2\n10 1 2\n18 45 2\n11 31 2\n4 43 2\n26 14 2\n33 47 2\n3 5 2\n49 22 2\n44 3 2\n3 41 2\n0 26 2\n30 1 2\n37 6 2\n10 48 2\n11 47 2\n5 41 2\n2 46 2\n32 3 2\n37 42 2\n25 17 2\n18 32 2\n47 21 2\n46 24 2\n7 2 2\n14 2 2\n17 17 2\n13 30 2\n23 19 2\n43 40 2\n42 26 2\n20 20 2\n17 5 2\n43 38 2\n4 32 2\n48 4 2\n1 3 2\n4 41 2\n49 36 2\n7 10 2\n9 6 2\n",
      "49\n36 12 10\n50 6 19\n13 31 36\n15 47 9\n23 43 11\n31 17 14\n25 28 7\n2 20 50\n42 7 4\n7 12 43\n20 33 34\n27 44 26\n19 39 21\n40 29 16\n37 1 2\n13 27 26\n2 4 47\n49 30 13\n4 14 36\n21 36 18\n42 32 22\n21 22 18\n23 35 43\n15 31 27\n17 46 8\n22 3 34\n3 50 19\n47 47 9\n18 42 20\n30 26 42\n44 32 47\n29 20 42\n35 33 20\n43 16 9\n45 24 12\n11 1 21\n32 50 9\n38 19 48\n21 31 7\n5 42 5\n23 0 21\n39 50 8\n42 21 12\n21 20 41\n43 44 23\n43 34 4\n31 2 28\n7 0 38\n28 35 46\n",
      "1\n50 50 50\n",
      "3\n0 0 2\n5 7 5\n20 25 10\n",
      "50\n10 26 2\n20 36 2\n32 43 2\n34 6 2\n19 37 2\n20 29 2\n31 12 2\n30 9 2\n31 5 2\n23 6 2\n0 44 2\n5 36 2\n34 22 2\n6 39 2\n19 18 2\n9 50 2\n40 11 2\n32 4 2\n42 46 2\n22 45 2\n28 2 2\n34 4 2\n16 30 2\n17 47 2\n14 46 2\n32 36 2\n43 11 2\n22 34 2\n34 9 2\n2 4 2\n18 15 2\n48 38 2\n27 28 2\n24 38 2\n33 32 2\n11 7 2\n37 35 2\n50 23 2\n25 28 2\n25 50 2\n28 26 2\n20 31 2\n12 31 2\n15 2 2\n31 45 2\n14 12 2\n16 18 2\n23 30 2\n16 26 2\n30 0 2\n",
      "49\n33 40 10\n30 24 11\n4 36 23\n38 50 18\n23 28 29\n9 39 21\n47 15 35\n2 41 27\n1 45 28\n39 15 24\n7 7 28\n1 34 6\n47 17 43\n20 28 12\n23 22 15\n33 41 23\n34 3 44\n39 37 25\n41 49 39\n13 14 26\n4 35 18\n17 8 45\n23 23 16\n37 48 40\n12 48 29\n16 5 6\n29 1 5\n1 18 27\n37 11 3\n46 11 44\n9 25 40\n26 1 17\n12 26 45\n3 18 19\n15 32 38\n41 8 27\n8 39 35\n42 35 13\n5 19 43\n31 47 4\n16 47 38\n12 9 23\n10 23 3\n49 43 16\n38 28 6\n3 46 38\n13 27 28\n0 26 3\n23 1 15\n",
      "1\n0 0 2\n",
      "50\n34 7 2\n18 14 2\n15 24 2\n2 24 2\n27 2 2\n50 45 2\n49 19 2\n7 23 2\n16 22 2\n23 25 2\n18 23 2\n11 29 2\n22 14 2\n31 15 2\n10 42 2\n8 11 2\n9 33 2\n15 0 2\n30 25 2\n12 4 2\n14 13 2\n5 16 2\n13 43 2\n1 8 2\n26 34 2\n44 13 2\n10 17 2\n40 5 2\n48 39 2\n39 23 2\n19 10 2\n22 17 2\n36 26 2\n2 34 2\n11 42 2\n14 37 2\n25 7 2\n11 35 2\n22 34 2\n22 25 2\n12 36 2\n18 6 2\n2 47 2\n47 29 2\n13 37 2\n8 46 2\n9 4 2\n11 34 2\n12 31 2\n7 16 2\n",
      "49\n9 43 6\n23 35 9\n46 39 11\n34 14 12\n30 8 4\n10 32 7\n43 10 45\n30 34 27\n27 26 21\n7 31 14\n38 13 33\n34 11 46\n33 31 32\n38 31 7\n3 24 13\n38 12 41\n21 26 32\n33 0 43\n17 44 25\n11 21 27\n27 43 28\n45 8 38\n47 50 47\n49 45 8\n2 9 34\n34 32 49\n21 30 9\n13 19 38\n8 45 32\n16 47 35\n45 28 14\n3 25 43\n45 7 32\n49 35 12\n22 35 35\n14 33 42\n19 23 10\n49 4 2\n44 37 40\n27 17 15\n7 37 30\n38 50 39\n32 12 19\n3 48 9\n26 36 27\n38 18 39\n25 40 50\n45 3 2\n23 40 36\n",
      "50\n47 43 2\n31 38 2\n35 21 2\n18 41 2\n24 33 2\n35 0 2\n15 41 2\n6 3 2\n23 40 2\n11 29 2\n48 46 2\n33 45 2\n28 18 2\n31 14 2\n14 4 2\n35 18 2\n50 11 2\n10 28 2\n23 9 2\n43 25 2\n34 21 2\n19 49 2\n40 37 2\n22 27 2\n7 1 2\n37 24 2\n14 26 2\n18 46 2\n40 50 2\n21 40 2\n19 26 2\n35 2 2\n19 27 2\n13 23 2\n9 50 2\n38 9 2\n44 22 2\n5 30 2\n36 7 2\n10 26 2\n21 30 2\n19 6 2\n21 13 2\n5 3 2\n9 41 2\n10 17 2\n1 11 2\n5 6 2\n40 17 2\n6 7 2\n",
      "10\n1 9 2\n3 10 2\n7 7 2\n6 12 2\n14 15 2\n2 12 2\n8 0 2\n0 12 2\n4 11 2\n15 9 2\n",
      "7\n13 15 5\n2 10 3\n12 12 8\n9 12 11\n10 3 10\n9 6 13\n11 10 3\n",
      "50\n0 1 2\n1 0 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n0 1 2\n0 1 2\n0 0 2\n1 0 2\n1 1 2\n1 0 2\n1 0 2\n1 0 2\n1 0 2\n0 0 2\n0 1 2\n1 0 2\n1 0 2\n0 0 2\n0 1 2\n0 1 2\n0 1 2\n0 1 2\n0 1 2\n1 0 2\n0 0 2\n1 1 2\n0 0 2\n0 1 2\n0 0 2\n1 0 2\n1 1 2\n0 0 2\n0 0 2\n1 1 2\n0 1 2\n0 1 2\n1 0 2\n0 0 2\n1 0 2\n0 1 2\n0 0 2\n1 1 2\n1 1 2\n0 1 2\n0 0 2\n0 0 2\n0 0 2\n0 0 2\n",
      "49\n22 28 2\n37 8 19\n17 36 19\n50 31 10\n26 39 17\n46 37 45\n8 33 30\n29 14 19\n34 42 37\n20 35 34\n17 10 39\n6 28 16\n38 35 27\n39 4 41\n8 37 7\n39 21 4\n12 28 20\n28 27 29\n36 28 10\n41 16 22\n21 0 20\n6 15 4\n48 43 21\n19 12 18\n10 27 15\n27 44 12\n25 14 19\n43 8 43\n1 31 26\n49 11 4\n45 18 7\n16 35 48\n2 8 21\n8 0 30\n20 42 5\n39 30 2\n13 36 34\n43 50 50\n7 9 43\n17 42 10\n15 5 21\n39 25 18\n25 29 35\n12 46 15\n48 41 6\n41 13 17\n16 46 15\n38 27 39\n50 25 16\n",
      "1\n1 1 32\n",
      "50\n21 22 2\n4 16 2\n19 29 2\n37 7 2\n31 47 2\n38 15 2\n32 24 2\n7 18 2\n9 7 2\n36 48 2\n14 26 2\n40 12 2\n18 10 2\n29 42 2\n32 27 2\n34 3 2\n44 33 2\n19 49 2\n12 39 2\n33 10 2\n21 8 2\n44 9 2\n13 0 2\n6 16 2\n18 15 2\n50 1 2\n31 31 2\n36 43 2\n30 2 2\n7 33 2\n18 22 2\n9 7 2\n3 25 2\n17 18 2\n13 10 2\n41 41 2\n32 44 2\n17 40 2\n7 11 2\n31 50 2\n3 40 2\n17 30 2\n10 5 2\n13 30 2\n44 33 2\n6 50 2\n45 49 2\n18 9 2\n35 46 2\n8 50 2\n",
      "4\n0 0 2\n50 50 2\n50 0 2\n0 50 2\n",
      "3\n9 5 8\n8 9 3\n9 5 2\n",
      "50\n48 45 42\n32 45 8\n15 41 47\n32 29 38\n7 16 48\n19 9 21\n18 40 5\n39 40 7\n37 0 6\n50 15 37\n9 33 37\n40 41 33\n25 43 2\n23 21 38\n30 20 32\n28 15 5\n47 9 19\n47 22 26\n26 9 18\n24 23 24\n11 29 5\n38 44 9\n49 22 42\n1 15 32\n18 25 21\n8 48 39\n48 7 26\n3 30 26\n34 21 47\n34 14 4\n36 43 40\n49 19 12\n33 8 30\n42 35 28\n47 21 14\n36 11 27\n40 46 17\n7 12 32\n47 5 4\n9 33 43\n35 31 3\n3 48 43\n2 19 9\n29 15 36\n1 13 2\n28 28 19\n31 33 21\n9 33 18\n7 12 22\n45 14 23\n",
      "3\n3 4 3\n5 9 3\n49 1 7\n",
      "5\n0 0 2\n1 1 2\n3 0 2\n40 40 2\n50 50 50\n",
      "3\n1 10 4\n10 0 4\n20 10 4\n",
      "50\n1 1 2\n1 1 42\n0 0 46\n1 1 16\n1 0 9\n0 0 43\n1 0 39\n1 1 41\n1 1 6\n1 1 43\n0 1 25\n0 1 40\n0 0 11\n0 1 27\n1 0 5\n1 0 9\n1 1 49\n0 0 25\n0 0 32\n0 1 6\n0 1 31\n1 1 22\n0 0 47\n0 1 6\n0 0 6\n0 1 49\n1 0 44\n0 0 50\n1 0 3\n0 1 15\n1 0 37\n0 0 14\n1 1 28\n1 1 49\n1 0 9\n0 1 12\n0 0 35\n1 1 42\n1 1 28\n0 1 20\n1 1 24\n1 1 33\n0 0 38\n1 0 17\n0 1 21\n0 0 22\n1 1 37\n0 1 34\n0 1 46\n1 1 21\n",
      "5\n2 0 4\n5 6 10\n7 2 8\n3 10 8\n8 0 9\n",
      "49\n48 9 48\n9 38 8\n27 43 43\n19 48 2\n35 3 11\n25 3 37\n26 40 20\n30 28 46\n19 35 44\n20 28 57\n34 40 37\n12 45 47\n28 2 38\n13 32 31\n50 10 28\n12 6 19\n31 50 5\n38 22 8\n25 33 50\n32 1 42\n8 37 26\n31 27 25\n21 4 25\n3 1 47\n21 15 42\n40 21 27\n43 20 9\n9 29 21\n15 35 36\n9 30 6\n46 39 22\n41 40 47\n11 5 32\n12 47 23\n24 2 27\n15 9 24\n0 8 45\n4 11 3\n28 13 27\n12 43 30\n23 42 40\n38 24 9\n13 46 42\n20 50 41\n29 32 11\n35 21 12\n10 34 47\n24 29 3\n46 4 7\n",
      "10\n7 3 5\n2 0 6\n8 6 2\n1 2 6\n2 0 9\n10 9 2\n2 6 4\n10 3 6\n4 6 3\n9 9 2\n",
      "50\n7 13 2\n41 17 2\n49 32 2\n14 16 2\n11 16 2\n2 10 2\n15 2 2\n8 12 2\n1 17 2\n22 44 2\n10 1 2\n18 45 2\n11 31 2\n4 43 2\n26 14 2\n33 47 2\n3 5 2\n49 22 2\n44 3 2\n3 41 2\n0 26 2\n30 1 2\n37 6 2\n10 48 2\n11 47 2\n5 41 2\n2 46 2\n32 3 2\n37 42 2\n25 17 2\n18 32 2\n47 21 2\n46 24 2\n7 2 2\n14 2 2\n17 17 2\n13 30 2\n23 19 2\n43 40 2\n42 26 2\n20 20 2\n17 5 2\n43 38 2\n4 32 2\n48 4 2\n1 3 2\n4 41 2\n49 36 2\n7 10 2\n9 6 2\n",
      "1\n50 50 63\n",
      "3\n0 0 3\n5 7 5\n20 25 10\n",
      "50\n10 26 2\n20 36 2\n32 43 2\n34 6 2\n19 37 2\n20 29 2\n31 12 2\n30 9 2\n31 5 2\n23 6 2\n0 44 2\n5 36 2\n34 22 2\n6 39 2\n19 18 2\n9 50 2\n40 11 2\n32 4 2\n42 46 2\n22 45 2\n28 2 2\n34 4 2\n16 30 2\n17 47 2\n14 46 2\n32 15 2\n43 11 2\n22 34 2\n34 9 2\n2 4 2\n18 15 2\n48 38 2\n27 28 2\n24 38 2\n33 32 2\n11 7 2\n37 35 2\n50 23 2\n25 28 2\n25 50 2\n28 26 2\n20 31 2\n12 31 2\n15 2 2\n31 45 2\n14 12 2\n16 18 2\n23 30 2\n16 26 2\n30 0 2\n",
      "49\n33 40 10\n30 24 11\n4 36 23\n38 50 18\n23 28 29\n9 39 21\n47 15 35\n2 41 27\n1 45 28\n39 15 24\n7 7 28\n1 34 6\n47 17 43\n20 28 12\n23 22 15\n33 41 23\n34 3 44\n39 37 25\n41 49 39\n13 14 26\n4 14 18\n17 8 45\n23 23 16\n37 48 40\n12 48 29\n16 5 6\n29 1 5\n1 18 27\n37 11 3\n46 11 44\n9 25 40\n26 1 17\n12 26 45\n3 18 19\n15 32 38\n41 8 27\n8 39 35\n42 35 13\n5 19 43\n31 47 4\n16 47 38\n12 9 23\n10 23 3\n49 43 16\n38 28 6\n3 46 38\n13 27 28\n0 26 3\n23 1 15\n",
      "50\n34 7 2\n18 14 2\n15 24 2\n2 24 2\n27 2 2\n50 45 2\n49 19 2\n7 23 2\n16 22 2\n23 25 2\n18 23 2\n11 29 2\n22 14 2\n31 15 2\n10 42 2\n8 11 2\n9 33 2\n15 0 2\n30 25 2\n12 4 2\n14 13 2\n5 16 2\n13 43 2\n1 8 2\n26 34 2\n83 13 2\n10 17 2\n40 5 2\n48 39 2\n39 23 2\n19 10 2\n22 17 2\n36 26 2\n2 34 2\n11 42 2\n14 37 2\n25 7 2\n11 35 2\n22 34 2\n22 25 2\n12 36 2\n18 6 2\n2 47 2\n47 29 2\n13 37 2\n8 46 2\n9 4 2\n11 34 2\n12 31 2\n7 16 2\n",
      "49\n9 43 6\n23 35 9\n46 39 11\n34 14 12\n30 8 4\n10 32 7\n43 10 45\n30 34 27\n27 26 21\n7 31 14\n38 13 33\n34 11 46\n33 31 32\n38 31 7\n3 24 13\n38 12 41\n21 26 32\n33 0 43\n17 44 25\n11 21 27\n27 43 28\n45 8 38\n47 50 47\n49 45 8\n2 9 34\n34 32 49\n21 30 9\n13 19 38\n8 45 32\n16 47 35\n45 28 14\n3 22 43\n45 7 32\n49 35 12\n22 35 35\n14 33 42\n19 23 10\n49 4 2\n44 37 40\n27 17 15\n7 37 30\n38 50 39\n32 12 19\n3 48 9\n26 36 27\n38 18 39\n25 40 50\n45 3 2\n23 40 36\n",
      "50\n47 43 2\n31 38 2\n35 21 2\n18 41 2\n24 33 2\n35 0 2\n15 41 2\n6 3 2\n23 40 2\n11 29 2\n48 46 2\n33 45 2\n28 18 2\n31 17 2\n14 4 2\n35 18 2\n50 11 2\n10 28 2\n23 9 2\n43 25 2\n34 21 2\n19 49 2\n40 37 2\n22 27 2\n7 1 2\n37 24 2\n14 26 2\n18 46 2\n40 50 2\n21 40 2\n19 26 2\n35 2 2\n19 27 2\n13 23 2\n9 50 2\n38 9 2\n44 22 2\n5 30 2\n36 7 2\n10 26 2\n21 30 2\n19 6 2\n21 13 2\n5 3 2\n9 41 2\n10 17 2\n1 11 2\n5 6 2\n40 17 2\n6 7 2\n",
      "10\n1 9 2\n3 10 2\n7 7 2\n6 12 2\n14 15 2\n2 12 2\n8 0 2\n1 12 2\n4 11 2\n15 9 2\n",
      "7\n13 25 5\n2 10 3\n12 12 8\n9 12 11\n10 3 10\n9 6 13\n11 10 3\n",
      "49\n22 28 2\n37 8 19\n17 36 19\n50 31 10\n26 39 17\n46 37 45\n8 33 30\n29 14 19\n34 42 37\n20 35 34\n17 10 39\n6 28 16\n38 35 27\n39 4 41\n8 37 7\n39 21 4\n12 28 20\n28 27 29\n36 28 10\n41 16 22\n21 0 20\n6 15 4\n48 43 21\n19 12 18\n10 27 15\n27 44 12\n25 14 19\n43 8 43\n1 31 26\n49 11 4\n45 18 7\n16 35 48\n2 8 21\n8 0 30\n20 42 5\n39 30 2\n13 36 64\n43 50 50\n7 9 43\n17 42 10\n15 5 21\n39 25 18\n25 29 35\n12 46 15\n48 41 6\n41 13 17\n16 46 15\n38 27 39\n50 25 16\n",
      "1\n1 1 11\n",
      "50\n21 22 2\n4 16 2\n19 29 2\n37 7 2\n31 47 2\n38 15 2\n32 24 2\n7 18 2\n9 7 2\n36 48 2\n14 26 2\n40 12 2\n18 10 2\n29 42 2\n32 27 2\n34 3 2\n44 33 2\n19 49 2\n12 39 2\n33 10 2\n21 8 2\n44 9 2\n13 0 2\n6 16 2\n18 15 2\n50 1 2\n31 31 2\n36 43 2\n30 2 2\n7 33 2\n18 22 2\n9 7 2\n3 25 2\n17 18 2\n13 10 2\n41 57 2\n32 44 2\n17 40 2\n7 11 2\n31 50 2\n3 40 2\n17 30 2\n10 5 2\n13 30 2\n44 33 2\n6 50 2\n45 49 2\n18 9 2\n35 46 2\n8 50 2\n",
      "4\n0 0 2\n50 66 2\n50 0 2\n0 50 2\n",
      "3\n0 10 4\n18 0 4\n20 10 4\n",
      "5\n0 0 2\n2 1 2\n3 0 2\n40 40 2\n50 50 50\n",
      "50\n1 1 2\n1 1 42\n0 0 46\n2 1 16\n1 0 9\n0 0 43\n1 0 39\n1 1 41\n1 1 6\n1 1 43\n0 1 25\n0 1 40\n0 0 11\n0 1 27\n1 0 5\n1 0 9\n1 1 49\n0 0 25\n0 0 32\n0 1 6\n0 1 31\n1 1 22\n0 0 47\n0 1 6\n0 0 6\n0 1 49\n1 0 44\n0 0 50\n1 0 3\n0 1 15\n1 0 37\n0 0 14\n1 1 28\n1 1 49\n1 0 9\n0 1 12\n0 0 35\n1 1 42\n1 1 28\n0 1 20\n1 1 24\n1 1 33\n0 0 38\n1 0 17\n0 1 21\n0 0 22\n1 1 37\n0 1 34\n0 1 46\n1 1 21\n",
      "5\n2 0 4\n5 6 10\n7 2 8\n3 10 8\n10 0 9\n",
      "10\n7 3 5\n2 0 6\n8 6 2\n1 2 6\n2 0 9\n10 9 2\n2 6 4\n10 3 6\n4 11 3\n9 9 2\n",
      "1\n50 5 63\n",
      "50\n47 43 2\n31 38 2\n35 21 2\n18 41 2\n24 33 2\n35 0 2\n15 41 2\n6 3 2\n23 40 2\n11 29 2\n48 46 2\n33 45 2\n28 18 2\n31 17 2\n14 4 2\n35 18 2\n50 11 2\n10 28 2\n23 9 2\n43 25 2\n34 21 2\n19 49 2\n40 37 2\n22 27 2\n7 1 2\n37 24 2\n14 26 2\n18 46 2\n40 50 2\n27 40 2\n19 26 2\n35 2 2\n19 27 2\n13 23 2\n9 50 2\n38 9 2\n44 22 2\n5 30 2\n36 7 2\n10 26 2\n21 30 2\n19 6 2\n21 13 2\n5 3 2\n9 41 2\n10 17 2\n1 11 2\n5 6 2\n40 17 2\n6 7 2\n",
      "10\n1 9 2\n3 10 2\n7 7 2\n6 12 2\n14 15 2\n2 12 2\n8 0 2\n1 12 2\n4 11 2\n15 3 2\n",
      "7\n13 25 5\n2 10 3\n12 12 8\n1 12 11\n10 3 10\n9 6 13\n11 10 3\n",
      "50\n21 22 2\n4 16 2\n19 29 2\n37 7 2\n31 47 2\n38 15 2\n32 24 2\n7 18 2\n9 7 2\n36 48 2\n14 26 2\n40 12 2\n18 10 2\n29 42 2\n32 27 2\n34 3 2\n44 33 2\n19 49 2\n12 39 2\n33 10 2\n21 8 2\n44 9 2\n13 0 2\n6 16 2\n18 15 2\n50 1 2\n1 31 2\n36 43 2\n30 2 2\n7 33 2\n18 22 2\n9 7 2\n3 25 2\n17 18 2\n13 10 2\n41 57 2\n32 44 2\n17 40 2\n7 11 2\n31 50 2\n3 40 2\n17 30 2\n10 5 2\n13 30 2\n44 33 2\n6 50 2\n45 49 2\n18 9 2\n35 46 2\n8 50 2\n",
      "4\n0 0 2\n50 66 2\n50 0 2\n0 24 2\n",
      "3\n0 10 4\n35 0 4\n20 10 4\n",
      "50\n0 1 2\n1 0 2\n1 1 2\n1 1 2\n1 1 2\n1 1 2\n0 1 2\n0 1 2\n0 0 2\n1 0 2\n1 1 2\n1 0 2\n1 0 2\n1 0 2\n1 0 2\n0 0 2\n0 1 2\n1 0 2\n1 0 2\n0 0 2\n0 1 2\n0 1 2\n0 1 2\n0 1 2\n0 1 0\n1 0 2\n0 0 2\n1 1 2\n0 0 2\n0 1 2\n0 0 2\n1 0 2\n1 1 2\n0 0 2\n0 0 2\n1 1 2\n0 1 2\n0 1 2\n1 0 2\n0 0 2\n1 0 2\n0 1 2\n0 0 2\n1 1 2\n1 1 2\n0 1 2\n0 0 2\n0 0 2\n0 0 2\n0 0 2\n",
      "3\n9 5 3\n8 9 3\n9 5 2\n",
      "50\n48 45 42\n32 45 8\n15 41 47\n32 29 38\n7 16 48\n19 9 21\n18 40 5\n39 40 0\n37 0 6\n50 15 37\n9 33 37\n40 41 33\n25 43 2\n23 21 38\n30 20 32\n28 15 5\n47 9 19\n47 22 26\n26 9 18\n24 23 24\n11 29 5\n38 44 9\n49 22 42\n1 15 32\n18 25 21\n8 48 39\n48 7 26\n3 30 26\n34 21 47\n34 14 4\n36 43 40\n49 19 12\n33 8 30\n42 35 28\n47 21 14\n36 11 27\n40 46 17\n7 12 32\n47 5 4\n9 33 43\n35 31 3\n3 48 43\n2 19 9\n29 15 36\n1 13 2\n28 28 19\n31 33 21\n9 33 18\n7 12 22\n45 14 23\n",
      "3\n3 4 6\n5 9 3\n49 1 7\n",
      "3\n1 10 5\n10 0 4\n20 10 4\n",
      "49\n48 9 48\n9 38 8\n27 43 43\n19 48 4\n35 3 11\n25 3 37\n26 40 20\n30 28 46\n19 35 44\n20 28 57\n34 40 37\n12 45 47\n28 2 38\n13 32 31\n50 10 28\n12 6 19\n31 50 5\n38 22 8\n25 33 50\n32 1 42\n8 37 26\n31 27 25\n21 4 25\n3 1 47\n21 15 42\n40 21 27\n43 20 9\n9 29 21\n15 35 36\n9 30 6\n46 39 22\n41 40 47\n11 5 32\n12 47 23\n24 2 27\n15 9 24\n0 8 45\n4 11 3\n28 13 27\n12 43 30\n23 42 40\n38 24 9\n13 46 42\n20 50 41\n29 32 11\n35 21 12\n10 34 47\n24 29 3\n46 4 7\n",
      "50\n7 13 2\n41 17 2\n49 32 2\n14 16 2\n11 16 2\n2 10 2\n15 2 2\n8 12 2\n1 17 2\n22 44 2\n10 1 2\n18 45 2\n11 31 2\n4 43 2\n26 14 2\n33 47 2\n3 5 2\n49 22 2\n44 3 2\n3 41 2\n0 26 2\n30 1 2\n37 6 2\n10 48 2\n11 47 2\n5 41 2\n2 46 2\n32 3 2\n37 42 2\n25 17 2\n18 32 2\n47 21 2\n46 24 2\n7 2 2\n14 2 2\n17 17 2\n13 30 2\n23 19 2\n43 40 2\n42 26 2\n20 20 2\n17 5 2\n43 38 2\n4 32 0\n48 4 2\n1 3 2\n4 41 2\n49 36 2\n7 10 2\n9 6 2\n",
      "3\n1 0 3\n5 7 5\n20 25 10\n",
      "50\n10 26 2\n20 36 2\n32 43 2\n34 6 2\n19 37 2\n20 29 2\n31 12 2\n30 9 2\n31 5 2\n23 6 2\n0 44 2\n5 36 2\n34 22 2\n6 39 2\n19 18 2\n9 50 2\n40 11 2\n32 4 2\n42 46 2\n22 45 2\n28 2 2\n34 4 2\n16 30 2\n17 47 2\n14 46 2\n32 15 2\n43 11 2\n22 34 2\n34 9 2\n2 4 2\n18 15 2\n48 38 2\n27 28 2\n24 38 2\n33 32 2\n11 7 2\n37 35 2\n50 23 4\n25 28 2\n25 50 2\n28 26 2\n20 31 2\n12 31 2\n15 2 2\n31 45 2\n14 12 2\n16 18 2\n23 30 2\n16 26 2\n30 0 2\n",
      "49\n33 40 10\n30 24 11\n4 36 23\n38 50 18\n23 28 29\n9 39 21\n47 15 35\n2 41 27\n1 45 28\n39 15 24\n7 7 28\n1 34 6\n47 17 43\n20 28 12\n23 22 15\n33 41 23\n34 3 44\n39 37 25\n41 49 39\n13 14 26\n4 14 18\n17 8 45\n23 23 16\n37 48 40\n12 48 29\n16 5 6\n29 1 5\n1 18 27\n37 11 3\n46 11 44\n9 25 40\n26 1 17\n12 26 45\n3 18 19\n15 32 38\n41 9 27\n8 39 35\n42 35 13\n5 19 43\n31 47 4\n16 47 38\n12 9 23\n10 23 3\n49 43 16\n38 28 6\n3 46 38\n13 27 28\n0 26 3\n23 1 15\n",
      "50\n34 7 2\n18 14 2\n15 24 2\n2 24 2\n27 2 2\n50 45 2\n49 19 2\n7 23 2\n16 22 2\n23 25 2\n18 23 2\n11 29 2\n22 14 2\n31 15 2\n10 42 2\n8 11 4\n9 33 2\n15 0 2\n30 25 2\n12 4 2\n14 13 2\n5 16 2\n13 43 2\n1 8 2\n26 34 2\n83 13 2\n10 17 2\n40 5 2\n48 39 2\n39 23 2\n19 10 2\n22 17 2\n36 26 2\n2 34 2\n11 42 2\n14 37 2\n25 7 2\n11 35 2\n22 34 2\n22 25 2\n12 36 2\n18 6 2\n2 47 2\n47 29 2\n13 37 2\n8 46 2\n9 4 2\n11 34 2\n12 31 2\n7 16 2\n",
      "49\n9 43 6\n23 35 9\n46 39 11\n34 14 12\n30 8 4\n10 32 7\n43 10 45\n30 34 27\n27 26 21\n7 31 14\n38 13 33\n34 11 46\n33 31 32\n38 31 7\n3 24 13\n38 12 41\n21 26 32\n33 0 43\n17 44 25\n11 21 27\n27 43 28\n45 8 38\n47 50 47\n49 45 8\n2 9 34\n34 32 49\n21 30 9\n13 19 38\n8 45 32\n16 47 35\n45 28 14\n3 22 43\n45 7 32\n49 35 12\n22 35 35\n14 33 42\n19 23 10\n49 4 2\n44 37 40\n27 17 15\n7 37 30\n38 50 39\n32 12 19\n3 48 9\n26 36 27\n38 18 39\n25 40 39\n45 3 2\n23 40 36\n",
      "49\n22 28 2\n37 8 19\n17 36 19\n50 31 10\n26 39 17\n46 37 45\n8 33 30\n29 14 19\n34 42 37\n20 35 34\n17 10 39\n6 28 16\n38 35 27\n39 4 41\n8 37 7\n39 21 4\n12 28 20\n28 27 29\n36 28 10\n41 16 22\n21 0 20\n6 15 4\n48 43 21\n19 12 18\n10 27 15\n27 44 12\n25 14 19\n43 8 43\n1 31 26\n49 11 4\n45 18 7\n16 35 48\n2 8 20\n8 0 30\n20 42 5\n39 30 2\n13 36 64\n43 50 50\n7 9 43\n17 42 10\n15 5 21\n39 25 18\n25 29 35\n12 46 15\n48 41 6\n41 13 17\n16 46 15\n38 27 39\n50 25 16\n",
      "1\n1 1 14\n"
    ],
    "outputs": [
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n",
      "(((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((2*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(16*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(16*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(3*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(9*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(19*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(18*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(21*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(4*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(12*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(11*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(15*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(14*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(23*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(23*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(13*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(5*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(19*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(4*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(24*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(17*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(18*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(16*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(21*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(23*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(20*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(3*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(23*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(4*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(17*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(1*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(15*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(22*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((22*((1-abs((t-0)))+abs((abs((t-0))-1))))+(22*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(20*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(14*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(16*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(21*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(10*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(7*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(7*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(12*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(24*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(3*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(15*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(10*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(7*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(21*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(9*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(23*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(6*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(16*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(24*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(9*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(16*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(16*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(7*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n",
      "(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(4*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(5*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n",
      "(((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(13*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(17*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(12*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(13*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(9*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(17*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(6*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(25*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(15*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(10*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(1*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(10*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(7*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(4*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(23*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(5*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(12*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(6*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(11*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(10*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(17*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(12*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(24*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(20*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(1*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(16*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(3*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(16*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(18*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(13*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(2*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(10*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(14*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(15*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(19*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(2*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(23*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(6*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(21*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(25*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(10*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(17*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(14*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(2*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n",
      "((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(5*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(3*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(20*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(11*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(9*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(1*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(5*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(1*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(16*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(12*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(23*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(23*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(3*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(21*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(21*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(24*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(8*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(22*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(23*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(2*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(1*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(3*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(23*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(21*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(16*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(10*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(15*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(9*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(20*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(2*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(19*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(16*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(2*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(18*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(5*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((((((((((((((((((((((((((((((((((((((((((((((((18*((1-abs((t-0)))+abs((abs((t-0))-1))))+(25*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(11*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(15*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(12*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(21*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(10*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(13*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(20*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(18*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(2*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(10*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(21*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(10*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(7*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(8*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(11*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(1*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(23*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(9*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(15*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(14*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(17*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(21*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(22*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(16*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(19*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(10*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(2*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(11*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(21*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(10*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(21*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(21*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(15*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(3*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(14*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(15*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(23*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(21*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(8*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(14*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(10*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(6*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(16*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(19*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(13*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(2*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(15*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(7*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(18*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(16*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(11*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(17*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(15*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(1*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(25*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(23*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(21*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(13*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(16*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(10*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(16*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(8*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(12*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(25*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(9*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(15*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(25*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(10*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(10*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(17*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(1*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(17*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n",
      "(25*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(25*((1-abs((t-0)))+abs((abs((t-0))-1))))\n",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(10*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(9*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(10*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(15*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(15*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(2*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(3*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(20*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(21*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(17*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(8*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(11*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(1*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(12*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(12*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(14*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(10*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(15*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(7*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(11*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(15*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((13*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(18*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(14*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(6*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(22*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(18*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(25*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(2*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(23*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(22*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(1*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(15*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(23*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(18*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(17*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(2*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(7*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(19*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(14*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(19*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(3*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(17*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(13*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(15*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(9*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(15*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(13*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((((((((((((((((((((((((((((((((((((((((((((((((16*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(19*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(11*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(23*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(19*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(23*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(17*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(20*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(2*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(18*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(6*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(8*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(14*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(4*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(13*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(6*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(8*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(6*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(19*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(6*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((20*((1-abs((t-0)))+abs((abs((t-0))-1))))+(12*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(14*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(22*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(8*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(20*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(18*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(24*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(7*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(17*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(24*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(5*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(12*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(19*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(9*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(23*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(23*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(4*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(11*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(21*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(13*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n",
      "(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((17*((1-abs((t-0)))+abs((abs((t-0))-1))))+(9*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(25*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(24*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(9*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(7*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(15*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(7*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(22*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(20*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(24*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(19*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(11*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(18*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(12*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(11*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(11*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(6*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(4*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(4*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(5*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(7*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(12*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(22*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(11*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(12*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(11*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(7*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(7*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(21*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(5*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(2*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(6*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(4*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(17*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(6*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(8*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(2*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(19*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(11*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(5*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(3*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(17*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(17*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(15*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(8*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(11*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(23*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(21*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(19*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(16*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(1*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(10*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(8*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(23*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(1*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(17*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(6*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(22*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(24*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(11*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(9*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(24*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(22*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(3*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(16*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(13*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(19*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(12*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(22*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(17*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(19*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(4*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(16*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(17*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(15*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(6*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(12*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(13*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(10*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(21*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(25*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(22*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(4*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(22*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(14*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(12*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(3*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(17*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(16*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(25*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(9*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(1*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((23*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(17*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(12*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(17*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(5*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(24*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(16*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(5*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(11*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(21*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(17*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(9*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(20*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(11*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(3*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(18*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(20*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(10*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(9*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(4*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(5*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(10*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(4*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(5*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(2*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(16*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(20*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(23*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(7*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(2*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(9*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(24*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(13*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(12*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(13*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(23*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(25*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(20*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(13*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(11*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(25*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(15*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(8*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(3*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(6*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(5*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n",
      "(((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(4*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))\n(((((((7*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(3*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "(((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(8*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(23*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(8*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(3*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(19*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(4*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(6*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(18*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(3*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(9*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(13*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(12*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(24*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(4*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(7*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(12*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(20*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(19*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(25*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((14*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(15*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(19*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(18*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(7*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(21*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(17*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(18*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(10*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(14*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(13*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(14*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(8*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(7*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(6*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(22*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(15*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(4*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(2*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(14*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(23*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(12*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n",
      "(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n",
      "((((((((((((((((((((((((((((((((((((((((((((((((((10*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(9*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(18*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(4*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(18*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(7*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(16*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(22*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(9*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(6*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(3*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(25*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(18*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(3*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(4*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(8*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(6*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(16*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(8*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(1*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(3*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(22*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(9*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(17*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(14*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(23*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(7*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(12*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(9*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(24*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(13*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(1*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(19*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(1*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(16*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(11*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(3*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(20*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(5*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(20*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(2*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(15*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(25*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(24*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(25*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n",
      "((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(25*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(25*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))\n((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(25*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))\n",
      "(((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((2*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(16*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(16*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(3*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(9*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(19*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(18*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(25*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(4*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(12*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(11*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(15*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(14*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(23*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(23*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(13*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(5*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(19*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(4*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(24*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(17*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(18*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(16*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(21*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(23*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(20*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(3*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(23*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(4*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(17*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(1*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(15*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(22*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((22*((1-abs((t-0)))+abs((abs((t-0))-1))))+(22*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(20*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(14*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(16*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(21*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(10*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(7*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(7*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(12*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(24*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(3*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(15*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(10*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(7*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(21*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(9*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(23*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(6*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(16*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(24*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(9*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(16*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(16*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(7*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((2*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(4*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(5*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(13*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(17*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(12*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(13*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(9*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(17*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(6*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(25*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(15*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(10*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(1*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(10*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(7*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(4*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(23*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(5*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(12*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(6*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(11*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(10*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(17*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(12*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(24*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(20*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(1*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(16*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(3*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(16*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(18*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(13*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(2*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(10*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(14*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(15*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(19*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(2*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(23*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(6*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(21*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(25*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(10*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(17*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(14*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(2*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(5*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(3*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(20*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(9*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(1*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(5*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(1*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(16*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(12*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(23*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(23*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(3*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(21*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(21*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(24*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(8*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(22*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(23*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(2*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(1*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(3*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(23*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(21*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(16*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(10*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(15*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(9*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(20*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(2*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(19*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(16*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(2*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(18*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(5*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(25*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(25*((1-abs((t-0)))+abs((abs((t-0))-1))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(10*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(9*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(10*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(15*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(15*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(2*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(3*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(20*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(21*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(17*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(8*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(11*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(1*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(12*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(12*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(14*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(10*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(15*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(7*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(11*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(15*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((13*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(18*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(14*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(6*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(22*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(18*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(25*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(2*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(23*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(22*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(1*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(15*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(23*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(7*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(17*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(2*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(7*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(19*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(14*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(19*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(3*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(17*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(13*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(15*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(9*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(15*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(13*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((16*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(19*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(11*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(23*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(19*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(23*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(17*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(20*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(2*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(18*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(6*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(8*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(14*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(4*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(13*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(6*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(8*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(6*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(19*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(6*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((20*((1-abs((t-0)))+abs((abs((t-0))-1))))+(12*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(14*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(22*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(8*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(20*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(18*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(24*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(7*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(7*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(24*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(5*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(12*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(19*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(9*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(23*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(23*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(4*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(11*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(21*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(13*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((17*((1-abs((t-0)))+abs((abs((t-0))-1))))+(9*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(25*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(24*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(9*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(7*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(15*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(7*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(41*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(20*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(24*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(19*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(11*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(18*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(12*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(11*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(11*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(6*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(4*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(4*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(5*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(7*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(12*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(22*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(11*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(12*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(11*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(7*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(7*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(21*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(5*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(2*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(6*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(4*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(17*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(6*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(8*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(2*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(19*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(11*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(5*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(3*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(17*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(17*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(15*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(8*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(11*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(23*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(21*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(19*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(16*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(1*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(10*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(8*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(23*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(1*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(17*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(6*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(22*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(24*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(11*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(9*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(24*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(22*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(3*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(16*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(13*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(19*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(12*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(22*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(17*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(19*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(4*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(16*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(17*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(15*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(6*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(12*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(13*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(10*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(21*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(25*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(22*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(4*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(22*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(14*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(11*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(3*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(17*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(16*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(25*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(9*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(1*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((23*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(17*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(12*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(17*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(5*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(24*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(16*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(5*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(11*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(21*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(17*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(9*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(20*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(11*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(3*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(18*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(20*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(10*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(9*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(4*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(5*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(10*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(4*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(5*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(2*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(16*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(20*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(23*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(8*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(2*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(9*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(24*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(13*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(12*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(13*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(23*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(25*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(20*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(13*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(11*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(25*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(15*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(8*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(3*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(6*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(5*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))",
      "(((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(4*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))\n(((((((12*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(3*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(8*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(23*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(8*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(3*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(19*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(4*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(6*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(18*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(3*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(9*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(13*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(12*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(24*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(4*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(7*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(12*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(20*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(19*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(25*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((14*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(15*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(19*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(18*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(7*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(21*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(17*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(18*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(10*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(14*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(13*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(14*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(8*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(7*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(6*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(22*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(15*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(4*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(2*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(14*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(23*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(12*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(0*((1-abs((t-0)))+abs((abs((t-0))-1))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((10*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(9*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(18*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(4*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(18*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(7*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(16*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(22*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(9*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(6*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(3*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(25*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(18*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(3*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(4*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(8*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(6*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(16*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(8*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(1*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(3*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(22*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(9*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(17*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(14*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(23*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(7*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(12*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(9*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(24*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(13*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(1*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(19*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(1*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(16*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(11*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(3*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(28*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(20*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(5*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(20*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(2*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(15*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(25*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(24*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(25*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(25*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(25*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))\n((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(33*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(9*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(25*((1-abs((t-4)))+abs((abs((t-4))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))\n(((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(1*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(5*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))",
      "((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(5*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(3*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(5*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(4*((1-abs((t-9)))+abs((abs((t-9))-1)))))",
      "(25*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(2*((1-abs((t-0)))+abs((abs((t-0))-1))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((23*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(17*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(12*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(17*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(5*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(24*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(16*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(5*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(11*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(21*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(17*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(9*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(20*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(11*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(3*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(18*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(20*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(13*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(9*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(4*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(5*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(10*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(4*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(5*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(2*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(20*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(16*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(20*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(23*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(8*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(2*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(9*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(24*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(13*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(12*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(13*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(23*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(25*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(20*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(13*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(11*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(25*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(15*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(8*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(3*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))\n((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(3*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(7*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(6*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(5*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(1*((1-abs((t-9)))+abs((abs((t-9))-1)))))",
      "(((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(1*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))\n(((((((12*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(6*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(6*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(3*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((10*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(9*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(18*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(4*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(18*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(7*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(9*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(16*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(17*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(22*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(9*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(6*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(3*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(25*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(18*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(3*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(4*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(8*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(6*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(16*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(8*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(1*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(3*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(22*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(9*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(17*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(14*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(23*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(7*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(12*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(9*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(3*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(24*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(13*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(1*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(19*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(1*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(16*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(11*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(3*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(28*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(22*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(20*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(5*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(20*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(2*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(15*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(25*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(24*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(25*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(25*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(25*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))\n((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(33*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(12*((1-abs((t-3)))+abs((abs((t-3))-1)))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(17*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(0*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(0*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(0*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(0*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(0*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(0*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(0*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(0*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(0*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(0*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(0*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(0*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(0*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(0*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(0*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(0*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(0*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(0*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(0*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(0*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(0*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(0*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(0*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(0*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(0*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(0*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(0*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(0*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(4*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((2*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(16*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(16*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(3*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(9*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(19*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(18*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(25*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(4*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(12*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(11*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(15*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(14*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(23*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(23*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(13*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(12*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(5*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(19*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(9*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(4*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(24*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(17*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(18*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(16*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(21*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(23*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(20*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(3*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(23*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(4*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(17*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(1*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(0*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(15*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(4*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(22*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((22*((1-abs((t-0)))+abs((abs((t-0))-1))))+(22*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(20*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(14*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(16*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(20*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(21*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(10*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(7*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(4*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(7*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(12*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(24*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(3*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(15*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(10*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(7*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(21*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(9*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(23*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(6*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(16*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(15*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(24*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(9*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(14*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(16*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(16*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(7*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((1*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((2*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(0*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(5*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(0*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(5*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((24*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(13*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(9*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(17*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(12*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(13*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(9*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(17*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(6*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(14*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(6*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(25*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(15*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(16*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(4*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(10*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(1*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(10*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(7*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(4*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(23*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(5*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(6*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(12*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(0*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(6*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(11*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(10*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(17*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(5*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(12*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(23*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(19*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(24*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(20*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(14*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(20*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(1*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(16*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(3*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(25*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(16*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(0*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(18*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(13*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(2*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(10*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(14*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(15*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(19*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(20*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(2*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(23*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(6*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(21*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(25*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(16*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(10*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(17*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(14*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(2*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(20*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(24*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(5*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(1*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(9*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(5*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(13*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(24*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(1*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(15*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(18*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(5*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(1*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(16*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(12*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(23*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(23*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(3*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(21*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(8*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(21*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(2*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(0*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(24*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(3*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(4*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((6*((1-abs((t-0)))+abs((abs((t-0))-1))))+(8*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(8*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(8*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(1*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(6*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(22*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(22*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(21*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(7*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(23*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(2*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(11*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(1*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(0*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(3*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(20*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(23*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(1*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(21*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(16*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(10*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(12*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(1*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(8*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(15*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(9*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(20*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(10*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(2*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(19*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(16*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(2*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(18*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(5*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(2*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(10*((1-abs((t-2)))+abs((abs((t-2))-1)))))\n(((0*((1-abs((t-0)))+abs((abs((t-0))-1))))+(3*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((5*((1-abs((t-0)))+abs((abs((t-0))-1))))+(10*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(16*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(9*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(10*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(15*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(15*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(0*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(2*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(3*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(20*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(21*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(11*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(14*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(17*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(8*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(8*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(7*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(21*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(11*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(17*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(1*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(24*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(12*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(5*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(12*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(14*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(10*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(7*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(15*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(7*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(11*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(8*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(15*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((13*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(21*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(3*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(18*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(14*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(6*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(4*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(2*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(22*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(18*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(9*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(25*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(5*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(2*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(23*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(22*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(1*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(15*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(23*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(23*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(7*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(17*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(2*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(7*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(19*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(14*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(19*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(3*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(17*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(11*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(14*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(25*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(13*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(15*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(15*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(22*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(9*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(15*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(13*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(0*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((16*((1-abs((t-0)))+abs((abs((t-0))-1))))+(15*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(2*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(19*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(11*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(4*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(23*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(1*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(0*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(19*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(0*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(23*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(10*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(16*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(17*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(19*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(20*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(2*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(18*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(6*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(8*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(14*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(0*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(18*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(4*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(13*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(6*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(7*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(20*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(4*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(2*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(15*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(8*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(6*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(5*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(19*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(1*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(6*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(0*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((20*((1-abs((t-0)))+abs((abs((t-0))-1))))+(12*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(14*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(19*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(7*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(20*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(22*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(7*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(3*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(8*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(14*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(11*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(20*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(1*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(18*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(24*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(7*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(7*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(11*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(24*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(2*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(0*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(5*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(12*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(0*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(9*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(16*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(4*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(19*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(9*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(23*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(23*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(4*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(11*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(21*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(14*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(13*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(0*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "((((((((((((((((((((((((((((((((((((((((((((((((((17*((1-abs((t-0)))+abs((abs((t-0))-1))))+(9*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(7*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(1*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(25*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(24*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(3*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(8*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(11*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(9*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(11*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(5*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(4*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(4*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(7*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(15*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(6*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(7*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(2*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(6*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(0*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(41*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(5*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(20*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(24*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(19*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(11*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(18*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(1*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(5*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(12*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(5*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(11*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(11*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(6*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(9*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(1*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(6*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(4*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(4*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(5*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(6*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(3*((1-abs((t-49)))+abs((abs((t-49))-1)))))\n((((((((((((((((((((((((((((((((((((((((((((((((((3*((1-abs((t-0)))+abs((abs((t-0))-1))))+(7*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(12*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(12*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(1*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(22*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(9*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(11*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(11*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(12*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(11*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(7*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(7*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(21*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(5*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(16*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(12*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(2*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(6*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(8*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(4*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(17*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(6*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(8*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(2*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(19*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(11*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(5*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(13*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(18*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(3*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(17*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(17*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(12*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(3*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(23*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(14*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(23*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(2*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(17*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(15*((1-abs((t-48)))+abs((abs((t-48))-1)))))+(8*((1-abs((t-49)))+abs((abs((t-49))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((4*((1-abs((t-0)))+abs((abs((t-0))-1))))+(11*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(23*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(17*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(15*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(5*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(21*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(15*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(3*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(19*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(17*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(16*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(1*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(10*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(16*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(8*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(5*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(13*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(22*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(23*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(24*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(1*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(17*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(10*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(6*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(4*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(8*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(1*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(22*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(24*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(11*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(7*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(9*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(24*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(22*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(13*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(3*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(16*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(1*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(13*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(19*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(12*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(22*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(11*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((21*((1-abs((t-0)))+abs((abs((t-0))-1))))+(17*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(19*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(7*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(4*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(16*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(5*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(17*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(13*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(15*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(6*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(5*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(15*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(15*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(12*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(6*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(13*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(0*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(22*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(10*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(21*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(4*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(25*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(22*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(4*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(16*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(15*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(9*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(22*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(23*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(14*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(11*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(3*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(17*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(17*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(16*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(11*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(2*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(18*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(18*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(25*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(6*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(24*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(18*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(9*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(20*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(1*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(20*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "(((((((((((((((((((((((((((((((((((((((((((((((((11*((1-abs((t-0)))+abs((abs((t-0))-1))))+(18*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(8*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(25*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(13*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(23*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(4*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(14*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(17*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(10*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(8*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(3*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(19*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(19*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(4*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(19*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(6*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(14*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(18*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(20*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(10*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(3*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(24*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(9*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(5*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(13*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(12*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(21*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(0*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(24*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(22*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(8*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(1*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(4*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(10*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(19*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(6*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(21*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(3*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(8*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(7*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(19*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(12*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(6*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(24*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(20*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(8*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(19*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(25*((1-abs((t-48)))+abs((abs((t-48))-1)))))\n(((((((((((((((((((((((((((((((((((((((((((((((((14*((1-abs((t-0)))+abs((abs((t-0))-1))))+(4*((1-abs((t-1)))+abs((abs((t-1))-1)))))+(18*((1-abs((t-2)))+abs((abs((t-2))-1)))))+(15*((1-abs((t-3)))+abs((abs((t-3))-1)))))+(19*((1-abs((t-4)))+abs((abs((t-4))-1)))))+(18*((1-abs((t-5)))+abs((abs((t-5))-1)))))+(16*((1-abs((t-6)))+abs((abs((t-6))-1)))))+(7*((1-abs((t-7)))+abs((abs((t-7))-1)))))+(21*((1-abs((t-8)))+abs((abs((t-8))-1)))))+(17*((1-abs((t-9)))+abs((abs((t-9))-1)))))+(5*((1-abs((t-10)))+abs((abs((t-10))-1)))))+(14*((1-abs((t-11)))+abs((abs((t-11))-1)))))+(17*((1-abs((t-12)))+abs((abs((t-12))-1)))))+(2*((1-abs((t-13)))+abs((abs((t-13))-1)))))+(18*((1-abs((t-14)))+abs((abs((t-14))-1)))))+(10*((1-abs((t-15)))+abs((abs((t-15))-1)))))+(14*((1-abs((t-16)))+abs((abs((t-16))-1)))))+(13*((1-abs((t-17)))+abs((abs((t-17))-1)))))+(14*((1-abs((t-18)))+abs((abs((t-18))-1)))))+(8*((1-abs((t-19)))+abs((abs((t-19))-1)))))+(0*((1-abs((t-20)))+abs((abs((t-20))-1)))))+(7*((1-abs((t-21)))+abs((abs((t-21))-1)))))+(21*((1-abs((t-22)))+abs((abs((t-22))-1)))))+(6*((1-abs((t-23)))+abs((abs((t-23))-1)))))+(13*((1-abs((t-24)))+abs((abs((t-24))-1)))))+(22*((1-abs((t-25)))+abs((abs((t-25))-1)))))+(7*((1-abs((t-26)))+abs((abs((t-26))-1)))))+(4*((1-abs((t-27)))+abs((abs((t-27))-1)))))+(15*((1-abs((t-28)))+abs((abs((t-28))-1)))))+(5*((1-abs((t-29)))+abs((abs((t-29))-1)))))+(9*((1-abs((t-30)))+abs((abs((t-30))-1)))))+(17*((1-abs((t-31)))+abs((abs((t-31))-1)))))+(4*((1-abs((t-32)))+abs((abs((t-32))-1)))))+(0*((1-abs((t-33)))+abs((abs((t-33))-1)))))+(21*((1-abs((t-34)))+abs((abs((t-34))-1)))))+(15*((1-abs((t-35)))+abs((abs((t-35))-1)))))+(18*((1-abs((t-36)))+abs((abs((t-36))-1)))))+(25*((1-abs((t-37)))+abs((abs((t-37))-1)))))+(4*((1-abs((t-38)))+abs((abs((t-38))-1)))))+(21*((1-abs((t-39)))+abs((abs((t-39))-1)))))+(2*((1-abs((t-40)))+abs((abs((t-40))-1)))))+(12*((1-abs((t-41)))+abs((abs((t-41))-1)))))+(14*((1-abs((t-42)))+abs((abs((t-42))-1)))))+(23*((1-abs((t-43)))+abs((abs((t-43))-1)))))+(20*((1-abs((t-44)))+abs((abs((t-44))-1)))))+(6*((1-abs((t-45)))+abs((abs((t-45))-1)))))+(23*((1-abs((t-46)))+abs((abs((t-46))-1)))))+(13*((1-abs((t-47)))+abs((abs((t-47))-1)))))+(12*((1-abs((t-48)))+abs((abs((t-48))-1)))))",
      "(0*((1-abs((t-0)))+abs((abs((t-0))-1))))\n(0*((1-abs((t-0)))+abs((abs((t-0))-1))))"
    ]
  }
]